{
    "source_page": "Welcome to Motia",
    "source_url": "https://www.motia.dev/docs=====",
    "chunk_topic": "Welcome to Motia",
    "chunk_id": "Welcome to Motia (Part 1)",
    "text": "Welcome to Motia\nMotia is a multi-language, event-driven runtime manager built on a core primitive: the Step. It feels like a backend framework, but powers distributed backends for APIs, background jobs, queues, workflows, agents, streaming, state, and observability, all unified in one system.\nWelcome to Motia\nWhy Motia?\nBackend development today is fragmented.\nAPIs live in one framework, background jobs in another, queues and schedulers elsewhere, and now AI agents and streaming systems have their own runtimes. Add observability and state management on top, and you\u2019re stitching together half a dozen tools before writing your first feature.\nMotia unifies all of these concerns around one core primitive: the Step.\nJust as React made frontend development simple by introducing components, Motia redefines backend development with Steps.\nEvery backend pattern, API endpoints, background jobs, queues, workflows, AI agents, streaming, observability, and state, is expressed with the same primitive.\nTo read more about this, check out ourmanifesto.\nThe Core Primitive: the Step\nAt the heart of Motia is a single primitive: theStep.\nA Step is just a file with aconfigand ahandler. Motia auto-discovers these files from/stepsdirectory and connects them automatically.\nconfig\nhandler\n/steps\nHere\u2019s a simple example of two Steps working together: an API Step that emits an event, and an Event Step that processes it.\nexportconstconfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nexportconstconfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nexportconstconfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler=async(input, {logger})=>{logger.info('Processing message', input);};\nexportconstconfig={name:'ProcessMessage',type:'event',sub"
}
================================================================================
{
    "source_page": "Welcome to Motia",
    "source_url": "https://www.motia.dev/docs=====",
    "chunk_topic": "Welcome to Motia",
    "chunk_id": "Welcome to Motia (Part 2)",
    "text": "Message',type:'event',subscribes: ['message.sent']};exportconsthandler=async(input, {logger})=>{logger.info('Processing message', input);};\nexportconstconfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler=async(input, {logger})=>{logger.info('Processing message', input);};\n\ud83d\udc49 With just two files, you\u2019ve built anAPI endpoint, aqueue, and aworker. No extra frameworks required.\nLearn more about Steps here:What is a Step?.\nWorking with multiple Languages\nThe rapid advancement of AI has reshaped the software industry\u2014many cutting-edge AI tools are available only in specific programming languages, this forces companies to decide if they either change their team's skillset to a different language or not leveraging these technologies at all.\nMotia removes this limitation by allowing each Step to be written in any language, while still sharing a common state.\nEach rectangle in the diagram above represents a Step, some of them are in TypeScript and others in Python.\nScalability\nOne of the biggest dilemmas in backend development is choosing between scalability and development velocity. In startup environments, speed often takes priority, resulting in systems that don't scale well and become problematic under increased load.\nMotia addresses scalability by leveraging the core primitive ofSteps: Each step can scale independently avoiding the bottlenecks common in monolithic architectures.\nObservability\nObservability in traditional backends often demands significant engineering effort to implement logging, alerting, and tracing. Typically, these tools are only configured for cloud environments, local development is generally neglected\u2014leading to low productivity and poor dev experience.\nMotia offers a complete observability toolkit available in both cloud and local environments, including:\nLogs visualization\nTracing tool to quickly visualize the flow of requests through the system\nState visualization\nDiagram representation of dependencies between steps and how they are connected\nThe image below shows the Workbench interface available when you runmotia dev. On the top panel you can see a workflow diagram with multiple steps connected.\nOn the bottom panel you can see the trace view of a single request and what happened in each step.\nmotia dev\nFault tolerance\nWith the rise of AI, many backend tasks have become less deterministic and more error-prone. These scenarios require robust error handling and retry mechanisms. In traditional systems, developers often need to set up and maintain queue infrastructures to ensure resilience, especially"
}
================================================================================
{
    "source_page": "Welcome to Motia",
    "source_url": "https://www.motia.dev/docs=====",
    "chunk_topic": "Welcome to Motia",
    "chunk_id": "Welcome to Motia (Part 3)",
    "text": "\nWith the rise of AI, many backend tasks have become less deterministic and more error-prone. These scenarios require robust error handling and retry mechanisms. In traditional systems, developers often need to set up and maintain queue infrastructures to ensure resilience, especially when dealing with unreliable responses from LLMs.\nMotia provides fault tolerance out of the box, eliminating the need to manually spin up queue infrastructure.\nUsing Event Steps, you get retry mechanisms out of the box\nConfiguration of queue infrastructure is abstracted away\nBuilding and Shipping\nBuilding and deploying backends is inherently complex\u2014especially in polyglot environments. Shipping production systems requires tight collaboration between developers and operations, and automation often takes weeks to get right.\nBeyond that, cloud provider lock-in, complicated deployment strategies (e.g., rollbacks, blue/green deployments), and a lack of deployment tooling increase the risk of failure.\nMotia abstracts these concerns by providing:\nTrue cloud-provider agnosticism\nAtomic blue/green deployments and one-click rollbacks via Motia Cloud (canary support coming soon)\nFirst-class polyglot backend support (currently Node.js and Python, with more on the way)\nThe image above shows several Steps being build to a single Motia deployable that are ultimately deployed to a cloud provider of your choice.\nCurrently we're supporting AWS and Kubernetes, more Cloud providers coming soon. Check ourroadmapfor more details.\nRollbacks and deployment strategies\nDeploying cloud-native, fault-tolerant applications often involves modifying queue systems and other infrastructure components.\nThese changes can introduce incompatibilities and lead to runtime failures.\nMotia Cloud solves this withAtomic Deployments, which:\nEach deployment spins up a new isolated service that shares the same data layer\nEnsures safe, rollback-capable deployments without risking service downtime\nInstant rollbacks with one click since each deployment is isolated\nReal-time data streaming\nHandling real-time data is one of the most common\u2014and complex\u2014challenges in backend development. It's necessary when building event-driven applications,\nand it typically requires setting up and maintaining a significant amount of infrastructure.\nMotia provides what we callStreams: Developers define the structure of the data\u2014any changes to these objects are streamed to all subscribed clients in real-time.\nThe image above shows a Stream definition, a Node.js Step mutating the data and a client subscribing to the stream receiving real-time updates.\nQuick Start\nGet up and running with a new Motia project in just a few seconds.\nOn"
}
================================================================================
{
    "source_page": "Welcome to Motia",
    "source_url": "https://www.motia.dev/docs=====",
    "chunk_topic": "Welcome to Motia",
    "chunk_id": "Welcome to Motia (Part 4)",
    "text": " real-time.\nThe image above shows a Stream definition, a Node.js Step mutating the data and a client subscribing to the stream receiving real-time updates.\nQuick Start\nGet up and running with a new Motia project in just a few seconds.\nOn this page"
}
================================================================================
{
    "source_page": "Quick Start",
    "source_url": "https://www.motia.dev/docs/getting-started/quick-start =====",
    "chunk_topic": "Quick Start",
    "chunk_id": "Quick Start",
    "text": "Quick Start\nGet up and running with a new Motia project in just a few seconds.\n1. Create Your Project\nUsenpxto create a new Motia project. This single command will scaffold a new application and install all necessary dependencies.\nnpx\nnpxmotia@latestcreate\nnpxmotia@latestcreate\nThe installer will guide you through a few questions to set up your project. Once it's done, you will have a new project directory ready to go.\n2. Start the Development Server\nNavigate into your new project directory and start the Motia development server.\ncd<your-project-name># If you've created a new folder for the project, navigate into itnpxmotiadev\ncd<your-project-name># If you've created a new folder for the project, navigate into itnpxmotiadev\nThecreatecommand usesnpmby default. If you chose a different package manager during setup, usepnpm dev,yarn dev, orbun dev.\ncreate\nnpm\npnpm dev\nyarn dev\nbun dev\nThis command starts the Motia runtime and the Workbench, a powerful UI for developing and debugging your workflows. By default, it's available athttp://localhost:3000.\nhttp://localhost:3000\n3. Run Your First Flow\nThe starter project comes with a pre-builtbasic-tutorialflow. Let's run it.\nbasic-tutorial\nOpen the Workbenchin your browser athttp://localhost:3000.\nhttp://localhost:3000\nClick theTutorialbutton on the top right of the workbench.\nTutorial\nComplete theTutorialto get an understanding of the basics of Motia and using the Workbench.\nTutorial\nNext Steps\nCongratulations! You've successfully ran, and observed your first Motia workflow.\nBuild your first application from scratch, follow ourBuild Your First Motia Appguide.\nTo learn about Motia, dive into ourCore Concepts.\nWelcome to Motia\nMotia is a multi-language, event-driven runtime manager built on a core primitive: the Step. It feels like a backend framework, but powers distributed backends for APIs, background jobs, queues, workflows, agents, streaming, state, and observability, all unified in one system.\nBuild Your First Motia App\nLearn Motia step-by-step by building a real pet store backend\nOn this page"
}
================================================================================
{
    "source_page": "Build Your First Motia App",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app =====",
    "chunk_topic": "Build Your First Motia App",
    "chunk_id": "Build Your First Motia App (Part 1)",
    "text": "Build Your First Motia App\nLearn Motia step-by-step by building a real pet store backend\nWhat You'll Build\nA complete pet store backend system that grows with you:\nAPI Endpoints\u2192 Handle requests, return responses\nBackground Jobs\u2192 Process tasks without blocking APIs\nWorkflows\u2192 Coordinate complex business logic automatically\nAI Agents\u2192 Make intelligent decisions that drive your workflows\nReal-Time Streaming\u2192 Push live updates to clients as workflows execute\nBy the end, you'll have a production-ready backend that handles everything from simple CRUD to intelligent, real-time systems.\nBefore You Start\nYou'll need:\nNode.js installed (v18 or higher)\nBasic understanding of TypeScript/JavaScript/Python\n10-20 minutes per tutorial\nThat's it. No database setup, no complex config, no separate services to run.\nYour Journey\n1. API Endpoints\nWhat:Create HTTP endpoints that handle pet operations.\nYou'll learn:\nHow to define API Steps\nRequest validation with schemas\nReturning proper HTTP responses\nTesting endpoints in Workbench\nTime:10 minutes\nStart with APIs \u2192\nBuild your first HTTP endpoints\n2. Background Jobs\nWhat:Add async tasks that run without blocking your APIs.\nYou'll learn:\nEvent Steps that trigger from your APIs\nCron Steps that run on a schedule\nHow events connect your system\nMonitoring jobs in Workbench\nTime:15 minutes\nAdd Background Jobs \u2192\nHandle async tasks efficiently\n3. Workflows\nWhat:Coordinate complex processes with automatic transitions and validation.\nYou'll learn:\nBuilding workflow orchestrators\nAutomatic vs manual transitions\nState validation and progression\nChaining multiple actions together\nTime:20 minutes\nBuild Workflows \u2192\nOrchestrate complex business logic\n4. AI Agents\nWhat:Add intelligent decision-making to your workflows.\nYou'll learn:\nContent generation with AI\nDecision-making agents\nIntegrating AI with workflows\nBuilding agentic routing\nTime:20 minutes\nAdd AI Agents \u2192\nMake your backend intelligent\n5. Real-Time Streaming\nWhat:Push live updates to clients while your workflows run in the background.\nYou'll learn:\nDefining stream configurations\nStreaming from APIs that return immediately\nBackground jobs that push progress updates\nAI agents that stream enrichment progress\nConnecting multiple steps to the same stream\nTime:20 minutes\nAdd Streaming \u2192\nBuild real-time experiences\nThe Example Project\nAll tutorials use the same project - a pet store backend that handles:\nPet management\u2192 Create, update, list"
}
================================================================================
{
    "source_page": "Build Your First Motia App",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app =====",
    "chunk_topic": "Build Your First Motia App",
    "chunk_id": "Build Your First Motia App (Part 2)",
    "text": " progress\nConnecting multiple steps to the same stream\nTime:20 minutes\nAdd Streaming \u2192\nBuild real-time experiences\nThe Example Project\nAll tutorials use the same project - a pet store backend that handles:\nPet management\u2192 Create, update, list pets\nAdoption workflow\u2192 Guide pets through quarantine, health checks, and availability\nFeeding reminders\u2192 Set up schedules when pets arrive\nHealth decisions\u2192 AI evaluates symptoms and recommends treatment\nCleanup jobs\u2192 Remove soft-deleted pets on a schedule\nReal-time updates\u2192 Stream progress to clients as workflows execute\nIt's a real system with the kind of complexity you'll face building production backends.\nInteractive Tutorials\nEach guide includes aninteractive tutorialyou can run directly in Workbench. It walks you through the code, explains what's happening, and lets you test everything live.\nPrefer reading? The written guides cover everything too. They're detailed, with code examples and explanations for every concept.\nReady?\nPick your starting point. If you're new to Motia, start with API Endpoints. If you've already covered the basics, jump to wherever you want to learn more.\nAPI Endpoints\nStart here if you're new\nBackground Jobs\nAdd async processing\nWorkflows\nCoordinate complex logic\nAI Agents\nBuild intelligent systems\nReal-Time Streaming\nPush live updates\nQuick Start\nGet up and running with a new Motia project in just a few seconds.\nAPI Endpoints\nLearn how to create HTTP API endpoints with Motia\nOn this page"
}
================================================================================
{
    "source_page": "API Endpoints",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/api-endpoints =====",
    "chunk_topic": "API Endpoints",
    "chunk_id": "API Endpoints (Part 1)",
    "text": "API Endpoints\nLearn how to create HTTP API endpoints with Motia\nWhat You'll Build\nA pet management API with these endpoints:\nPOST/pets- Create a new pet\n/pets\nGET/pets- List all pets\n/pets\nGET/pets/:id- Get a specific pet\n/pets/:id\nPUT/pets/:id- Update a pet\n/pets/:id\nDELETE/pets/:id- Delete a pet\n/pets/:id\nGetting Started\nClone the example repository:\ngitclonehttps://github.com/MotiaDev/build-your-first-app.gitcdbuild-your-first-appgitcheckoutapi-endpoints\ngitclonehttps://github.com/MotiaDev/build-your-first-app.gitcdbuild-your-first-appgitcheckoutapi-endpoints\nInstall dependencies:\nnpminstall\nnpminstall\nStart the Workbench:\nnpmrundev\nnpmrundev\nYour Workbench will be available athttp://localhost:3000.\nhttp://localhost:3000\nProject Structure\nFiles likefeatures.jsonandtutorial.tsxare only for the interactive tutorial and are not part of Motia's project structure.\nfeatures.json\ntutorial.tsx\nAll code examples in this guide are available in thebuild-your-first-apprepository.\nYou can follow this guide to learn how to build a REST API with Motia step by step, or you can clone the repository and dive into our Interactive Tutorial to learn by doing directly in the Workbench.\nCreating Your First Endpoint\nThis tutorial focuses on Motia's capabilities to create complete backend system from APIs to Streaming AI agents step-by-step. Here, we're showcasing writing APIs with Motia Steps - For data persistence, we use a simple JSON file store in the examples. In a real application, you would use a database like PostgreSQL, MongoDB, or any other data store of your choice. The complete store implementation is available in theGitHub repository.\nConfiguration\nEvery API endpoint has two parts:\nConfig- Defines when and how the step runs:\nname\ntype\n'api'\npath\nmethod\nHandler- The function that executes your business logic.\nView on GitHub:\nTypeScript\nPython\nJavaScript\nimport{ ApiRouteConfig, Handlers }from'motia'import{ z }from'zod'import{ TSStore }from'./ts-store'constcreatePetSchema=z.object({name: z.string().min(1,'Name is required'),species: z.enum(['dog','"
}
================================================================================
{
    "source_page": "API Endpoints",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/api-endpoints =====",
    "chunk_topic": "API Endpoints",
    "chunk_id": "API Endpoints (Part 2)",
    "text": "otia'import{ z }from'zod'import{ TSStore }from'./ts-store'constcreatePetSchema=z.object({name: z.string().min(1,'Name is required'),species: z.enum(['dog','cat','bird','other']),ageMonths: z.number().int().min(0),})exportconstconfig:ApiRouteConfig={name:'CreatePet',type:'api',path:'/pets',method:'POST',bodySchema: createPetSchema,flows: ['PetManagement'],}exportconsthandler:Handlers['CreatePet']=async(req, {logger})=>{constdata=createPetSchema.parse(req.body)// In a real application, this would be a database call// e.g., await db.pets.create(data)constpet=TSStore.create(data)logger.info('Pet created', { petId: pet.id })return{ status:201, body: pet }}\nimport{ ApiRouteConfig, Handlers }from'motia'import{ z }from'zod'import{ TSStore }from'./ts-store'constcreatePetSchema=z.object({name: z.string().min(1,'Name is required'),species: z.enum(['dog','cat','bird','other']),ageMonths: z.number().int().min(0),})exportconstconfig:ApiRouteConfig={name:'CreatePet',type:'api',path:'/pets',method:'POST',bodySchema: createPetSchema,flows: ['PetManagement'],}exportconsthandler:Handlers['CreatePet']=async(req, {logger})=>{constdata=createPetSchema.parse(req.body)// In a real application, this would be a database call// e.g., await db.pets.create(data)constpet=TSStore.create(data)logger.info('Pet created', { petId: pet.id })return{ status:201, body: pet }}\nTesting Your API\nYou can test your endpoints using curl or the Workbench interface.\nUsing curl\n# Create a petcurl-XPOSThttp://localhost:3000/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Max\", \"species\": \"dog\", \"ageMonths\": 24}'\n# Create a petcurl-XPOSThttp://localhost:3000/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Max\", \"species\": \"dog\", \"ageMonths\": 24}'\nUsing Workbench\nYou can"
}
================================================================================
{
    "source_page": "API Endpoints",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/api-endpoints =====",
    "chunk_topic": "API Endpoints",
    "chunk_id": "API Endpoints (Part 3)",
    "text": " a petcurl-XPOSThttp://localhost:3000/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Max\", \"species\": \"dog\", \"ageMonths\": 24}'\nUsing Workbench\nYou can also test your endpoint directly in the Workbench, which provides an interactive interface to test your API endpoints with real requests and see the responses in real-time:\nAdding GET Endpoints\nList All Pets\nView on GitHub:\nTypeScript\nPython\nJavaScript\nimport{ ApiRouteConfig, Handlers }from'motia'import{ TSStore }from'./ts-store'exportconstconfig:ApiRouteConfig={name:'GetPets',type:'api',path:'/pets',method:'GET',flows: ['PetManagement'],}exportconsthandler:Handlers['GetPets']=async(req, {logger})=>{// In a real application, this would be a database call// e.g., const pets = await db.pets.findMany()constpets=TSStore.list()logger.info('Retrieved all pets', { count: pets.length})return{ status:200, body: pets }}\nimport{ ApiRouteConfig, Handlers }from'motia'import{ TSStore }from'./ts-store'exportconstconfig:ApiRouteConfig={name:'GetPets',type:'api',path:'/pets',method:'GET',flows: ['PetManagement'],}exportconsthandler:Handlers['GetPets']=async(req, {logger})=>{// In a real application, this would be a database call// e.g., const pets = await db.pets.findMany()constpets=TSStore.list()logger.info('Retrieved all pets', { count: pets.length})return{ status:200, body: pets }}\nTesting List All Pets\nTest with curl:\n# List all petscurlhttp://localhost:3000/pets\n# List all petscurlhttp://localhost:3000/pets\nOr use the Workbench interface:\nGet Single Pet\nView on GitHub:\nTypeScript\nPython\nJavaScript\nimport{ ApiRouteConfig, Handlers }from'motia'import{ TSStore }from'./ts-store'exportconstconfig:ApiRouteConfig={name:'GetPet',type:'api',path:'/pets/:id',method:'GET',flows: ['PetManagement'],}exportconsthandler:Handlers['GetPet']=async(req, {logger})=>{// In a real application, this would"
}
================================================================================
{
    "source_page": "API Endpoints",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/api-endpoints =====",
    "chunk_topic": "API Endpoints",
    "chunk_id": "API Endpoints (Part 4)",
    "text": "name:'GetPet',type:'api',path:'/pets/:id',method:'GET',flows: ['PetManagement'],}exportconsthandler:Handlers['GetPet']=async(req, {logger})=>{// In a real application, this would be a database call// e.g., const pet = await db.pets.findById(req.pathParams.id)constpet=TSStore.get(req.pathParams.id)if(!pet) {logger.warn('Pet not found', { id: req.pathParams.id })return{ status:404, body: { message:'Pet not found'} }}return{ status:200, body: pet }}\nimport{ ApiRouteConfig, Handlers }from'motia'import{ TSStore }from'./ts-store'exportconstconfig:ApiRouteConfig={name:'GetPet',type:'api',path:'/pets/:id',method:'GET',flows: ['PetManagement'],}exportconsthandler:Handlers['GetPet']=async(req, {logger})=>{// In a real application, this would be a database call// e.g., const pet = await db.pets.findById(req.pathParams.id)constpet=TSStore.get(req.pathParams.id)if(!pet) {logger.warn('Pet not found', { id: req.pathParams.id })return{ status:404, body: { message:'Pet not found'} }}return{ status:200, body: pet }}\nTesting tip:When testing GET endpoints with path parameters like/pets/:id, switch to theParamstab (not Body) to enter the ID value.\n/pets/:id\nThe:idin the path creates a path parameter accessible viareq.pathParams.id.\n:id\nreq.pathParams.id\nTesting Get Single Pet\nTest with curl:\n# Get specific pet (replace 1 with an actual pet ID)curlhttp://localhost:3000/pets/1\n# Get specific pet (replace 1 with an actual pet ID)curlhttp://localhost:3000/pets/1\nOr use the Workbench interface:\nAdding UPDATE Endpoint\nView on GitHub:\nTypeScript\nPython\nJavaScript\nimport{ ApiRouteConfig, Handlers }from'motia'import{ z }from'zod'import{ TSStore }from'./ts-store'constupdatePetSchema=z.object({name: z.string().min(1).optional(),status: z.enum(['available','pending','adopted']).optional(),ageMonths: z.number()."
}
================================================================================
{
    "source_page": "API Endpoints",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/api-endpoints =====",
    "chunk_topic": "API Endpoints",
    "chunk_id": "API Endpoints (Part 5)",
    "text": "'import{ TSStore }from'./ts-store'constupdatePetSchema=z.object({name: z.string().min(1).optional(),status: z.enum(['available','pending','adopted']).optional(),ageMonths: z.number().int().min(0).optional(),})exportconstconfig:ApiRouteConfig={name:'UpdatePet',type:'api',path:'/pets/:id',method:'PUT',bodySchema: updatePetSchema,flows: ['PetManagement'],}exportconsthandler:Handlers['UpdatePet']=async(req, {logger})=>{constupdates=updatePetSchema.parse(req.body)// In a real application, this would be a database call// e.g., const pet = await db.pets.update(req.pathParams.id, updates)constpet=TSStore.update(req.pathParams.id, updates)if(!pet) {return{ status:404, body: { message:'Pet not found'} }}logger.info('Pet updated', { petId: pet.id })return{ status:200, body: pet }}\nimport{ ApiRouteConfig, Handlers }from'motia'import{ z }from'zod'import{ TSStore }from'./ts-store'constupdatePetSchema=z.object({name: z.string().min(1).optional(),status: z.enum(['available','pending','adopted']).optional(),ageMonths: z.number().int().min(0).optional(),})exportconstconfig:ApiRouteConfig={name:'UpdatePet',type:'api',path:'/pets/:id',method:'PUT',bodySchema: updatePetSchema,flows: ['PetManagement'],}exportconsthandler:Handlers['UpdatePet']=async(req, {logger})=>{constupdates=updatePetSchema.parse(req.body)// In a real application, this would be a database call// e.g., const pet = await db.pets.update(req.pathParams.id, updates)constpet=TSStore.update(req.pathParams.id, updates)if(!pet) {return{ status:404, body: { message:'Pet not found'} }}logger.info('Pet updated', { petId: pet.id })return{ status:200, body: pet }}\nTesting Update Pet\nTest with curl:\n# Update a pet (replace 1 with an actual pet ID)curl-XPUThttp://localhost:3000/pets/1\\-H\"Content-Type: application/json\"\\-d'{\"status\": \"adopted"
}
================================================================================
{
    "source_page": "API Endpoints",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/api-endpoints =====",
    "chunk_topic": "API Endpoints",
    "chunk_id": "API Endpoints (Part 6)",
    "text": "\nTest with curl:\n# Update a pet (replace 1 with an actual pet ID)curl-XPUThttp://localhost:3000/pets/1\\-H\"Content-Type: application/json\"\\-d'{\"status\": \"adopted\"}'\n# Update a pet (replace 1 with an actual pet ID)curl-XPUThttp://localhost:3000/pets/1\\-H\"Content-Type: application/json\"\\-d'{\"status\": \"adopted\"}'\nOr use the Workbench interface:\nAdding DELETE Endpoint\nView on GitHub:\nTypeScript\nPython\nJavaScript\nimport{ ApiRouteConfig, Handlers }from'motia'import{ TSStore }from'./ts-store'exportconstconfig:ApiRouteConfig={name:'DeletePet',type:'api',path:'/pets/:id',method:'DELETE',flows: ['PetManagement'],}exportconsthandler:Handlers['DeletePet']=async(req, {logger})=>{// In a real application, this would be a database call// e.g., const deleted = await db.pets.delete(req.pathParams.id)constdeleted=TSStore.remove(req.pathParams.id)if(!deleted) {return{ status:404, body: { message:'Pet not found'} }}logger.info('Pet deleted', { petId: req.pathParams.id })return{ status:204}}\nimport{ ApiRouteConfig, Handlers }from'motia'import{ TSStore }from'./ts-store'exportconstconfig:ApiRouteConfig={name:'DeletePet',type:'api',path:'/pets/:id',method:'DELETE',flows: ['PetManagement'],}exportconsthandler:Handlers['DeletePet']=async(req, {logger})=>{// In a real application, this would be a database call// e.g., const deleted = await db.pets.delete(req.pathParams.id)constdeleted=TSStore.remove(req.pathParams.id)if(!deleted) {return{ status:404, body: { message:'Pet not found'} }}logger.info('Pet deleted', { petId: req.pathParams.id })return{ status:204}}\nDELETE endpoints return204 No Contenton success.\n204 No Content\nTesting Delete Pet\nTest with curl:\n# Delete a pet (replace 1 with an actual pet ID)curl-XDELETEhttp://localhost:3000/pets/1\n# Delete a pet (replace 1 with an actual pet ID)curl-XDELETEhttp://localhost"
}
================================================================================
{
    "source_page": "API Endpoints",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/api-endpoints =====",
    "chunk_topic": "API Endpoints",
    "chunk_id": "API Endpoints (Part 7)",
    "text": " curl:\n# Delete a pet (replace 1 with an actual pet ID)curl-XDELETEhttp://localhost:3000/pets/1\n# Delete a pet (replace 1 with an actual pet ID)curl-XDELETEhttp://localhost:3000/pets/1\nOr use the Workbench interface:\nAs you can see in this example, Motia handles routing, validation, and error handling automatically. With just a few lines of code, you've built a complete REST API with:\nAutomatic routingbased on your step configuration\nPath parameter extraction(/pets/:id\u2192req.pathParams.id)\n/pets/:id\nreq.pathParams.id\nHTTP method handling(GET, POST, PUT, DELETE)\nResponse formattingwith proper status codes\nBuilt-in error handlingand validation\n\ud83c\udf89Congratulations!You've successfully created your first API endpoints with Motia. Your pet store API is now ready to handle all CRUD operations.\nWhat's Next?\nYou now have a working REST API for your pet store! But a complete backend system needs more than just API endpoints. In the next guide, we'll add background jobs using Event Steps and scheduled tasks with Cron Steps to handle tasks like:\nSetNextFeedingReminder- Queue jobs that automatically schedule feeding reminders when pets are added or updated\nDeletion Reaper- Cron jobs that run daily to clean up soft-deleted records and expired data\nLet's continue building your complete backend system by adding these background jobs with Event Steps and scheduled tasks with Cron Steps.\nBuild Your First Motia App\nLearn Motia step-by-step by building a real pet store backend\nBackground Jobs\nLearn how to create async background jobs and scheduled tasks with Motia\nOn this page"
}
================================================================================
{
    "source_page": "Background Jobs",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/background-jobs =====",
    "chunk_topic": "Background Jobs",
    "chunk_id": "Background Jobs (Part 1)",
    "text": "Background Jobs\nLearn how to create async background jobs and scheduled tasks with Motia\nWhat You'll Build\nA pet management system with background jobs that handle:\nEvent Step- Async job that sets feeding reminders when pets are created\nCron Step- Scheduled job that runs daily to clean up deleted pets\nGetting Started\nClone the example repository:\ngitclonehttps://github.com/MotiaDev/build-your-first-app.gitcdbuild-your-first-appgitcheckoutbackground-jobs\ngitclonehttps://github.com/MotiaDev/build-your-first-app.gitcdbuild-your-first-appgitcheckoutbackground-jobs\nInstall dependencies:\nnpminstall\nnpminstall\nStart the Workbench:\nnpmrundev\nnpmrundev\nYour Workbench will be available athttp://localhost:3000.\nhttp://localhost:3000\nProject Structure\nFiles likefeatures.jsonandtutorial.tsxare only for the interactive tutorial and are not part of Motia's project structure.\nfeatures.json\ntutorial.tsx\nAll code examples in this guide are available in thebuild-your-first-apprepository.\nYou can follow this guide to learn how to build background jobs with Motia step by step, or you can clone the repository and dive into our Interactive Tutorial to learn by doing directly in the Workbench.\nUnderstanding Background Jobs\nBackground jobs let you handle time-consuming tasks without blocking your API responses. When a user creates a pet, they get an immediate response while tasks like sending emails or processing data happen in the background.\nMotia provides two types of background jobs:\nEvent Steps- Triggered by events from your API endpoints\nCron Steps- Run on a schedule (like daily cleanup tasks)\nCreating Your First Event Step\nLet's create a background job that sets feeding reminders when a pet is created. First, we need to emit an event from our API endpoint.\nStep 1: Emit Events from API\nView on GitHub:\nTypeScript\nPython\nJavaScript\nimport{ ApiRouteConfig, Handlers }from'motia'import{ z }from'zod'import{ TSStore }from'./ts-store'constcreatePetSchema=z.object({name: z.string().min(1,'Name is required').trim(),species: z.enum(['dog','cat','bird','other']),ageMonths: z.number().int().min(0,'Age must be a positive number')})exportconstconfig:ApiRouteConfig={type:'api',name:'TsCreatePet"
}
================================================================================
{
    "source_page": "Background Jobs",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/background-jobs =====",
    "chunk_topic": "Background Jobs",
    "chunk_id": "Background Jobs (Part 2)",
    "text": "species: z.enum(['dog','cat','bird','other']),ageMonths: z.number().int().min(0,'Age must be a positive number')})exportconstconfig:ApiRouteConfig={type:'api',name:'TsCreatePet',path:'/ts/pets',method:'POST',// Declare what events this endpoint can emitemits: ['ts.feeding.reminder.enqueued'],flows: ['TsPetManagement'],bodySchema: createPetSchema}exportconsthandler:Handlers['TsCreatePet']=async(req, {emit,logger})=>{try{constvalidatedData=createPetSchema.parse(req.body)constpet=TSStore.create({name: validatedData.name,species: validatedData.species,ageMonths: validatedData.ageMonths})if(logger) {logger.info('\ud83d\udc3e Pet created', {petId: pet.id,name: pet.name,species: pet.species,status: pet.status})}// Emit event to trigger background jobif(emit) {awaitemit({topic:'ts.feeding.reminder.enqueued',data: {petId: pet.id,enqueuedAt: Date.now()}})}return{ status:201, body: pet }}catch(error) {if(errorinstanceofz.ZodError) {return{status:400,body: {message:'Validation error',errors: error.errors}}}if(logger) {logger.error('\u274c Pet creation failed', {error: errorinstanceofError?error.message:'Unknown error'})}return{status:500,body: { message:'Internal server error'}}}}\nimport{ ApiRouteConfig, Handlers }from'motia'import{ z }from'zod'import{ TSStore }from'./ts-store'constcreatePetSchema=z.object({name: z.string().min(1,'Name is required').trim(),species: z.enum(['dog','cat','bird','other']),ageMonths: z.number().int().min(0,'Age must be a positive number')})exportconstconfig:ApiRouteConfig={type:'api',name:'TsCreatePet',path:'/ts/pets',method:'POST',// Declare what events this endpoint can emitemits: ['ts.feeding.reminder.enqueued'],flows: ['TsPetManagement'],bodySchema: createPetSchema}exportconsthandler:Handlers['TsCreatePet']=async(req, {emit,logger})=>{try{constvalidatedData=createPetSchema.parse(req.body)constpet=TSStore.create({"
}
================================================================================
{
    "source_page": "Background Jobs",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/background-jobs =====",
    "chunk_topic": "Background Jobs",
    "chunk_id": "Background Jobs (Part 3)",
    "text": " ['TsPetManagement'],bodySchema: createPetSchema}exportconsthandler:Handlers['TsCreatePet']=async(req, {emit,logger})=>{try{constvalidatedData=createPetSchema.parse(req.body)constpet=TSStore.create({name: validatedData.name,species: validatedData.species,ageMonths: validatedData.ageMonths})if(logger) {logger.info('\ud83d\udc3e Pet created', {petId: pet.id,name: pet.name,species: pet.species,status: pet.status})}// Emit event to trigger background jobif(emit) {awaitemit({topic:'ts.feeding.reminder.enqueued',data: {petId: pet.id,enqueuedAt: Date.now()}})}return{ status:201, body: pet }}catch(error) {if(errorinstanceofz.ZodError) {return{status:400,body: {message:'Validation error',errors: error.errors}}}if(logger) {logger.error('\u274c Pet creation failed', {error: errorinstanceofError?error.message:'Unknown error'})}return{status:500,body: { message:'Internal server error'}}}}\nThe API endpoint now emits an event after creating a pet. The response returns immediately while the background job processes asynchronously.\nStep 2: Create the Event Step\nNow let's create the background job that listens for this event and sets feeding reminders.\nView on GitHub:\nTypeScript\nPython\nJavaScript\nimport{ EventConfig, Handlers }from'motia'import{ TSStore }from'./ts-store'exportconstconfig={type:'event',name:'TsSetNextFeedingReminder',description:'Background job that sets next feeding reminder and adds welcome notes',// Subscribe to the event emitted by CreatePetsubscribes: ['ts.feeding.reminder.enqueued'],emits: [],flows: ['TsPetManagement']}exportconsthandler:Handlers['TsSetNextFeedingReminder']=async(input, {emit,logger})=>{const{petId,enqueuedAt}=inputif(logger) {logger.info('\ud83d\udd04 Setting next feeding reminder', { petId, enqueuedAt })}try{// Calculate next feeding time (24 hours from now)constnextFeedingAt=Date.now()+(24*60*60*1000)// Fill in non-critical detailsconstupdates={notes:'Welcome to our pet store! We\\'ll take great care of this pet.',nextFeedingAt: nextFeedingAt}const"
}
================================================================================
{
    "source_page": "Background Jobs",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/background-jobs =====",
    "chunk_topic": "Background Jobs",
    "chunk_id": "Background Jobs (Part 4)",
    "text": ".now()+(24*60*60*1000)// Fill in non-critical detailsconstupdates={notes:'Welcome to our pet store! We\\'ll take great care of this pet.',nextFeedingAt: nextFeedingAt}constupdatedPet=TSStore.update(petId, updates)if(!updatedPet) {if(logger) {logger.error('\u274c Failed to set feeding reminder - pet not found', { petId })}return}if(logger) {logger.info('\u2705 Next feeding reminder set', {petId,notes: updatedPet.notes?.substring(0,50)+'...',nextFeedingAt:newDate(nextFeedingAt).toISOString()})}// Feeding reminder scheduled successfully}catch(error:any) {if(logger) {logger.error('\u274c Feeding reminder job error', { petId, error: error.message })}}}\nimport{ EventConfig, Handlers }from'motia'import{ TSStore }from'./ts-store'exportconstconfig={type:'event',name:'TsSetNextFeedingReminder',description:'Background job that sets next feeding reminder and adds welcome notes',// Subscribe to the event emitted by CreatePetsubscribes: ['ts.feeding.reminder.enqueued'],emits: [],flows: ['TsPetManagement']}exportconsthandler:Handlers['TsSetNextFeedingReminder']=async(input, {emit,logger})=>{const{petId,enqueuedAt}=inputif(logger) {logger.info('\ud83d\udd04 Setting next feeding reminder', { petId, enqueuedAt })}try{// Calculate next feeding time (24 hours from now)constnextFeedingAt=Date.now()+(24*60*60*1000)// Fill in non-critical detailsconstupdates={notes:'Welcome to our pet store! We\\'ll take great care of this pet.',nextFeedingAt: nextFeedingAt}constupdatedPet=TSStore.update(petId, updates)if(!updatedPet) {if(logger) {logger.error('\u274c Failed to set feeding reminder - pet not found', { petId })}return}if(logger) {logger.info('\u2705 Next feeding reminder set', {petId,notes: updatedPet.notes?.substring(0,50)+'...',nextFeedingAt:newDate(nextFeedingAt).toISOString()})}// Feeding reminder scheduled successfully}catch(error:any) {if(logger) {logger.error('\u274c Feeding reminder job error',"
}
================================================================================
{
    "source_page": "Background Jobs",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/background-jobs =====",
    "chunk_topic": "Background Jobs",
    "chunk_id": "Background Jobs (Part 5)",
    "text": "Pet.notes?.substring(0,50)+'...',nextFeedingAt:newDate(nextFeedingAt).toISOString()})}// Feeding reminder scheduled successfully}catch(error:any) {if(logger) {logger.error('\u274c Feeding reminder job error', { petId, error: error.message })}}}\nHow Event Steps Work\nEvent Steps have a few key differences from API Steps:\ntypeis set to'event'instead of'api'\n'event'\n'api'\nsubscribeslists the events this job listens for\nhandlerreceives the event data as the first argument\nWhen you create a pet, the API returns immediately. The background job picks up the event and processes it asynchronously.\nTesting Your Background Job\nCreate a pet and watch the background job execute:\n# Create a petcurl-XPOSThttp://localhost:3000/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Max\", \"species\": \"dog\", \"ageMonths\": 24}'\n# Create a petcurl-XPOSThttp://localhost:3000/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Max\", \"species\": \"dog\", \"ageMonths\": 24}'\nCheck the logs in Workbench to see both the API call and the background job execution:\nYou'll see:\n\"Pet created\" log from the API endpoint\n\"Setting next feeding reminder\" log from the background job\n\"Next feeding reminder set\" log when the job completes\nCreating a Scheduled Cron Job\nNow let's create a cron job that runs daily to clean up soft-deleted pets. This demonstrates how to handle scheduled maintenance tasks.\nView on GitHub:\nTypeScript\nPython\nJavaScript\nimport{ CronConfig, Handlers }from'motia'import{ TSStore }from'./ts-store'exportconstconfig:CronConfig={type:'cron',name:'TsDeletionReaper',description:'Daily job that permanently removes pets scheduled for deletion',cron:'0 2 * * *',// Daily at 2:00 AMemits: [],flows: ['TsPetManagement']}exportconsthandler:Handlers['TsDeletionReaper']=async({emit,logger})=>{if(logger) {logger.info('\ud83d\udd04 Deletion Reaper started - scanning for pets to purge')}try{constpetsToReap=TSStore.findDeletedPetsReadyToPurge()if(petsToReap.length===0) {if(logger)"
}
================================================================================
{
    "source_page": "Background Jobs",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/background-jobs =====",
    "chunk_topic": "Background Jobs",
    "chunk_id": "Background Jobs (Part 6)",
    "text": ") {logger.info('\ud83d\udd04 Deletion Reaper started - scanning for pets to purge')}try{constpetsToReap=TSStore.findDeletedPetsReadyToPurge()if(petsToReap.length===0) {if(logger) {logger.info('\u2705 Deletion Reaper completed - no pets to purge')}// No emit - no subscribers for ts.reaper.completedreturn}letpurgedCount=0for(constpetofpetsToReap) {constsuccess=TSStore.remove(pet.id)if(success) {purgedCount++if(logger) {logger.info('\ud83d\udc80 Pet permanently purged', {petId: pet.id,name: pet.name,deletedAt:newDate(pet.deletedAt!).toISOString(),purgeAt:newDate(pet.purgeAt!).toISOString()})}// No emit - no subscribers for ts.pet.purged}else{if(logger) {logger.warn('\u26a0\ufe0f Failed to purge pet', { petId: pet.id, name: pet.name })}}}if(logger) {logger.info('\u2705 Deletion Reaper completed', {totalScanned: petsToReap.length,purgedCount,failedCount: petsToReap.length-purgedCount})}// No emit - no subscribers for ts.reaper.completed}catch(error:any) {if(logger) {logger.error('\u274c Deletion Reaper error', { error: error.message })}}}\nimport{ CronConfig, Handlers }from'motia'import{ TSStore }from'./ts-store'exportconstconfig:CronConfig={type:'cron',name:'TsDeletionReaper',description:'Daily job that permanently removes pets scheduled for deletion',cron:'0 2 * * *',// Daily at 2:00 AMemits: [],flows: ['TsPetManagement']}exportconsthandler:Handlers['TsDeletionReaper']=async({emit,logger})=>{if(logger) {logger.info('\ud83d\udd04 Deletion Reaper started - scanning for pets to purge')}try{constpetsToReap=TSStore.findDeletedPetsReadyToPurge()if(petsToReap.length===0) {if(logger) {logger.info('\u2705 Deletion Reaper completed - no pets to purge')}// No emit - no subscribers for ts.reaper.completedreturn}letpurgedCount=0for(constpetofpetsToReap) {constsuccess=TSStore.remove(pet.id)if(success) {"
}
================================================================================
{
    "source_page": "Background Jobs",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/background-jobs =====",
    "chunk_topic": "Background Jobs",
    "chunk_id": "Background Jobs (Part 7)",
    "text": " - no pets to purge')}// No emit - no subscribers for ts.reaper.completedreturn}letpurgedCount=0for(constpetofpetsToReap) {constsuccess=TSStore.remove(pet.id)if(success) {purgedCount++if(logger) {logger.info('\ud83d\udc80 Pet permanently purged', {petId: pet.id,name: pet.name,deletedAt:newDate(pet.deletedAt!).toISOString(),purgeAt:newDate(pet.purgeAt!).toISOString()})}// No emit - no subscribers for ts.pet.purged}else{if(logger) {logger.warn('\u26a0\ufe0f Failed to purge pet', { petId: pet.id, name: pet.name })}}}if(logger) {logger.info('\u2705 Deletion Reaper completed', {totalScanned: petsToReap.length,purgedCount,failedCount: petsToReap.length-purgedCount})}// No emit - no subscribers for ts.reaper.completed}catch(error:any) {if(logger) {logger.error('\u274c Deletion Reaper error', { error: error.message })}}}\nUnderstanding Cron Steps\nCron Steps run on a schedule defined by a cron expression:\ntypeis set to'cron'\n'cron'\ncrondefines when the job runs (e.g.,'0 2 * * *'= daily at 2 AM)\n'0 2 * * *'\nhandlerreceives only the context (no input data like Event Steps)\nCommon cron patterns:\n'*/5 * * * *'- Every 5 minutes\n'*/5 * * * *'\n'0 * * * *'- Every hour\n'0 * * * *'\n'0 0 * * *'- Daily at midnight\n'0 0 * * *'\n'0 9 * * 1'- Every Monday at 9 AM\n'0 9 * * 1'\nMonitoring Background Jobs\nWorkbench provides tools to monitor your background jobs:\nTracing\nSee the complete execution flow from API call to background job:\nEach trace shows:\nWhen the API endpoint was called\nWhen events were emitted\nWhen background jobs started and completed\nTotal processing time\n\ud83c\udf89Congratulations!You've successfully created background jobs with Motia. Your pet store now handles async tasks efficiently without blocking API responses.\nWhat's Next?\nYou now have a complete backend system with API endpoints and background jobs! But there's more power in Motia when you combine"
}
================================================================================
{
    "source_page": "Background Jobs",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/background-jobs =====",
    "chunk_topic": "Background Jobs",
    "chunk_id": "Background Jobs (Part 8)",
    "text": " successfully created background jobs with Motia. Your pet store now handles async tasks efficiently without blocking API responses.\nWhat's Next?\nYou now have a complete backend system with API endpoints and background jobs! But there's more power in Motia when you combine everything into workflows.\nIn the next guide, we'll build completeworkflow orchestrationsthat connect multiple Steps together:\nQueue-Based Job Processing- SetNextFeedingReminder triggered by pet creation, processing asynchronously without blocking API responses\nScheduled Maintenance Tasks- Deletion Reaper running daily at 2 AM to permanently remove soft-deleted pets past their purge date\nPet Lifecycle Orchestration- Staff-driven workflow managing pet status transitions from creation through quarantine, health checks, and adoption\nEvent-Driven State Management- Centralized orchestrator ensuring consistent pet status changes with automatic progressions and staff decision points\nLet's continue building by creating workflows that orchestrate your APIs and background jobs into powerful, event-driven systems.\nAPI Endpoints\nLearn how to create HTTP API endpoints with Motia\nWorkflows\nLearn how to build automated workflows that manage complex business logic with Motia\nOn this page"
}
================================================================================
{
    "source_page": "Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/workflows =====",
    "chunk_topic": "Workflows",
    "chunk_id": "Workflows (Part 1)",
    "text": "Workflows\nLearn how to build automated workflows that manage complex business logic with Motia\nWhat You'll Build\nA pet lifecycle management system that automatically guides pets through their journey at your shelter:\nAutomated Status Transitions- Pets move through stages automatically when conditions are met\nStaff Decision Points- Critical checkpoints where staff make the calls\nSmart Progressions- Some transitions trigger follow-up actions automatically\nValidation Rules- Prevents invalid status changes to keep data consistent\nGetting Started\nClone the example repository:\ngitclonehttps://github.com/MotiaDev/build-your-first-app.gitcdbuild-your-first-appgitcheckoutworkflow-orchestration\ngitclonehttps://github.com/MotiaDev/build-your-first-app.gitcdbuild-your-first-appgitcheckoutworkflow-orchestration\nInstall dependencies:\nnpminstall\nnpminstall\nStart the Workbench:\nnpmrundev\nnpmrundev\nYour Workbench will be available athttp://localhost:3000.\nhttp://localhost:3000\nProject Structure\nFiles likefeatures.jsonandtutorial.tsxare only for the interactive tutorial and are not part of Motia's project structure.\nfeatures.json\ntutorial.tsx\nAll code examples in this guide are available in thebuild-your-first-apprepository.\nYou can follow this guide to learn how to build workflow orchestration with Motia step by step, or you can clone the repository and dive into our Interactive Tutorial to learn by doing directly in the Workbench.\nUnderstanding Workflows\nSo far, you've built API endpoints that respond to requests and background jobs that handle async tasks. But what about coordinating complex business processes that involve multiple steps and decision points?\nThat's where workflows come in. It's the conductor of your system - making sure things happen in the right order, at the right time, and only when it makes sense.\nIn our pet shelter example, a pet goes through many stages:\nNew arrivals need health checks\nHealthy pets become available for adoption\nSick pets need treatment before they're ready\nAdoption applications require staff approval\nA workflow manages all these transitions, enforcing the rules and keeping everything consistent.\nThe Pet Lifecycle Journey\nWhen you create a pet, it starts asnew. Once the feeding reminder job completes, it automatically moves toin_quarantine. Staff then checks on it and marks ithealthy, which automatically progresses toavailable. When someone wants to adopt, it goespending, then finallyadopted.\nnew\nin_quarantine"
}
================================================================================
{
    "source_page": "Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/workflows =====",
    "chunk_topic": "Workflows",
    "chunk_id": "Workflows (Part 2)",
    "text": " reminder job completes, it automatically moves toin_quarantine. Staff then checks on it and marks ithealthy, which automatically progresses toavailable. When someone wants to adopt, it goespending, then finallyadopted.\nnew\nin_quarantine\nhealthy\navailable\npending\nadopted\nThe key here is some transitions happen automatically (likehealthy\u2192available), while others need staff approval (likein_quarantine\u2192healthy).\nhealthy\navailable\nin_quarantine\nhealthy\nWhat about sick pets?\nIf staff finds a pet isill, it automatically moves tounder_treatment. When staff marks itrecovered, it chains through automatic transitions:recovered\u2192healthy\u2192available.\nill\nunder_treatment\nrecovered\nrecovered\nhealthy\navailable\nThis mix of automatic progressions and human decision points is what makes workflows powerful - the system handles the routine stuff while keeping people in control of important calls.\nCreating the Workflow\nThe workflow orchestrator is a single Event Step that manages all pet lifecycle transitions. Here's the complete implementation:\nView on GitHub:\nTypeScript\nPython\nJavaScript\n// steps/typescript/pet-lifecycle-orchestrator.step.tsimport{ EventConfig, Handlers }from'motia';import{ TSStore, Pet }from'./ts-store';typeLifecycleEvent=|'pet.created'|'feeding.reminder.completed'|'status.update.requested';typeTransitionRule={from:Pet[\"status\"][];to:Pet[\"status\"];event:LifecycleEvent;description:string;};constTRANSITION_RULES:TransitionRule[]=[{from: [\"new\"],to:\"in_quarantine\",event:\"feeding.reminder.completed\",description:\"Pet moved to quarantine after feeding setup\"},{from: [\"in_quarantine\"],to:\"healthy\",event:\"status.update.requested\",description:\"Staff health check - pet cleared from quarantine\"},{from: [\"healthy\",\"in_quarantine\",\"available\"],to:\"ill\",event:\"status.update.requested\",description:\"Staff assessment - pet identified as ill\"},{from: [\"healthy\"],to:\"available\",event:\"status.update.requested\",description:\"Staff decision - pet ready for adoption\"},{from: [\"ill\"],to:\"under_treatment\",event:\"status.update.requested\",description:\"Staff decision - treatment started\"},{from: [\"under_treatment\"],to:\"recovered\",event:\"status.update.requested\",description:\"Staff assessment - treatment completed\"},{from"
}
================================================================================
{
    "source_page": "Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/workflows =====",
    "chunk_topic": "Workflows",
    "chunk_id": "Workflows (Part 3)",
    "text": ":\"under_treatment\",event:\"status.update.requested\",description:\"Staff decision - treatment started\"},{from: [\"under_treatment\"],to:\"recovered\",event:\"status.update.requested\",description:\"Staff assessment - treatment completed\"},{from: [\"recovered\"],to:\"healthy\",event:\"status.update.requested\",description:\"Staff clearance - pet fully recovered\"},{from: [\"available\"],to:\"pending\",event:\"status.update.requested\",description:\"Adoption application received\"},{from: [\"pending\"],to:\"adopted\",event:\"status.update.requested\",description:\"Adoption completed\"},{from: [\"pending\"],to:\"available\",event:\"status.update.requested\",description:\"Adoption application rejected/cancelled\"}];exportconstconfig={type:'event',name:'TsPetLifecycleOrchestrator',description:'Pet lifecycle state management with staff interaction points',subscribes: ['ts.pet.created','ts.feeding.reminder.completed','ts.pet.status.update.requested'],emits: [],flows: ['TsPetManagement']};exportconsthandler:Handlers['TsPetLifecycleOrchestrator']=async(input, {emit,logger})=>{const{petId,event:eventType,requestedStatus,automatic}=input;if(logger) {constlogMessage=automatic?'\ud83e\udd16 Automatic progression':'\ud83d\udd04 Lifecycle orchestrator processing';logger.info(logMessage, { petId, eventType, requestedStatus, automatic });}try{constpet=TSStore.get(petId);if(!pet) {if(logger) {logger.error('\u274c Pet not found for lifecycle transition', { petId, eventType });}return;}// For status update requests, find the rule based on requested statusletrule;if(eventType==='status.update.requested'&&requestedStatus) {rule=TRANSITION_RULES.find(r=>r.event===eventType&&r.from.includes(pet.status)&&r.to===requestedStatus);}else{// For other events (like feeding.reminder.completed)rule=TRANSITION_RULES.find(r=>r.event===eventType&&r.from.includes(pet.status));}if(!rule) {constreason=eventType==='status.update.requested'?`Invalid transition: cannot change from ${pet.status} to ${requestedStatus}`:`No transition rule found for ${eventType} from ${pet.status}`;if(logger) {logger.warn('\u26a0\ufe0f Transition rejected', {petId,currentStatus: pet.status,requestedStatus,eventType,reason"
}
================================================================================
{
    "source_page": "Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/workflows =====",
    "chunk_topic": "Workflows",
    "chunk_id": "Workflows (Part 4)",
    "text": "} to ${requestedStatus}`:`No transition rule found for ${eventType} from ${pet.status}`;if(logger) {logger.warn('\u26a0\ufe0f Transition rejected', {petId,currentStatus: pet.status,requestedStatus,eventType,reason});}// Transition rejected - no event emission neededreturn;}// Check for idempotencyif(pet.status===rule.to) {if(logger) {logger.info('\u2705 Already in target status', {petId,status: pet.status,eventType});}return;}// Apply the transitionconstoldStatus=pet.status;constupdatedPet=TSStore.updateStatus(petId, rule.to);if(!updatedPet) {if(logger) {logger.error('\u274c Failed to update pet status', { petId, oldStatus, newStatus: rule.to });}return;}if(logger) {logger.info('\u2705 Lifecycle transition completed', {petId,oldStatus,newStatus: rule.to,eventType,description: rule.description,timestamp: Date.now()});}// Transition completed successfullyif(logger) {logger.info('\u2705 Pet status transition completed', {petId,oldStatus,newStatus: rule.to,eventType,description: rule.description});}// Check for automatic progressions after successful transitionawaitprocessAutomaticProgression(petId, rule.to, emit, logger);}catch(error:any) {if(logger) {logger.error('\u274c Lifecycle orchestrator error', { petId, eventType, error: error.message });}}};asyncfunctionprocessAutomaticProgression(petId:string,currentStatus:Pet[\"status\"],emit:any,logger:any) {// Define automatic progressionsconstautomaticProgressions:Partial<Record<Pet[\"status\"], {to:Pet[\"status\"],description:string}>>={'healthy': { to:'available', description:'Automatic progression - pet ready for adoption'},'ill': { to:'under_treatment', description:'Automatic progression - treatment started'},'recovered': { to:'healthy', description:'Automatic progression - recovery complete'}};constprogression=automaticProgressions[currentStatus];if(progression) {if(logger) {logger.info('\ud83e\udd16 Processing automatic progression', {petId,currentStatus,nextStatus: progression.to});}// Find the transition rule for automatic progressionconstrule=TRANSITION_RULES.find(r=>r.event==='status.update.requested'&&r.from.includes(currentStatus)&&r.to===progression.to);if(rule) {// Apply the automatic transition immediatelyconstoldStatus=currentStatus;"
}
================================================================================
{
    "source_page": "Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/workflows =====",
    "chunk_topic": "Workflows",
    "chunk_id": "Workflows (Part 5)",
    "text": " for automatic progressionconstrule=TRANSITION_RULES.find(r=>r.event==='status.update.requested'&&r.from.includes(currentStatus)&&r.to===progression.to);if(rule) {// Apply the automatic transition immediatelyconstoldStatus=currentStatus;constupdatedPet=TSStore.updateStatus(petId, rule.to);if(updatedPet) {if(logger) {logger.info('\u2705 Automatic progression completed', {petId,oldStatus,newStatus: rule.to,description: progression.description,timestamp: Date.now()});}// Automatic progression completed successfullyif(logger) {logger.info('\u2705 Automatic progression completed', {petId,oldStatus,newStatus: rule.to,description: progression.description});}// Check for further automatic progressions (for chaining like recovered \u2192 healthy \u2192 available)awaitprocessAutomaticProgression(petId, rule.to, emit, logger);}elseif(logger) {logger.error('\u274c Failed to apply automatic progression', { petId, oldStatus, newStatus: rule.to });}}elseif(logger) {logger.warn('\u26a0\ufe0f No transition rule found for automatic progression', {petId,currentStatus,targetStatus: progression.to});}}}\n// steps/typescript/pet-lifecycle-orchestrator.step.tsimport{ EventConfig, Handlers }from'motia';import{ TSStore, Pet }from'./ts-store';typeLifecycleEvent=|'pet.created'|'feeding.reminder.completed'|'status.update.requested';typeTransitionRule={from:Pet[\"status\"][];to:Pet[\"status\"];event:LifecycleEvent;description:string;};constTRANSITION_RULES:TransitionRule[]=[{from: [\"new\"],to:\"in_quarantine\",event:\"feeding.reminder.completed\",description:\"Pet moved to quarantine after feeding setup\"},{from: [\"in_quarantine\"],to:\"healthy\",event:\"status.update.requested\",description:\"Staff health check - pet cleared from quarantine\"},{from: [\"healthy\",\"in_quarantine\",\"available\"],to:\"ill\",event:\"status.update.requested\",description:\"Staff assessment - pet identified as ill\"},{from: [\"healthy\"],to:\"available\",event:\"status.update.requested\",description:\"Staff decision - pet ready for adoption\"},{from: [\"ill\"],to:\"under_treatment\",event:\"status.update.requested\",description:\"Staff decision - treatment started\"},{from: [\"under_treatment\"],to:\"recovered\",event:\"status.update.requested"
}
================================================================================
{
    "source_page": "Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/workflows =====",
    "chunk_topic": "Workflows",
    "chunk_id": "Workflows (Part 6)",
    "text": " ready for adoption\"},{from: [\"ill\"],to:\"under_treatment\",event:\"status.update.requested\",description:\"Staff decision - treatment started\"},{from: [\"under_treatment\"],to:\"recovered\",event:\"status.update.requested\",description:\"Staff assessment - treatment completed\"},{from: [\"recovered\"],to:\"healthy\",event:\"status.update.requested\",description:\"Staff clearance - pet fully recovered\"},{from: [\"available\"],to:\"pending\",event:\"status.update.requested\",description:\"Adoption application received\"},{from: [\"pending\"],to:\"adopted\",event:\"status.update.requested\",description:\"Adoption completed\"},{from: [\"pending\"],to:\"available\",event:\"status.update.requested\",description:\"Adoption application rejected/cancelled\"}];exportconstconfig={type:'event',name:'TsPetLifecycleOrchestrator',description:'Pet lifecycle state management with staff interaction points',subscribes: ['ts.pet.created','ts.feeding.reminder.completed','ts.pet.status.update.requested'],emits: [],flows: ['TsPetManagement']};exportconsthandler:Handlers['TsPetLifecycleOrchestrator']=async(input, {emit,logger})=>{const{petId,event:eventType,requestedStatus,automatic}=input;if(logger) {constlogMessage=automatic?'\ud83e\udd16 Automatic progression':'\ud83d\udd04 Lifecycle orchestrator processing';logger.info(logMessage, { petId, eventType, requestedStatus, automatic });}try{constpet=TSStore.get(petId);if(!pet) {if(logger) {logger.error('\u274c Pet not found for lifecycle transition', { petId, eventType });}return;}// For status update requests, find the rule based on requested statusletrule;if(eventType==='status.update.requested'&&requestedStatus) {rule=TRANSITION_RULES.find(r=>r.event===eventType&&r.from.includes(pet.status)&&r.to===requestedStatus);}else{// For other events (like feeding.reminder.completed)rule=TRANSITION_RULES.find(r=>r.event===eventType&&r.from.includes(pet.status));}if(!rule) {constreason=eventType==='status.update.requested'?`Invalid transition: cannot change from ${pet.status} to ${requestedStatus}`:`No transition rule found for ${eventType} from ${pet.status}`;if(logger) {logger.warn('\u26a0\ufe0f Transition rejected', {petId,current"
}
================================================================================
{
    "source_page": "Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/workflows =====",
    "chunk_topic": "Workflows",
    "chunk_id": "Workflows (Part 7)",
    "text": "'?`Invalid transition: cannot change from ${pet.status} to ${requestedStatus}`:`No transition rule found for ${eventType} from ${pet.status}`;if(logger) {logger.warn('\u26a0\ufe0f Transition rejected', {petId,currentStatus: pet.status,requestedStatus,eventType,reason});}// Transition rejected - no event emission neededreturn;}// Check for idempotencyif(pet.status===rule.to) {if(logger) {logger.info('\u2705 Already in target status', {petId,status: pet.status,eventType});}return;}// Apply the transitionconstoldStatus=pet.status;constupdatedPet=TSStore.updateStatus(petId, rule.to);if(!updatedPet) {if(logger) {logger.error('\u274c Failed to update pet status', { petId, oldStatus, newStatus: rule.to });}return;}if(logger) {logger.info('\u2705 Lifecycle transition completed', {petId,oldStatus,newStatus: rule.to,eventType,description: rule.description,timestamp: Date.now()});}// Transition completed successfullyif(logger) {logger.info('\u2705 Pet status transition completed', {petId,oldStatus,newStatus: rule.to,eventType,description: rule.description});}// Check for automatic progressions after successful transitionawaitprocessAutomaticProgression(petId, rule.to, emit, logger);}catch(error:any) {if(logger) {logger.error('\u274c Lifecycle orchestrator error', { petId, eventType, error: error.message });}}};asyncfunctionprocessAutomaticProgression(petId:string,currentStatus:Pet[\"status\"],emit:any,logger:any) {// Define automatic progressionsconstautomaticProgressions:Partial<Record<Pet[\"status\"], {to:Pet[\"status\"],description:string}>>={'healthy': { to:'available', description:'Automatic progression - pet ready for adoption'},'ill': { to:'under_treatment', description:'Automatic progression - treatment started'},'recovered': { to:'healthy', description:'Automatic progression - recovery complete'}};constprogression=automaticProgressions[currentStatus];if(progression) {if(logger) {logger.info('\ud83e\udd16 Processing automatic progression', {petId,currentStatus,nextStatus: progression.to});}// Find the transition rule for automatic progressionconstrule=TRANSITION_RULES.find(r=>r.event==='status.update.requested'&&r.from.includes(currentStatus)&&r.to===progression.to);if(rule) {//"
}
================================================================================
{
    "source_page": "Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/workflows =====",
    "chunk_topic": "Workflows",
    "chunk_id": "Workflows (Part 8)",
    "text": ",nextStatus: progression.to});}// Find the transition rule for automatic progressionconstrule=TRANSITION_RULES.find(r=>r.event==='status.update.requested'&&r.from.includes(currentStatus)&&r.to===progression.to);if(rule) {// Apply the automatic transition immediatelyconstoldStatus=currentStatus;constupdatedPet=TSStore.updateStatus(petId, rule.to);if(updatedPet) {if(logger) {logger.info('\u2705 Automatic progression completed', {petId,oldStatus,newStatus: rule.to,description: progression.description,timestamp: Date.now()});}// Automatic progression completed successfullyif(logger) {logger.info('\u2705 Automatic progression completed', {petId,oldStatus,newStatus: rule.to,description: progression.description});}// Check for further automatic progressions (for chaining like recovered \u2192 healthy \u2192 available)awaitprocessAutomaticProgression(petId, rule.to, emit, logger);}elseif(logger) {logger.error('\u274c Failed to apply automatic progression', { petId, oldStatus, newStatus: rule.to });}}elseif(logger) {logger.warn('\u26a0\ufe0f No transition rule found for automatic progression', {petId,currentStatus,targetStatus: progression.to});}}}\nHow the Orchestrator Works\nThe orchestrator has three main responsibilities:\nValidate Transitions- Ensures pets can only move to valid next statuses\nApply Transitions- Updates the pet's status in the store\nTrigger Automatic Progressions- Some statuses automatically progress to the next stage\nKey Points:\nemits: []- The orchestrator doesn't declare emits because it only manages state internally\nemits: []\nJavaScript/Python emit events for workflow tracking (optional pattern)\nTypeScript focuses purely on state management\nAll languages validate transitions using the sameTRANSITION_RULES\nTRANSITION_RULES\nTesting Your Orchestrator\nThe best way to test your orchestrator is throughWorkbench. It lets you send requests, watch the workflow execute in real-time, and see all the logs in one place.\nCreate a Pet\nOpen Workbench and test the CreatePet endpoint:\nYou'll see in the logs:\n\ud83d\udc3e Pet created { petId: '1', name: 'Max', species: 'dog', status: 'new' }\ud83d\udd04 Setting next feeding reminder { petId: '1' }\u2705 Next feeding reminder set { petId: '1' }\ud83d\udd04 Lifecycle orchestrator processing { petId: '1', eventType:"
}
================================================================================
{
    "source_page": "Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/workflows =====",
    "chunk_topic": "Workflows",
    "chunk_id": "Workflows (Part 9)",
    "text": "', status: 'new' }\ud83d\udd04 Setting next feeding reminder { petId: '1' }\u2705 Next feeding reminder set { petId: '1' }\ud83d\udd04 Lifecycle orchestrator processing { petId: '1', eventType: 'feeding.reminder.completed' }\u2705 Lifecycle transition completed { oldStatus: 'new', newStatus: 'in_quarantine' }\n\ud83d\udc3e Pet created { petId: '1', name: 'Max', species: 'dog', status: 'new' }\ud83d\udd04 Setting next feeding reminder { petId: '1' }\u2705 Next feeding reminder set { petId: '1' }\ud83d\udd04 Lifecycle orchestrator processing { petId: '1', eventType: 'feeding.reminder.completed' }\u2705 Lifecycle transition completed { oldStatus: 'new', newStatus: 'in_quarantine' }\nPrefer using curl?You can also test with command line:\ncurl-XPOSThttp://localhost:3000/ts/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Max\", \"species\": \"dog\", \"ageMonths\": 24}'\ncurl-XPOSThttp://localhost:3000/ts/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Max\", \"species\": \"dog\", \"ageMonths\": 24}'\nStaff Health Check\nTest the UpdatePet endpoint in Workbench to mark the pet as healthy:\nWatch the automatic progression:\n\ud83d\udc64 Staff requesting status change { petId: '1', requestedStatus: 'healthy' }\ud83d\udd04 Lifecycle orchestrator processing { petId: '1', eventType: 'status.update.requested' }\u2705 Lifecycle transition completed { oldStatus: 'in_quarantine', newStatus: 'healthy' }\ud83e\udd16 Processing automatic progression { petId: '1', currentStatus: 'healthy', nextStatus: 'available' }\u2705 Automatic progression completed { oldStatus: 'healthy', newStatus: 'available' }\n\ud83d\udc64 Staff requesting status change { petId: '1', requestedStatus: 'healthy' }\ud83d\udd04 Lifecycle orchestrator processing { petId: '1', eventType: 'status.update.requested' }\u2705 Lifecycle transition completed { oldStatus: 'in_quarantine', newStatus: 'healthy' }\ud83e\udd16 Processing automatic progression { petId: '1', currentStatus: 'healthy', nextStatus: '"
}
================================================================================
{
    "source_page": "Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/workflows =====",
    "chunk_topic": "Workflows",
    "chunk_id": "Workflows (Part 10)",
    "text": ".update.requested' }\u2705 Lifecycle transition completed { oldStatus: 'in_quarantine', newStatus: 'healthy' }\ud83e\udd16 Processing automatic progression { petId: '1', currentStatus: 'healthy', nextStatus: 'available' }\u2705 Automatic progression completed { oldStatus: 'healthy', newStatus: 'available' }\nUsing curl?\ncurl-XPUThttp://localhost:3000/ts/pets/1\\-H\"Content-Type: application/json\"\\-d'{\"status\": \"healthy\"}'\ncurl-XPUThttp://localhost:3000/ts/pets/1\\-H\"Content-Type: application/json\"\\-d'{\"status\": \"healthy\"}'\nTest Invalid Transitions\nTry to skip a step in Workbench:\nThe orchestrator rejects it:\n\u26a0\ufe0f Transition rejected {currentStatus: 'in_quarantine',requestedStatus: 'available',reason: 'Invalid transition: cannot change from in_quarantine to available'}\n\u26a0\ufe0f Transition rejected {currentStatus: 'in_quarantine',requestedStatus: 'available',reason: 'Invalid transition: cannot change from in_quarantine to available'}\nUsing curl?\ncurl-XPUThttp://localhost:3000/ts/pets/1\\-H\"Content-Type: application/json\"\\-d'{\"status\": \"available\"}'\ncurl-XPUThttp://localhost:3000/ts/pets/1\\-H\"Content-Type: application/json\"\\-d'{\"status\": \"available\"}'\nTest the Illness Workflow\nMark a pet as ill in Workbench:\nWatch the automatic treatment start:\n\u2705 Lifecycle transition completed { oldStatus: 'healthy', newStatus: 'ill' }\ud83e\udd16 Processing automatic progression { currentStatus: 'ill', nextStatus: 'under_treatment' }\u2705 Automatic progression completed { oldStatus: 'ill', newStatus: 'under_treatment' }\n\u2705 Lifecycle transition completed { oldStatus: 'healthy', newStatus: 'ill' }\ud83e\udd16 Processing automatic progression { currentStatus: 'ill', nextStatus: 'under_treatment' }\u2705 Automatic progression completed { oldStatus: 'ill', newStatus: 'under_treatment' }\nUsing curl?\ncurl-XPUThttp://localhost:3000/ts/pets/1\\-H\"Content-Type: application/json\"\\-d'{\"status\": \"ill\"}'\ncurl-XPUThttp://localhost:3000/ts/pets/"
}
================================================================================
{
    "source_page": "Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/workflows =====",
    "chunk_topic": "Workflows",
    "chunk_id": "Workflows (Part 11)",
    "text": " }\nUsing curl?\ncurl-XPUThttp://localhost:3000/ts/pets/1\\-H\"Content-Type: application/json\"\\-d'{\"status\": \"ill\"}'\ncurl-XPUThttp://localhost:3000/ts/pets/1\\-H\"Content-Type: application/json\"\\-d'{\"status\": \"ill\"}'\nThen mark the pet as recovered in Workbench:\nWatch the chained automatic progressions:\n\u2705 Lifecycle transition completed { oldStatus: 'under_treatment', newStatus: 'recovered' }\ud83e\udd16 Processing automatic progression { currentStatus: 'recovered', nextStatus: 'healthy' }\u2705 Automatic progression completed { oldStatus: 'recovered', newStatus: 'healthy' }\ud83e\udd16 Processing automatic progression { currentStatus: 'healthy', nextStatus: 'available' }\u2705 Automatic progression completed { oldStatus: 'healthy', newStatus: 'available' }\n\u2705 Lifecycle transition completed { oldStatus: 'under_treatment', newStatus: 'recovered' }\ud83e\udd16 Processing automatic progression { currentStatus: 'recovered', nextStatus: 'healthy' }\u2705 Automatic progression completed { oldStatus: 'recovered', newStatus: 'healthy' }\ud83e\udd16 Processing automatic progression { currentStatus: 'healthy', nextStatus: 'available' }\u2705 Automatic progression completed { oldStatus: 'healthy', newStatus: 'available' }\nUsing curl?\ncurl-XPUThttp://localhost:3000/ts/pets/1\\-H\"Content-Type: application/json\"\\-d'{\"status\": \"recovered\"}'\ncurl-XPUThttp://localhost:3000/ts/pets/1\\-H\"Content-Type: application/json\"\\-d'{\"status\": \"recovered\"}'\nMonitoring Your Orchestrator\nUse the Workbench to visualize the entire flow:\nTracing\nSee how events flow through your system:\nEach trace shows:\nThe initial API call\nBackground job processing\nOrchestrator transitions\nAutomatic progressions\nTotal time for each step\nLogs\nFilter by pet ID to see the complete lifecycle:\nThe logs tell the story of each pet's journey through your shelter.\n\ud83c\udf89Congratulations!You've built a complete workflow orchestrator that manages complex business logic while keeping your code clean and maintainable.\nWhat's Next?\nYour pet shelter now has a complete backend system with workflow orchestration! But what about decisions that aren't black and white?"
}
================================================================================
{
    "source_page": "Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/workflows =====",
    "chunk_topic": "Workflows",
    "chunk_id": "Workflows (Part 12)",
    "text": "'ve built a complete workflow orchestrator that manages complex business logic while keeping your code clean and maintainable.\nWhat's Next?\nYour pet shelter now has a complete backend system with workflow orchestration! But what about decisions that aren't black and white? Should this pet's symptoms require treatment?\nIn the next guide, we'll addAgentic Workflowsthat make intelligent decisions within your workflows:\nHealth Review Agentic Step- Analyzes symptoms and decides if treatment is needed\nAdoption Review Agentic Step- Assesses if pets are ready for adoption\nAI Profile Enrichment- Automatically generates engaging pet profiles\nAgentic Decision Making- AI that chooses which workflow path to take\nLet's continue building by adding intelligent decision-making to your workflows.\nBackground Jobs\nLearn how to create async background jobs and scheduled tasks with Motia\nAgentic Workflows\nLearn how to build intelligent agentic workflows that make decisions and automate workflows with Motia\nOn this page"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 1)",
    "text": "Agentic Workflows\nLearn how to build intelligent agentic workflows that make decisions and automate workflows with Motia\nWhat You'll Build\nAn intelligent pet management system with agentic workflows that automate decisions and enrich data:\nAI Profile Enrichment- Automatically generates detailed pet profiles using AI\nHealth Review Agentic Step- Makes intelligent health decisions based on symptoms\nAdoption Review Agentic Step- Assesses adoption readiness and data completeness\nOrchestrator Integration- AI decisions that drive real workflow changes\nGetting Started\nClone the example repository:\ngitclonehttps://github.com/MotiaDev/build-your-first-app.gitcdbuild-your-first-appgitcheckoutai-agents\ngitclonehttps://github.com/MotiaDev/build-your-first-app.gitcdbuild-your-first-appgitcheckoutai-agents\nInstall dependencies:\nnpminstall\nnpminstall\nSet up your OpenAI API key in.env:\n.env\nOPENAI_API_KEY=your_api_key_here\nOPENAI_API_KEY=your_api_key_here\nImportant!This tutorial requires an OpenAI API key. Get yours atplatform.openai.com/api-keys. Without it, the agentic workflows won't work.\nStart the Workbench:\nnpmrundev\nnpmrundev\nYour Workbench will be available athttp://localhost:3000.\nhttp://localhost:3000\nProject Structure\nFiles likefeatures.jsonandtutorial.tsxare only for the interactive tutorial and are not part of Motia's project structure.\nfeatures.json\ntutorial.tsx\nAll code examples in this guide are available in thebuild-your-first-apprepository.\nYou can follow this guide to learn how to build agentic workflows with Motia step by step, or you can clone the repository and dive into our Interactive Tutorial to learn by doing directly in the Workbench.\nUnderstanding Agentic Workflows\nYou've built APIs, background jobs, and workflows that orchestrate your pet shelter. But what about decisions that aren't black and white? Should this pet's symptoms require treatment? Is this profile ready for the adoption page?\nThat's where agentic workflows come in. They're smart assistants that make judgment calls based on context - the kind of decisions that would normally need a human to review every single case.\nIn our pet shelter, we use two flavors:\nContent generatorswrite engaging pet profiles automatically\nDecision makersevaluate health symptoms and choose whether treatment is needed\nData reviewersassess if adoption information is complete\nThe difference from"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 2)",
    "text": " review every single case.\nIn our pet shelter, we use two flavors:\nContent generatorswrite engaging pet profiles automatically\nDecision makersevaluate health symptoms and choose whether treatment is needed\nData reviewersassess if adoption information is complete\nThe difference from traditional code? Instead of writing hundreds of if-else rules for every possible symptom combination, you describe what matters to the AI. It reads the context and makes an informed call.\nWhen a pet arrives with \"coughing, lethargy, loss of appetite\" - the AI evaluates these symptoms together and decides if treatment is needed. No hardcoded rules. Just intelligent analysis of the situation.\nCreating Your First Agentic Step\nLet's start with a content generation agentic step that automatically enriches pet profiles when they're created.\nStep 1: Set Up Pet Creation to Emit Events\nFirst, update your pet creation endpoint to emit events that will trigger the agentic step.\nView on GitHub:\nTypeScript\nPython\nJavaScript\nimport{ ApiRouteConfig, Handlers }from'motia'import{ z }from'zod'import{ TSStore }from'./ts-store'constcreatePetSchema=z.object({name: z.string().min(1,'Name is required').trim(),species: z.enum(['dog','cat','bird','other']),ageMonths: z.number().int().min(0,'Age must be a positive number')})exportconstconfig:ApiRouteConfig={type:'api',name:'TsCreatePet',path:'/ts/pets',method:'POST',emits: ['ts.pet.created','ts.feeding.reminder.enqueued'],flows: ['TsPetManagement']}exportconsthandler:Handlers['TsCreatePet']=async(req, {emit,logger})=>{try{constvalidatedData=createPetSchema.parse(req.body)constpet=TSStore.create({name: validatedData.name,species: validatedData.species,ageMonths: validatedData.ageMonths})if(logger) {logger.info('\ud83d\udc3e Pet created', { petId: pet.id, name: pet.name, species: pet.species, status: pet.status })}if(emit) {await(emitasany)({topic:'ts.pet.created',data: { petId: pet.id, event:'pet.created', name: pet.name, species: validatedData.species }})await(emitasany)({topic:'ts.feeding.reminder.enqueued',data: { petId: pet.id"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 3)",
    "text": ": { petId: pet.id, event:'pet.created', name: pet.name, species: validatedData.species }})await(emitasany)({topic:'ts.feeding.reminder.enqueued',data: { petId: pet.id, enqueuedAt: Date.now() }})}return{ status:201, body: pet }}catch(error) {if(errorinstanceofz.ZodError) {return{status:400,body: {message:'Validation error',errors: error.errors}}}return{status:500,body: { message:'Internal server error'}}}}\nimport{ ApiRouteConfig, Handlers }from'motia'import{ z }from'zod'import{ TSStore }from'./ts-store'constcreatePetSchema=z.object({name: z.string().min(1,'Name is required').trim(),species: z.enum(['dog','cat','bird','other']),ageMonths: z.number().int().min(0,'Age must be a positive number')})exportconstconfig:ApiRouteConfig={type:'api',name:'TsCreatePet',path:'/ts/pets',method:'POST',emits: ['ts.pet.created','ts.feeding.reminder.enqueued'],flows: ['TsPetManagement']}exportconsthandler:Handlers['TsCreatePet']=async(req, {emit,logger})=>{try{constvalidatedData=createPetSchema.parse(req.body)constpet=TSStore.create({name: validatedData.name,species: validatedData.species,ageMonths: validatedData.ageMonths})if(logger) {logger.info('\ud83d\udc3e Pet created', { petId: pet.id, name: pet.name, species: pet.species, status: pet.status })}if(emit) {await(emitasany)({topic:'ts.pet.created',data: { petId: pet.id, event:'pet.created', name: pet.name, species: validatedData.species }})await(emitasany)({topic:'ts.feeding.reminder.enqueued',data: { petId: pet.id, enqueuedAt: Date.now() }})}return{ status:201, body: pet }}catch(error) {if(errorinstanceofz.ZodError) {return{status:400,body: {message:'Validation error',errors: error.errors}}}return{status:500,body: { message:'Internal server error'}}}}\nThe API endpoint now emits an event after creating a pet. The response"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 4)",
    "text": "Error) {return{status:400,body: {message:'Validation error',errors: error.errors}}}return{status:500,body: { message:'Internal server error'}}}}\nThe API endpoint now emits an event after creating a pet. The response returns immediately while the agentic step processes asynchronously in the background.\nStep 2: Create the AI Profile Enrichment Agentic Step\nNow let's create the agentic step that listens for new pets and enriches their profiles with AI-generated content.\nView on GitHub:\nTypeScript\nPython\nJavaScript\n// steps/typescript/ai-profile-enrichment.step.tsimport{ EventConfig, Handlers }from'motia';import{ TSStore, PetProfile }from'./ts-store';exportconstconfig={type:'event',name:'TsAiProfileEnrichment',description:'Agentic step that enriches pet profiles using OpenAI',subscribes: ['ts.pet.created'],emits: [],flows: ['TsPetManagement']};exportconsthandler:Handlers['TsAiProfileEnrichment']=async(input, {logger})=>{const{petId,name,species}=input;if(logger) {logger.info('\ud83e\udd16 AI Profile Enrichment started', { petId, name, species });}try{constapiKey=process.env.OPENAI_API_KEY;if(!apiKey) {thrownewError('OPENAI_API_KEY environment variable is not set');}constprompt=`Generate a pet profile for adoption purposes. Pet details:- Name: ${name}- Species: ${species}Please provide a JSON response with these fields:- bio: A warm, engaging 2-3 sentence description that would appeal to potential adopters- breedGuess: Your best guess at the breed or breed mix (be specific but realistic)- temperamentTags: An array of 3-5 personality traits (e.g., \"friendly\", \"energetic\", \"calm\")- adopterHints: Practical advice for potential adopters (family type, living situation, care needs)Keep it positive, realistic, and adoption-focused.`;constresponse=awaitfetch('https://api.openai.com/v1/chat/completions', {method:'POST',headers: {'Authorization':`Bearer ${apiKey}`,'Content-Type':'application/json',},body:JSON.stringify({model:'gpt-3.5-turbo',messages: [{role:'system',content:'You are a pet adoption specialist who creates compelling, accurate pet profiles"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 5)",
    "text": " ${apiKey}`,'Content-Type':'application/json',},body:JSON.stringify({model:'gpt-3.5-turbo',messages: [{role:'system',content:'You are a pet adoption specialist who creates compelling, accurate pet profiles. Always respond with valid JSON only.'},{role:'user',content: prompt}],max_tokens:500,temperature:0.7,}),});if(!response.ok) {thrownewError(`OpenAI API error: ${response.status} ${response.statusText}`);}constdata=awaitresponse.json();constaiResponse=data.choices[0]?.message?.content;if(!aiResponse) {thrownewError('No response from OpenAI API');}letprofile:PetProfile;try{profile=JSON.parse(aiResponse);}catch(parseError) {profile={bio:`${name} is a wonderful ${species} looking for a loving home. This pet has a unique personality and would make a great companion.`,breedGuess: species==='dog'?'Mixed Breed':species==='cat'?'Domestic Shorthair':'Mixed Breed',temperamentTags: ['friendly','loving','loyal'],adopterHints:`${name} would do well in a caring home with patience and love.`};if(logger) {logger.warn('\u26a0\ufe0f AI response parsing failed, using fallback profile', { petId, parseError: parseErrorinstanceofError?parseError.message:String(parseError) });}}constupdatedPet=TSStore.updateProfile(petId, profile);if(!updatedPet) {thrownewError(`Pet not found: ${petId}`);}if(logger) {logger.info('\u2705 AI Profile Enrichment completed', {petId,profile: {bio: profile.bio.substring(0,50)+'...',breedGuess: profile.breedGuess,temperamentTags: profile.temperamentTags,adopterHints: profile.adopterHints.substring(0,50)+'...'}});}}catch(error:any) {if(logger) {logger.error('\u274c AI Profile Enrichment failed', {petId,error: error.message});}constfallbackProfile:PetProfile={bio:`${name} is a lovely ${species} with a unique personality, ready to find their forever home.`,breedGuess: species==='dog'?'Mixed Breed':species==='cat'?'Domestic Shorthair':'Mixed Breed',temperamentTags: ['friendly','adaptable'],"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 6)",
    "text": " a unique personality, ready to find their forever home.`,breedGuess: species==='dog'?'Mixed Breed':species==='cat'?'Domestic Shorthair':'Mixed Breed',temperamentTags: ['friendly','adaptable'],adopterHints:`${name} is looking for a patient and loving family.`};TSStore.updateProfile(petId, fallbackProfile);}};\n// steps/typescript/ai-profile-enrichment.step.tsimport{ EventConfig, Handlers }from'motia';import{ TSStore, PetProfile }from'./ts-store';exportconstconfig={type:'event',name:'TsAiProfileEnrichment',description:'Agentic step that enriches pet profiles using OpenAI',subscribes: ['ts.pet.created'],emits: [],flows: ['TsPetManagement']};exportconsthandler:Handlers['TsAiProfileEnrichment']=async(input, {logger})=>{const{petId,name,species}=input;if(logger) {logger.info('\ud83e\udd16 AI Profile Enrichment started', { petId, name, species });}try{constapiKey=process.env.OPENAI_API_KEY;if(!apiKey) {thrownewError('OPENAI_API_KEY environment variable is not set');}constprompt=`Generate a pet profile for adoption purposes. Pet details:- Name: ${name}- Species: ${species}Please provide a JSON response with these fields:- bio: A warm, engaging 2-3 sentence description that would appeal to potential adopters- breedGuess: Your best guess at the breed or breed mix (be specific but realistic)- temperamentTags: An array of 3-5 personality traits (e.g., \"friendly\", \"energetic\", \"calm\")- adopterHints: Practical advice for potential adopters (family type, living situation, care needs)Keep it positive, realistic, and adoption-focused.`;constresponse=awaitfetch('https://api.openai.com/v1/chat/completions', {method:'POST',headers: {'Authorization':`Bearer ${apiKey}`,'Content-Type':'application/json',},body:JSON.stringify({model:'gpt-3.5-turbo',messages: [{role:'system',content:'You are a pet adoption specialist who creates compelling, accurate pet profiles. Always respond with valid JSON only.'},{role:'user',content: prompt}],max_tokens:500,temperature:0.7,}),});if(!response"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 7)",
    "text": "system',content:'You are a pet adoption specialist who creates compelling, accurate pet profiles. Always respond with valid JSON only.'},{role:'user',content: prompt}],max_tokens:500,temperature:0.7,}),});if(!response.ok) {thrownewError(`OpenAI API error: ${response.status} ${response.statusText}`);}constdata=awaitresponse.json();constaiResponse=data.choices[0]?.message?.content;if(!aiResponse) {thrownewError('No response from OpenAI API');}letprofile:PetProfile;try{profile=JSON.parse(aiResponse);}catch(parseError) {profile={bio:`${name} is a wonderful ${species} looking for a loving home. This pet has a unique personality and would make a great companion.`,breedGuess: species==='dog'?'Mixed Breed':species==='cat'?'Domestic Shorthair':'Mixed Breed',temperamentTags: ['friendly','loving','loyal'],adopterHints:`${name} would do well in a caring home with patience and love.`};if(logger) {logger.warn('\u26a0\ufe0f AI response parsing failed, using fallback profile', { petId, parseError: parseErrorinstanceofError?parseError.message:String(parseError) });}}constupdatedPet=TSStore.updateProfile(petId, profile);if(!updatedPet) {thrownewError(`Pet not found: ${petId}`);}if(logger) {logger.info('\u2705 AI Profile Enrichment completed', {petId,profile: {bio: profile.bio.substring(0,50)+'...',breedGuess: profile.breedGuess,temperamentTags: profile.temperamentTags,adopterHints: profile.adopterHints.substring(0,50)+'...'}});}}catch(error:any) {if(logger) {logger.error('\u274c AI Profile Enrichment failed', {petId,error: error.message});}constfallbackProfile:PetProfile={bio:`${name} is a lovely ${species} with a unique personality, ready to find their forever home.`,breedGuess: species==='dog'?'Mixed Breed':species==='cat'?'Domestic Shorthair':'Mixed Breed',temperamentTags: ['friendly','adaptable'],adopterHints:`${name} is looking for a patient and loving family.`};TSStore.updateProfile(petId, fallbackProfile);}};\nHow This Agentic"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 8)",
    "text": "air':'Mixed Breed',temperamentTags: ['friendly','adaptable'],adopterHints:`${name} is looking for a patient and loving family.`};TSStore.updateProfile(petId, fallbackProfile);}};\nHow This Agentic Step Works\nThis is acontent generation agentic step- it enriches data without making workflow decisions:\nSubscribestopet.createdevents\npet.created\nCalls OpenAIwith a carefully crafted prompt\nParses the responseinto structured data\nUpdates the petwith AI-generated content\nHas a fallbackif the AI call fails\nThe key is the prompt engineering - we tell the AI exactly what fields we need and what tone to use. The AI returns JSON that we can parse and store directly.\nTesting Your Agentic Step\nThe best way to test your agentic step is throughWorkbench. It lets you create pets, watch the AI enrichment happen in real-time, and see all the logs in one place.\nCreate a Pet\nOpen Workbench and test the CreatePet endpoint. The AI will automatically start enriching the profile in the background.\nPrefer using curl?\ncurl-XPOSThttp://localhost:3000/ts/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Max\", \"species\": \"dog\", \"ageMonths\": 24}'\ncurl-XPOSThttp://localhost:3000/ts/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Max\", \"species\": \"dog\", \"ageMonths\": 24}'\nCheck the logs in Workbench to see the agentic step in action:\nYou'll see:\n\"Pet created\" log from the API endpoint\n\"AI Profile Enrichment started\" log\n\"AI Profile Enrichment completed\" with generated content\nView the Enriched Profile\nFetch the pet in Workbench to see the AI-generated profile, or use curl:\nUsing curl?\ncurlhttp://localhost:3000/ts/pets/1\ncurlhttp://localhost:3000/ts/pets/1\nYou'll get back something like:\nBuilding a Decision-Making Agentic Step\nNow let's create an agentic step that doesn't just generate content - it makes decisions that control the workflow. This is calledagentic routing.\nThe Health Review Agentic Step\nThis agentic step analyzes pet symptoms and decides if treatment is needed. Instead of you writing complex if-else logic, the AI evaluates the context and"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 9)",
    "text": " decisions that control the workflow. This is calledagentic routing.\nThe Health Review Agentic Step\nThis agentic step analyzes pet symptoms and decides if treatment is needed. Instead of you writing complex if-else logic, the AI evaluates the context and chooses the appropriate action.\nView on GitHub:\nTypeScript\nPython\nJavaScript\n// steps/typescript/health-review-agent.step.tsimport{ ApiRouteConfig, Handlers }from'motia';import{ TSStore }from'./ts-store';import{HEALTH_REVIEW_EMITS,buildAgentContext,callAgentDecision,getAgentArtifacts}from'./agent-decision-framework';exportconstconfig:ApiRouteConfig={type:'api',name:'TsHealthReviewAgent',path:'/ts/pets/:id/health-review',method:'POST',emits: ['ts.health.treatment_required','ts.health.no_treatment_needed'],flows: ['TsPetManagement']};exportconsthandler:Handlers['TsHealthReviewAgent']=async(req, {emit,logger})=>{constpetId=req.pathParams?.id;if(!petId) {return{ status:400, body: { message:'Pet ID is required'} };}constpet=TSStore.get(petId);if(!pet) {return{ status:404, body: { message:'Pet not found'} };}if(logger) {logger.info('\ud83c\udfe5 Health Review Agent triggered', {petId,currentStatus: pet.status,symptoms: pet.symptoms||[]});}if(!['healthy','in_quarantine','available'].includes(pet.status)) {return{status:400,body: {message:'Health review can only be performed on healthy, quarantined, or available pets',currentStatus: pet.status}};}constagentContext=buildAgentContext(pet);constrecentArtifacts=getAgentArtifacts(petId).filter(a=>a.agentType==='health-review'&&a.success&&a.inputs.currentStatus===pet.status&&(Date.now()-a.timestamp)<60000);if(recentArtifacts.length>0) {constrecent=recentArtifacts[recentArtifacts.length-1];if(logger) {logger.info('\ud83d\udd04 Idempotent health review - returning cached decision', {petId,chosenEmit: recent.parsedDecision.chosenEmit,timestamp: recent.timestamp});}return{status:200,body: {message:'Health review completed (cached)',petId,agentDecision: recent"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 10)",
    "text": " returning cached decision', {petId,chosenEmit: recent.parsedDecision.chosenEmit,timestamp: recent.timestamp});}return{status:200,body: {message:'Health review completed (cached)',petId,agentDecision: recent.parsedDecision,artifact: {timestamp: recent.timestamp,success: recent.success}}};}try{if(logger) {logger.info('\ud83d\udd0d Starting agent decision call', { petId, agentContext });}constartifact=awaitcallAgentDecision('health-review',agentContext,HEALTH_REVIEW_EMITS,logger);if(logger) {logger.info('\u2705 Agent decision call completed', { petId, success: artifact.success });}if(!artifact.success) {if(logger) {logger.warn('\u26a0\ufe0f Agent decision failed, but returning error response', {petId,error: artifact.error});}return{status:500,body: {message:'Agent decision failed',error: artifact.error,petId,suggestion:'Check OpenAI API key and try again'}};}constchosenEmitDef=HEALTH_REVIEW_EMITS.find(e=>e.id===artifact.parsedDecision.chosenEmit);if(!chosenEmitDef) {return{status:500,body: {message:'Invalid emit chosen by agent',chosenEmit: artifact.parsedDecision.chosenEmit}};}if(emit) {(emitasany)({topic: chosenEmitDef.topicas'ts.health.treatment_required'|'ts.health.no_treatment_needed',data: {petId,event: chosenEmitDef.id.replace('emit.',''),agentDecision: artifact.parsedDecision,timestamp: artifact.timestamp,context: agentContext}});if(logger) {logger.info('\u2705 Health review emit fired', {petId,chosenEmit: artifact.parsedDecision.chosenEmit,topic: chosenEmitDef.topic,rationale: artifact.parsedDecision.rationale});}}return{status:200,body: {message:'Health review completed',petId,agentDecision: artifact.parsedDecision,emitFired: chosenEmitDef.topic,artifact: {timestamp: artifact.timestamp,success: artifact.success,availableEmits: artifact.availableEmits.map(e=>e.id)}}};}catch(error:any) {if(logger) {logger.error('\u274c Health review agent error', {petId,error: error.message});}return{status:500,body: {message:'Health review failed',"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 11)",
    "text": ".map(e=>e.id)}}};}catch(error:any) {if(logger) {logger.error('\u274c Health review agent error', {petId,error: error.message});}return{status:500,body: {message:'Health review failed',error: error.message,petId}};}};\n// steps/typescript/health-review-agent.step.tsimport{ ApiRouteConfig, Handlers }from'motia';import{ TSStore }from'./ts-store';import{HEALTH_REVIEW_EMITS,buildAgentContext,callAgentDecision,getAgentArtifacts}from'./agent-decision-framework';exportconstconfig:ApiRouteConfig={type:'api',name:'TsHealthReviewAgent',path:'/ts/pets/:id/health-review',method:'POST',emits: ['ts.health.treatment_required','ts.health.no_treatment_needed'],flows: ['TsPetManagement']};exportconsthandler:Handlers['TsHealthReviewAgent']=async(req, {emit,logger})=>{constpetId=req.pathParams?.id;if(!petId) {return{ status:400, body: { message:'Pet ID is required'} };}constpet=TSStore.get(petId);if(!pet) {return{ status:404, body: { message:'Pet not found'} };}if(logger) {logger.info('\ud83c\udfe5 Health Review Agent triggered', {petId,currentStatus: pet.status,symptoms: pet.symptoms||[]});}if(!['healthy','in_quarantine','available'].includes(pet.status)) {return{status:400,body: {message:'Health review can only be performed on healthy, quarantined, or available pets',currentStatus: pet.status}};}constagentContext=buildAgentContext(pet);constrecentArtifacts=getAgentArtifacts(petId).filter(a=>a.agentType==='health-review'&&a.success&&a.inputs.currentStatus===pet.status&&(Date.now()-a.timestamp)<60000);if(recentArtifacts.length>0) {constrecent=recentArtifacts[recentArtifacts.length-1];if(logger) {logger.info('\ud83d\udd04 Idempotent health review - returning cached decision', {petId,chosenEmit: recent.parsedDecision.chosenEmit,timestamp: recent.timestamp});}return{status:200,body: {message:'Health review completed (cached)',petId,agentDecision: recent.parsedDecision,artifact:"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 12)",
    "text": "Id,chosenEmit: recent.parsedDecision.chosenEmit,timestamp: recent.timestamp});}return{status:200,body: {message:'Health review completed (cached)',petId,agentDecision: recent.parsedDecision,artifact: {timestamp: recent.timestamp,success: recent.success}}};}try{if(logger) {logger.info('\ud83d\udd0d Starting agent decision call', { petId, agentContext });}constartifact=awaitcallAgentDecision('health-review',agentContext,HEALTH_REVIEW_EMITS,logger);if(logger) {logger.info('\u2705 Agent decision call completed', { petId, success: artifact.success });}if(!artifact.success) {if(logger) {logger.warn('\u26a0\ufe0f Agent decision failed, but returning error response', {petId,error: artifact.error});}return{status:500,body: {message:'Agent decision failed',error: artifact.error,petId,suggestion:'Check OpenAI API key and try again'}};}constchosenEmitDef=HEALTH_REVIEW_EMITS.find(e=>e.id===artifact.parsedDecision.chosenEmit);if(!chosenEmitDef) {return{status:500,body: {message:'Invalid emit chosen by agent',chosenEmit: artifact.parsedDecision.chosenEmit}};}if(emit) {(emitasany)({topic: chosenEmitDef.topicas'ts.health.treatment_required'|'ts.health.no_treatment_needed',data: {petId,event: chosenEmitDef.id.replace('emit.',''),agentDecision: artifact.parsedDecision,timestamp: artifact.timestamp,context: agentContext}});if(logger) {logger.info('\u2705 Health review emit fired', {petId,chosenEmit: artifact.parsedDecision.chosenEmit,topic: chosenEmitDef.topic,rationale: artifact.parsedDecision.rationale});}}return{status:200,body: {message:'Health review completed',petId,agentDecision: artifact.parsedDecision,emitFired: chosenEmitDef.topic,artifact: {timestamp: artifact.timestamp,success: artifact.success,availableEmits: artifact.availableEmits.map(e=>e.id)}}};}catch(error:any) {if(logger) {logger.error('\u274c Health review agent error', {petId,error: error.message});}return{status:500,body: {message:'Health review failed',error: error.message,pet"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 13)",
    "text": "};}catch(error:any) {if(logger) {logger.error('\u274c Health review agent error', {petId,error: error.message});}return{status:500,body: {message:'Health review failed',error: error.message,petId}};}};\nHow Decision-Making Agentic Steps Work\nThis agentic step is fundamentally different from the enrichment agentic step:\nIt's an API Step- Staff trigger it explicitly when they need a decision\nIt defines an emits registry- Lists all possible actions the AI can choose from (inagent-decision-framework.ts/js)\nagent-decision-framework.ts/js\nIt calls the AI with context + options- The AI evaluates and picks one\nIt fires the chosen emit- This emit goes to the orchestrator, changing workflow state\nIt uses idempotency checking- Caches recent decisions to prevent duplicate AI calls\nThe framework functions (buildAgentContext,callAgentDecision,getAgentArtifacts) handle the OpenAI call and ensure the AI picks from valid options.\nbuildAgentContext\ncallAgentDecision\ngetAgentArtifacts\nTesting the Health Review Agentic Step\nThe best way to test decision-making agentic steps is throughWorkbench. You can create pets, trigger the health review, and watch the AI make decisions in real-time.\nCreate a Pet\nUse Workbench to create a pet. The AI enrichment will automatically trigger.\nPrefer using curl?\ncurl-XPOSThttp://localhost:3000/ts/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Buddy\",\"species\": \"dog\",\"ageMonths\": 36}'\ncurl-XPOSThttp://localhost:3000/ts/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Buddy\",\"species\": \"dog\",\"ageMonths\": 36}'\nTrigger the Health Review\nIn Workbench, test the health review endpoint to see the AI make a decision.\nUsing curl?\ncurl-XPOSThttp://localhost:3000/ts/pets/1/health-review\\-H\"Content-Type: application/json\"\ncurl-XPOSThttp://localhost:3000/ts/pets/1/health-review\\-H\"Content-Type: application/json\"\nYou'll get a response like:\n{\"message\":\"Health review completed\",\"petId\":\"1\",\"agentDecision\": {\"chosenEmit\":\"emit.health.treatment_required\",\"rationale\":\"The pet shows concerning symptoms including coughing, lethargy, and loss of appetite"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 14)",
    "text": " a response like:\n{\"message\":\"Health review completed\",\"petId\":\"1\",\"agentDecision\": {\"chosenEmit\":\"emit.health.treatment_required\",\"rationale\":\"The pet shows concerning symptoms including coughing, lethargy, and loss of appetite. These symptoms suggest a potential respiratory infection or illness requiring veterinary attention.\"},\"emitFired\":\"ts.health.treatment_required\",\"artifact\": {\"timestamp\":1234567890,\"success\":true,\"availableEmits\": [\"emit.health.treatment_required\",\"emit.health.no_treatment_needed\"]}}\n{\"message\":\"Health review completed\",\"petId\":\"1\",\"agentDecision\": {\"chosenEmit\":\"emit.health.treatment_required\",\"rationale\":\"The pet shows concerning symptoms including coughing, lethargy, and loss of appetite. These symptoms suggest a potential respiratory infection or illness requiring veterinary attention.\"},\"emitFired\":\"ts.health.treatment_required\",\"artifact\": {\"timestamp\":1234567890,\"success\":true,\"availableEmits\": [\"emit.health.treatment_required\",\"emit.health.no_treatment_needed\"]}}\nThe AI evaluates the pet's data and makes a decision. The emit it fires will trigger the orchestrator to handle the appropriate state transition.\nVerify the Status Change\nCheck the pet status in Workbench to see the AI's decision reflected in the workflow state.\nUsing curl?\ncurlhttp://localhost:3000/ts/pets/1\ncurlhttp://localhost:3000/ts/pets/1\nThe pet's status has automatically changed based on the AI's decision!\nConnecting Agentic Steps to the Orchestrator\nThe real power comes when your agentic steps integrate with a workflow orchestrator. The orchestrator subscribes to the events emitted by agentic steps and handles the actual state transitions.\nThe orchestrator configuration shows it subscribes to agentic step events:\nexportconstconfig={type:'event',name:'TsPetLifecycleOrchestrator',description:'Pet lifecycle state management with staff interaction points',subscribes: ['ts.feeding.reminder.completed','ts.pet.status.update.requested','ts.health.treatment_required',// From Health Review Agentic Step'ts.health.no_treatment_needed',// From Health Review Agentic Step'ts.adoption.needs_data',// From Adoption Review Agentic Step'ts.adoption.ready'// From Adoption Review Agentic Step],emits: ['ts.treatment.required','ts.adoption.ready','ts.treatment.completed'],flows: ['TsPetManagement']}// The orchestrator has"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 15)",
    "text": " Adoption Review Agentic Step'ts.adoption.ready'// From Adoption Review Agentic Step],emits: ['ts.treatment.required','ts.adoption.ready','ts.treatment.completed'],flows: ['TsPetManagement']}// The orchestrator has transition rules that handle agentic step eventsconstTRANSITION_RULES:TransitionRule[]=[// ... other rules ...// Agentic step-driven health transitions{from: [\"healthy\",\"in_quarantine\"],to:\"ill\",event:\"health.treatment_required\",description:\"Agent assessment - pet requires medical treatment\"},{from: [\"healthy\",\"in_quarantine\"],to:\"healthy\",event:\"health.no_treatment_needed\",description:\"Agent assessment - pet remains healthy\"},// Agentic step-driven adoption transitions{from: [\"healthy\"],to:\"healthy\",event:\"adoption.needs_data\",description:\"Agent assessment - pet needs additional data before adoption\",flagAction: { action:'add', flag:'needs_data'}},{from: [\"healthy\"],to:\"available\",event:\"adoption.ready\",description:\"Agent assessment - pet ready for adoption\",guards: ['no_needs_data_flag']}]\nexportconstconfig={type:'event',name:'TsPetLifecycleOrchestrator',description:'Pet lifecycle state management with staff interaction points',subscribes: ['ts.feeding.reminder.completed','ts.pet.status.update.requested','ts.health.treatment_required',// From Health Review Agentic Step'ts.health.no_treatment_needed',// From Health Review Agentic Step'ts.adoption.needs_data',// From Adoption Review Agentic Step'ts.adoption.ready'// From Adoption Review Agentic Step],emits: ['ts.treatment.required','ts.adoption.ready','ts.treatment.completed'],flows: ['TsPetManagement']}// The orchestrator has transition rules that handle agentic step eventsconstTRANSITION_RULES:TransitionRule[]=[// ... other rules ...// Agentic step-driven health transitions{from: [\"healthy\",\"in_quarantine\"],to:\"ill\",event:\"health.treatment_required\",description:\"Agent assessment - pet requires medical treatment\"},{from: [\"healthy\",\"in_quarantine\"],to:\"healthy\",event:\"health.no_treatment_needed\",description:\"Agent assessment - pet remains healthy\"},// Agentic step-driven adoption transitions{from: [\"healthy\"],to:\"healthy\",event:\"adoption.needs_data\",description:\"Agent assessment - pet needs additional data before adoption\",flagAction: { action:'"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 16)",
    "text": "Agent assessment - pet remains healthy\"},// Agentic step-driven adoption transitions{from: [\"healthy\"],to:\"healthy\",event:\"adoption.needs_data\",description:\"Agent assessment - pet needs additional data before adoption\",flagAction: { action:'add', flag:'needs_data'}},{from: [\"healthy\"],to:\"available\",event:\"adoption.ready\",description:\"Agent assessment - pet ready for adoption\",guards: ['no_needs_data_flag']}]\n\ud83c\udf89Congratulations!You've built intelligent agentic workflows that make decisions and drive workflows. Your pet shelter now has automated intelligence that would have taken hundreds of lines of complex logic to implement manually.\nWhat's Next?\nYour pet shelter now has intelligent agentic workflows making decisions! But how do you give users real-time feedback while all this AI processing happens in the background?\nIn the final guide, we'll addReal-Time Streamingto provide live updates as your workflows execute:\nStream Configuration- Define stream schemas for type-safe updates\nAPI with Streaming- Initialize streams and return immediately to clients\nBackground Job Streaming- Push real-time progress updates as jobs process\nAgentic Step Streaming- Stream AI enrichment progress in real-time\nMulti-Step Streaming- Multiple steps updating the same stream\nLet's complete your system by adding real-time streaming capabilities!\nExplore more examples in theMotia Examples Repository.\nWorkflows\nLearn how to build automated workflows that manage complex business logic with Motia\nReal-Time Streaming\nLearn how to add real-time streaming updates to your Motia workflows\nOn this page"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 1)",
    "text": "Real-Time Streaming\nLearn how to add real-time streaming updates to your Motia workflows\nWhat You'll Build\nA pet management system with real-time streaming that provides live updates to clients:\nStream Configuration- Define stream schemas for type-safe updates\nAPI with Streaming- APIs that initialize streams and return immediately\nBackground Job Streaming- Jobs that push real-time progress updates\nAgentic Step Streaming- AI enrichment with live progress updates\nMulti-Step Streaming- Multiple steps updating the same stream\nGetting Started\nClone the example repository:\ngitclonehttps://github.com/MotiaDev/build-your-first-app.gitcdbuild-your-first-appgitcheckoutstream-ai-agents\ngitclonehttps://github.com/MotiaDev/build-your-first-app.gitcdbuild-your-first-appgitcheckoutstream-ai-agents\nInstall dependencies:\nnpminstall\nnpminstall\nSet up your OpenAI API key in.env:\n.env\nOPENAI_API_KEY=your_api_key_here\nOPENAI_API_KEY=your_api_key_here\nStart the Workbench:\nnpmrundev\nnpmrundev\nYour Workbench will be available athttp://localhost:3000.\nhttp://localhost:3000\nProject Structure\nFiles likefeatures.jsonandtutorial.tsxare only for the interactive tutorial and are not part of Motia's project structure.\nfeatures.json\ntutorial.tsx\nAll code examples in this guide are available in thebuild-your-first-apprepository.\nYou can follow this guide to learn how to build real-time streaming with Motia step by step, or you can clone the repository and dive into our Interactive Tutorial to learn by doing directly in the Workbench.\nUnderstanding Real-Time Streaming\nYou've built APIs that return immediately, background jobs that process asynchronously, workflows that orchestrate complex logic, and agentic workflows that make intelligent decisions. But how do you give users real-time feedback while all this async processing happens in the background?\nThat's wherestreamingcomes in. Motia provides streams as part of the context in any step handler - you can use them anywhere in your code. Streams use Server-Sent Events (SSE) to push live updates directly to clients as your workflow progresses.\nIn our pet shelter example:\nThe API initializes a stream and returns immediately with a stream ID\nBackground jobs push updates as they process (quarantine entry, health checks)\nAgentic steps stream enrichment progress (bio generation, breed analysis)\nClients get live feedback throughout the entire workflow"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 2)",
    "text": "The API initializes a stream and returns immediately with a stream ID\nBackground jobs push updates as they process (quarantine entry, health checks)\nAgentic steps stream enrichment progress (bio generation, breed analysis)\nClients get live feedback throughout the entire workflow\nThe power is in the simplicity -streamsis available in your handler's context, just likeemit,logger, andstate. Any step can update any stream, creating a unified real-time experience without complex orchestration.\nstreams\nemit\nlogger\nstate\nCreating Your First Stream\nStep 1: Define the Stream Configuration\nFirst, define a stream configuration file. This makes the stream available in thecontext.streamsobject for all your step handlers.\ncontext.streams\nView on GitHub:\nTypeScript\nPython\nJavaScript\nimport{ StreamConfig }from'motia'import{ z }from'zod'exportconstconfig:StreamConfig={/*** This will be available as context.streams.petCreation in the FlowContext*/name:'petCreation',/*** Schema defines the structure of stream updates*/schema: z.object({message: z.string()}),/*** Use default storage for the stream*/baseConfig: {storageType:'default',},}\nimport{ StreamConfig }from'motia'import{ z }from'zod'exportconstconfig:StreamConfig={/*** This will be available as context.streams.petCreation in the FlowContext*/name:'petCreation',/*** Schema defines the structure of stream updates*/schema: z.object({message: z.string()}),/*** Use default storage for the stream*/baseConfig: {storageType:'default',},}\nHow Stream Configuration Works\nStream configuration is simple:\nname- Identifier for accessing the stream (e.g.,context.streams.petCreation)\ncontext.streams.petCreation\nschema- Zod schema defining what data can be pushed to the stream\nbaseConfig- Storage settings (default uses in-memory storage)\nOnce you create this configuration file, the stream is automatically available asstreams.petCreationin the context of any step handler. It's just likeemit,logger, orstate- part of the tools available in your handler.\nstreams.petCreation\nemit\nlogger\nstate\nStep 2: Initialize Streams from APIs\nNow let's update the pet creation API to initialize a stream and return it immediately to the client.\nView on GitHub:\nTypeScript\nPython\nJavaScript\n// steps/typescript/create-pet.step.tsimport{ ApiRouteConfig, Handlers }from"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 3)",
    "text": "\nNow let's update the pet creation API to initialize a stream and return it immediately to the client.\nView on GitHub:\nTypeScript\nPython\nJavaScript\n// steps/typescript/create-pet.step.tsimport{ ApiRouteConfig, Handlers }from'motia';import{ z }from'zod';import{ TSStore }from'./ts-store';constcreatePetSchema=z.object({name: z.string().min(1,'Name is required').trim(),species: z.enum(['dog','cat','bird','other']),ageMonths: z.number().int().min(0,'Age must be a positive number'),weightKg: z.number().positive().optional(),symptoms: z.array(z.string()).optional()});exportconstconfig:ApiRouteConfig={type:'api',name:'TsCreatePet',path:'/ts/pets',method:'POST',emits: ['ts.pet.created','ts.feeding.reminder.enqueued'],flows: ['TsPetManagement']};exportconsthandler:Handlers['TsCreatePet']=async(req, {emit,logger,streams,traceId})=>{try{constvalidatedData=createPetSchema.parse(req.body);constpet=TSStore.create({name: validatedData.name,species: validatedData.species,ageMonths: validatedData.ageMonths,weightKg: validatedData.weightKg,symptoms: validatedData.symptoms});if(logger) {logger.info('\ud83d\udc3e Pet created', { petId: pet.id, name: pet.name, species: pet.species, status: pet.status });}// Create & return the initial stream record (following working pattern)constresult=awaitstreams.petCreation.set(traceId,'message', {message:`Pet ${pet.name} (ID: ${pet.id}) created successfully - Species: ${pet.species}, Age: ${pet.ageMonths} months, Status: ${pet.status}`});if(emit) {awaitemit({topic:'ts.pet.created',data: { petId: pet.id, event:'pet.created', name: pet.name, species: validatedData.species, traceId }}asany);awaitemit({topic:'ts.feeding.reminder.enqueued',data: { petId: pet.id, enqueuedAt: Date.now(), traceId }}asany);}return{status:201,body: result};}catch(error) {if(errorinstanceofz.ZodError) {return{status:400,body: {message:'"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 4)",
    "text": " pet.id, enqueuedAt: Date.now(), traceId }}asany);}return{status:201,body: result};}catch(error) {if(errorinstanceofz.ZodError) {return{status:400,body: {message:'Validation error',errors: error.errors}};}return{status:500,body: { message:'Internal server error'}};}};\n// steps/typescript/create-pet.step.tsimport{ ApiRouteConfig, Handlers }from'motia';import{ z }from'zod';import{ TSStore }from'./ts-store';constcreatePetSchema=z.object({name: z.string().min(1,'Name is required').trim(),species: z.enum(['dog','cat','bird','other']),ageMonths: z.number().int().min(0,'Age must be a positive number'),weightKg: z.number().positive().optional(),symptoms: z.array(z.string()).optional()});exportconstconfig:ApiRouteConfig={type:'api',name:'TsCreatePet',path:'/ts/pets',method:'POST',emits: ['ts.pet.created','ts.feeding.reminder.enqueued'],flows: ['TsPetManagement']};exportconsthandler:Handlers['TsCreatePet']=async(req, {emit,logger,streams,traceId})=>{try{constvalidatedData=createPetSchema.parse(req.body);constpet=TSStore.create({name: validatedData.name,species: validatedData.species,ageMonths: validatedData.ageMonths,weightKg: validatedData.weightKg,symptoms: validatedData.symptoms});if(logger) {logger.info('\ud83d\udc3e Pet created', { petId: pet.id, name: pet.name, species: pet.species, status: pet.status });}// Create & return the initial stream record (following working pattern)constresult=awaitstreams.petCreation.set(traceId,'message', {message:`Pet ${pet.name} (ID: ${pet.id}) created successfully - Species: ${pet.species}, Age: ${pet.ageMonths} months, Status: ${pet.status}`});if(emit) {awaitemit({topic:'ts.pet.created',data: { petId: pet.id, event:'pet.created', name: pet.name, species: validatedData.species, traceId }}asany);awaitemit({topic:'ts.feeding.reminder.enqueued',data: { petId: pet.id, enqueuedAt:"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 5)",
    "text": ", event:'pet.created', name: pet.name, species: validatedData.species, traceId }}asany);awaitemit({topic:'ts.feeding.reminder.enqueued',data: { petId: pet.id, enqueuedAt: Date.now(), traceId }}asany);}return{status:201,body: result};}catch(error) {if(errorinstanceofz.ZodError) {return{status:400,body: {message:'Validation error',errors: error.errors}};}return{status:500,body: { message:'Internal server error'}};}};\nHow API Stream Initialization Works\nThe key changes from a regular API:\nAccess streams from context-streamsis available in the FlowContext\nstreams\nCreate initial stream message-await streams.petCreation.set(traceId, 'message', data)\nawait streams.petCreation.set(traceId, 'message', data)\nReturn the stream result- Contains stream ID and initial message\nBackground jobs update the same stream- Using the same traceId\nThe API returns immediately with a stream ID. Clients can connect to this stream via SSE to receive real-time updates as background jobs process.\nStep 3: Stream Updates from Background Jobs\nNow let's update the feeding reminder job to push real-time updates to the stream as it processes.\nView on GitHub:\nTypeScript\nPython\nJavaScript\n// steps/typescript/set-next-feeding-reminder.job.step.tsimport{ EventConfig, Handlers }from'motia';import{ TSStore }from'./ts-store';exportconstconfig={type:'event',name:'TsSetNextFeedingReminder',description:'Background job that sets next feeding reminder and adds welcome notes',subscribes: ['ts.feeding.reminder.enqueued'],emits: ['ts.feeding.reminder.completed'],flows: ['TsPetManagement']};exportconsthandler:Handlers['TsSetNextFeedingReminder']=async(input, {emit,logger,streams,traceId})=>{const{petId,enqueuedAt}=input;if(logger) {logger.info('\ud83d\udd04 Setting next feeding reminder', { petId, enqueuedAt });}try{// Calculate next feeding time (24 hours from now)constnextFeedingAt=Date.now()+(24*60*60*1000);// Fill in non-critical details and change status to in_quarantineconstupdates={notes:'Welcome to our pet store! We\\'ll take great care of this pet.',nextFeedingAt: nextFe"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 6)",
    "text": "*60*60*1000);// Fill in non-critical details and change status to in_quarantineconstupdates={notes:'Welcome to our pet store! We\\'ll take great care of this pet.',nextFeedingAt: nextFeedingAt,status:'in_quarantine'asconst};constupdatedPet=TSStore.update(petId, updates);if(!updatedPet) {if(logger) {logger.error('\u274c Failed to set feeding reminder - pet not found', { petId });}return;}if(logger) {logger.info('\u2705 Next feeding reminder set', {petId,notes: updatedPet.notes?.substring(0,50)+'...',nextFeedingAt:newDate(nextFeedingAt).toISOString()});}// Stream status updates using the simple patternif(streams?.petCreation&&traceId) {awaitstreams.petCreation.set(traceId,'message', {message:`Pet ${updatedPet.name} entered quarantine period`});// Check symptoms and stream appropriate updatesif(!updatedPet.symptoms||updatedPet.symptoms.length===0) {awaitnewPromise(resolve=>setTimeout(resolve,1000));awaitstreams.petCreation.set(traceId,'message', {message:`Health check passed for ${updatedPet.name} - no symptoms found`});awaitnewPromise(resolve=>setTimeout(resolve,1000));awaitstreams.petCreation.set(traceId,'message', {message:`${updatedPet.name} is healthy and ready for adoption! \u2705`});}else{awaitnewPromise(resolve=>setTimeout(resolve,1000));awaitstreams.petCreation.set(traceId,'message', {message:`Health check failed for ${updatedPet.name} - symptoms detected: ${updatedPet.symptoms.join(', ')}`});awaitnewPromise(resolve=>setTimeout(resolve,1000));awaitstreams.petCreation.set(traceId,'message', {message:`${updatedPet.name} needs medical treatment \u274c`});}}if(emit) {(emitasany)({topic:'ts.feeding.reminder.completed',data: {petId,event:'feeding.reminder.completed',completedAt: Date.now(),processingTimeMs: Date.now()-enqueuedAt}});}}catch(error:any) {if(logger) {logger.error('\u274c Feeding reminder job error', { petId, error: error.message });}}};\n// steps/typescript/set-next-feeding-reminder.job.step.tsimport{ EventConfig, Handlers }from'motia';import{ TSStore }from'./ts-store';"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 7)",
    "text": " job error', { petId, error: error.message });}}};\n// steps/typescript/set-next-feeding-reminder.job.step.tsimport{ EventConfig, Handlers }from'motia';import{ TSStore }from'./ts-store';exportconstconfig={type:'event',name:'TsSetNextFeedingReminder',description:'Background job that sets next feeding reminder and adds welcome notes',subscribes: ['ts.feeding.reminder.enqueued'],emits: ['ts.feeding.reminder.completed'],flows: ['TsPetManagement']};exportconsthandler:Handlers['TsSetNextFeedingReminder']=async(input, {emit,logger,streams,traceId})=>{const{petId,enqueuedAt}=input;if(logger) {logger.info('\ud83d\udd04 Setting next feeding reminder', { petId, enqueuedAt });}try{// Calculate next feeding time (24 hours from now)constnextFeedingAt=Date.now()+(24*60*60*1000);// Fill in non-critical details and change status to in_quarantineconstupdates={notes:'Welcome to our pet store! We\\'ll take great care of this pet.',nextFeedingAt: nextFeedingAt,status:'in_quarantine'asconst};constupdatedPet=TSStore.update(petId, updates);if(!updatedPet) {if(logger) {logger.error('\u274c Failed to set feeding reminder - pet not found', { petId });}return;}if(logger) {logger.info('\u2705 Next feeding reminder set', {petId,notes: updatedPet.notes?.substring(0,50)+'...',nextFeedingAt:newDate(nextFeedingAt).toISOString()});}// Stream status updates using the simple patternif(streams?.petCreation&&traceId) {awaitstreams.petCreation.set(traceId,'message', {message:`Pet ${updatedPet.name} entered quarantine period`});// Check symptoms and stream appropriate updatesif(!updatedPet.symptoms||updatedPet.symptoms.length===0) {awaitnewPromise(resolve=>setTimeout(resolve,1000));awaitstreams.petCreation.set(traceId,'message', {message:`Health check passed for ${updatedPet.name} - no symptoms found`});awaitnewPromise(resolve=>setTimeout(resolve,1000));awaitstreams.petCreation.set(traceId,'message', {message:`${updatedPet.name} is healthy and ready for adoption! \u2705`});}else{awaitnewPromise(resolve=>setTimeout"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 8)",
    "text": "});awaitnewPromise(resolve=>setTimeout(resolve,1000));awaitstreams.petCreation.set(traceId,'message', {message:`${updatedPet.name} is healthy and ready for adoption! \u2705`});}else{awaitnewPromise(resolve=>setTimeout(resolve,1000));awaitstreams.petCreation.set(traceId,'message', {message:`Health check failed for ${updatedPet.name} - symptoms detected: ${updatedPet.symptoms.join(', ')}`});awaitnewPromise(resolve=>setTimeout(resolve,1000));awaitstreams.petCreation.set(traceId,'message', {message:`${updatedPet.name} needs medical treatment \u274c`});}}if(emit) {(emitasany)({topic:'ts.feeding.reminder.completed',data: {petId,event:'feeding.reminder.completed',completedAt: Date.now(),processingTimeMs: Date.now()-enqueuedAt}});}}catch(error:any) {if(logger) {logger.error('\u274c Feeding reminder job error', { petId, error: error.message });}}};\nHow Background Job Streaming Works\nBackground jobs can push multiple updates to a stream:\nAccess the stream-streams.petCreationis available in context\nstreams.petCreation\nPush updates-await streams.petCreation.set(traceId, 'message', data)\nawait streams.petCreation.set(traceId, 'message', data)\nUse the same traceId- Links updates to the original API request\nSend multiple updates- Eachset()call sends immediately to connected clients\nset()\nThe background job processes asynchronously, pushing updates at each stage. Clients connected to the stream receive these updates in real-time via SSE.\nStep 4: Agentic Step Streaming\nAgentic steps can also stream progress updates as they generate content. This provides live feedback during potentially long-running AI operations.\nView on GitHub:\nTypeScript\nPython\nJavaScript\n// steps/typescript/ai-profile-enrichment.step.tsimport{ EventConfig, Handlers }from'motia';import{ TSStore, PetProfile }from'./ts-store';exportconstconfig={type:'event',name:'TsAiProfileEnrichment',description:'Agentic step that enriches pet profiles using OpenAI',subscribes: ['ts.pet.created'],emits: [],flows: ['TsPetManagement']};exportconsthandler:Handlers['TsAiProfileEnrichment']=async(input, {logger,streams,traceId})=>{const{petId,name,species}=input;if(logger) {logger.info"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 9)",
    "text": " [],flows: ['TsPetManagement']};exportconsthandler:Handlers['TsAiProfileEnrichment']=async(input, {logger,streams,traceId})=>{const{petId,name,species}=input;if(logger) {logger.info('\ud83e\udd16 AI Profile Enrichment started', { petId, name, species });}// Stream enrichment started eventif(streams&&traceId) {await(streamsasany).petCreation.set(traceId,'enrichment_started', {message:`AI enrichment started for ${name}`}asany);}try{constapiKey=process.env.OPENAI_API_KEY;if(!apiKey) {thrownewError('OPENAI_API_KEY environment variable is not set');}constprompt=`Generate a pet profile for adoption purposes. Pet details:- Name: ${name}- Species: ${species}Please provide a JSON response with these fields:- bio: A warm, engaging 2-3 sentence description that would appeal to potential adopters- breedGuess: Your best guess at the breed or breed mix (be specific but realistic)- temperamentTags: An array of 3-5 personality traits (e.g., \"friendly\", \"energetic\", \"calm\")- adopterHints: Practical advice for potential adopters (family type, living situation, care needs)Keep it positive, realistic, and adoption-focused.`;constenrichmentFields=['bio','breedGuess','temperamentTags','adopterHints'];constenrichedProfile:any={};constresponse=awaitfetch('https://api.openai.com/v1/chat/completions', {method:'POST',headers: {'Authorization':`Bearer ${apiKey}`,'Content-Type':'application/json',},body:JSON.stringify({model:'gpt-3.5-turbo',messages: [{role:'system',content:'You are a pet adoption specialist who creates compelling, accurate pet profiles. Always respond with valid JSON only.'},{role:'user',content: prompt}],max_tokens:500,temperature:0.7,}),});if(!response.ok) {thrownewError(`OpenAI API error: ${response.status} ${response.statusText}`);}constdata=awaitresponse.json();constaiResponse=data.choices[0]?.message?.content;if(!aiResponse) {thrownewError('No response from OpenAI API');}letprofile:PetProfile;try{profile=JSON.parse(aiResponse);}catch(parseError) {profile={bio:`${name}"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 10)",
    "text": "0]?.message?.content;if(!aiResponse) {thrownewError('No response from OpenAI API');}letprofile:PetProfile;try{profile=JSON.parse(aiResponse);}catch(parseError) {profile={bio:`${name} is a wonderful ${species} looking for a loving home. This pet has a unique personality and would make a great companion.`,breedGuess: species==='dog'?'Mixed Breed':species==='cat'?'Domestic Shorthair':'Mixed Breed',temperamentTags: ['friendly','loving','loyal'],adopterHints:`${name} would do well in a caring home with patience and love.`};if(logger) {logger.warn('\u26a0\ufe0f AI response parsing failed, using fallback profile', { petId, parseError: parseErrorinstanceofError?parseError.message:String(parseError) });}}constupdatedPet=TSStore.updateProfile(petId, profile);if(!updatedPet) {thrownewError(`Pet not found: ${petId}`);}if(logger) {logger.info('\u2705 AI Profile Enrichment completed', {petId,profile: {bio: profile.bio.substring(0,50)+'...',breedGuess: profile.breedGuess,temperamentTags: profile.temperamentTags,adopterHints: profile.adopterHints.substring(0,50)+'...'}});}// Stream each field as it's processedfor(constfieldofenrichmentFields) {awaitnewPromise(resolve=>setTimeout(resolve,300));constvalue=profile[fieldaskeyofPetProfile];if(streams&&traceId) {await(streamsasany).petCreation.set(traceId,`progress_${field}`, {message:`Generated ${field} for ${name}`}asany);}}// Stream enrichment completed eventif(streams&&traceId) {await(streamsasany).petCreation.set(traceId,'completed', {message:`AI enrichment completed for ${name}`}asany);}}catch(error:any) {if(logger) {logger.error('\u274c AI Profile Enrichment failed', {petId,error: error.message});}constfallbackProfile:PetProfile={bio:`${name} is a lovely ${species} with a unique personality, ready to find their forever home.`,breedGuess: species==='dog'?'Mixed Breed':species==='cat'?'Domestic Shorthair':'Mixed Breed',temperamentTags: ['friendly','adap"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 11)",
    "text": "} with a unique personality, ready to find their forever home.`,breedGuess: species==='dog'?'Mixed Breed':species==='cat'?'Domestic Shorthair':'Mixed Breed',temperamentTags: ['friendly','adaptable'],adopterHints:`${name} is looking for a patient and loving family.`};TSStore.updateProfile(petId, fallbackProfile);// Stream fallback profile completionif(streams&&traceId) {await(streamsasany).petCreation.set(traceId,'completed', {message:`AI enrichment completed with fallback profile for ${name}`}asany);}}};\n// steps/typescript/ai-profile-enrichment.step.tsimport{ EventConfig, Handlers }from'motia';import{ TSStore, PetProfile }from'./ts-store';exportconstconfig={type:'event',name:'TsAiProfileEnrichment',description:'Agentic step that enriches pet profiles using OpenAI',subscribes: ['ts.pet.created'],emits: [],flows: ['TsPetManagement']};exportconsthandler:Handlers['TsAiProfileEnrichment']=async(input, {logger,streams,traceId})=>{const{petId,name,species}=input;if(logger) {logger.info('\ud83e\udd16 AI Profile Enrichment started', { petId, name, species });}// Stream enrichment started eventif(streams&&traceId) {await(streamsasany).petCreation.set(traceId,'enrichment_started', {message:`AI enrichment started for ${name}`}asany);}try{constapiKey=process.env.OPENAI_API_KEY;if(!apiKey) {thrownewError('OPENAI_API_KEY environment variable is not set');}constprompt=`Generate a pet profile for adoption purposes. Pet details:- Name: ${name}- Species: ${species}Please provide a JSON response with these fields:- bio: A warm, engaging 2-3 sentence description that would appeal to potential adopters- breedGuess: Your best guess at the breed or breed mix (be specific but realistic)- temperamentTags: An array of 3-5 personality traits (e.g., \"friendly\", \"energetic\", \"calm\")- adopterHints: Practical advice for potential adopters (family type, living situation, care needs)Keep it positive, realistic, and adoption-focused.`;constenrichmentFields=['bio','breedGuess','temperamentTags','adopterHints'];const"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 12)",
    "text": ": Practical advice for potential adopters (family type, living situation, care needs)Keep it positive, realistic, and adoption-focused.`;constenrichmentFields=['bio','breedGuess','temperamentTags','adopterHints'];constenrichedProfile:any={};constresponse=awaitfetch('https://api.openai.com/v1/chat/completions', {method:'POST',headers: {'Authorization':`Bearer ${apiKey}`,'Content-Type':'application/json',},body:JSON.stringify({model:'gpt-3.5-turbo',messages: [{role:'system',content:'You are a pet adoption specialist who creates compelling, accurate pet profiles. Always respond with valid JSON only.'},{role:'user',content: prompt}],max_tokens:500,temperature:0.7,}),});if(!response.ok) {thrownewError(`OpenAI API error: ${response.status} ${response.statusText}`);}constdata=awaitresponse.json();constaiResponse=data.choices[0]?.message?.content;if(!aiResponse) {thrownewError('No response from OpenAI API');}letprofile:PetProfile;try{profile=JSON.parse(aiResponse);}catch(parseError) {profile={bio:`${name} is a wonderful ${species} looking for a loving home. This pet has a unique personality and would make a great companion.`,breedGuess: species==='dog'?'Mixed Breed':species==='cat'?'Domestic Shorthair':'Mixed Breed',temperamentTags: ['friendly','loving','loyal'],adopterHints:`${name} would do well in a caring home with patience and love.`};if(logger) {logger.warn('\u26a0\ufe0f AI response parsing failed, using fallback profile', { petId, parseError: parseErrorinstanceofError?parseError.message:String(parseError) });}}constupdatedPet=TSStore.updateProfile(petId, profile);if(!updatedPet) {thrownewError(`Pet not found: ${petId}`);}if(logger) {logger.info('\u2705 AI Profile Enrichment completed', {petId,profile: {bio: profile.bio.substring(0,50)+'...',breedGuess: profile.breedGuess,temperamentTags: profile.temperamentTags,adopterHints: profile.adopterHints.substring(0,50)+'...'}});}// Stream each field as it's processedfor(constfieldof"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 13)",
    "text": "breedGuess: profile.breedGuess,temperamentTags: profile.temperamentTags,adopterHints: profile.adopterHints.substring(0,50)+'...'}});}// Stream each field as it's processedfor(constfieldofenrichmentFields) {awaitnewPromise(resolve=>setTimeout(resolve,300));constvalue=profile[fieldaskeyofPetProfile];if(streams&&traceId) {await(streamsasany).petCreation.set(traceId,`progress_${field}`, {message:`Generated ${field} for ${name}`}asany);}}// Stream enrichment completed eventif(streams&&traceId) {await(streamsasany).petCreation.set(traceId,'completed', {message:`AI enrichment completed for ${name}`}asany);}}catch(error:any) {if(logger) {logger.error('\u274c AI Profile Enrichment failed', {petId,error: error.message});}constfallbackProfile:PetProfile={bio:`${name} is a lovely ${species} with a unique personality, ready to find their forever home.`,breedGuess: species==='dog'?'Mixed Breed':species==='cat'?'Domestic Shorthair':'Mixed Breed',temperamentTags: ['friendly','adaptable'],adopterHints:`${name} is looking for a patient and loving family.`};TSStore.updateProfile(petId, fallbackProfile);// Stream fallback profile completionif(streams&&traceId) {await(streamsasany).petCreation.set(traceId,'completed', {message:`AI enrichment completed with fallback profile for ${name}`}asany);}}};\nHow Agentic Step Streaming Works\nAgentic steps stream progress as they work:\nStream start notification- Let users know AI processing has begun\nProgress updates- Stream each stage of generation (bio, breed, temperament, etc.)\nStream completion- Notify when AI processing is done\nError streaming- Stream errors gracefully with fallback messages\nThis transforms a potentially slow AI operation into an engaging real-time experience.\nTesting Streaming in Action\nThe best way to test streams is throughWorkbench.\nTest 1: Create a Pet with Streaming\nOpen Workbench and navigate to the Endpoints section, then test the Pet Creation endpoint:\nPrefer using curl?\ncurl-XPOSThttp://localhost:3000/ts/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Max\",\"species\": \"dog\",\"ageMonths\": 24,\"symptoms"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 14)",
    "text": " endpoint:\nPrefer using curl?\ncurl-XPOSThttp://localhost:3000/ts/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Max\",\"species\": \"dog\",\"ageMonths\": 24,\"symptoms\": [\"coughing\"]}'\ncurl-XPOSThttp://localhost:3000/ts/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Max\",\"species\": \"dog\",\"ageMonths\": 24,\"symptoms\": [\"coughing\"]}'\nYou'll get an immediate response with the stream result. The API returns right away while background jobs process asynchronously.\nTest 2: Monitor Stream Updates in Workbench\nAfter creating a pet, check the Tracing view in Workbench:\nAutomatically switched to theTracingtab so you can see the stream updates in real-time\nClick on the most recent trace\nWatch the timeline as steps execute\nSee stream updates appear in real-time in the timeline\nYou'll observe:\nPet creation completes immediately\nFeeding reminder job streams quarantine updates\nAI enrichment streams progress updates\nAll updates visible in the trace timeline\nTest 3: Create Pet with Symptoms\nTest the conditional streaming logic by creating a pet with symptoms:\ncurl-XPOSThttp://localhost:3000/ts/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Luna\",\"species\": \"cat\",\"ageMonths\": 18,\"symptoms\": [\"sneezing\", \"watery eyes\"]}'\ncurl-XPOSThttp://localhost:3000/ts/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Luna\",\"species\": \"cat\",\"ageMonths\": 18,\"symptoms\": [\"sneezing\", \"watery eyes\"]}'\nWatch the logs to see different stream messages based on the symptoms detected.\nTest 4: Create Pet Without Symptoms\nCompare the streaming behavior with a healthy pet:\ncurl-XPOSThttp://localhost:3000/ts/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Buddy\",\"species\": \"dog\",\"ageMonths\": 12}'\ncurl-XPOSThttp://localhost:3000/ts/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Buddy\",\"species\": \"dog\",\"ageMonths\": 12}'\nThe stream will show health check passed messages instead of treatment needed messages.\nObserving Stream Updates\nWatch"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 15)",
    "text": "\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Buddy\",\"species\": \"dog\",\"ageMonths\": 12}'\nThe stream will show health check passed messages instead of treatment needed messages.\nObserving Stream Updates\nWatch the Workbench console logs to see the real-time stream updates as they're pushed:\n\ud83d\udc3e Pet created { petId: '1', name: 'Max', species: 'dog', status: 'new' }\ud83d\udccb Setting next feeding reminder { petId: '1' }\ud83e\udd16 AI Profile Enrichment started { petId: '1', name: 'Max' }\u2705 Next feeding reminder set { petId: '1' }\u2705 AI Profile Enrichment completed { petId: '1' }\n\ud83d\udc3e Pet created { petId: '1', name: 'Max', species: 'dog', status: 'new' }\ud83d\udccb Setting next feeding reminder { petId: '1' }\ud83e\udd16 AI Profile Enrichment started { petId: '1', name: 'Max' }\u2705 Next feeding reminder set { petId: '1' }\u2705 AI Profile Enrichment completed { petId: '1' }\nEach emoji-prefixed log corresponds to a stream update being pushed to connected clients.\n\ud83c\udf89Congratulations!You've built a complete real-time streaming system with Motia. Your pet management system now provides live feedback to users while complex workflows execute in the background.\nWhat's Next?\nYou've now mastered the complete Motia stack:\nAPI Endpoints- Build RESTful APIs with validation\nBackground Jobs- Process async tasks efficiently\nWorkflows- Orchestrate complex business logic\nAgentic Workflows- Make intelligent decisions with AI\nReal-Time Streaming- Provide live updates using streams in any step handler\nThis is thecomplete progressionfrom simple APIs to intelligent, real-time systems!\nKey Takeaway:Streams are just another tool in your step handler's context - use them wherever you need real-time updates!\nHere are some ideas to extend your streaming implementation:\nAdd stream analytics- Track how many clients are connected, message delivery rates\nImplement stream persistence- Use Redis adapter for stream storage across restarts\nCreate stream multiplexing- Multiple streams per workflow for different update types\nBuild progress bars- Use structured progress data (0-100%) instead of just messages\nAdd stream authentication- Ensure only authorized clients can access"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 16)",
    "text": " for stream storage across restarts\nCreate stream multiplexing- Multiple streams per workflow for different update types\nBuild progress bars- Use structured progress data (0-100%) instead of just messages\nAdd stream authentication- Ensure only authorized clients can access streams\nExplore more examples in theMotia Examples Repository.\nAgentic Workflows\nLearn how to build intelligent agentic workflows that make decisions and automate workflows with Motia\nOverview\nOne primitive, any language, event-driven by default - that's Motia\nOn this page"
}
================================================================================
{
    "source_page": "Overview",
    "source_url": "https://www.motia.dev/docs/concepts/overview =====",
    "chunk_topic": "Overview",
    "chunk_id": "Overview (Part 1)",
    "text": "Overview\nOne primitive, any language, event-driven by default - that's Motia\nMotia is a backend framework built around a single core primitive:everything is a Step.\nWant an API? That's a Step.Need a background job? That's a Step.Scheduled task? Also a Step.\nWrite each Step in whatever language makes sense - TypeScript, Python, or JavaScript. They all run together, share the same state, and talk through events.\nHow It Works\nEvery Step is just a file with two parts:\n1. Config\u2192 When and how it runs2. Handler\u2192 What it does\nimport{ ApiRouteConfig, Handlers }from'motia'// Config - when it runsexportconstconfig:ApiRouteConfig={name:'MyStep',type:'api',path:'/endpoint',method:'POST',emits: ['task.done']}// Handler - what it doesexportconsthandler:Handlers['MyStep']=async(req, {emit,logger})=>{logger.info('Processing request')awaitemit({topic:'task.done',data: { result:'success'}})return{ status:200, body: { success:true} }}\nimport{ ApiRouteConfig, Handlers }from'motia'// Config - when it runsexportconstconfig:ApiRouteConfig={name:'MyStep',type:'api',path:'/endpoint',method:'POST',emits: ['task.done']}// Handler - what it doesexportconsthandler:Handlers['MyStep']=async(req, {emit,logger})=>{logger.info('Processing request')awaitemit({topic:'task.done',data: { result:'success'}})return{ status:200, body: { success:true} }}\n\ud83d\udc49 Drop this file in yoursteps/folder and Motia finds it automatically. No registration, no imports, no setup.\nsteps/\nLearn more about Steps \u2192\nEvent-Driven Architecture\nSteps don't call each other. Theyemitandsubscribeto events.\nThis means:\nYour API can trigger a background job without waiting for it\nSteps run independently and retry on failure\nYou can add new Steps without touching existing ones\nEverything is traceable from start to finish\nExample:An API emits an event, a background Step picks it up:\n// API Step emitsawaitemit({ topic:'user.created', data: { email } })// Event Step subscribes and processesconfig={type:'event',subscribes: ['"
}
================================================================================
{
    "source_page": "Overview",
    "source_url": "https://www.motia.dev/docs/concepts/overview =====",
    "chunk_topic": "Overview",
    "chunk_id": "Overview (Part 2)",
    "text": "An API emits an event, a background Step picks it up:\n// API Step emitsawaitemit({ topic:'user.created', data: { email } })// Event Step subscribes and processesconfig={type:'event',subscribes: ['user.created']}\n// API Step emitsawaitemit({ topic:'user.created', data: { email } })// Event Step subscribes and processesconfig={type:'event',subscribes: ['user.created']}\nThat's it. No coupling, no dependencies.\nProject Structure & Auto-Discovery\nMotia automatically discovers Steps - no manual registration required.\nBasic Structure\nThesteps/directory is the heart of your Motia application. All your workflow logic lives here, and Motia automatically discovers any file following the naming pattern.\nsteps/\nAuto-Discovery Rules\nMotia scans thesteps/directory and automatically registers files that:\nsteps/\n\u2705Match naming pattern:TypeScript:.step.tsJavaScript:.step.jsPython:_step.py(note: underscore beforestep)\n\u2705Match naming pattern:\nTypeScript:.step.ts\n.step.ts\nJavaScript:.step.js\n.step.js\nPython:_step.py(note: underscore beforestep)\n_step.py\nstep\n\u2705Export aconfigobjectwith Step configuration\n\u2705Export aconfigobjectwith Step configuration\nconfig\n\u2705Export ahandlerfunctionwith business logic\n\u2705Export ahandlerfunctionwith business logic\nhandler\nNo imports. No registration. Just create the file and Motia finds it.\nMulti-Language Support\nEvery Step can be in a different language. They all run in the same process and share everything.\nCurrently Supported:\nTypeScript\u2192.step.ts\n.step.ts\nPython\u2192_step.py\n_step.py\nJavaScript\u2192.step.js\n.step.js\nComing Soon:\nRuby \u2192.step.rb\n.step.rb\nC# \u2192.step.cs\n.step.cs\nGo \u2192.step.go\n.step.go\nAnd many more...\nExample project:\nAll three Steps work together. TypeScript API emits an event \u2192 Python processes with ML \u2192 JavaScript sends the result.\nCore Concepts\nState Management\nPersistent key-value storage that works across all Steps and languages.\nawaitstate.set('users','user-123', { name:'John'})constuser=awaitstate.get('users','user-123')\nawaitstate.set('users','user-123', { name:'John'})constuser=awaitstate.get('users','user-123')\nLearn about State \u2192\nReal-Time Streams\nPush"
}
================================================================================
{
    "source_page": "Overview",
    "source_url": "https://www.motia.dev/docs/concepts/overview =====",
    "chunk_topic": "Overview",
    "chunk_id": "Overview (Part 3)",
    "text": "user=awaitstate.get('users','user-123')\nawaitstate.set('users','user-123', { name:'John'})constuser=awaitstate.get('users','user-123')\nLearn about State \u2192\nReal-Time Streams\nPush live updates to connected clients (browsers, mobile apps).\nawaitstreams.notifications.set('user-123','notif-1', {message:'Order shipped!',timestamp:newDate().toISOString()})\nawaitstreams.notifications.set('user-123','notif-1', {message:'Order shipped!',timestamp:newDate().toISOString()})\nClients receive updates instantly.\nLearn about Streams \u2192\nContext Object\nEvery handler gets a context object with everything you need:\nlogger\nemit\nstate\nstreams\ntraceId\nDevelopment Tool - Workbench\nVisual interface for testing APIs, building and debugging flows:\nSee your entire flow as a beautiful diagram\nTest API endpoints in the browser\nWatch logs in real-time\nInspect state as it changes\nLearn about Workbench \u2192\nWhat's Next?\n\ud83d\udce6 Steps\nDeep dive into Steps - the only primitive you need\n\ud83d\ude80 Quick Start\nBuild your first app in 5 minutes\nReal-Time Streaming\nLearn how to add real-time streaming updates to your Motia workflows\nSteps\nOne primitive to build any backend. Simple, composable, and multi-language.\nOn this page"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 1)",
    "text": "Steps\nOne primitive to build any backend. Simple, composable, and multi-language.\nOne Primitive for Any Backend\nAStepis the core primitive in Motia. Instead of juggling separate frameworks for APIs, background jobs, queues, or workflows, you define everything in one place:how it runs, when it runs, where it runs, and what it does.\nEvery Step file contains two parts:\nConfig\u2192 defines when and how the Step runs, and gives it a uniquename\nname\nHandler\u2192 the function that executes your business logic\nMotia automatically discovers any file ending in.step.ts,.step.js, or_step.py.The filename tells Motia to load it, and thenamein theconfiguniquely identifies the Step inside your system.\n.step.ts\n.step.js\n_step.py\nname\nconfig\nThe Simplest Example\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\n\ud83d\udc49 That\u2019s all you need to make a running API endpoint.Motia will auto-discover this file and wire it into your backend.\nSteps Work Together: Emit + Subscribe\nSteps aren\u2019t isolated. They communicate byemittingandsubscribingto events.This is the core of how you build backends with Motia.\nExample Flow: API Step \u2192 Event Step\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true}"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 2)",
    "text": ".sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\n\ud83d\udc49 With just two files, you have anAPI endpointthat triggers anevent-driven workflow.\nTriggers\nEvery Step has atypethat defineshow it triggers:\ntype\napi\nevent\ncron\nAPI Trigger\nRuns when an HTTP request hits the path.\nExample:\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id:"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 3)",
    "text": "/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nConfig:\nname\ntype\n'api'\npath\n:params\nmethod\nbodySchema\nHandler:handler(req, ctx)\nhandler(req, ctx)\nreq- Request withbody,headers,pathParams,queryParams\nreq\nbody\nheaders\npathParams\nqueryParams\nctx- Context withlogger,emit,state,streams,traceId\nctx\nlogger\nemit\nstate\nstreams\ntraceId\nReturns{ status, body, headers? }\n{ status, body, headers? }\nContext Object\nEvery handler receives actxobject with these tools:\nctx\nlogger\ninfo\nwarn\nerror\nemit\nstate\nstreams\ntraceId\nCore Functionality\nState \u2013 Persistent Data\nKey-value storage shared across Steps and workflows.\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nLogging \u2013 Structured & Contextual\nFor debugging, monitoring, and observability.\nlogger.info('Processing user', { userId:'123'});\nlogger.info('Processing user', { userId:'123'});\nStreams \u2013 Real-Time Data\nPush updates directly to connected clients.\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nRemember\nSteps are just files.Export aconfigandhandler.\nconfig\nhandler\nMotia auto-discovers and connects them.\nCombine Steps withemit + subscribeto build APIs, workflows, background jobs, or entire systems.\nWhat\u2019s Next?\n\ud83d\udc49Build your first app \u2192\nOverview\nOne primitive, any language, event-driven by default - that's Motia\nWorkbench\nVisualize, test, and debug your Motia flows with the built-in development platform\nOn this page"
}
================================================================================
{
    "source_page": "Workbench",
    "source_url": "https://www.motia.dev/docs/concepts/workbench =====",
    "chunk_topic": "Workbench",
    "chunk_id": "Workbench",
    "text": "Workbench\nVisualize, test, and debug your Motia flows with the built-in development platform\nMotia Workbench\nMotia Workbench is a development platform that helps you build and debug your Motia flows. It serves as your control center where you can:\nVisualize flows as interactive diagrams\nTest steps directly in the UI\nMonitor real-time logs\nDebug issues\nGetting Started\nStart workbench by running:\nnpm run dev\nRunning the dev command starts:\nMotia Server: Backend services and API endpoints\nMotia Workbench: Web interface athttp://localhost:3000\nDevelopment Mode: Auto-reloads when changes are made\nKey Features\nFlow Visualization\nSee your entire flow as an interactive diagram:\nSteps appear as connected nodes\nAPI endpoints are highlighted as entry points\nEvent connections show data flow\nClick any step to see its details\nReal-time Testing\nTest your flows directly in the interface:\nSend test requests to API endpoints\nMonitor how events flow through steps\nVisualize step sequence execution\nInspect data at each stage\nLive Logs\nMonitor your flow execution in real-time with structured logging and trace information.\nDevelopment Tools\nHot Reload: Changes reflect immediately in the UI\nError Handling: Detailed error messages with contextual debugging information\nState Inspector: Real-time monitoring of state management\nSteps\nOne primitive to build any backend. Simple, composable, and multi-language.\nProduct Showcase\nNext Page\nOn this page"
}
================================================================================
{
    "source_page": "Product Showcase",
    "source_url": "https://www.motia.dev/docs/product-showcase =====",
    "chunk_topic": "Product Showcase",
    "chunk_id": "Product Showcase",
    "text": "Product Showcase\nExplore full-scale production applications built with Motia that demonstrate the framework's capabilities in real-world scenarios.\nChessArena AI\nProduction-grade chess platform with real-time AI battles, move evaluation, and live leaderboards\n\ud83d\udcbb Live Applications\nThese are not just examples or tutorials - they are fully functional, production-ready applications that handle real user traffic and demonstrate Motia's capabilities at scale.\nProduction-Ready Applications\nThese applications demonstrate Motia's enterprise capabilities with real user traffic, production deployments, and battle-tested architectures.\n\ud83c\udfc6 Live Chess Platform\n\ud83d\udcda Source Code \u2192\nContribute\nHave you built something amazing with Motia? We'd love to feature your production application! Pleasereach out to uswith details about your project.\nWorkbench\nVisualize, test, and debug your Motia flows with the built-in development platform\nChessArena AI\nNext Page\nOn this page"
}
================================================================================
{
    "source_page": "ChessArena AI",
    "source_url": "https://www.motia.dev/docs/product-showcase/chessarena-ai =====",
    "chunk_topic": "ChessArena AI",
    "chunk_id": "ChessArena AI (Part 1)",
    "text": "ChessArena AI\nIn the world of AI development, chess serves as the perfect benchmark for intelligence and strategic thinking. But how do you measure which AI models truly \"understand\" chess beyond simple win/loss statistics? ChessArena.AI solves this challenge by focusing on move quality and game insight rather than just outcomes.\nThis comprehensive guide explores how to build a production-ready chess platform using Motia's event-driven architecture and real-time streaming capabilities. We'll cover:\nReal-Time Chess Streaming: How Motia Streams enable live game updates across all connected players\nMulti-Language Architecture: Combining TypeScript orchestration with Python chess engine integration\nAI Model Integration: Supporting multiple LLM providers (OpenAI, Anthropic Claude, Google Gemini, xAI Grok) for chess gameplay\nMove Evaluation System: Using Stockfish engine for real-time move analysis and scoring\nProduction Deployment: How this exact platform powers the live ChessArena.AI website\nLet's build a chess platform that measures AI intelligence through gameplay quality.\n\ud83c\udfed Production-Grade Chess Platform\nThis is not a tutorial project- this is battle-tested, production-ready code that handles real traffic at scale. Every aspect has been designed for enterprise use:\n\ud83c\udfae Live Chess Platform: Real-time games with multiple AI models competing simultaneously\n\ud83d\udcca Move Quality Analysis: Every move evaluated by Stockfish engine for strategic insight\n\u26a1 Real-Time Updates: Live game state synchronization across all connected clients\n\ud83e\udd16 Multi-AI Support: OpenAI GPT, Anthropic Claude, XAI Grok, Google Gemini integration\n\ud83c\udfc6 Dynamic Leaderboards: Real-time scoring based on move quality, not just wins\n\ud83c\udf0d Global Scale: Production deployment on Motia Cloud with worldwide accessibility\n\ud83d\udcb0 Cost Efficient: Event-driven architecture that scales efficiently\nLive Proof: Powering ChessArena.AI\nThis isn't just a demo- this exact code powers the live chess platform atChessArena.AI!\nVisit the platform and you'll see:\n\ud83c\udfc6 Live AI Leaderboardranking models by move quality\n\u26a1 Real-Time Gameswith instant move updates and evaluations\n\ud83d\udcca Move Analysisshowing centipawn scores and blunder detection\n\ud83c\udfae Multi-Model Battleswith GPT-5, Claude Opus 4, Gemini 2.5 Flash, and Grok 4 competing\nThat live chess platform with real-time AI battles? That's this exact implementation in production, processing thousands of moves and providing instant"
}
================================================================================
{
    "source_page": "ChessArena AI",
    "source_url": "https://www.motia.dev/docs/product-showcase/chessarena-ai =====",
    "chunk_topic": "ChessArena AI",
    "chunk_id": "ChessArena AI (Part 2)",
    "text": " GPT-5, Claude Opus 4, Gemini 2.5 Flash, and Grok 4 competing\nThat live chess platform with real-time AI battles? That's this exact implementation in production, processing thousands of moves and providing instant feedback to chess enthusiasts worldwide!\nThe Power of Strategic AI Evaluation\nAt its core, ChessArena.AI solves a fundamental challenge: how do you measure AI intelligence in chess beyond simple win/loss statistics? Traditional chess platforms focus on game outcomes, but most LLM games end in draws, making it difficult to distinguish between models.\nOur Motia-powered solution revolutionizes AI chess evaluation through:\nStockfish Integration: World's strongest open-source chess engine for move analysis\nCentipawn Scoring: Precise move quality measurement in hundredths of a pawn\nReal-Time Streaming: Live game updates and move evaluations\nMulti-LLM Support: Support for OpenAI, Anthropic, and Google AI models\nInstead of focusing on who wins, we measure how well each AI model understands chess strategy and tactics.\nThe Anatomy of Our Chess Platform\nOur application consists of specialized components handling different aspects of chess gameplay, from game creation to move evaluation. Let's explore the complete architecture.\nThe entry point that exposes available AI models from different providers (OpenAI, Anthropic, Google, xAI) for chess gameplay. The platform supports cutting-edge models and allows easy extension for new providers.\nimport{ AiModelsSchema }from'@chessarena/types/ai-models'import{ ApiRouteConfig, Handlers }from'motia'import{ z }from'zod'import{ supportedModelsByProvider }from'../../services/ai/models'// Current supported models (as of 2025)exportconstsupportedModelsByProvider:AiModels={openai: ['gpt-5-2025-08-07',// Latest GPT-5'o4-mini-2025-04-16',// O4 Mini'gpt-4.1-nano-2025-04-14',// GPT-4.1 Nano'o3-mini-2025-01-31',// O3 Mini'gpt-4o-mini-2024-07-18',// GPT-4o Mini],gemini: ['gemini-2.5-flash',// Latest Gemini 2.5 Flash'gemini-2.0-flash-001',// Gemini 2.0 Flash],claude: ['claude-op"
}
================================================================================
{
    "source_page": "ChessArena AI",
    "source_url": "https://www.motia.dev/docs/product-showcase/chessarena-ai =====",
    "chunk_topic": "ChessArena AI",
    "chunk_id": "ChessArena AI (Part 3)",
    "text": "PT-4o Mini],gemini: ['gemini-2.5-flash',// Latest Gemini 2.5 Flash'gemini-2.0-flash-001',// Gemini 2.0 Flash],claude: ['claude-opus-4-1-20250805',// Claude Opus 4.1'claude-opus-4-20250514',// Claude Opus 4'claude-sonnet-4-20250514',// Claude Sonnet 4'claude-3-7-sonnet-20250219',// Claude 3.7 Sonnet'claude-3-5-sonnet-20241022',// Claude 3.5 Sonnet'claude-3-5-haiku-20241022',// Claude 3.5 Haiku],grok: ['grok-4',// Latest Grok 4'grok-3',// Grok 3],}exportconstconfig:ApiRouteConfig={type:'api',name:'AvailableModels',description:'Expose all available AI models for supported providers',path:'/chess/models',method:'GET',emits: [],flows: ['chess'],responseSchema: {200: z.object({ models:AiModelsSchema() }),404: z.object({ message: z.string() }),400: z.object({ message: z.string() }),},}exportconsthandler:Handlers['AvailableModels']=async(_, {logger})=>{logger.info('Received available models request')return{status:200,body: {models: supportedModelsByProvider,},}}\nimport{ AiModelsSchema }from'@chessarena/types/ai-models'import{ ApiRouteConfig, Handlers }from'motia'import{ z }from'zod'import{ supportedModelsByProvider }from'../../services/ai/models'// Current supported models (as of 2025)exportconstsupportedModelsByProvider:AiModels={openai: ['gpt-5-2025-08-07',// Latest GPT-5'o4-mini-2025-04-16',// O4 Mini'gpt-4.1-nano-2025-04-14',// GPT-4.1 Nano'o3-mini-2025-01-31',// O3 Mini'gpt-4o-mini-2024-07-18',// GPT-4o Mini],gemini: ['gem"
}
================================================================================
{
    "source_page": "ChessArena AI",
    "source_url": "https://www.motia.dev/docs/product-showcase/chessarena-ai =====",
    "chunk_topic": "ChessArena AI",
    "chunk_id": "ChessArena AI (Part 4)",
    "text": "14',// GPT-4.1 Nano'o3-mini-2025-01-31',// O3 Mini'gpt-4o-mini-2024-07-18',// GPT-4o Mini],gemini: ['gemini-2.5-flash',// Latest Gemini 2.5 Flash'gemini-2.0-flash-001',// Gemini 2.0 Flash],claude: ['claude-opus-4-1-20250805',// Claude Opus 4.1'claude-opus-4-20250514',// Claude Opus 4'claude-sonnet-4-20250514',// Claude Sonnet 4'claude-3-7-sonnet-20250219',// Claude 3.7 Sonnet'claude-3-5-sonnet-20241022',// Claude 3.5 Sonnet'claude-3-5-haiku-20241022',// Claude 3.5 Haiku],grok: ['grok-4',// Latest Grok 4'grok-3',// Grok 3],}exportconstconfig:ApiRouteConfig={type:'api',name:'AvailableModels',description:'Expose all available AI models for supported providers',path:'/chess/models',method:'GET',emits: [],flows: ['chess'],responseSchema: {200: z.object({ models:AiModelsSchema() }),404: z.object({ message: z.string() }),400: z.object({ message: z.string() }),},}exportconsthandler:Handlers['AvailableModels']=async(_, {logger})=>{logger.info('Received available models request')return{status:200,body: {models: supportedModelsByProvider,},}}\nExtensible AI Provider System\nChessArena.AI features a plugin-based architecture that makes adding new AI providers incredibly simple. The unifiedmakePromptsystem handles all provider differences behind a clean interface.\nmakePrompt\nAdding New AI Providers\nTo add a new AI provider (like Anthropic's upcoming models or other LLM providers), you only need to:\nCreate a provider handlerinservices/ai/your-provider.ts:\nservices/ai/your-provider.ts\nimport{ Handler }from'./types'exportconstyourProvider:Handler=async({prompt,zod,logger,model})=>{// Initialize your AI clientconstclient=newYourAIClient({ apiKey: process.env.YOUR_API_KEY})"
}
================================================================================
{
    "source_page": "ChessArena AI",
    "source_url": "https://www.motia.dev/docs/product-showcase/chessarena-ai =====",
    "chunk_topic": "ChessArena AI",
    "chunk_id": "ChessArena AI (Part 5)",
    "text": "-provider.ts\nimport{ Handler }from'./types'exportconstyourProvider:Handler=async({prompt,zod,logger,model})=>{// Initialize your AI clientconstclient=newYourAIClient({ apiKey: process.env.YOUR_API_KEY})// Make the API call with structured outputconstresponse=awaitclient.chat({model: model??'your-default-model',messages: [{ role:'user', content: prompt }],responseFormat: { type:'json_schema', schema:zodToJsonSchema(zod) },})logger.info('Your provider response received', { model })returnJSON.parse(response.content)}\nimport{ Handler }from'./types'exportconstyourProvider:Handler=async({prompt,zod,logger,model})=>{// Initialize your AI clientconstclient=newYourAIClient({ apiKey: process.env.YOUR_API_KEY})// Make the API call with structured outputconstresponse=awaitclient.chat({model: model??'your-default-model',messages: [{ role:'user', content: prompt }],responseFormat: { type:'json_schema', schema:zodToJsonSchema(zod) },})logger.info('Your provider response received', { model })returnJSON.parse(response.content)}\nRegister the providerinservices/ai/make-prompt.ts:\nservices/ai/make-prompt.ts\nimport{ yourProvider }from'./your-provider'constproviders:Record<AiModelProvider,Handler>={openai,gemini,claude,grok,yourProvider,// Add your provider here}\nimport{ yourProvider }from'./your-provider'constproviders:Record<AiModelProvider,Handler>={openai,gemini,claude,grok,yourProvider,// Add your provider here}\nUpdate the type definitionsintypes/ai-models.ts:\ntypes/ai-models.ts\nexportconstAiModelProviderSchema=()=>z.enum(['openai','gemini','claude','grok','yourProvider'])\nexportconstAiModelProviderSchema=()=>z.enum(['openai','gemini','claude','grok','yourProvider'])\nAdd supported modelsinservices/ai/models.ts:\nservices/ai/models.ts\nexportconstsupportedModelsByProvider:AiModels={// ... existing providersyourProvider: ['your-model-v1','your-model-v2-turbo','your-model-reasoning',],}\nexportconstsupportedModelsByProvider:AiModels={// ... existing providersyourProvider: ['your-model-v1','your-model"
}
================================================================================
{
    "source_page": "ChessArena AI",
    "source_url": "https://www.motia.dev/docs/product-showcase/chessarena-ai =====",
    "chunk_topic": "ChessArena AI",
    "chunk_id": "ChessArena AI (Part 6)",
    "text": "yourProvider: ['your-model-v1','your-model-v2-turbo','your-model-reasoning',],}\nexportconstsupportedModelsByProvider:AiModels={// ... existing providersyourProvider: ['your-model-v1','your-model-v2-turbo','your-model-reasoning',],}\nThat's it! Your new AI provider is now fully integrated and can compete in chess battles alongside GPT, Claude, Gemini, and Grok.\nCurrent Provider Implementations\nThe platform currently supports four major AI providers with their latest models:\nOpenAI: GPT-5, O4 Mini, GPT-4.1 series, O3 Mini\nAnthropic: Claude Opus 4.1, Claude Sonnet 4, Claude 3.7 series\nGoogle: Gemini 2.5 Flash, Gemini 2.0 Flash\nxAI: Grok 4, Grok 3\nEach provider uses optimized API calls with structured JSON output and proper error handling.\nReal-Time Chess Architecture\nThe beauty of this chess platform lies in its event-driven, real-time architecture. Here's how live chess games flow through the system:\nGame Creation\u2192 User selects AI models and creates a new game\nMove Generation\u2192 AI models generate moves using LLM APIs\nMove Validation\u2192 Chess rules validation and board state updates\nStockfish Analysis\u2192 Real-time move evaluation and scoring\nStream Updates\u2192 Live game state propagated to all connected clients\nLeaderboard Updates\u2192 AI model rankings updated based on move quality\nNo manual state management, no complex WebSocket handling, no synchronization code required!\nKey Features & Benefits\n\ud83c\udfaeReal-Time Chess Gameplay\nLive games with instant move updates across all connected clients - watch AI models battle in real-time.\n\ud83c\udfc6Intelligent Scoring System\nMove quality evaluation using Stockfish engine with centipawn precision and blunder detection.\n\ud83e\udd16Multi-AI Integration\nSupport for OpenAI GPT, Anthropic Claude, and Google Gemini models with unified API interface.\n\u26a1Event-Driven Architecture\nScalable, maintainable system where each component handles specific chess functionality.\n\ud83d\udccaLive Leaderboards\nReal-time AI model rankings based on move quality, strategic insight, and game performance.\n\ud83c\udf10Production-Ready\nBattle-tested code powering the live ChessArena.AI platform with global accessibility.\nTrying It Out\nReady to build your own AI chess platform? Let's get it running.\nClone and Install\n"
}
================================================================================
{
    "source_page": "ChessArena AI",
    "source_url": "https://www.motia.dev/docs/product-showcase/chessarena-ai =====",
    "chunk_topic": "ChessArena AI",
    "chunk_id": "ChessArena AI (Part 7)",
    "text": " insight, and game performance.\n\ud83c\udf10Production-Ready\nBattle-tested code powering the live ChessArena.AI platform with global accessibility.\nTrying It Out\nReady to build your own AI chess platform? Let's get it running.\nClone and Install\nStart by getting the project locally and installing dependencies.\ngitclonehttps://github.com/MotiaDev/chessarena-ai.gitcdchessarena-aipnpminstall\ngitclonehttps://github.com/MotiaDev/chessarena-ai.gitcdchessarena-aipnpminstall\nInstall Stockfish Engine\nThe platform requires Stockfish for move evaluation. Choose your installation method:\nOption A: Using Homebrew (macOS - Recommended)\nbrewinstallstockfish\nbrewinstallstockfish\nOption B: Using the project installer\npnpminstall-stockfish<platform># Supported: linux-x86, mac-m1\npnpminstall-stockfish<platform># Supported: linux-x86, mac-m1\nOption C: Manual InstallationDownload fromstockfishchess.org\nConfigure Environment Variables\nCreate a.envfile with your AI provider API keys:\n.env\n# Required: AI Model API KeysOPENAI_API_KEY=\"sk-...\"ANTHROPIC_API_KEY=\"sk-ant-...\"GOOGLE_AI_API_KEY=\"...\"# Required: Stockfish Engine PathSTOCKFISH_BIN_PATH=\"/opt/homebrew/bin/stockfish\"# Optional: Authentication (for user management)JWT_SECRET=\"your-jwt-secret\"\n# Required: AI Model API KeysOPENAI_API_KEY=\"sk-...\"ANTHROPIC_API_KEY=\"sk-ant-...\"GOOGLE_AI_API_KEY=\"...\"# Required: Stockfish Engine PathSTOCKFISH_BIN_PATH=\"/opt/homebrew/bin/stockfish\"# Optional: Authentication (for user management)JWT_SECRET=\"your-jwt-secret\"\nStart the Chess Platform\nLaunch both the API backend and React frontend:\npnpmdev\npnpmdev\nThis starts:\nAPI Backend:http://localhost:3000(Motia API with chess logic)\nhttp://localhost:3000\nReact Frontend:http://localhost:5173(Chess game interface)\nhttp://localhost:5173\nCreate Your First AI Battle\nOpen the Chess Platform: Navigate tohttp://localhost:5173\nhttp://localhost:5173\nSelect AI Models: Choose different models for white and black players\nStart the Game: Watch AI models battle with real-time move evaluation\n"
}
================================================================================
{
    "source_page": "ChessArena AI",
    "source_url": "https://www.motia.dev/docs/product-showcase/chessarena-ai =====",
    "chunk_topic": "ChessArena AI",
    "chunk_id": "ChessArena AI (Part 8)",
    "text": " Battle\nOpen the Chess Platform: Navigate tohttp://localhost:5173\nhttp://localhost:5173\nSelect AI Models: Choose different models for white and black players\nStart the Game: Watch AI models battle with real-time move evaluation\nView Analysis: See centipawn scores, best moves, and blunder detection\nCheck Leaderboards: Monitor AI model performance rankings\nAccess Real-Time Data\nYour chess games are available via the Motia streams API:\n# Get all active gamescurlhttp://localhost:3000/api/streams/chessGame# Get specific game statecurlhttp://localhost:3000/api/streams/chessGame/{gameId}# Get move history with evaluationscurlhttp://localhost:3000/api/streams/chessGameMove/{gameId}# Get AI model leaderboardcurlhttp://localhost:3000/api/streams/chessLeaderboard\n# Get all active gamescurlhttp://localhost:3000/api/streams/chessGame# Get specific game statecurlhttp://localhost:3000/api/streams/chessGame/{gameId}# Get move history with evaluationscurlhttp://localhost:3000/api/streams/chessGameMove/{gameId}# Get AI model leaderboardcurlhttp://localhost:3000/api/streams/chessLeaderboard\nDeploy to Production\nOnce your chess platform is working locally, deploy it to production with Motia Cloud:\nOption 1: CLI Deployment\n# Deploy with version and API keymotiaclouddeploy--api-keyyour-api-key--version-name1.0.0# Deploy with environment variablesmotiaclouddeploy--api-keyyour-api-key\\--version-name1.0.0\\--env-file.env.production\\--environment-idyour-env-id\n# Deploy with version and API keymotiaclouddeploy--api-keyyour-api-key--version-name1.0.0# Deploy with environment variablesmotiaclouddeploy--api-keyyour-api-key\\--version-name1.0.0\\--env-file.env.production\\--environment-idyour-env-id\nOption 2: One-Click Web Deployment\nEnsure your local project is running (pnpm dev)\npnpm dev\nGo toMotia Cloud -> Import from Workbench\nSelect your local project port\nChoose project and environment name\nUpload environment variables (optional)\nClickDeployand watch the magic happen! \u2728\n\ud83d\ude80 Production Deployment Guide\nEnvironment Variables\nConfigure these environment variables for production security"
}
================================================================================
{
    "source_page": "ChessArena AI",
    "source_url": "https://www.motia.dev/docs/product-showcase/chessarena-ai =====",
    "chunk_topic": "ChessArena AI",
    "chunk_id": "ChessArena AI (Part 9)",
    "text": " from Workbench\nSelect your local project port\nChoose project and environment name\nUpload environment variables (optional)\nClickDeployand watch the magic happen! \u2728\n\ud83d\ude80 Production Deployment Guide\nEnvironment Variables\nConfigure these environment variables for production security and functionality:\n# Required: AI Model API KeysOPENAI_API_KEY=\"sk-your-openai-key\"# For GPT-5, O4 Mini, GPT-4.1 seriesANTHROPIC_API_KEY=\"sk-ant-your-anthropic-key\"# For Claude Opus 4.1, Sonnet 4GEMINI_API_KEY=\"your-google-gemini-key\"# For Gemini 2.5 Flash, 2.0 FlashXAI_API_KEY=\"your-xai-grok-key\"# For Grok 4, Grok 3# Required: Stockfish Engine PathSTOCKFISH_BIN_PATH=\"/opt/homebrew/bin/stockfish\"# Optional: Authentication for user managementJWT_SECRET=\"your-secure-jwt-secret\"# Optional: Database configuration for user dataDATABASE_URL=\"postgresql://user:password@host:port/database\"\n# Required: AI Model API KeysOPENAI_API_KEY=\"sk-your-openai-key\"# For GPT-5, O4 Mini, GPT-4.1 seriesANTHROPIC_API_KEY=\"sk-ant-your-anthropic-key\"# For Claude Opus 4.1, Sonnet 4GEMINI_API_KEY=\"your-google-gemini-key\"# For Gemini 2.5 Flash, 2.0 FlashXAI_API_KEY=\"your-xai-grok-key\"# For Grok 4, Grok 3# Required: Stockfish Engine PathSTOCKFISH_BIN_PATH=\"/opt/homebrew/bin/stockfish\"# Optional: Authentication for user managementJWT_SECRET=\"your-secure-jwt-secret\"# Optional: Database configuration for user dataDATABASE_URL=\"postgresql://user:password@host:port/database\"\nSecurity Best Practices\nFor production deployments, ensure you:\nSecure API keys:# Generate a cryptographically secure JWT secretopensslrand-hex32\nSecure API keys:\n# Generate a cryptographically secure JWT secretopensslrand-hex32\n# Generate a cryptographically secure JWT secretopensslrand-hex32\nStore secrets securely: Use environment variables, never commit API keys to code\nStore secrets securely: Use environment variables, never commit API keys to code\nMonitor AI usage: Track API usage and costs"
}
================================================================================
{
    "source_page": "ChessArena AI",
    "source_url": "https://www.motia.dev/docs/product-showcase/chessarena-ai =====",
    "chunk_topic": "ChessArena AI",
    "chunk_id": "ChessArena AI (Part 10)",
    "text": " secure JWT secretopensslrand-hex32\nStore secrets securely: Use environment variables, never commit API keys to code\nStore secrets securely: Use environment variables, never commit API keys to code\nMonitor AI usage: Track API usage and costs across different model providers\nMonitor AI usage: Track API usage and costs across different model providers\nEnable rate limiting: Implement request limits to prevent abuse\nEnable rate limiting: Implement request limits to prevent abuse\nScaling Considerations\nThis architecture scales automatically with your chess platform traffic:\nMultiple games: Each game gets its own stream for real-time updates\nHigh concurrency: Motia streams handle thousands of concurrent chess games\nGlobal distribution: Deploy to multiple regions for worldwide performance\nAI model optimization: Load balance across different model providers\nCost optimization: Pay only for actual usage with serverless scaling\n\ud83d\udcbb Dive into the Code\nWant to explore the complete chess platform implementation? Check out the full source code with AI integration, real-time streams, and production deployment:\nLive ChessArena.AI Platform\nAccess the complete implementation powering the live chess platform. See exactly how AI models battle with real-time evaluation and scoring!\nView ChessArena.AI Code\nPlay Live Chess \u2192\nConclusion: Intelligence Through Strategic Play\nThis ChessArena.AI platform demonstrates how to build sophisticated AI evaluation systems using event-driven architecture. By focusing on move quality rather than simple win/loss statistics, we've created a platform that truly measures AI strategic understanding.\nThe beauty of this approach is its extensibility:\nAdd new AI models: Integrate any LLM provider with the unified interface\nEnhanced analysis: Implement opening book analysis, endgame evaluation\nTournament modes: Multi-round competitions with advanced scoring\nEducational features: Move explanations, tactical puzzles, learning modes\nKey architectural benefits:\nReal-time synchronization: All clients see live game updates automatically\nScalable evaluation: Stockfish analysis runs independently of game flow\nMulti-language power: TypeScript orchestration with Python chess engine integration\nProduction reliability: Battle-tested code handling real user traffic\nThis exact implementation powers the live chess platform atChessArena.AI- that real-time AI battle system with move-by-move evaluation? It's this code in action, proven at scale with thousands of chess enthusiasts worldwide.\nProduction Metrics:\nHandles 1,000+ concurrent chess games\nProcesses 10,000+ moves daily with real-time evaluation\nSub-100ms move analysis and streaming updates\n99.9% uptime with automatic scaling\nReady to build AI"
}
================================================================================
{
    "source_page": "ChessArena AI",
    "source_url": "https://www.motia.dev/docs/product-showcase/chessarena-ai =====",
    "chunk_topic": "ChessArena AI",
    "chunk_id": "ChessArena AI (Part 11)",
    "text": ".\nProduction Metrics:\nHandles 1,000+ concurrent chess games\nProcesses 10,000+ moves daily with real-time evaluation\nSub-100ms move analysis and streaming updates\n99.9% uptime with automatic scaling\nReady to build AI evaluation platforms that measure true intelligence? Deploy production-ready chess systems with Motia today!\nProduct Showcase\nPrevious Page\nExamples\nNext Page\nOn this page"
}
================================================================================
{
    "source_page": "Examples",
    "source_url": "https://www.motia.dev/docs/examples =====",
    "chunk_topic": "Examples",
    "chunk_id": "Examples",
    "text": "Examples\nWe have curated examples to help you learn Motia, organized by complexity from basic concepts to production-ready implementations.\n\ud83d\udcda Basic Examples\nStart here to learn core Motia concepts with straightforward implementations.\nSentiment Analysis\nLearn dynamic workflows with LLM-driven decision making and event routing\nMulti-Language Processing\nCombine TypeScript, Python, and JavaScript in unified data pipelines\n\ud83d\udd27 Intermediate Examples\nBuild more complex workflows with integrations and advanced patterns.\nAI Content Moderation\nHuman-in-the-loop content moderation with AI analysis and Slack integration\nRAG PDF Analyzer\nIntelligent document processing with Docling and Weaviate vector database\nTrello Automation\nAutomated card progression system with AI-powered summaries and notifications\n\ud83c\udfed Production Examples\nEnterprise-ready implementations handling real traffic at scale.\nUptime Monitor\nComplete monitoring system with smart alerting and Discord integration\nGitHub Stars Counter\nReal-time stars counter with secure webhooks and live streaming\nGitHub Integration\nAutomated issue and PR management with AI-powered classification and routing\nGmail Automation\nSmart email classification, auto-responses, and AI-powered filtering with OAuth2\nFinance Agent\nEvent-driven financial analysis with web search and real-time market data\nAI Research Agent\nComprehensive web research assistant with iterative depth and parallel processing\n\ud83d\udcbb Explore the Source Code\nAll examples include complete, runnable source code with configuration files, setup instructions, and production-ready implementations:\nMotia Examples Repository\nAccess complete implementations, step-by-step tutorials, and production-ready configurations for all our examples. Perfect for learning, experimentation, and building your own applications.\nRepository\nRAG Example \u2192\nMonitor Example \u2192\nContribute\nWe welcome contributions to the examples. Please submit a PR to theexamples repository.\nChessArena AI\nPrevious Page\nSentiment Analysis\nDynamic Workflows: Building a Sentiment Analyzer with Motia\nOn this page"
}
================================================================================
{
    "source_page": "Sentiment Analysis",
    "source_url": "https://www.motia.dev/docs/examples/sentiment-analysis =====",
    "chunk_topic": "Sentiment Analysis",
    "chunk_id": "Sentiment Analysis (Part 1)",
    "text": "Sentiment Analysis\nDynamic Workflows: Building a Sentiment Analyzer with Motia\nIn modern application development, workflows are rarely linear. Whether you're building a simple \"prompt => response\" system or a complex, multi-stage data processing pipeline, you often need your application to make decisions and route data dynamically. This is where the power of event-driven architecture shines, and where the Motia framework provides a clear path forward.\nThis guide explores how to build a dynamic sentiment analysis application that uses an LLM to determine how to proceed. We'll cover:\nThe Motia Philosophy: Howstepsas a core primitive simplify complex architectures.\nsteps\nBuilding the Workflow: A step-by-step guide to creating the four key components of our application.\nVisualizing the Flow: How events chain together to create a cohesive, dynamic system.\nHands-On with the API: How to run and test your new sentiment analyzer.\nLet's dive in.\nA Step at a Time\nAt the heart of the Motia framework is a simple but powerful idea: thestep. A step is a self-contained, independent unit of logic that listens for an event, performs a task, and, optionally, emits a new event. This concept is the core primitive that allows you to break down even the most complex architectures into a series of simple, manageable components.\nstep\nInstead of a monolithic application where business logic is tightly coupled, Motia encourages a decoupled, event-driven approach. This has several key advantages:\nClarity: Each step has a single responsibility, making the application easier to understand and reason about.\nScalability: Steps can be scaled independently, so you can allocate resources where they're needed most.\nExtensibility: Adding new functionality is as simple as creating a new step and subscribing it to an existing event.\nResilience: The decoupled nature of steps means that a failure in one part of the system doesn't necessarily bring down the entire application.\nIn this project, we'll see this philosophy in action as we build a sentiment analyzer with four distinct steps, each with its own clear purpose.\nThe Anatomy of Our Sentiment Analyzer\nOur application will be composed of four steps. Let's explore each one.\nThis is the entry point to our workflow. It's an API step that listens forPOSTrequests, validates the incoming data, and emits anopenai.analyzeSentimentRequestevent.\nPOST\nopenai.analyzeSentimentRequest\n// Receives user text, emits \"open"
}
================================================================================
{
    "source_page": "Sentiment Analysis",
    "source_url": "https://www.motia.dev/docs/examples/sentiment-analysis =====",
    "chunk_topic": "Sentiment Analysis",
    "chunk_id": "Sentiment Analysis (Part 2)",
    "text": " our workflow. It's an API step that listens forPOSTrequests, validates the incoming data, and emits anopenai.analyzeSentimentRequestevent.\nPOST\nopenai.analyzeSentimentRequest\n// Receives user text, emits \"openai.analyzeSentimentRequest\".import{ Handlers }from'motia'import{ z }from'zod'exportconstconfig={type:'api',name:'analyzeSentimentApi',description:'Receives user text and emits an event to trigger sentiment analysis.',path:'/api/analyze-sentiment',method:'POST',emits: ['openai.analyzeSentimentRequest'],bodySchema: z.object({text: z.string().min(1,'text is required'),}),flows: ['sentiment-demo'],}asconstexportconsthandler:Handlers['analyzeSentimentApi']=async(req, {emit,logger})=>{const{text}=req.bodylogger.info('[AnalyzeSentimentAPI] Received text', { text })// Emit an event to call OpenAIawaitemit({topic:'openai.analyzeSentimentRequest',data: { text },})// Return right awayreturn{status:200,body: { status:'Accepted', message:'Your text is being analyzed'},}}\n// Receives user text, emits \"openai.analyzeSentimentRequest\".import{ Handlers }from'motia'import{ z }from'zod'exportconstconfig={type:'api',name:'analyzeSentimentApi',description:'Receives user text and emits an event to trigger sentiment analysis.',path:'/api/analyze-sentiment',method:'POST',emits: ['openai.analyzeSentimentRequest'],bodySchema: z.object({text: z.string().min(1,'text is required'),}),flows: ['sentiment-demo'],}asconstexportconsthandler:Handlers['analyzeSentimentApi']=async(req, {emit,logger})=>{const{text}=req.bodylogger.info('[AnalyzeSentimentAPI] Received text', { text })// Emit an event to call OpenAIawaitemit({topic:'openai.analyzeSentimentRequest',data: { text },})// Return right awayreturn{status:200,body: { status:'Accepted', message:'Your text is being analyzed'},}}\nExplore the Workbench\nYou can explore the workflow in the Workbench.\nYou can also read your files and watch logs, traces, debug your architecture directly"
}
================================================================================
{
    "source_page": "Sentiment Analysis",
    "source_url": "https://www.motia.dev/docs/examples/sentiment-analysis =====",
    "chunk_topic": "Sentiment Analysis",
    "chunk_id": "Sentiment Analysis (Part 3)",
    "text": "status:200,body: { status:'Accepted', message:'Your text is being analyzed'},}}\nExplore the Workbench\nYou can explore the workflow in the Workbench.\nYou can also read your files and watch logs, traces, debug your architecture directly in the Workbench.\nTrying It Out\nReady to see it in action? Let's get the project running.\nInstall Dependencies\nFirst, install the necessary npm packages.\nnpminstall\nnpminstall\nSet Your Environment Variables\nYou'll need an OpenAI API key for this project. Export it as an environment variable.\nexportOPENAI_API_KEY=\"sk-...\"\nexportOPENAI_API_KEY=\"sk-...\"\nRun the Project\nStart the Motia development server.\nnpmrundev\nnpmrundev\nTest the API\nNow you can send requests to your API and see the workflow in action.\ncurl-XPOSThttp://localhost:3000/api/analyze-sentiment\\-H\"Content-Type: application/json\"\\-d'{\"text\":\"I absolutely love this new device! It is amazing and works perfectly.\"}'\ncurl-XPOSThttp://localhost:3000/api/analyze-sentiment\\-H\"Content-Type: application/json\"\\-d'{\"text\":\"I absolutely love this new device! It is amazing and works perfectly.\"}'\nCheck your logs, and you should see the[Positive Responder]has been triggered.\n[Positive Responder]\ncurl-XPOSThttp://localhost:3000/api/analyze-sentiment\\-H\"Content-Type: application/json\"\\-d'{\"text\":\"This is the worst product I have ever used. It broke after one day.\"}'\ncurl-XPOSThttp://localhost:3000/api/analyze-sentiment\\-H\"Content-Type: application/json\"\\-d'{\"text\":\"This is the worst product I have ever used. It broke after one day.\"}'\nThis time, the[Negative Responder]will fire.\n[Negative Responder]\n\ud83d\udcbb Dive into the Code\nWant to explore the complete implementation? Check out the full source code and additional examples in our GitHub repository:\nExplore More Examples\nGet hands-on with the complete source code, configuration files, and additional examples to accelerate your learning.\nView Sentiment Example\nMore Examples \u2192\nConclusion: The Power of a Simple Primitive\nThis sentiment analysis application is a powerful demonstration of the Motia philosophy. By embracing thestepas a core primitive, we've turned a potentially complex,"
}
================================================================================
{
    "source_page": "Sentiment Analysis",
    "source_url": "https://www.motia.dev/docs/examples/sentiment-analysis =====",
    "chunk_topic": "Sentiment Analysis",
    "chunk_id": "Sentiment Analysis (Part 4)",
    "text": " learning.\nView Sentiment Example\nMore Examples \u2192\nConclusion: The Power of a Simple Primitive\nThis sentiment analysis application is a powerful demonstration of the Motia philosophy. By embracing thestepas a core primitive, we've turned a potentially complex, branching workflow into a series of simple, understandable, and scalable components.\nstep\nThis is just the beginning. From here, you can extend the application by adding new steps to handle neutral sentiment, send notifications, or store results in a database. The event-driven architecture of Motia makes it easy to add new functionality without disrupting the existing flow.\nWe encourage you to explore, experiment, and see for yourself how Motia can simplify your most complex backend challenges. Happy coding!\nExamples\nPrevious Page\nMulti-Language Processing\nMulti-Language Data Processing: Building a Unified Pipeline with Motia\nOn this page"
}
================================================================================
{
    "source_page": "Multi-Language Processing",
    "source_url": "https://www.motia.dev/docs/examples/multi-language-data-processing =====",
    "chunk_topic": "Multi-Language Processing",
    "chunk_id": "Multi-Language Processing (Part 1)",
    "text": "Multi-Language Processing\nMulti-Language Data Processing: Building a Unified Pipeline with Motia\nModern backend development often requires combining the strengths of different programming languages. TypeScript for APIs, Python for data processing and AI, JavaScript for rapid prototyping. Traditional approaches involve complex microservices architectures with intricate communication patterns.\nThis comprehensive guide explores how to build a unified multi-language data processing pipeline using Motia'sstepprimitive. We'll cover:\nSteps as Core Primitive: How steps unify different languages under a single abstraction.\nBuilding the Pipeline: A step-by-step guide to creating a cohesive multi-language data processing workflow.\nUnified Execution Model: How steps enable seamless communication between different runtime environments.\nHands-On Development: How to build, run, and observe your unified multi-language pipeline.\nLet's build a production-ready data processing system where steps unify TypeScript, Python, and JavaScript into a single cohesive workflow.\nThe Power of Steps: A Unified Multi-Language Primitive\nAt its core, our data processing pipeline demonstrates howstepssolve the fundamental challenge of multi-language systems: unifying different programming languages under a single, coherent abstraction. Traditional polyglot architectures require complex inter-process communication and deployment coordination. Motia'sstepprimitive unifies everything.\nSteps enable true language unification:\nTypeScriptsteps: Strong typing and excellent tooling for APIs and orchestration\nPythonsteps: Rich ecosystem for data processing, ML, and scientific computing\nJavaScriptsteps: Dynamic processing and rapid development\nMotia's Step Primitive: The unifying abstraction that makes all languages work as a single system\nInstead of managing multiple services,stepsprovide a single programming model. Whether written in TypeScript, Python, or JavaScript, every step follows the same pattern: receive data, process it, emit events. This unification is what makes multi-language development straightforward.\nThe Anatomy of Our Multi-Language Pipeline\nOur application consists of six specialized steps, each leveraging the optimal language for its specific task. Let's explore the complete architecture.\nThe entry point for our multi-language workflow. This TypeScript API endpoint receives data, validates it with Zod schemas, and kicks off the processing pipeline.\nimport{ z }from'zod'constbodySchema=z.object({data: z.record(z.unknown()).optional(),message: z.string().optional()})// API endpoint to start the multi-language pipelineexportconstconfig={type:'api',name:'AppStarter',description:'Start the multi-language app pipeline',method:'POST',path:'/start-app',bodySchema"
}
================================================================================
{
    "source_page": "Multi-Language Processing",
    "source_url": "https://www.motia.dev/docs/examples/multi-language-data-processing =====",
    "chunk_topic": "Multi-Language Processing",
    "chunk_id": "Multi-Language Processing (Part 2)",
    "text": ": z.string().optional()})// API endpoint to start the multi-language pipelineexportconstconfig={type:'api',name:'AppStarter',description:'Start the multi-language app pipeline',method:'POST',path:'/start-app',bodySchema,responseSchema: {200: z.object({message: z.string(),appId: z.number(),traceId: z.string()})},emits: ['app.started'],flows: ['data-processing']}asconstexportconsthandler=async(req:any, {logger,emit,traceId}:any)=>{logger.info('\ud83d\ude80 Starting multi-language app', { body: req.body, traceId })constappData={id: Date.now(),input: req.body.data||{},started_at:newDate().toISOString(),traceId}// Emit to next stepawaitemit({topic:'app.started',data: appData})logger.info('\u2705 App started successfully', {appId: appData.id,traceId})return{status:200,body: {message:'Multi-language app started successfully',appId: appData.id,traceId}}}\nimport{ z }from'zod'constbodySchema=z.object({data: z.record(z.unknown()).optional(),message: z.string().optional()})// API endpoint to start the multi-language pipelineexportconstconfig={type:'api',name:'AppStarter',description:'Start the multi-language app pipeline',method:'POST',path:'/start-app',bodySchema,responseSchema: {200: z.object({message: z.string(),appId: z.number(),traceId: z.string()})},emits: ['app.started'],flows: ['data-processing']}asconstexportconsthandler=async(req:any, {logger,emit,traceId}:any)=>{logger.info('\ud83d\ude80 Starting multi-language app', { body: req.body, traceId })constappData={id: Date.now(),input: req.body.data||{},started_at:newDate().toISOString(),traceId}// Emit to next stepawaitemit({topic:'app.started',data: appData})logger.info('\u2705 App started successfully', {appId: appData.id,traceId})return{status:200,body: {message:'Multi-language app started successfully',appId: appData.id,traceId}}}\nType Definitions\nOur unified system uses shared TypeScript types to ensure type safety across the multi-language pipeline:\n// types/index.tsexportinterfaceAppData{id:numberinput:Record<string"
}
================================================================================
{
    "source_page": "Multi-Language Processing",
    "source_url": "https://www.motia.dev/docs/examples/multi-language-data-processing =====",
    "chunk_topic": "Multi-Language Processing",
    "chunk_id": "Multi-Language Processing (Part 3)",
    "text": "-language app started successfully',appId: appData.id,traceId}}}\nType Definitions\nOur unified system uses shared TypeScript types to ensure type safety across the multi-language pipeline:\n// types/index.tsexportinterfaceAppData{id:numberinput:Record<string,unknown>started_at:stringtraceId:string}exportinterfaceProcessedResult{original_id:numberprocessed_at:stringresult:stringconfidence:numbermodel_version:string}exportinterfacePythonResult{id:numberpython_message:stringprocessed_by:string[]processing_time:number}exportinterfaceNotificationData{id:numbermessage:stringprocessed_by:string[]sent_at:string}exportinterfaceAppSummary{appId:numberstatus:stringcompleted_at:stringsteps_executed:string[]result:string}\n// types/index.tsexportinterfaceAppData{id:numberinput:Record<string,unknown>started_at:stringtraceId:string}exportinterfaceProcessedResult{original_id:numberprocessed_at:stringresult:stringconfidence:numbermodel_version:string}exportinterfacePythonResult{id:numberpython_message:stringprocessed_by:string[]processing_time:number}exportinterfaceNotificationData{id:numbermessage:stringprocessed_by:string[]sent_at:string}exportinterfaceAppSummary{appId:numberstatus:stringcompleted_at:stringsteps_executed:string[]result:string}\nExplore the Workbench\nThe Motia Workbench provides a visual representation of your multi-language pipeline, making it easy to trace data flow between TypeScript, Python, and JavaScript steps.\nYou can monitor real-time execution, view logs from all languages in a unified interface, and trace the complete data flow from the TypeScript API through Python processing to JavaScript summary generation.\nEvent Flow Architecture\nThe pipeline follows a clear event-driven flow that connects all languages seamlessly:\napp.started- TypeScript API \u2192 TypeScript Bridge\napp.started\ndata.processed- TypeScript Bridge \u2192 Python Processor\ndata.processed\npython.done- Python Processor \u2192 TypeScript Notification Handler\npython.done\nnotification.sent- TypeScript Notification \u2192 TypeScript Finalizer\nnotification.sent\napp.completed- TypeScript Finalizer \u2192 JavaScript Summary Generator\napp.completed\nEach step only needs to know the events it subscribes to and emits, creating loose coupling while maintaining strong data flow guarantees.\nKey Features & Benefits\n\ud83e\udde9Step as Universal Primitive\nEvery piece of logic\u2014whether TypeScript, Python, or JavaScript\u2014follows the same step pattern, creating true unification.\n\ud83c\udf10Seamless Language Integration\nSteps eliminate the complexity of multi-language systems by providing a unified programming model.\n\ud83d\udccaUnified Development Experience\nWrite, debug, and monitor all languages through a single interface and shared execution model.\n\u26a1Hot Reload"
}
================================================================================
{
    "source_page": "Multi-Language Processing",
    "source_url": "https://www.motia.dev/docs/examples/multi-language-data-processing =====",
    "chunk_topic": "Multi-Language Processing",
    "chunk_id": "Multi-Language Processing (Part 4)",
    "text": "Seamless Language Integration\nSteps eliminate the complexity of multi-language systems by providing a unified programming model.\n\ud83d\udccaUnified Development Experience\nWrite, debug, and monitor all languages through a single interface and shared execution model.\n\u26a1Hot Reload Across Languages\nEdit any step in any language and see changes instantly across the entire pipeline.\n\ud83d\udd04Event-Driven Communication\nSteps communicate through events, enabling loose coupling and independent scaling.\n\ud83c\udfafSingle Deployment Model\nDeploy all languages together as a cohesive system, not as separate microservices.\n\ud83d\udc0dPython Step Naming\nPython steps use the_step.pysuffix convention for proper module resolution (e.g.,simple-python_step.py).\n_step.py\nsimple-python_step.py\nTrying It Out\nReady to build your first multi-language Motia application? Let's get it running.\nCreate Your Motia App\nStart by creating a new Motia project with the interactive setup.\nnpxmotia@latestcreate\nnpxmotia@latestcreate\nNavigate and Start Development\nMove into your project directory and start the development server.\ncdmy-app# Replace with your project namenpmrundev\ncdmy-app# Replace with your project namenpmrundev\nOpen the Workbench\nNavigate tohttp://localhost:3000to access the Workbench and run your workflow.\nhttp://localhost:3000\nTest the Multi-Language Pipeline\nSend a request to your API endpoint to see the multi-language workflow in action:\ncurl-XPOSThttp://localhost:3000/start-app\\-H\"Content-Type: application/json\"\\-d'{\"data\": {\"test\": \"value\"}, \"message\": \"Hello!\"}'\ncurl-XPOSThttp://localhost:3000/start-app\\-H\"Content-Type: application/json\"\\-d'{\"data\": {\"test\": \"value\"}, \"message\": \"Hello!\"}'\nWatch in the Workbench as your data flows through:\nTypeScriptvalidation and event emission\nTypeScriptbridge processing and forwarding\nPythondata processing with rich logging\nTypeScriptnotification handling\nTypeScriptfinalization and aggregation\nJavaScriptsummary generation and metrics\n\ud83d\udcbb Dive into the Code\nWant to explore multi-language workflows further? Check out additional examples and the complete source code:\nMulti-Language Examples\nAccess complete multi-language implementations, configuration examples, and learn how to integrate TypeScript, Python, and JavaScript in production applications.\nExplore Examples\nQuick Start \u2192\nConclusion: The Power of Unification Through Steps\nThis multi"
}
================================================================================
{
    "source_page": "Multi-Language Processing",
    "source_url": "https://www.motia.dev/docs/examples/multi-language-data-processing =====",
    "chunk_topic": "Multi-Language Processing",
    "chunk_id": "Multi-Language Processing (Part 5)",
    "text": " source code:\nMulti-Language Examples\nAccess complete multi-language implementations, configuration examples, and learn how to integrate TypeScript, Python, and JavaScript in production applications.\nExplore Examples\nQuick Start \u2192\nConclusion: The Power of Unification Through Steps\nThis multi-language data processing pipeline demonstrates howstepsfundamentally change multi-language development. By providing a single primitive that works across TypeScript, Python, and JavaScript, we've eliminated the traditional complexity of polyglot architectures.\nThe step primitive enables true unification:\nUniversal Pattern- Every step, regardless of language, follows the same receive-process-emit pattern\nSeamless Integration- Add Ruby, Go, Rust, or any language using the same step abstraction\nUnified Deployment- All languages deploy together as a single, coherent system\nShared Development Model- Write, debug, and monitor everything through the same interface\nKey benefits of step-based unification:\nSingle Mental Model- Learn the step pattern once, apply it to any language\nCohesive System- All components work together as parts of one application, not separate services\nConsistent Experience- Development, debugging, and monitoring work the same way across all languages\nNatural Scaling- Each step can scale independently while maintaining system coherence\nExtend your pipeline with more steps:\nAdd specialized processing steps for different data types and business logic\nIntegrate machine learning workflows with Python steps for AI processing\nBuild real-time analytics with streaming steps for live data processing\nConnect to enterprise systems through database and API integration steps\nImplement scheduled processing with cron steps for batch operations\nThestep primitivemakes all extensions natural and straightforward\u2014every new capability follows the same unified pattern.\nReady to unify your multi-language systems? Start building with steps today!\nSentiment Analysis\nDynamic Workflows: Building a Sentiment Analyzer with Motia\nAI Content Moderation\nIntelligent Content Moderation: Building Human-in-the-Loop Systems with Motia\nOn this page"
}
================================================================================
{
    "source_page": "AI Content Moderation",
    "source_url": "https://www.motia.dev/docs/examples/ai-content-moderation =====",
    "chunk_topic": "AI Content Moderation",
    "chunk_id": "AI Content Moderation (Part 1)",
    "text": "AI Content Moderation\nIntelligent Content Moderation: Building Human-in-the-Loop Systems with Motia\nIn today's digital landscape, content moderation is crucial for maintaining safe and appropriate user experiences. Whether you're building a social platform, forum, or any user-generated content system, you need intelligent moderation that can scale with your user base while maintaining human oversight for complex decisions.\nThis comprehensive guide explores how to build a production-ready content moderation system using Motia's event-driven architecture. We'll cover:\nAI-Powered Analysis: Using OpenAI for text toxicity detection and image safety analysis\nConfidence-Based Routing: Automatically handling clear cases while flagging uncertain content for human review\nSlack Integration: Creating interactive moderation workflows within existing team communication tools\nHuman-in-the-Loop: Seamlessly integrating human decision-making into automated processes\nLet's build a content moderation system that scales intelligently.\nThe Power of Intelligent Content Moderation\nAt its core, our content moderation system solves a fundamental challenge: how do you efficiently moderate user-generated content at scale while maintaining human oversight for complex decisions? Traditional approaches often involve either fully manual processes that don't scale or fully automated systems that lack nuance.\nOur Motia-powered solution combines the best of both worlds through intelligent routing:\nOpenAI Integration: Advanced AI analysis for text toxicity and image safety detection\nConfidence-Based Routing: Automatic handling of clear cases, human review for uncertain content\nSlack Integration: Interactive moderation workflows within existing team communication tools\nMotia Framework: Event-driven orchestration with built-in state management and error handling\nInstead of a monolithic moderation system, we get a flexible architecture where each component can be scaled, modified, or replaced independently.\nThe Anatomy of Our Content Moderation System\nOur application consists of six specialized steps, each handling a specific part of the moderation workflow. Let's explore the complete architecture.\nThe entry point for content moderation. This API endpoint receives user-generated content (text and/or images) and initiates the moderation workflow.\nimport{ z }from\"zod\";import{ ApiRouteConfig, Handlers }from\"motia\";constContentSubmitInputSchema=z.object({text: z.string().optional(),imageUrl: z.string().optional(),userId: z.string(),platform: z.string(),});exportconstconfig:ApiRouteConfig={type:\"api\",name:\"ContentSubmitAPI\",description:\"Receives user-generated content for moderation\",path:\"/content/submit\",method:\"POST\",bodySchema:"
}
================================================================================
{
    "source_page": "AI Content Moderation",
    "source_url": "https://www.motia.dev/docs/examples/ai-content-moderation =====",
    "chunk_topic": "AI Content Moderation",
    "chunk_id": "AI Content Moderation (Part 2)",
    "text": "(),platform: z.string(),});exportconstconfig:ApiRouteConfig={type:\"api\",name:\"ContentSubmitAPI\",description:\"Receives user-generated content for moderation\",path:\"/content/submit\",method:\"POST\",bodySchema: ContentSubmitInputSchema,emits: [\"content.submitted\"],flows: [\"content-moderation\"],};exportconsthandler:Handlers[\"ContentSubmitAPI\"]=async(req,{logger,emit})=>{const{text,imageUrl,userId,platform}=req.body;constsubmissionId=`sub_${Date.now()}_${Math.random().toString(36).slice(2,11)}`;logger.info(`Content submitted for moderation`, {submissionId,hasText:!!text,hasImage:!!imageUrl,userId,platform,});awaitemit({topic:\"content.submitted\",data: {submissionId,text,imageUrl,userId,platform,timestamp:newDate().toISOString(),},});return{status:200,body: {message:\"Content submitted for moderation\",submissionId,},};};\nimport{ z }from\"zod\";import{ ApiRouteConfig, Handlers }from\"motia\";constContentSubmitInputSchema=z.object({text: z.string().optional(),imageUrl: z.string().optional(),userId: z.string(),platform: z.string(),});exportconstconfig:ApiRouteConfig={type:\"api\",name:\"ContentSubmitAPI\",description:\"Receives user-generated content for moderation\",path:\"/content/submit\",method:\"POST\",bodySchema: ContentSubmitInputSchema,emits: [\"content.submitted\"],flows: [\"content-moderation\"],};exportconsthandler:Handlers[\"ContentSubmitAPI\"]=async(req,{logger,emit})=>{const{text,imageUrl,userId,platform}=req.body;constsubmissionId=`sub_${Date.now()}_${Math.random().toString(36).slice(2,11)}`;logger.info(`Content submitted for moderation`, {submissionId,hasText:!!text,hasImage:!!imageUrl,userId,platform,});awaitemit({topic:\"content.submitted\",data: {submissionId,text,imageUrl,userId,platform,timestamp:newDate().toISOString(),},});return{status:200,body: {message:\"Content submitted for moderation\",submissionId,},};};\nExplore the Workbench\nThe Motia Workbench provides a visual representation of your content moderation pipeline, making it easy to understand the flow and monitor moderation decisions in real-time"
}
================================================================================
{
    "source_page": "AI Content Moderation",
    "source_url": "https://www.motia.dev/docs/examples/ai-content-moderation =====",
    "chunk_topic": "AI Content Moderation",
    "chunk_id": "AI Content Moderation (Part 3)",
    "text": ",body: {message:\"Content submitted for moderation\",submissionId,},};};\nExplore the Workbench\nThe Motia Workbench provides a visual representation of your content moderation pipeline, making it easy to understand the flow and monitor moderation decisions in real-time.\nYou can monitor real-time content analysis, view Slack notifications, and trace the execution of each moderation decision directly in the Workbench interface. This makes development and debugging significantly easier compared to traditional monolithic moderation systems.\nHuman-in-the-Loop Workflow Demo\nLet's see the complete human-in-the-loop process in action using a real example. We'll submit problematic content and watch it flow through the moderation pipeline.\nStep 1: Submit Content for Moderation\nSubmit the sample content that should trigger human review:\ncurl-XPOSThttp://localhost:3000/content/submit\\-H\"Content-Type: application/json\"\\-d'{\"text\": \"I hate this stupid garbage, it\\'scompletetrashandmakesmewanttohurtsomeone\",\"userId\": \"user456\",\"platform\": \"web\"}'\ncurl-XPOSThttp://localhost:3000/content/submit\\-H\"Content-Type: application/json\"\\-d'{\"text\": \"I hate this stupid garbage, it\\'scompletetrashandmakesmewanttohurtsomeone\",\"userId\": \"user456\",\"platform\": \"web\"}'\nStep 2: AI Analysis & Routing\nThe system will:\nAnalyze the contentusing OpenAI's GPT-4 for toxicity detection\nCalculate risk scoresbased on detected harmful content\nRoute for human reviewsince the content contains hate speech and violence references\nYou'll see logs like:\nContent submitted for moderation: submissionId=sub_123, hasText=true, userId=user456Starting content analysis: submissionId=sub_123, hasText=trueContent analysis completed: submissionId=sub_123, overallScore=0.87, textScore=0.87Content needs human review: submissionId=sub_123, overallScore=0.87\nContent submitted for moderation: submissionId=sub_123, hasText=true, userId=user456Starting content analysis: submissionId=sub_123, hasText=trueContent analysis completed: submissionId=sub_123, overallScore=0.87, textScore=0.87Content needs human review: submissionId=sub_123, overallScore=0.87\nStep 3: Slack Notification for Human Review\nThe system automatically sends an interactive"
}
================================================================================
{
    "source_page": "AI Content Moderation",
    "source_url": "https://www.motia.dev/docs/examples/ai-content-moderation =====",
    "chunk_topic": "AI Content Moderation",
    "chunk_id": "AI Content Moderation (Part 4)",
    "text": "_123, overallScore=0.87, textScore=0.87Content needs human review: submissionId=sub_123, overallScore=0.87\nStep 3: Slack Notification for Human Review\nThe system automatically sends an interactive message to your moderation team in Slack:\nThe Slack message includes:\nRisk score: 87% confidence of harmful content\nPriority level: HIGH (since score \u2265 70%)\nAI analysis: Detailed breakdown of detected issues\nInteractive buttons: Approve, Reject, or Escalate options\nStep 4: Human Decision & Execution\nWhen a moderator clicks a button in Slack:\nDecision is recordedwith moderator attribution\nContent is processedaccording to the decision\nUser is notifiedof the moderation outcome\nAudit trail is maintainedfor compliance\nThe complete workflow demonstrates how AI handles the initial analysis while humans provide the final judgment for nuanced decisions.\nKey Features & Benefits\n\ud83e\udd16AI-Powered Analysis\nAdvanced OpenAI integration for both text toxicity detection and image safety analysis with confidence scoring.\n\ud83c\udfafIntelligent Routing\nConfidence-based decision making that automatically handles clear cases while flagging uncertain content for human review.\n\ud83d\udcacSlack Integration\nInteractive moderation workflows within existing team communication tools - no custom dashboard required.\n\ud83d\udc65Human-in-the-Loop\nSeamless integration of human decision-making with approve/reject/escalate buttons and contextual information.\n\ud83d\udccaPriority-Based Routing\nContent is routed to different Slack channels based on risk level and urgency.\n\ud83d\udd12Security & Compliance\nBuilt-in signature verification, audit trails, and comprehensive logging for compliance requirements.\nGetting Started\nReady to build your own intelligent content moderation system? Here's how to set it up and run it.\n1. Install Dependencies\nInstall the necessary npm packages and set up the development environment.\nnpminstall\nnpminstall\n2. Configure Environment Variables\nCreate a.envfile with your API keys and Slack configuration:\n.env\n# Required: OpenAI API key for content analysisOPENAI_API_KEY=\"sk-...\"# Required: Slack bot configurationSLACK_BOT_TOKEN=\"xoxb-your-bot-token\"SLACK_SIGNING_SECRET=\"your-signing-secret\"# Required: Slack channels for different priority levelsSLACK_CHANNEL_MODERATION=\"C1234567890\"# Normal prioritySLACK_CHANNEL_URGENT=\"C0987654321\"# High prioritySLACK_CHANNEL_ESCALATED=\"C1122334455\"# Escalated content"
}
================================================================================
{
    "source_page": "AI Content Moderation",
    "source_url": "https://www.motia.dev/docs/examples/ai-content-moderation =====",
    "chunk_topic": "AI Content Moderation",
    "chunk_id": "AI Content Moderation (Part 5)",
    "text": " priority levelsSLACK_CHANNEL_MODERATION=\"C1234567890\"# Normal prioritySLACK_CHANNEL_URGENT=\"C0987654321\"# High prioritySLACK_CHANNEL_ESCALATED=\"C1122334455\"# Escalated content\n# Required: OpenAI API key for content analysisOPENAI_API_KEY=\"sk-...\"# Required: Slack bot configurationSLACK_BOT_TOKEN=\"xoxb-your-bot-token\"SLACK_SIGNING_SECRET=\"your-signing-secret\"# Required: Slack channels for different priority levelsSLACK_CHANNEL_MODERATION=\"C1234567890\"# Normal prioritySLACK_CHANNEL_URGENT=\"C0987654321\"# High prioritySLACK_CHANNEL_ESCALATED=\"C1122334455\"# Escalated content\n3. Set Up Slack Integration\nCreate a Slack app with the following permissions:chat:write- Send messages to channelschannels:read- Access channel information\nchat:write- Send messages to channels\nchat:write\nchannels:read- Access channel information\nchannels:read\nEnable Interactive Components and set webhook URL to:https://your-domain.com/slack/webhook\nhttps://your-domain.com/slack/webhook\nInstall the app to your workspace\nCopy the bot token and signing secret to your.envfile\n.env\n4. Run the Moderation System\nStart the Motia development server to begin processing content.\nnpmrundev\nnpmrundev\nAdvanced Configuration\nAdjusting Confidence Thresholds\nModify the decision thresholds in the content router step:\n// In 03-content-router.step.tsif(overallScore<=0.05) {decision=\"approved\";// Auto-approve threshold (5%)}elseif(overallScore>=0.95) {decision=\"rejected\";// Auto-reject threshold (95%)}else{decision=\"review\";// Human review range (5-95%)}\n// In 03-content-router.step.tsif(overallScore<=0.05) {decision=\"approved\";// Auto-approve threshold (5%)}elseif(overallScore>=0.95) {decision=\"rejected\";// Auto-reject threshold (95%)}else{decision=\"review\";// Human review range (5-95%)}\nCustom Channel Routing\nImplement custom routing logic based on content type or user behavior:\n// Route based on user history or content typeconstchannel=getChannelForContent(contentType, userHistory, riskScore);\n// Route based on user history or content typeconstchannel=getChannelForContent"
}
================================================================================
{
    "source_page": "AI Content Moderation",
    "source_url": "https://www.motia.dev/docs/examples/ai-content-moderation =====",
    "chunk_topic": "AI Content Moderation",
    "chunk_id": "AI Content Moderation (Part 6)",
    "text": " custom routing logic based on content type or user behavior:\n// Route based on user history or content typeconstchannel=getChannelForContent(contentType, userHistory, riskScore);\n// Route based on user history or content typeconstchannel=getChannelForContent(contentType, userHistory, riskScore);\nIntegration with External Systems\nExtend the action executor to integrate with your existing systems:\n// In 06-action-executor.step.tscase\"approved\":awaitpublishContent(submissionId);awaitnotifyUser(userId,\"Your content has been approved\");break;\n// In 06-action-executor.step.tscase\"approved\":awaitpublishContent(submissionId);awaitnotifyUser(userId,\"Your content has been approved\");break;\n\ud83d\udcbb Dive into the Code\nWant to explore the complete content moderation implementation? Check out the full source code, including all steps, Slack integration, and production-ready configuration:\nComplete Content Moderation System\nAccess the full implementation with AI analysis, Slack integration, and human-in-the-loop workflows.\nView Content Moderation Example\nMore Examples \u2192\nConclusion: Intelligent Content Moderation at Scale\nThis content moderation system demonstrates the power of combining AI analysis with human oversight in an event-driven architecture. By breaking down moderation into discrete, specialized components, we've created a system that's not only intelligent but also flexible and maintainable.\nThe human-in-the-loop approach means you can:\nScale efficiently: Automatically handle 80-90% of content while maintaining quality\nAdapt quickly: Adjust thresholds and routing logic without system changes\nMaintain oversight: Human moderators focus on complex cases that require judgment\nIntegrate seamlessly: Use existing team communication tools like Slack\nKey architectural benefits:\nIntelligent routing: Confidence-based decisions reduce human workload\nFlexible integration: Works with any team communication platform\nAudit compliance: Complete decision trails and moderator attribution\nScalable architecture: Each component can be scaled independently\nFrom here, you can extend the system by:\nAdding support for video content moderation\nImplementing custom AI models for specific content types\nBuilding analytics dashboards for moderation insights\nIntegrating with user management and content management systems\nAdding escalation policies and moderator workflows\nThe event-driven architecture makes all of these extensions straightforward to implement without disrupting the existing moderation pipeline.\nReady to build content moderation that scales with your platform? Start building with Motia today!\nMulti-Language Processing\nMulti-Language Data Processing: Building a Unified Pipeline with Motia\nRAG PDF Analyzer\nIntelligent Document Processing: Building a R"
}
================================================================================
{
    "source_page": "AI Content Moderation",
    "source_url": "https://www.motia.dev/docs/examples/ai-content-moderation =====",
    "chunk_topic": "AI Content Moderation",
    "chunk_id": "AI Content Moderation (Part 7)",
    "text": " pipeline.\nReady to build content moderation that scales with your platform? Start building with Motia today!\nMulti-Language Processing\nMulti-Language Data Processing: Building a Unified Pipeline with Motia\nRAG PDF Analyzer\nIntelligent Document Processing: Building a RAG System with Motia\nOn this page"
}
================================================================================
{
    "source_page": "RAG PDF Analyzer",
    "source_url": "https://www.motia.dev/docs/examples/rag-docling-weaviate =====",
    "chunk_topic": "RAG PDF Analyzer",
    "chunk_id": "RAG PDF Analyzer (Part 1)",
    "text": "RAG PDF Analyzer\nIntelligent Document Processing: Building a RAG System with Motia\nIn the era of AI-powered applications, the ability to extract insights from documents is crucial. Whether you're building a knowledge base, a research assistant, or a customer support system, you need to transform static PDFs into queryable, intelligent systems. This is where Retrieval-Augmented Generation (RAG) architecture shines, and where the Motia framework provides an elegant solution.\nThis comprehensive guide explores how to build a production-ready RAG system that intelligently processes PDFs and answers questions about their content. We'll cover:\nThe RAG Architecture: Understanding how document processing, vector storage, and AI generation work together.\nMotia's Event-Driven Approach: Howstepscreate a scalable, maintainable RAG pipeline.\nsteps\nBuilding the Workflow: A detailed walkthrough of our polyglot processing pipeline.\nAdvanced Features: Real-time progress tracking, error handling, and production considerations.\nHands-On Testing: How to ingest documents and query your knowledge base.\nLet's transform your documents into an intelligent AI assistant.\nThe Power of Intelligent Document Processing\nAt its core, our RAG agent solves a fundamental challenge: how do you make unstructured documents searchable and queryable by AI? Traditional approaches often involve complex, monolithic systems that are difficult to scale and maintain. Our Motia-powered solution breaks this down into discrete, event-driven steps that each handle a specific aspect of the pipeline.\nThe magic happens through the integration of three powerful technologies:\nDocling: Advanced PDF parsing with intelligent chunking that preserves document structure\nWeaviate: Cloud-native vector database with built-in OpenAI integration\nMotia: Event-driven framework that orchestrates the entire pipeline\nInstead of a brittle, tightly-coupled system, we get a resilient architecture where each component can be scaled, modified, or replaced independently.\nThe Anatomy of Our RAG Pipeline\nOur application consists of seven specialized steps, each handling a specific part of the document processing and querying workflow. Let's explore the complete architecture.\nThe entry point for document ingestion. This API endpoint receives a folder path, kicks off the processing pipeline, and returns immediately with a tracking ID for real-time progress monitoring.\nimport{ Handlers }from'motia'import{ z }from'zod'import{ v4asuuidv4 }from'uuid'exportconstconfig={type:'api',name:'api-process-pdfs',description:'API endpoint to"
}
================================================================================
{
    "source_page": "RAG PDF Analyzer",
    "source_url": "https://www.motia.dev/docs/examples/rag-docling-weaviate =====",
    "chunk_topic": "RAG PDF Analyzer",
    "chunk_id": "RAG PDF Analyzer (Part 2)",
    "text": "{ Handlers }from'motia'import{ z }from'zod'import{ v4asuuidv4 }from'uuid'exportconstconfig={type:'api',name:'api-process-pdfs',description:'API endpoint to start PDF processing pipeline',path:'/api/rag/process-pdfs',method:'POST',emits: ['rag.read.pdfs'],bodySchema: z.object({folderPath: z.string().min(1,'folderPath is required'),}),flows: ['rag-workflow'],}asconstexportconsthandler:Handlers['api-process-pdfs']=async(req, {emit,logger})=>{const{folderPath}=req.bodyconststreamId=uuidv4()logger.info('Starting PDF processing pipeline', { folderPath, streamId })// Emit event to start the processing chainawaitemit({topic:'rag.read.pdfs',data: { folderPath, streamId },})return{status:200,body: {message:'PDF processing started',streamId,status:'processing'},}}\nimport{ Handlers }from'motia'import{ z }from'zod'import{ v4asuuidv4 }from'uuid'exportconstconfig={type:'api',name:'api-process-pdfs',description:'API endpoint to start PDF processing pipeline',path:'/api/rag/process-pdfs',method:'POST',emits: ['rag.read.pdfs'],bodySchema: z.object({folderPath: z.string().min(1,'folderPath is required'),}),flows: ['rag-workflow'],}asconstexportconsthandler:Handlers['api-process-pdfs']=async(req, {emit,logger})=>{const{folderPath}=req.bodyconststreamId=uuidv4()logger.info('Starting PDF processing pipeline', { folderPath, streamId })// Emit event to start the processing chainawaitemit({topic:'rag.read.pdfs',data: { folderPath, streamId },})return{status:200,body: {message:'PDF processing started',streamId,status:'processing'},}}\nExplore the Workbench\nThe Motia Workbench provides a visual representation of your RAG pipeline, making it easy to understand the flow and debug any issues.\nYou can monitor real-time processing, view logs, and trace the execution of each step directly in the Workbench interface. This makes development and debugging significantly easier compared to traditional monolithic approaches.\nKey Features & Benefits\n\ud83d\ude80Event"
}
================================================================================
{
    "source_page": "RAG PDF Analyzer",
    "source_url": "https://www.motia.dev/docs/examples/rag-docling-weaviate =====",
    "chunk_topic": "RAG PDF Analyzer",
    "chunk_id": "RAG PDF Analyzer (Part 3)",
    "text": " any issues.\nYou can monitor real-time processing, view logs, and trace the execution of each step directly in the Workbench interface. This makes development and debugging significantly easier compared to traditional monolithic approaches.\nKey Features & Benefits\n\ud83d\ude80Event-Driven Architecture\nEach step is independent and communicates through events, making the system highly scalable and maintainable.\n\ud83e\udde0Intelligent Document Processing\nDocling's hybrid chunking preserves document structure while creating optimal chunks for embedding.\n\u26a1High-Performance Vector Search\nWeaviate's cloud-native architecture provides fast, scalable similarity search with built-in OpenAI integration.\n\ud83d\udd04Real-Time Progress Tracking\nMonitor document processing progress with detailed logging and status updates.\n\ud83c\udf10Polyglot Support\nSeamlessly combine Python (Docling) and TypeScript (orchestration) in a single workflow.\n\ud83d\udee1\ufe0fProduction-Ready\nBuilt-in error handling, batch processing, and resource cleanup ensure reliability.\nTrying It Out\nReady to build your own intelligent document assistant? Let's get the system running.\nInstall Dependencies\nInstall both Node.js and Python dependencies. The prepare script automatically sets up the Python virtual environment.\nnpminstall\nnpminstall\nSet Your Environment Variables\nYou'll need API keys for OpenAI and Weaviate Cloud. Create a.envfile:\n.env\nOPENAI_API_KEY=\"sk-...\"WEAVIATE_URL=\"https://your-cluster.weaviate.network\"WEAVIATE_API_KEY=\"your-weaviate-api-key\"\nOPENAI_API_KEY=\"sk-...\"WEAVIATE_URL=\"https://your-cluster.weaviate.network\"WEAVIATE_API_KEY=\"your-weaviate-api-key\"\nRun the Project\nStart the Motia development server to begin processing documents.\nnpmrundev\nnpmrundev\nProcess Your First Documents\nAdd some PDF files to thedocs/pdfs/folder, then start the ingestion pipeline:\ndocs/pdfs/\ncurl-XPOSThttp://localhost:3000/api/rag/process-pdfs\\-H\"Content-Type: application/json\"\\-d'{\"folderPath\":\"docs/pdfs\"}'\ncurl-XPOSThttp://localhost:3000/api/rag/process-pdfs\\-H\"Content-Type: application/json\"\\-d'{\"folderPath\":\"docs/pdfs\"}'\nWatch the logs as your documents are processed through the pipeline:\nPDF Reading: Files are discovered and queued\nDocling Processing: Intelligent chunking with structure"
}
================================================================================
{
    "source_page": "RAG PDF Analyzer",
    "source_url": "https://www.motia.dev/docs/examples/rag-docling-weaviate =====",
    "chunk_topic": "RAG PDF Analyzer",
    "chunk_id": "RAG PDF Analyzer (Part 4)",
    "text": "H\"Content-Type: application/json\"\\-d'{\"folderPath\":\"docs/pdfs\"}'\nWatch the logs as your documents are processed through the pipeline:\nPDF Reading: Files are discovered and queued\nDocling Processing: Intelligent chunking with structure preservation\nWeaviate Loading: Chunks are embedded and stored\nQuery Your Knowledge Base\nOnce processing is complete, you can ask questions about your documents:\ncurl-XPOSThttp://localhost:3000/api/rag/query\\-H\"Content-Type: application/json\"\\-d'{\"query\":\"What are the main topics covered in these documents?\",\"limit\":3}'\ncurl-XPOSThttp://localhost:3000/api/rag/query\\-H\"Content-Type: application/json\"\\-d'{\"query\":\"What are the main topics covered in these documents?\",\"limit\":3}'\ncurl-XPOSThttp://localhost:3000/api/rag/query\\-H\"Content-Type: application/json\"\\-d'{\"query\":\"What methodology was used in the research?\",\"limit\":5}'\ncurl-XPOSThttp://localhost:3000/api/rag/query\\-H\"Content-Type: application/json\"\\-d'{\"query\":\"What methodology was used in the research?\",\"limit\":5}'\nThe response includes both a generated answer and the source chunks with page numbers for verification.\nAdvanced Usage\nCustom Chunking Strategies\nModify the Python processing step to implement custom chunking logic:\n# In process-pdfs.step.pychunker=HybridChunker(tokenizer=\"cl100k_base\",max_tokens=1024,# Larger chunks for more contextoverlap_tokens=100,# More overlap for better continuityheading_hierarchies=True,split_by_page=True# Preserve page boundaries)\n# In process-pdfs.step.pychunker=HybridChunker(tokenizer=\"cl100k_base\",max_tokens=1024,# Larger chunks for more contextoverlap_tokens=100,# More overlap for better continuityheading_hierarchies=True,split_by_page=True# Preserve page boundaries)\nBatch Processing Optimization\nAdjust batch sizes in the Weaviate loading step for optimal performance:\n// In load-weaviate.step.tsconstBATCH_SIZE=50// Smaller batches for large documents\n// In load-weaviate.step.tsconstBATCH_SIZE=50// Smaller batches for large documents\nMulti-Collection Support\nExtend the system to handle different document types by creating separate Weaviate collections:\nconstCOLLECTIONS={research:'ResearchPapers',manual"
}
================================================================================
{
    "source_page": "RAG PDF Analyzer",
    "source_url": "https://www.motia.dev/docs/examples/rag-docling-weaviate =====",
    "chunk_topic": "RAG PDF Analyzer",
    "chunk_id": "RAG PDF Analyzer (Part 5)",
    "text": "ate.step.tsconstBATCH_SIZE=50// Smaller batches for large documents\nMulti-Collection Support\nExtend the system to handle different document types by creating separate Weaviate collections:\nconstCOLLECTIONS={research:'ResearchPapers',manuals:'TechnicalManuals',reports:'BusinessReports'}\nconstCOLLECTIONS={research:'ResearchPapers',manuals:'TechnicalManuals',reports:'BusinessReports'}\nTroubleshooting\nCommon Issues\nENOENT Path Errors: The system automatically handles path normalization, but ensure yourfolderPathis relative to the project root.\nfolderPath\nEmpty Answers: Check that documents were successfully processed by examining the logs. Verify your OpenAI API key is valid.\nWeaviate Connection Issues: Ensure yourWEAVIATE_URLandWEAVIATE_API_KEYare correct and your cluster is running.\nWEAVIATE_URL\nWEAVIATE_API_KEY\nPerformance Tips\nDocument Size: For large PDFs, consider preprocessing to split them into smaller files\nBatch Size: Adjust the Weaviate batch size based on your cluster's capacity\nChunking Strategy: Experiment with different chunk sizes and overlap for your specific use case\n\ud83d\udcbb Dive into the Code\nWant to explore the complete RAG implementation? Check out the full source code, including all steps, configuration files, and setup instructions:\nComplete RAG Implementation\nAccess the full source code for this RAG agent, including Python processing scripts, TypeScript orchestration, and production configuration.\nView RAG Example\nMore Examples \u2192\nConclusion: The Future of Document Intelligence\nThis RAG system demonstrates the power of combining best-in-class technologies with Motia's event-driven architecture. By breaking down complex document processing into discrete, manageable steps, we've created a system that's not only powerful but also maintainable and scalable.\nThe polyglot nature of the solution: Python for document processing, TypeScript for orchestration, shows how Motia enables you to use the right tool for each job without sacrificing integration or maintainability.\nFrom here, you can extend the system by:\nAdding support for other document formats (Word, PowerPoint, etc.)\nImplementing document classification and routing\nAdding real-time document updates and synchronization\nBuilding a web interface for document management\nIntegrating with existing business systems\nThe event-driven architecture makes all of these extensions straightforward to implement without disrupting the existing pipeline.\nReady to transform your documents into intelligent, queryable knowledge bases? Start building with Motia today!\nAI Content"
}
================================================================================
{
    "source_page": "RAG PDF Analyzer",
    "source_url": "https://www.motia.dev/docs/examples/rag-docling-weaviate =====",
    "chunk_topic": "RAG PDF Analyzer",
    "chunk_id": "RAG PDF Analyzer (Part 6)",
    "text": " management\nIntegrating with existing business systems\nThe event-driven architecture makes all of these extensions straightforward to implement without disrupting the existing pipeline.\nReady to transform your documents into intelligent, queryable knowledge bases? Start building with Motia today!\nAI Content Moderation\nIntelligent Content Moderation: Building Human-in-the-Loop Systems with Motia\nTrello Automation\nBuild an automated card progression system for Trello boards with AI-powered summaries\nOn this page"
}
================================================================================
{
    "source_page": "Trello Automation",
    "source_url": "https://www.motia.dev/docs/examples/trello-automation =====",
    "chunk_topic": "Trello Automation",
    "chunk_id": "Trello Automation (Part 1)",
    "text": "Trello Automation\nBuild an automated card progression system for Trello boards with AI-powered summaries\nLet's build a Trello automation system that:\nAutomatically progresses cards across board lists\nValidates card completeness\nGenerates AI-powered summaries for code review\nIntegrates with Slack for notifications\nMonitors due dates and sends overdue alerts\nBoard Structure\nThe Trello board is organized into four main lists:\nNew Cards: Entry point for all new cards\nIn Progress: Active development stage\nNeeds Review: Code review stage with AI summaries\nCompleted: Successfully reviewed and approved cards\nThe Steps\nVisual Overview\nHere's how the automation flow works:\nCard Validation\u2192 Checks for required information\nProgress Tracking\u2192 Moves cards between lists\nReview Process\u2192 Generates AI summaries and notifies reviewers\nCompletion Handling\u2192 Processes approved cards\nTry It Out\nPrerequisites\nMake sure you have:\nTrello account with API access\nNode.js installed\nSlack workspace (for notifications)\nOpenAI API key (for AI summaries)\nClone the Repository\ngitclonegit@github.com:MotiaDev/motia-examples.gitcdexamples/trello-flow\ngitclonegit@github.com:MotiaDev/motia-examples.gitcdexamples/trello-flow\nInstall Dependencies\npnpminstall\npnpminstall\nConfigure Environment Variables\nCreate a.envfile by copying the example:\n.env\ncp.env.example.env\ncp.env.example.env\nUpdate your.envwith the following credentials:\n.env\nTRELLO_API_KEY=your_trello_api_keyTRELLO_TOKEN=your_trello_tokenOPENAI_API_KEY=your_openai_api_keyOPENAI_MODEL=your_openai_modelSLACK_WEBHOOK_URL=your_slack_webhook_urlTRELLO_NEW_TASKS_LIST_ID=your_new_tasks_list_idTRELLO_IN_PROGRESS_LIST_ID=your_in_progress_list_idTRELLO_NEEDS_REVIEW_LIST_ID=your_needs_review_list_idTRELLO_COMPLETED_LIST_ID=your_completed_list_id\nTRELLO_API_KEY=your_trello_api_keyTRELLO_TOKEN=your_trello_tokenOPENAI_API_KEY=your_openai_api_keyOPENAI_MODEL=your_openai_modelSLACK_WEBHOOK_URL=your_slack_webhook_urlTRELLO_NEW_TASKS_LIST_ID=your_new_tasks_list_idTRELLO_IN_PROGRESS_LIST_ID=your_in_progress_list_idTRELLO_NEEDS_REVIEW_LIST_ID=your_needs_review_list_idT"
}
================================================================================
{
    "source_page": "Trello Automation",
    "source_url": "https://www.motia.dev/docs/examples/trello-automation =====",
    "chunk_topic": "Trello Automation",
    "chunk_id": "Trello Automation (Part 2)",
    "text": "your_slack_webhook_urlTRELLO_NEW_TASKS_LIST_ID=your_new_tasks_list_idTRELLO_IN_PROGRESS_LIST_ID=your_in_progress_list_idTRELLO_NEEDS_REVIEW_LIST_ID=your_needs_review_list_idTRELLO_COMPLETED_LIST_ID=your_completed_list_id\nSet Up Trello Board\nCreate a new Trello board with these lists:New TasksIn ProgressNeeds ReviewCompleted\nCreate a new Trello board with these lists:\nNew Tasks\nIn Progress\nNeeds Review\nCompleted\nAdd a custom field:Status (dropdown: Todo, In Progress, Done)\nAdd a custom field:\nStatus (dropdown: Todo, In Progress, Done)\nRun the Application\npnpmdev\npnpmdev\nTest the Flow\nCreate a new card in the \"New Tasks\" list\nAssign a member to see it move to \"In Progress\"\nAdd an \"approved\" comment to see it move to \"Completed\"\nCheck Slack for notifications\nFor more detailed setup instructions and configuration options, check out thefull\ndocumentation.\nRAG PDF Analyzer\nIntelligent Document Processing: Building a RAG System with Motia\nUptime Monitor\nReal-Time Uptime Monitoring: Building a Resilient Website Monitor with Motia\nOn this page"
}
================================================================================
{
    "source_page": "Uptime Monitor",
    "source_url": "https://www.motia.dev/docs/examples/uptime-discord-monitor =====",
    "chunk_topic": "Uptime Monitor",
    "chunk_id": "Uptime Monitor (Part 1)",
    "text": "Uptime Monitor\nReal-Time Uptime Monitoring: Building a Resilient Website Monitor with Motia\nIn today's modern era, website uptime is critical for business success. Whether you're monitoring a personal blog or enterprise applications, you need a reliable system that can detect outages, send alerts, and provide visibility into your site's health. Traditional monitoring solutions often involve complex infrastructure and vendor lock-in, but there's a better way.\nThis comprehensive guide explores how to build a production-ready uptime monitoring system using Motia's event-driven architecture. We'll cover:\nEvent-Driven Monitoring: How Motia'sstepscreate a scalable, maintainable monitoring pipeline.\nsteps\nBuilding the Architecture: A detailed walkthrough of our five-component monitoring system.\nSmart Alerting: Implementing rate limiting and status change detection to prevent spam.\nLet's build a monitoring system that actually works for you.\nThe Power of Event-Driven Monitoring\nAt its core, our uptime monitoring system solves a fundamental challenge: how do you continuously monitor multiple websites without creating a brittle, monolithic application? Traditional monitoring tools often suffer from tight coupling, making them difficult to scale and customize. Our Motia-powered solution breaks this down into discrete, event-driven components that each handle a specific aspect of monitoring.\nThe magic happens through the integration of proven technologies and patterns:\nCron-Based Scheduling: Configurable check intervals using familiar cron expressions\nDiscord Webhooks: Instant notifications with rich formatting\nToken Bucket Rate Limiting: Intelligent alert throttling to prevent spam\nMotia Framework: Event-driven orchestration with built-in observability\nInstead of a monolithic monitoring daemon, we get a resilient architecture where each component can be scaled, modified, or replaced independently.\nThe Anatomy of Our Monitoring System\nOur application consists of five specialized steps, each handling a specific part of the monitoring workflow. Let's explore the complete architecture.\nThe heartbeat of our monitoring system. This cron-triggered step periodically emits check requests for all configured websites, acting as the central scheduler.\nimport{ configasenvConfig }from'../lib/env.js';exportconstconfig={type:'cron',name:'UptimeCronTrigger',cron: envConfig.cron,emits: ['check.requested'],flows: ['uptime-monitoring']};exportasyncfunctionhandler(context) {context.logger.info(`Starting uptime checks for ${envConfig.sites.length} sites`);context.logger.info(`Sites configured: ${JSON.stringify(envConfig.sites)}`);try"
}
================================================================================
{
    "source_page": "Uptime Monitor",
    "source_url": "https://www.motia.dev/docs/examples/uptime-discord-monitor =====",
    "chunk_topic": "Uptime Monitor",
    "chunk_id": "Uptime Monitor (Part 2)",
    "text": ": ['uptime-monitoring']};exportasyncfunctionhandler(context) {context.logger.info(`Starting uptime checks for ${envConfig.sites.length} sites`);context.logger.info(`Sites configured: ${JSON.stringify(envConfig.sites)}`);try{// Emit one check.requested event per configured site URLfor(consturlofenvConfig.sites) {context.logger.info(`Scheduling check for: ${url}`);awaitcontext.emit({topic:'check.requested',data: { url: url }});context.logger.info(`Successfully emitted for: ${url}`);}context.logger.info(`Successfully scheduled checks for all ${envConfig.sites.length} sites`);}catch(error) {context.logger.error('Error during cron execution:', error);throwerror;}}\nimport{ configasenvConfig }from'../lib/env.js';exportconstconfig={type:'cron',name:'UptimeCronTrigger',cron: envConfig.cron,emits: ['check.requested'],flows: ['uptime-monitoring']};exportasyncfunctionhandler(context) {context.logger.info(`Starting uptime checks for ${envConfig.sites.length} sites`);context.logger.info(`Sites configured: ${JSON.stringify(envConfig.sites)}`);try{// Emit one check.requested event per configured site URLfor(consturlofenvConfig.sites) {context.logger.info(`Scheduling check for: ${url}`);awaitcontext.emit({topic:'check.requested',data: { url: url }});context.logger.info(`Successfully emitted for: ${url}`);}context.logger.info(`Successfully scheduled checks for all ${envConfig.sites.length} sites`);}catch(error) {context.logger.error('Error during cron execution:', error);throwerror;}}\nExplore the Workbench\nThe Motia Workbench provides a visual representation of your monitoring pipeline, making it easy to understand the event flow and debug issues in real-time.\nYou can monitor real-time status checks, view Discord alert logs, and trace the execution of each step directly in the Workbench interface. This makes development and debugging significantly easier compared to traditional monitoring solutions.\nKey Features & Benefits\n\u26a1Event-Driven Architecture\nEach component is independent and communicates through events, making the system highly scalable and maintainable.\n\ud83c\udfafSmart Status Detection\nOnly triggers alerts when status actually changes (UP \u2194 DOWN), eliminating noise from temporary fluctuations.\n\ud83d\udea8Intelligent Rate Limiting\nToken bucket algorithm prevents alert spam during site fl"
}
================================================================================
{
    "source_page": "Uptime Monitor",
    "source_url": "https://www.motia.dev/docs/examples/uptime-discord-monitor =====",
    "chunk_topic": "Uptime Monitor",
    "chunk_id": "Uptime Monitor (Part 3)",
    "text": " system highly scalable and maintainable.\n\ud83c\udfafSmart Status Detection\nOnly triggers alerts when status actually changes (UP \u2194 DOWN), eliminating noise from temporary fluctuations.\n\ud83d\udea8Intelligent Rate Limiting\nToken bucket algorithm prevents alert spam during site flapping while ensuring critical alerts get through.\n\ud83d\udccaBuilt-in Observability\nComprehensive logging, health checks, and real-time status tracking with persistent storage.\n\ud83d\udd27Production-Ready\nRobust error handling, timeout management, and configurable check intervals ensure reliability.\n\ud83c\udfa8Rich Discord Alerts\nBeautiful embedded messages with response times, error details, and status transitions.\nData Flow & Event Architecture\nEvent Flow\nCron Trigger\u2192 Emitscheck.requestedevents for each configured site\ncheck.requested\nWebsite Checker\u2192 Receivescheck.requested, performs HTTP check\ncheck.requested\nStatus Update\u2192 Checker emitscheck.resultwith result\ncheck.result\nAlert Processing\u2192 Alerter receivescheck.result, detects status changes\ncheck.result\nDiscord Notification\u2192 Alerter sends webhook if status changed and rate limit allows\nStatus Storage\u2192 Status is persisted for health endpoint and future comparisons\nTrying It Out\nReady to build your own production-ready monitoring system? Let's get it running.\nInstall Dependencies\nInstall the necessary npm packages and set up the development environment.\nnpminstall\nnpminstall\nConfigure Environment Variables\nCreate a.envfile with your monitoring configuration. You'll need a Discord webhook URL and the sites you want to monitor.\n.env\n# Required: Discord webhook for alertsDISCORD_WEBHOOK=\"https://discord.com/api/webhooks/123456789/your-webhook-token\"# Required: JSON array of URLs to monitorSITES='[\"https://example.com\", \"https://api.yourdomain.com\", \"https://blog.yoursite.org\"]'# Optional: Check frequency (default: every minute)CHECK_INTERVAL_CRON=\"*/1 * * * *\"# Optional: Rate limiting (default: 3 alerts per 5 minutes)ALERT_BURST=\"3\"ALERT_WINDOW_SEC=\"300\"\n# Required: Discord webhook for alertsDISCORD_WEBHOOK=\"https://discord.com/api/webhooks/123456789/your-webhook-token\"# Required: JSON array of URLs to monitorSITES='[\"https://example.com\", \"https://api.yourdomain.com\", \"https://blog.yoursite.org\"]'# Optional: Check frequency (default: every minute)CHECK_INTERVAL_CR"
}
================================================================================
{
    "source_page": "Uptime Monitor",
    "source_url": "https://www.motia.dev/docs/examples/uptime-discord-monitor =====",
    "chunk_topic": "Uptime Monitor",
    "chunk_id": "Uptime Monitor (Part 4)",
    "text": "\"# Required: JSON array of URLs to monitorSITES='[\"https://example.com\", \"https://api.yourdomain.com\", \"https://blog.yoursite.org\"]'# Optional: Check frequency (default: every minute)CHECK_INTERVAL_CRON=\"*/1 * * * *\"# Optional: Rate limiting (default: 3 alerts per 5 minutes)ALERT_BURST=\"3\"ALERT_WINDOW_SEC=\"300\"\nSet Up Discord Webhook\nCreate a Discord webhook to receive alerts:\nGo to your Discord server settings\nNavigate toIntegrations\u2192Webhooks\nClickNew Webhook\nCopy the webhook URL and add it to your.envfile\n.env\nRun the Monitoring System\nStart the Motia development server to begin monitoring your websites.\nnpmrundev\nnpmrundev\nCheck System Health\nVerify your monitoring system is working correctly:\ncurlhttp://localhost:3000/healthz\ncurlhttp://localhost:3000/healthz\nYou should see a response with your configured sites and their current status:\n{\"status\":\"ok\",\"sitesConfigured\":3,\"lastKnown\": {\"https://example.com\": {\"url\":\"https://example.com\",\"status\":\"UP\",\"code\":200,\"responseTime\":245,\"checkedAt\":\"2024-01-15T10:30:00.000Z\",\"error\":null}},\"now\":\"2024-01-15T10:35:00.000Z\"}\n{\"status\":\"ok\",\"sitesConfigured\":3,\"lastKnown\": {\"https://example.com\": {\"url\":\"https://example.com\",\"status\":\"UP\",\"code\":200,\"responseTime\":245,\"checkedAt\":\"2024-01-15T10:30:00.000Z\",\"error\":null}},\"now\":\"2024-01-15T10:35:00.000Z\"}\nMonitor the Logs\nWatch the logs to see your monitoring system in action:\nCron triggers: Check scheduling for all configured sites\nWebsite checks: HTTP requests and response analysis\nStatus changes: UP/DOWN transitions and Discord alerts\nRate limiting: Alert suppression during site flapping\nAdvanced Configuration\nCustom Check Intervals\nModify the cron expression to change monitoring frequency:\n# Every 5 minutesCHECK_INTERVAL_CRON=\"*/5 * * * *\"# Every hourCHECK_INTERVAL_CRON=\"0 * * * *\"# Every 6 hoursCHECK_INTERVAL_CRON=\"0 */6 * * *\"# Business hours"
}
================================================================================
{
    "source_page": "Uptime Monitor",
    "source_url": "https://www.motia.dev/docs/examples/uptime-discord-monitor =====",
    "chunk_topic": "Uptime Monitor",
    "chunk_id": "Uptime Monitor (Part 5)",
    "text": " frequency:\n# Every 5 minutesCHECK_INTERVAL_CRON=\"*/5 * * * *\"# Every hourCHECK_INTERVAL_CRON=\"0 * * * *\"# Every 6 hoursCHECK_INTERVAL_CRON=\"0 */6 * * *\"# Business hours only (9 AM - 5 PM, Mon-Fri)CHECK_INTERVAL_CRON=\"* 9-17 * * 1-5\"\n# Every 5 minutesCHECK_INTERVAL_CRON=\"*/5 * * * *\"# Every hourCHECK_INTERVAL_CRON=\"0 * * * *\"# Every 6 hoursCHECK_INTERVAL_CRON=\"0 */6 * * *\"# Business hours only (9 AM - 5 PM, Mon-Fri)CHECK_INTERVAL_CRON=\"* 9-17 * * 1-5\"\nAlert Rate Limiting\nFine-tune the rate limiting to match your needs:\n# Very strict: 1 alert per 10 minutesALERT_BURST=\"1\"ALERT_WINDOW_SEC=\"600\"# More permissive: 5 alerts per 2 minutesALERT_BURST=\"5\"ALERT_WINDOW_SEC=\"120\"\n# Very strict: 1 alert per 10 minutesALERT_BURST=\"1\"ALERT_WINDOW_SEC=\"600\"# More permissive: 5 alerts per 2 minutesALERT_BURST=\"5\"ALERT_WINDOW_SEC=\"120\"\nMulti-Environment Monitoring\nSet up different monitoring configurations for different environments:\n# Production sitesSITES='[\"https://app.production.com\", \"https://api.production.com\"]'# Staging sitesSITES='[\"https://app.staging.com\", \"https://api.staging.com\"]'# Development sitesSITES='[\"https://app.dev.com\", \"http://localhost:8080\"]'\n# Production sitesSITES='[\"https://app.production.com\", \"https://api.production.com\"]'# Staging sitesSITES='[\"https://app.staging.com\", \"https://api.staging.com\"]'# Development sitesSITES='[\"https://app.dev.com\", \"http://localhost:8080\"]'\nCustom Discord Alert Formatting\nModify thecreateDiscordMessagefunction inalerter.step.jsto customize alert appearance:\ncreateDiscordMessage\nalerter.step.js\nfunctioncreateDiscordMessage(result,previousStatus) {const{url,status,code,responseTime}=result// Custom colors for your brandconstcolor=status==='UP'?0x2ecc71:0xe74c3c//"
}
================================================================================
{
    "source_page": "Uptime Monitor",
    "source_url": "https://www.motia.dev/docs/examples/uptime-discord-monitor =====",
    "chunk_topic": "Uptime Monitor",
    "chunk_id": "Uptime Monitor (Part 6)",
    "text": "ter.step.js\nfunctioncreateDiscordMessage(result,previousStatus) {const{url,status,code,responseTime}=result// Custom colors for your brandconstcolor=status==='UP'?0x2ecc71:0xe74c3c// Custom emoji and formattingconstemoji=status==='UP'?'\u2705':'\u274c'consturgency=responseTime>5000?'\ud83d\udc0c SLOW':'\u26a1 FAST'return{content:`${emoji} **${url}** is ${status}`,embeds: [{title:`${urgency} Website ${status}`,description:`**${url}** changed from ${previousStatus} to ${status}`,color,timestamp: result.checkedAt,fields: [{name:'\u23f1\ufe0f Response Time',value:`${responseTime}ms`,inline:true},{name:'\ud83d\udcca Status Code',value: code?.toString()||'N/A',inline:true}]}]}}\nfunctioncreateDiscordMessage(result,previousStatus) {const{url,status,code,responseTime}=result// Custom colors for your brandconstcolor=status==='UP'?0x2ecc71:0xe74c3c// Custom emoji and formattingconstemoji=status==='UP'?'\u2705':'\u274c'consturgency=responseTime>5000?'\ud83d\udc0c SLOW':'\u26a1 FAST'return{content:`${emoji} **${url}** is ${status}`,embeds: [{title:`${urgency} Website ${status}`,description:`**${url}** changed from ${previousStatus} to ${status}`,color,timestamp: result.checkedAt,fields: [{name:'\u23f1\ufe0f Response Time',value:`${responseTime}ms`,inline:true},{name:'\ud83d\udcca Status Code',value: code?.toString()||'N/A',inline:true}]}]}}\nTroubleshooting\nCommon Issues\nSites not being checked:\nVerifySITESenvironment variable is valid JSON\nSITES\nCheck cron expression syntax usingcrontab.guru\nReview logs for parsing errors\nDiscord alerts not working:\nVerifyDISCORD_WEBHOOKURL is correct\nDISCORD_WEBHOOK\nTest webhook manually:curl -X POST $DISCORD_WEBHOOK -H \"Content-Type: application/json\" -d '{\"content\":\"Test message\"}'\ncurl -X POST $DISCORD_WEBHOOK -H \"Content-Type: application/json\" -d '{\"content\":\"Test message\"}'\nCheck Discord webhook permissions\n"
}
================================================================================
{
    "source_page": "Uptime Monitor",
    "source_url": "https://www.motia.dev/docs/examples/uptime-discord-monitor =====",
    "chunk_topic": "Uptime Monitor",
    "chunk_id": "Uptime Monitor (Part 7)",
    "text": " -H \"Content-Type: application/json\" -d '{\"content\":\"Test message\"}'\ncurl -X POST $DISCORD_WEBHOOK -H \"Content-Type: application/json\" -d '{\"content\":\"Test message\"}'\nCheck Discord webhook permissions\nHigh memory usage:\nMonitor status store size with health endpoint\nConsider implementing status history cleanup\nReduce check frequency for many sites\nFalse positive alerts:\nIncrease timeout values in checker step\nImplement retry logic before marking as DOWN\nAdjust rate limiting to reduce noise\nPerformance Tips\nLarge Site Lists: Consider sharding across multiple instances\nSlow Sites: Implement custom timeout values per site\nHigh Frequency: Use Redis for status storage instead of file system\nAlert Fatigue: Implement escalation policies and alert grouping\nMonitoring the Monitor\nSet up monitoring for your monitoring system:\n# Monitor the health endpoint itselfcurl-fhttp://localhost:3000/healthz||echo\"Monitor is down!\"# Check for recent status updatescurlhttp://localhost:3000/healthz|jq'.lastKnown | to_entries | map(select(.value.checkedAt > (now - 300)))'# Verify all sites are being checkedcurlhttp://localhost:3000/healthz|jq'.sitesConfigured == (.lastKnown | length)'\n# Monitor the health endpoint itselfcurl-fhttp://localhost:3000/healthz||echo\"Monitor is down!\"# Check for recent status updatescurlhttp://localhost:3000/healthz|jq'.lastKnown | to_entries | map(select(.value.checkedAt > (now - 300)))'# Verify all sites are being checkedcurlhttp://localhost:3000/healthz|jq'.sitesConfigured == (.lastKnown | length)'\n\ud83d\udcbb Dive into the Code\nWant to explore the complete monitoring implementation? Check out the full source code, including all steps, utilities, and configuration examples:\nComplete Uptime Monitor\nAccess the full implementation with event steps, utility libraries, Discord integration, and production-ready configuration.\nView Monitor Example\nMore Examples \u2192\nConclusion: Monitoring That Actually Works\nThis uptime monitoring system demonstrates the power of event-driven architecture for infrastructure monitoring. By breaking down monitoring into discrete, specialized components, we've created a system that's not only reliable but also extensible and maintainable.\nThe event-driven approach means you can easily:\nAdd new notification channels(Slack, PagerDuty, email) by creating new steps\nImplement custom health checks(database connectivity, API endpoints, SSL certificates)\n"
}
================================================================================
{
    "source_page": "Uptime Monitor",
    "source_url": "https://www.motia.dev/docs/examples/uptime-discord-monitor =====",
    "chunk_topic": "Uptime Monitor",
    "chunk_id": "Uptime Monitor (Part 8)",
    "text": " reliable but also extensible and maintainable.\nThe event-driven approach means you can easily:\nAdd new notification channels(Slack, PagerDuty, email) by creating new steps\nImplement custom health checks(database connectivity, API endpoints, SSL certificates)\nScale monitoringacross multiple regions or environments\nIntegrate with existing systemswithout disrupting the core monitoring loop\nKey architectural benefits:\nResilience: Component failures don't bring down the entire system\nObservability: Built-in logging and tracing at every step\nFlexibility: Easy to modify check intervals, alert logic, or add new features\nTesting: Each component can be tested in isolation\nFrom here, you can extend the system by:\nAdding support for different check types (TCP, database, custom health endpoints)\nImplementing escalation policies and on-call rotations\nBuilding a web dashboard for historical data and trends\nAdding integration with incident management systems\nImplementing multi-region monitoring with failover\nThe event-driven architecture makes all of these extensions straightforward to implement without disrupting the existing monitoring pipeline.\nReady to build monitoring infrastructure that scales with your business? Start building with Motia today!\nTrello Automation\nBuild an automated card progression system for Trello boards with AI-powered summaries\nGitHub Stars Counter\nReal-Time GitHub Stars Counter: Building Live Updates with Motia Streams\nOn this page"
}
================================================================================
{
    "source_page": "GitHub Stars Counter",
    "source_url": "https://www.motia.dev/docs/examples/github-stars-counter =====",
    "chunk_topic": "GitHub Stars Counter",
    "chunk_id": "GitHub Stars Counter (Part 1)",
    "text": "GitHub Stars Counter\nReal-Time GitHub Stars Counter: Building Live Updates with Motia Streams\nIn today's social-driven development world, real-time metrics and live updates are essential for building engaging applications. Whether you're creating a portfolio site, an open-source project showcase, or a developer dashboard, you need systems that can display live data without complex infrastructure.\nThis comprehensive guide explores how to build a production-ready, real-time GitHub stars counter using Motia's event-driven architecture and streaming capabilities. We'll cover:\nReal-Time Streams: How Motia's streams enable effortless live data synchronization\nSecure Webhooks: Production-ready webhook signature verification and event handling\nMinimal Architecture: Building powerful real-time features with just two components\nLive Integration: How this exact counter powers the live star count on the Motia website\nLet's build a stars counter that updates in real-time across all connected clients.\n\ud83c\udfed Production-Grade Example\nThis is not a tutorial project- this is battle-tested, production-ready code that handles real traffic at scale. Every aspect has been designed for enterprise use:\n\ud83d\udd10 Enterprise Security: HMAC webhook verification, timing-safe comparisons, comprehensive input validation\n\u26a1 High Performance: Handles thousands of concurrent connections with automatic scaling\n\ud83d\udcca Full Observability: Structured logging, error tracking, and comprehensive monitoring\n\ud83d\udee1\ufe0f Error Resilience: Graceful degradation, retry logic, and fault tolerance\n\ud83c\udf0d Global Scale: Production deployment on Motia Cloud with worldwide CDN\n\ud83d\udcb0 Cost Efficient: Serverless architecture that scales to zero when not in use\nLive Proof: Powering Motia.dev Header\nThis isn't just a demo- this exact code powers the live GitHub star counter you can see right now in the header ofMotia.dev!\nLook at the top-right corner of the Motia website and you'll see:\n\ud83c\udfe0 Motialogo on the left\n\ud83d\udcd1 Blog, Docs, Manifestonavigation\n\u2b50 GitHubicon with alive star count(currently showing 7953+ stars)\n\ud83d\ude80 Vercel OSS 2025badge\nThat live-updating number next to the GitHub icon? That's this exact implementation in production, processing real webhook events and streaming updates to thousands of visitors in real-time!\nThe Power of Real-Time Simplicity\nAt its core, our GitHub stars counter solves a fundamental challenge: how do you display live, real-time metrics without complex WebSocket infrastructure or manual state management? Traditional approaches"
}
================================================================================
{
    "source_page": "GitHub Stars Counter",
    "source_url": "https://www.motia.dev/docs/examples/github-stars-counter =====",
    "chunk_topic": "GitHub Stars Counter",
    "chunk_id": "GitHub Stars Counter (Part 2)",
    "text": " to thousands of visitors in real-time!\nThe Power of Real-Time Simplicity\nAt its core, our GitHub stars counter solves a fundamental challenge: how do you display live, real-time metrics without complex WebSocket infrastructure or manual state management? Traditional approaches often involve intricate server-side event handling, client connection management, and complex state synchronization.\nOur Motia-powered solution breaks this down into just two simple components:\nGitHub Webhooks: Instant notifications when repository stars change\nMotia Streams: Real-time data synchronization with automatic state management\nProduction Security: Built-in webhook signature verification\n\ud83c\udfafLive in Action: This exact implementation powers the real-time star counter visible in the header ofMotia.dev(look for the GitHub icon with live count), updating instantly whenever developers star the repository!\nInstead of complex infrastructure, we get a resilient real-time system where data flows effortlessly from GitHub events to live client updates.\nThe Anatomy of Our Real-Time Counter\nOur application consists of just two specialized components, each handling a specific part of the real-time data flow. Let's explore the complete architecture.\nThe real-time data stream that holds our repository star counts. This stream automatically synchronizes data to all connected clients with zero configuration.\nimport{ StreamConfig }from'motia'import{ z }from'zod'constRepositoryStarsSchema=z.object({stars: z.number(),name: z.string(),fullName: z.string(),organization: z.string(),lastUpdated: z.string(),})exporttypeRepositoryStars=z.infer<typeofRepositoryStarsSchema>exportconstconfig:StreamConfig={name:'stars',schema: RepositoryStarsSchema,baseConfig: { storageType:'default'},}\nimport{ StreamConfig }from'motia'import{ z }from'zod'constRepositoryStarsSchema=z.object({stars: z.number(),name: z.string(),fullName: z.string(),organization: z.string(),lastUpdated: z.string(),})exporttypeRepositoryStars=z.infer<typeofRepositoryStarsSchema>exportconstconfig:StreamConfig={name:'stars',schema: RepositoryStarsSchema,baseConfig: { storageType:'default'},}\nReal-Time Data Flow\nThe beauty of this architecture lies in its simplicity. Here's how real-time updates flow through the system:\nGitHub Event\u2192 User stars/unstars your repository\nWebhook Delivery\u2192 GitHub sends POST request to your endpoint\nSecurity Validation\u2192 Signature verification ensures request authenticity\nStream Update\u2192 Data is written to Motia stream withstreams.stars.set()\nstreams"
}
================================================================================
{
    "source_page": "GitHub Stars Counter",
    "source_url": "https://www.motia.dev/docs/examples/github-stars-counter =====",
    "chunk_topic": "GitHub Stars Counter",
    "chunk_id": "GitHub Stars Counter (Part 3)",
    "text": " system:\nGitHub Event\u2192 User stars/unstars your repository\nWebhook Delivery\u2192 GitHub sends POST request to your endpoint\nSecurity Validation\u2192 Signature verification ensures request authenticity\nStream Update\u2192 Data is written to Motia stream withstreams.stars.set()\nstreams.stars.set()\nLive Propagation\u2192 All connected clients automatically receive the update\nUI Updates\u2192 Client applications re-render with new star count\nNo manual WebSocket management, no connection handling, no state synchronization code required!\nKey Features & Benefits\n\u26a1Instant Real-Time Updates\nStars update across all connected clients the moment GitHub sends the webhook - no polling, no delays.\n\ud83d\udd10Production-Ready Security\nHMAC signature verification with timing-safe comparison prevents unauthorized webhook requests.\n\ud83e\udde9Minimal Architecture\nJust two components handle the complete real-time functionality - no complex infrastructure required.\n\ud83d\udccaAutomatic State Management\nMotia streams handle data persistence, synchronization, and client updates automatically.\n\ud83c\udfafType-Safe Development\nFull TypeScript integration with Zod validation ensures zero runtime surprises.\n\ud83c\udf10Live Production Usage\nThis exact implementation powers the real-time counter visible in the Motia website header - go check it out now!\n\ud83d\ude80Production-Grade Architecture\nBuilt for enterprise scale with proper error handling, security, monitoring, and deployment automation.\nTrying It Out\nReady to build your own real-time GitHub stars counter? Let's get it running.\nClone and Install\nStart by getting the project locally and installing dependencies.\ngitclonehttps://github.com/MotiaDev/github-stars-counter.gitcdgithub-stars-counternpminstall\ngitclonehttps://github.com/MotiaDev/github-stars-counter.gitcdgithub-stars-counternpminstall\nConfigure GitHub Webhook (Optional)\nSet up webhook security with a secret for production use. This is optional for testing but essential for production deployments.\n# Generate a secure random secretexportGITHUB_WEBHOOK_SECRET=$(opensslrand-hex32)echo\"GITHUB_WEBHOOK_SECRET=$GITHUB_WEBHOOK_SECRET\">>.env\n# Generate a secure random secretexportGITHUB_WEBHOOK_SECRET=$(opensslrand-hex32)echo\"GITHUB_WEBHOOK_SECRET=$GITHUB_WEBHOOK_SECRET\">>.env\nStart Development Server\nLaunch the Motia development server to begin receiving webhook events.\nnpmrundev\nnpmrundev\nYour webhook endpoint will be available at:http://localhost:3000/webhooks/github/star\nhttp://localhost:3000/webhooks/github/star\nSet"
}
================================================================================
{
    "source_page": "GitHub Stars Counter",
    "source_url": "https://www.motia.dev/docs/examples/github-stars-counter =====",
    "chunk_topic": "GitHub Stars Counter",
    "chunk_id": "GitHub Stars Counter (Part 4)",
    "text": " Motia development server to begin receiving webhook events.\nnpmrundev\nnpmrundev\nYour webhook endpoint will be available at:http://localhost:3000/webhooks/github/star\nhttp://localhost:3000/webhooks/github/star\nSet Up GitHub Webhook\nConfigure GitHub to send star events to your endpoint:\nGo to your GitHub repository settings\nNavigate toSettings\u2192Webhooks\nClickAdd webhook\nSetPayload URLto your endpoint (use ngrok for local testing)\nSetContent typetoapplication/json\napplication/json\nAdd your webhook secret if configured\nSelectIndividual events\u2192Stars\nClickAdd webhook\nTest the Real-Time Updates\nTest your webhook by starring/unstarring your repository:\nStar your repositoryon GitHub\nCheck the logs- you should see webhook processing\nAccess the stream- query/api/streams/starsto see current data\n/api/streams/stars\nWatch real-time updatesin the Motia Workbench\nAccess Real-Time Data\nYour star data is now available via the Motia streams API:\n# Get all repository star countscurlhttp://localhost:3000/api/streams/stars# Get specific repository star countcurlhttp://localhost:3000/api/streams/stars/{org}/{repo}\n# Get all repository star countscurlhttp://localhost:3000/api/streams/stars# Get specific repository star countcurlhttp://localhost:3000/api/streams/stars/{org}/{repo}\nThe response includes live star counts that update automatically whenever GitHub sends webhook events.\nDeploy to Production\nOnce your counter is working locally, deploy it to production with Motia Cloud:\nOption 1: CLI Deployment\n# Deploy with version and API keymotiaclouddeploy--api-keyyour-api-key--version-name1.0.0# Deploy with environment variablesmotiaclouddeploy--api-keyyour-api-key\\--version-name1.0.0\\--env-file.env.production\\--environment-idyour-env-id\n# Deploy with version and API keymotiaclouddeploy--api-keyyour-api-key--version-name1.0.0# Deploy with environment variablesmotiaclouddeploy--api-keyyour-api-key\\--version-name1.0.0\\--env-file.env.production\\--environment-idyour-env-id\nOption 2: One-Click Web Deployment\nEnsure your local project is running (npm run dev)\nnpm run dev\nGo toMotia Cloud -> Import from Workbench\nSelect your local project"
}
================================================================================
{
    "source_page": "GitHub Stars Counter",
    "source_url": "https://www.motia.dev/docs/examples/github-stars-counter =====",
    "chunk_topic": "GitHub Stars Counter",
    "chunk_id": "GitHub Stars Counter (Part 5)",
    "text": ".env.production\\--environment-idyour-env-id\nOption 2: One-Click Web Deployment\nEnsure your local project is running (npm run dev)\nnpm run dev\nGo toMotia Cloud -> Import from Workbench\nSelect your local project port\nChoose project and environment name\nUpload environment variables (optional)\nClickDeployand watch the magic happen! \u2728\n\ud83d\ude80 Production Deployment Guide\nEnvironment Variables\nConfigure these environment variables for production security and functionality:\n# Required: GitHub webhook secret for securityGITHUB_WEBHOOK_SECRET=\"your-secure-random-secret\"# Optional: GitHub personal access token for enhanced API limitsGITHUB_TOKEN=\"ghp_your_github_token\"\n# Required: GitHub webhook secret for securityGITHUB_WEBHOOK_SECRET=\"your-secure-random-secret\"# Optional: GitHub personal access token for enhanced API limitsGITHUB_TOKEN=\"ghp_your_github_token\"\nSecurity Best Practices\nFor production deployments, ensure you:\nGenerate secure webhook secrets:# Generate a cryptographically secure secretopensslrand-hex32\nGenerate secure webhook secrets:\n# Generate a cryptographically secure secretopensslrand-hex32\n# Generate a cryptographically secure secretopensslrand-hex32\nStore secrets securely: Use environment variables, never commit to code\nStore secrets securely: Use environment variables, never commit to code\nMonitor webhook signatures: The handler automatically verifies signatures whenGITHUB_WEBHOOK_SECRETis set\nMonitor webhook signatures: The handler automatically verifies signatures whenGITHUB_WEBHOOK_SECRETis set\nGITHUB_WEBHOOK_SECRET\nEnable logging: Monitor for signature verification failures and unauthorized requests\nEnable logging: Monitor for signature verification failures and unauthorized requests\nScaling Considerations\nThis architecture scales automatically with your traffic:\nMultiple repositories: Each repo gets its own stream key (org/repo)\norg/repo\nHigh concurrency: Motia streams handle thousands of concurrent connections\nGlobal distribution: Deploy to multiple regions for worldwide performance\nCost optimization: Pay only for actual usage with serverless scaling\n\ud83d\udcbb Dive into the Code\nWant to explore the complete real-time implementation? Check out the full source code and see how simple real-time features can be with Motia:\nLive GitHub Stars Counter\nAccess the complete implementation with webhook security, real-time streams, and production deployment configurations. See exactly how the Motia website's live counter works!\nView Stars Counter Code\nSee It Live in Header \u2192\nConclusion: Real-Time Made Simple\nThis GitHub stars counter demonstrates how Motia transforms"
}
================================================================================
{
    "source_page": "GitHub Stars Counter",
    "source_url": "https://www.motia.dev/docs/examples/github-stars-counter =====",
    "chunk_topic": "GitHub Stars Counter",
    "chunk_id": "GitHub Stars Counter (Part 6)",
    "text": ", real-time streams, and production deployment configurations. See exactly how the Motia website's live counter works!\nView Stars Counter Code\nSee It Live in Header \u2192\nConclusion: Real-Time Made Simple\nThis GitHub stars counter demonstrates how Motia transforms complex real-time development into simple, manageable components. With just two files and minimal configuration, we've built a production-ready system that handles webhook security, real-time synchronization, and live client updates.\nThe beauty of this approach is its scalability and extensibility:\nAdd more repositories: Each gets its own stream automatically\nEnhance with analytics: Track starring patterns and user insights\nMultiple notification channels: Slack, Discord, email alerts for milestones\nRich frontend integrations: React, Vue, vanilla JS - all work seamlessly\nKey architectural benefits:\nNo WebSocket complexity: Streams handle all real-time synchronization automatically\nBuilt-in security: Production-ready webhook verification out of the box\nType safety: Full TypeScript support prevents runtime errors\nZero configuration: Real-time features work with no additional setup\nThis exact implementation powers the live star counter you see in the header ofMotia.dev- that 7953+ count updating in real-time? It's this code in action, proven at enterprise scale with thousands of daily visitors.\nProduction Metrics:\nHandles 10,000+ webhook events per day\nSub-50ms response times globally\n99.9% uptime with automatic failover\nZero maintenance serverless architecture\nReady to add enterprise-grade real-time features to your applications? Deploy production-ready code with Motia today!\nUptime Monitor\nReal-Time Uptime Monitoring: Building a Resilient Website Monitor with Motia\nGitHub Integration\nBuild an automated GitHub issue and PR management system with AI-powered classification and routing\nOn this page"
}
================================================================================
{
    "source_page": "GitHub Integration",
    "source_url": "https://www.motia.dev/docs/examples/github-integration-workflow =====",
    "chunk_topic": "GitHub Integration",
    "chunk_id": "GitHub Integration (Part 1)",
    "text": "GitHub Integration\nBuild an automated GitHub issue and PR management system with AI-powered classification and routing\nLet's build a GitHub automation system that:\nAutomatically triages and classifies new issues\nIntelligently assigns labels based on content\nSuggests appropriate assignees and reviewers\nMonitors PR test status\nGenerates contextual comments\nWorkflow Structure\nThe GitHub integration workflow is organized into two main components:\nIssue Triage: Handles the management of GitHub issues\nPR Classifier: Manages pull request workflows\nThe Steps\nVisual Overview\nHere's how the automation flow works:\nWebhook Reception\u2192 Captures GitHub events\nIssue/PR Classification\u2192 Analyzes content with AI\nAutomated Labeling\u2192 Applies appropriate labels\nSmart Assignment\u2192 Suggests reviewers and assignees\nStatus Monitoring\u2192 Tracks PR test status\nTry It Out\nPrerequisites\nMake sure you have:\nGitHub account with personal access token\nNode.js installed\nOpenAI API key (for AI classification)\nClone the Repository\ngitclonegit@github.com:MotiaDev/motia-examples.gitcdexamples/github-integration-workflow\ngitclonegit@github.com:MotiaDev/motia-examples.gitcdexamples/github-integration-workflow\nInstall Dependencies\nnpminstall\nnpminstall\nConfigure Environment Variables\nCreate a.envfile by copying the example:\n.env\ncp.env.example.env\ncp.env.example.env\nUpdate your.envwith the following credentials:\n.env\nGITHUB_TOKEN=your_github_token_hereOPENAI_API_KEY=your_openai_api_key\nGITHUB_TOKEN=your_github_token_hereOPENAI_API_KEY=your_openai_api_key\nSet Up GitHub Webhook\nGo to your GitHub repository settings\nNavigate to Webhooks and add a new webhook\nSet the Payload URL to your Motia server endpoint\nSelect content type asapplication/json\napplication/json\nChoose which events to trigger the webhook (Issues, Pull requests)\nSave the webhook\nRun the Application\nnpmrundev\nnpmrundev\nTest the Flow\nCreate a new issue in your GitHub repository\nWatch as it gets automatically classified and labeled\nCreate a new PR to see the reviewer assignment in action\nCheck the PR comments for test status updates\nFor more detailed setup instructions and configuration options, check out thefull\ndocumentation.\nGitHub Stars Counter\nReal-Time GitHub Stars Counter: Building Live Updates with Motia Streams\nGmail Automation\nBuild an automated email system with smart labeling,"
}
================================================================================
{
    "source_page": "GitHub Integration",
    "source_url": "https://www.motia.dev/docs/examples/github-integration-workflow =====",
    "chunk_topic": "GitHub Integration",
    "chunk_id": "GitHub Integration (Part 2)",
    "text": " status updates\nFor more detailed setup instructions and configuration options, check out thefull\ndocumentation.\nGitHub Stars Counter\nReal-Time GitHub Stars Counter: Building Live Updates with Motia Streams\nGmail Automation\nBuild an automated email system with smart labeling, auto-responses, and AI-powered filtering\nOn this page"
}
================================================================================
{
    "source_page": "Gmail Automation",
    "source_url": "https://www.motia.dev/docs/examples/gmail-automation =====",
    "chunk_topic": "Gmail Automation",
    "chunk_id": "Gmail Automation (Part 1)",
    "text": "Gmail Automation\nBuild an automated email system with smart labeling, auto-responses, and AI-powered filtering\nLet's build a Gmail automation system that:\n\ud83d\udcca Smart email classification by category (work, personal, social, promotion, spam, update)\n\ud83d\udea8 Urgency detection (high, medium, low) with prioritization\n\ud83d\udcac Intelligent automated responses based on email context\n\ud83c\udff7\ufe0f Automatic email organization (labeling, archiving)\n\ud83d\udcc8 Daily summary reports via Discord\n\ud83d\udd12 Secure Gmail API integration with OAuth2 authentication flow\n\u26a1 Real-time email monitoring with webhook notifications\nThe Steps\nVisual Overview\nHere's how the automation flow works:\n\ud83c\udf0a Workflow Architecture\nThe Gmail Account Manager workflow consists of the following steps:\n1. Gmail Authentication (Multi-Step Flow)\nFiles:steps/gmail-get-auth-url.step.ts: Generates OAuth2 authorization URLsteps/gmail-auth.step.ts: Handles authorization code exchangesteps/gmail-token-status.step.ts: Checks token validity and refreshes if needed\nsteps/gmail-get-auth-url.step.ts: Generates OAuth2 authorization URL\nsteps/gmail-get-auth-url.step.ts\nsteps/gmail-auth.step.ts: Handles authorization code exchange\nsteps/gmail-auth.step.ts\nsteps/gmail-token-status.step.ts: Checks token validity and refreshes if needed\nsteps/gmail-token-status.step.ts\n2. Gmail Webhook (API Step)\nFile:steps/gmail-webhook.step.ts\nsteps/gmail-webhook.step.ts\nPurpose: Receives notifications from Gmail when new emails arrive\nEmits:gmail.new_emailevent with message details\ngmail.new_email\nEndpoint:POST /api/gmail-webhook\nPOST /api/gmail-webhook\n3. Gmail Watch (API Step)\nFile:steps/gmail-watch.step.ts\nsteps/gmail-watch.step.ts\nPurpose: Sets up push notifications for the Gmail account\nEndpoint:GET /api/watch\nGET /api/watch\n4. Fetch Email (Event Step)\nFile:steps/fetch-email.step.ts\nsteps/fetch-email.step.ts\nPurpose: Retrieves the full email content from Gmail API\nSubscribes to:gmail.email.received\ngmail.email.received\nEmits:gmail.email.fetchedwith complete email data\ngmail.email.fetched\nKey Functions: Authenticates with Gmail API, fetches message content, parses attachments\n5. Analyze Email (Event Step)\nFile:steps/analyze"
}
================================================================================
{
    "source_page": "Gmail Automation",
    "source_url": "https://www.motia.dev/docs/examples/gmail-automation =====",
    "chunk_topic": "Gmail Automation",
    "chunk_id": "Gmail Automation (Part 2)",
    "text": "ceived\nEmits:gmail.email.fetchedwith complete email data\ngmail.email.fetched\nKey Functions: Authenticates with Gmail API, fetches message content, parses attachments\n5. Analyze Email (Event Step)\nFile:steps/analyze-email.step.py\nsteps/analyze-email.step.py\nPurpose: Uses Hugging Face models to analyze email content\nSubscribes to:gmail.email.fetched\ngmail.email.fetched\nEmits:gmail.email.analyzedwith analysis results\ngmail.email.analyzed\nAnalysis Performed:Category classificationUrgency detectionSentiment analysisKey information extraction\nCategory classification\nUrgency detection\nSentiment analysis\nKey information extraction\n6. Organize Email (Event Step)\nFile:steps/organize-email.step.ts\nsteps/organize-email.step.ts\nPurpose: Applies labels and organization based on analysis\nSubscribes to:gmail.email.analyzed\ngmail.email.analyzed\nEmits:[gmail.email.organized, gmail.email.archived]\n[gmail.email.organized, gmail.email.archived]\nActions: Creates/applies labels, archives certain emails, marks importance\n7. Auto-Respond to Email (Event Step)\nFile:steps/auto-responder.step.ts\nsteps/auto-responder.step.ts\nPurpose: Generates and sends appropriate responses for certain emails\nSubscribes to:gmail.email.analyzed\ngmail.email.analyzed\nEmits:gmail.email.responded\ngmail.email.responded\nFeatures:Template selection based on email contextPersonalization of responsesAuto-reply for urgent messagesFollow-up scheduling\nTemplate selection based on email context\nPersonalization of responses\nAuto-reply for urgent messages\nFollow-up scheduling\n8. Daily Summary (Cron Step)\nFile:steps/daily-summary.step.ts\nsteps/daily-summary.step.ts\nPurpose: Compiles and sends daily email activity summary\nSchedule: Runs daily at 6:00 PM\nEmits:gmail.summary.sent\ngmail.summary.sent\nDelivery: Sends report to Discord via webhook\nTry It Out\n\ud83d\udccb Prerequisites\nNode.js(v18+)\nPython(v3.8+)\nGmail API credentials(client_id and client_secret)\nGoogle Cloud projectwith Pub/Sub API enabled\nHugging Face API token\nDiscord webhook URL(for daily summaries)\n\ud83d\ude80 Quick Start\nClone this repositorygitclonehttps://github.com/yourusername/gmail-flow.gitcdgmail-flow\nClone this repository\ngitclonehttps://github.com/yourusername/gmail"
}
================================================================================
{
    "source_page": "Gmail Automation",
    "source_url": "https://www.motia.dev/docs/examples/gmail-automation =====",
    "chunk_topic": "Gmail Automation",
    "chunk_id": "Gmail Automation (Part 3)",
    "text": "\nDiscord webhook URL(for daily summaries)\n\ud83d\ude80 Quick Start\nClone this repositorygitclonehttps://github.com/yourusername/gmail-flow.gitcdgmail-flow\nClone this repository\ngitclonehttps://github.com/yourusername/gmail-flow.gitcdgmail-flow\ngitclonehttps://github.com/yourusername/gmail-flow.gitcdgmail-flow\nInstall Node.js dependenciespnpminstall\nInstall Node.js dependencies\npnpminstall\npnpminstall\nInstall Python dependenciespipinstall-rrequirements.txt\nInstall Python dependencies\npipinstall-rrequirements.txt\npipinstall-rrequirements.txt\nConfigure environment variablescp.env.example.envThen edit the.envfile with your credentials (see setup sections below).\nConfigure environment variables\ncp.env.example.env\ncp.env.example.env\nThen edit the.envfile with your credentials (see setup sections below).\n.env\nStart the development serverpnpmdev\nStart the development server\npnpmdev\npnpmdev\nOpen the Motia WorkbenchNavigate tohttp://localhost:3000to access the workflow UI.\nOpen the Motia Workbench\nNavigate tohttp://localhost:3000to access the workflow UI.\n\ud83d\udd27 Detailed Setup\nSetting up Google Cloud Project and Gmail API\nBefore you can use the Gmail Account Manager, you need to set up a Google Cloud project with the Gmail API and Pub/Sub:\nCreate a Google Cloud Project:Go toGoogle Cloud ConsoleClick on \"New Project\" and follow the steps to create a new projectNote your project ID for later use\nCreate a Google Cloud Project:\nGo toGoogle Cloud Console\nClick on \"New Project\" and follow the steps to create a new project\nNote your project ID for later use\nEnable the Gmail API:In your project, go to \"APIs & Services\" > \"Library\"Search for \"Gmail API\" and click on itClick \"Enable\"\nEnable the Gmail API:\nIn your project, go to \"APIs & Services\" > \"Library\"\nSearch for \"Gmail API\" and click on it\nClick \"Enable\"\nEnable the Pub/Sub API:In your project, go to \"APIs & Services\" > \"Library\"Search for \"Cloud Pub/Sub API\" and click on itClick \"Enable\"\nEnable the Pub/Sub API:\nIn your project, go to \"APIs & Services\" > \"Library\"\nSearch for \"Cloud Pub/Sub API\" and click on it\nClick \"Enable\"\nCreate"
}
================================================================================
{
    "source_page": "Gmail Automation",
    "source_url": "https://www.motia.dev/docs/examples/gmail-automation =====",
    "chunk_topic": "Gmail Automation",
    "chunk_id": "Gmail Automation (Part 4)",
    "text": " API\" and click on itClick \"Enable\"\nEnable the Pub/Sub API:\nIn your project, go to \"APIs & Services\" > \"Library\"\nSearch for \"Cloud Pub/Sub API\" and click on it\nClick \"Enable\"\nCreate OAuth Credentials:Go to \"APIs & Services\" > \"Credentials\"Click \"Create Credentials\" > \"OAuth client ID\"Set the application type to \"Desktop app\"Click \"Create\"Note your Client ID and Client Secret for your.envfile:GOOGLE_CLIENT_ID=your_client_idGOOGLE_CLIENT_SECRET=your_client_secret\nCreate OAuth Credentials:\nGo to \"APIs & Services\" > \"Credentials\"\nClick \"Create Credentials\" > \"OAuth client ID\"\nSet the application type to \"Desktop app\"\nClick \"Create\"\nNote your Client ID and Client Secret for your.envfile:GOOGLE_CLIENT_ID=your_client_idGOOGLE_CLIENT_SECRET=your_client_secret\n.env\nGOOGLE_CLIENT_ID=your_client_idGOOGLE_CLIENT_SECRET=your_client_secret\nGOOGLE_CLIENT_ID=your_client_idGOOGLE_CLIENT_SECRET=your_client_secret\nSetting up Google Pub/Sub for Gmail Notifications\nTo enable real-time email notifications, you need to set up a Google Cloud Pub/Sub topic and subscription:\nCreate a Pub/Sub Topic:In your Google Cloud Console, go to \"Pub/Sub\" > \"Topics\"Click \"Create Topic\"Name your topic (e.g.,gmail-notifications)Add the service accountgmail-api-push@system.gserviceaccount.comas a Topic Publisher to allow Gmail to publish notificationsClick \"Create\"Note the full topic name (usuallyprojects/your-project-id/topics/gmail-notifications) for your.envfile:GOOGLE_PUBSUB_TOPIC=projects/your-project-id/topics/gmail-notifications\nCreate a Pub/Sub Topic:\nIn your Google Cloud Console, go to \"Pub/Sub\" > \"Topics\"\nClick \"Create Topic\"\nName your topic (e.g.,gmail-notifications)\ngmail-notifications\nAdd the service accountgmail-api-push@system.gserviceaccount.comas a Topic Publisher to allow Gmail to publish notifications\ngmail-api-push@system.gserviceaccount.com\nClick \"Create\"\nNote the full topic name (usuallyprojects/your-project-id/topics/gmail-notifications) for your.envfile:GOOGLE_PUBSUB_TOPIC=projects/your-project-id/topics/gmail-notifications\nprojects/your-project-id/topics/gmail-notifications\n.env\nGOOGLE_PUBSUB_TOPIC="
}
================================================================================
{
    "source_page": "Gmail Automation",
    "source_url": "https://www.motia.dev/docs/examples/gmail-automation =====",
    "chunk_topic": "Gmail Automation",
    "chunk_id": "Gmail Automation (Part 5)",
    "text": "-id/topics/gmail-notifications) for your.envfile:GOOGLE_PUBSUB_TOPIC=projects/your-project-id/topics/gmail-notifications\nprojects/your-project-id/topics/gmail-notifications\n.env\nGOOGLE_PUBSUB_TOPIC=projects/your-project-id/topics/gmail-notifications\nGOOGLE_PUBSUB_TOPIC=projects/your-project-id/topics/gmail-notifications\nCreate a Pub/Sub Subscription:Once your topic is created, click \"Create Subscription\"Name your subscription (e.g.,gmail-notifications-push)Set the Delivery Type to \"Push\"Set the Endpoint URL to your webhook URL (e.g.,https://your-domain.com/api/gmail-webhook)For local development, you'll need to use a tool like ngrok to expose your local serverClick \"Create\"\nCreate a Pub/Sub Subscription:\nOnce your topic is created, click \"Create Subscription\"\nName your subscription (e.g.,gmail-notifications-push)\ngmail-notifications-push\nSet the Delivery Type to \"Push\"\nSet the Endpoint URL to your webhook URL (e.g.,https://your-domain.com/api/gmail-webhook)For local development, you'll need to use a tool like ngrok to expose your local server\nhttps://your-domain.com/api/gmail-webhook\nFor local development, you'll need to use a tool like ngrok to expose your local server\nClick \"Create\"\nSet up Domain Verification(if needed):If you're using a custom domain for your webhook endpoint, you may need to verify domain ownershipFollow the instructions in Google Cloud Console for domain verification\nSet up Domain Verification(if needed):\nIf you're using a custom domain for your webhook endpoint, you may need to verify domain ownership\nFollow the instructions in Google Cloud Console for domain verification\nGmail API Authentication\nThis project includes a complete OAuth2 authentication flow for the Gmail API:\nStart the development server:pnpm dev\npnpm dev\nNavigate to the authentication workflow in the Motia Workbench\nThe workflow will generate an authorization URL\nOpen the URL in your browser and authorize the application\nThe application will receive and store your authentication tokens\nDiscord Webhook Configuration\nTo receive daily email summaries in Discord, follow these steps to set up a webhook:\nCreate a Discord Server(skip if you already have one):Open Discord and click the \"+\" icon on the left sidebarSelect \"Create My Own\" and follow the setup wizard\nCreate a Discord Server(skip if you already have one):\nOpen Discord"
}
================================================================================
{
    "source_page": "Gmail Automation",
    "source_url": "https://www.motia.dev/docs/examples/gmail-automation =====",
    "chunk_topic": "Gmail Automation",
    "chunk_id": "Gmail Automation (Part 6)",
    "text": " a webhook:\nCreate a Discord Server(skip if you already have one):Open Discord and click the \"+\" icon on the left sidebarSelect \"Create My Own\" and follow the setup wizard\nCreate a Discord Server(skip if you already have one):\nOpen Discord and click the \"+\" icon on the left sidebar\nSelect \"Create My Own\" and follow the setup wizard\nCreate a Channel for Notifications:Right-click on your server name and select \"Server Settings\"Go to \"Channels\" and click \"Create Channel\"Name it (e.g., \"email-summaries\") and click \"Create\"\nCreate a Channel for Notifications:\nRight-click on your server name and select \"Server Settings\"\nGo to \"Channels\" and click \"Create Channel\"\nName it (e.g., \"email-summaries\") and click \"Create\"\nCreate a Webhook:Right-click on your new channel and select \"Edit Channel\"Go to \"Integrations\" tabClick \"Create Webhook\"Give it a name (e.g., \"Gmail Summary Bot\")Optionally, customize the avatarClick \"Copy Webhook URL\"\nCreate a Webhook:\nRight-click on your new channel and select \"Edit Channel\"\nGo to \"Integrations\" tab\nClick \"Create Webhook\"\nGive it a name (e.g., \"Gmail Summary Bot\")\nOptionally, customize the avatar\nClick \"Copy Webhook URL\"\nAdd Webhook URL to Environment Variables:Open your.envfileAdd or update the Discord webhook URL:DISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook-url\nAdd Webhook URL to Environment Variables:\nOpen your.envfile\n.env\nAdd or update the Discord webhook URL:DISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook-url\nDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook-url\nDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook-url\nTest the Webhook:You can test if your webhook is working correctly with this curl command:curl-XPOST-H\"Content-Type: application/json\"\\-d'{\"content\": \"Testing Gmail Account Manager webhook\"}'\\https://discord.com/api/webhooks/your-webhook-urlYou should see the message appear in your Discord channel\nTest the Webhook:\nYou can test if your webhook is working correctly with this curl command:curl-XPOST-H\"Content-Type: application/json\"\\-d'{\"content\":"
}
================================================================================
{
    "source_page": "Gmail Automation",
    "source_url": "https://www.motia.dev/docs/examples/gmail-automation =====",
    "chunk_topic": "Gmail Automation",
    "chunk_id": "Gmail Automation (Part 7)",
    "text": "-webhook-urlYou should see the message appear in your Discord channel\nTest the Webhook:\nYou can test if your webhook is working correctly with this curl command:curl-XPOST-H\"Content-Type: application/json\"\\-d'{\"content\": \"Testing Gmail Account Manager webhook\"}'\\https://discord.com/api/webhooks/your-webhook-url\ncurl-XPOST-H\"Content-Type: application/json\"\\-d'{\"content\": \"Testing Gmail Account Manager webhook\"}'\\https://discord.com/api/webhooks/your-webhook-url\ncurl-XPOST-H\"Content-Type: application/json\"\\-d'{\"content\": \"Testing Gmail Account Manager webhook\"}'\\https://discord.com/api/webhooks/your-webhook-url\nYou should see the message appear in your Discord channel\nHugging Face Setup\nCreate a Hugging Face Account:Sign up atHugging Face\nCreate a Hugging Face Account:\nSign up atHugging Face\nGenerate an API Token:Go to yourHugging Face account settingsCreate a new API tokenCopy the token to your.envfile:HUGGINGFACE_API_TOKEN=your_api_token\nGenerate an API Token:\nGo to yourHugging Face account settings\nCreate a new API token\nCopy the token to your.envfile:HUGGINGFACE_API_TOKEN=your_api_token\n.env\nHUGGINGFACE_API_TOKEN=your_api_token\nHUGGINGFACE_API_TOKEN=your_api_token\n\ud83d\udcc1 Project Structure\nsteps/- Contains all workflow stepsgmail-get-auth-url.step.ts- Generates OAuth2 URLgmail-auth.step.ts- Handles OAuth2 flowgmail-token-status.step.ts- Manages token refreshgmail-webhook.step.ts- Webhook endpoint for Gmail notificationsgmail-watch.step.ts- Sets up Gmail push notificationsfetch-email.step.ts- Fetches email content from Gmail APIanalyze-email.step.py- Python step for email analysis using Hugging Faceorganize-email.step.ts- Organizes emails (labels, archives)auto-responder.step.ts- Generates appropriate responsesdaily-summary.step.ts- Sends daily summary to Discord\nsteps/\ngmail-get-auth-url.step.ts- Generates OAuth2 URL\ngmail-get-auth-url.step.ts\ngmail-auth.step.ts- Handles OAuth2 flow\ngmail-auth.step.ts\ngmail-token-status.step.ts- Manages token refresh\ngmail-token-status.step.ts\ngmail-webhook.step.ts- Webhook endpoint for Gmail notifications\ngmail-webhook.step.ts\ngmail-watch.step.ts- Sets up Gmail push notifications\ngmail-watch.step"
}
================================================================================
{
    "source_page": "Gmail Automation",
    "source_url": "https://www.motia.dev/docs/examples/gmail-automation =====",
    "chunk_topic": "Gmail Automation",
    "chunk_id": "Gmail Automation (Part 8)",
    "text": "gmail-token-status.step.ts- Manages token refresh\ngmail-token-status.step.ts\ngmail-webhook.step.ts- Webhook endpoint for Gmail notifications\ngmail-webhook.step.ts\ngmail-watch.step.ts- Sets up Gmail push notifications\ngmail-watch.step.ts\nfetch-email.step.ts- Fetches email content from Gmail API\nfetch-email.step.ts\nanalyze-email.step.py- Python step for email analysis using Hugging Face\nanalyze-email.step.py\norganize-email.step.ts- Organizes emails (labels, archives)\norganize-email.step.ts\nauto-responder.step.ts- Generates appropriate responses\nauto-responder.step.ts\ndaily-summary.step.ts- Sends daily summary to Discord\ndaily-summary.step.ts\nservices/- Shared service modules\nservices/\nconfig/- Configuration files\nconfig/\n.motia/- Motia framework configuration\n.motia/\n\ud83d\udce6 Dependencies\nNode.js Dependencies\n@motiadev/core,@motiadev/workbench,motia: Motia framework\ngoogleapis,google-auth-library: Google API integration\ngmail-api-parse-message-ts: Gmail message parsing\naxios: HTTP client\nzod: Schema validation\nreact: UI components\nPython Dependencies\ntransformers,torch: Machine learning models\nscikit-learn,numpy,pandas: Data processing\nhuggingface_hub: Access to Hugging Face models\npython-dotenv: Environment variable loading\n\ud83d\udee0\ufe0f Troubleshooting\nPython Module Errors: Ensure you've installed all required Python packages withpip install -r requirements.txt\npip install -r requirements.txt\nAuthentication Errors: Verify your API credentials and follow the authentication flow\nWebhook Issues: Make sure the webhook endpoint is publicly accessible or properly configured for testing\nToken Refresh Errors: Check that your OAuth tokens are valid and that the refresh flow is working properly\nPub/Sub Not Working: Verify that your Pub/Sub topic and subscription are properly configured and that your service account has the necessary permissions\n\ud83d\udcdd Environment Variables\nCreate a.envfile with the following variables:\n.env\n# Google API ConfigurationGOOGLE_CLIENT_ID=your_client_idGOOGLE_CLIENT_SECRET=your_client_secretGOOGLE_PUBSUB_TOPIC=projects/your-project-id/topics/gmail-notifications# HuggingFace ConfigurationHUGGINGFACE_API_TOKEN=your_huggingface_token# Discord IntegrationDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook-url# Auto-Responder ConfigurationAUTO_RESPONDER_NAME=Your NameAUTO_RESPON"
}
================================================================================
{
    "source_page": "Gmail Automation",
    "source_url": "https://www.motia.dev/docs/examples/gmail-automation =====",
    "chunk_topic": "Gmail Automation",
    "chunk_id": "Gmail Automation (Part 9)",
    "text": "Face ConfigurationHUGGINGFACE_API_TOKEN=your_huggingface_token# Discord IntegrationDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook-url# Auto-Responder ConfigurationAUTO_RESPONDER_NAME=Your NameAUTO_RESPONDER_EMAIL=your-email@example.com\n# Google API ConfigurationGOOGLE_CLIENT_ID=your_client_idGOOGLE_CLIENT_SECRET=your_client_secretGOOGLE_PUBSUB_TOPIC=projects/your-project-id/topics/gmail-notifications# HuggingFace ConfigurationHUGGINGFACE_API_TOKEN=your_huggingface_token# Discord IntegrationDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook-url# Auto-Responder ConfigurationAUTO_RESPONDER_NAME=Your NameAUTO_RESPONDER_EMAIL=your-email@example.com\nGitHub Integration\nBuild an automated GitHub issue and PR management system with AI-powered classification and routing\nFinance Agent\nA powerful event-driven financial analysis workflow that combines web search, financial data, and AI analysis to provide comprehensive investment insights.\nOn this page"
}
================================================================================
{
    "source_page": "Welcome to Motia",
    "source_url": "https://www.motia.dev/docs=====",
    "chunk_topic": "Welcome to Motia",
    "chunk_id": "Welcome to Motia (Part 1)",
    "text": "Welcome to Motia\nMotia is a multi-language, event-driven runtime manager built on a core primitive: the Step. It feels like a backend framework, but powers distributed backends for APIs, background jobs, queues, workflows, agents, streaming, state, and observability, all unified in one system.\nWelcome to Motia\nWhy Motia?\nBackend development today is fragmented.\nAPIs live in one framework, background jobs in another, queues and schedulers elsewhere, and now AI agents and streaming systems have their own runtimes. Add observability and state management on top, and you\u2019re stitching together half a dozen tools before writing your first feature.\nMotia unifies all of these concerns around one core primitive: the Step.\nJust as React made frontend development simple by introducing components, Motia redefines backend development with Steps.\nEvery backend pattern, API endpoints, background jobs, queues, workflows, AI agents, streaming, observability, and state, is expressed with the same primitive.\nTo read more about this, check out ourmanifesto.\nThe Core Primitive: the Step\nAt the heart of Motia is a single primitive: theStep.\nA Step is just a file with aconfigand ahandler. Motia auto-discovers these files from/stepsdirectory and connects them automatically.\nconfig\nhandler\n/steps\nHere\u2019s a simple example of two Steps working together: an API Step that emits an event, and an Event Step that processes it.\nexportconstconfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nexportconstconfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nexportconstconfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler=async(input, {logger})=>{logger.info('Processing message', input);};\nexportconstconfig={name:'ProcessMessage',type:'event',sub"
}
================================================================================
{
    "source_page": "Welcome to Motia",
    "source_url": "https://www.motia.dev/docs=====",
    "chunk_topic": "Welcome to Motia",
    "chunk_id": "Welcome to Motia (Part 2)",
    "text": "Message',type:'event',subscribes: ['message.sent']};exportconsthandler=async(input, {logger})=>{logger.info('Processing message', input);};\nexportconstconfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler=async(input, {logger})=>{logger.info('Processing message', input);};\n\ud83d\udc49 With just two files, you\u2019ve built anAPI endpoint, aqueue, and aworker. No extra frameworks required.\nLearn more about Steps here:What is a Step?.\nWorking with multiple Languages\nThe rapid advancement of AI has reshaped the software industry\u2014many cutting-edge AI tools are available only in specific programming languages, this forces companies to decide if they either change their team's skillset to a different language or not leveraging these technologies at all.\nMotia removes this limitation by allowing each Step to be written in any language, while still sharing a common state.\nEach rectangle in the diagram above represents a Step, some of them are in TypeScript and others in Python.\nScalability\nOne of the biggest dilemmas in backend development is choosing between scalability and development velocity. In startup environments, speed often takes priority, resulting in systems that don't scale well and become problematic under increased load.\nMotia addresses scalability by leveraging the core primitive ofSteps: Each step can scale independently avoiding the bottlenecks common in monolithic architectures.\nObservability\nObservability in traditional backends often demands significant engineering effort to implement logging, alerting, and tracing. Typically, these tools are only configured for cloud environments, local development is generally neglected\u2014leading to low productivity and poor dev experience.\nMotia offers a complete observability toolkit available in both cloud and local environments, including:\nLogs visualization\nTracing tool to quickly visualize the flow of requests through the system\nState visualization\nDiagram representation of dependencies between steps and how they are connected\nThe image below shows the Workbench interface available when you runmotia dev. On the top panel you can see a workflow diagram with multiple steps connected.\nOn the bottom panel you can see the trace view of a single request and what happened in each step.\nmotia dev\nFault tolerance\nWith the rise of AI, many backend tasks have become less deterministic and more error-prone. These scenarios require robust error handling and retry mechanisms. In traditional systems, developers often need to set up and maintain queue infrastructures to ensure resilience, especially"
}
================================================================================
{
    "source_page": "Welcome to Motia",
    "source_url": "https://www.motia.dev/docs=====",
    "chunk_topic": "Welcome to Motia",
    "chunk_id": "Welcome to Motia (Part 3)",
    "text": "\nWith the rise of AI, many backend tasks have become less deterministic and more error-prone. These scenarios require robust error handling and retry mechanisms. In traditional systems, developers often need to set up and maintain queue infrastructures to ensure resilience, especially when dealing with unreliable responses from LLMs.\nMotia provides fault tolerance out of the box, eliminating the need to manually spin up queue infrastructure.\nUsing Event Steps, you get retry mechanisms out of the box\nConfiguration of queue infrastructure is abstracted away\nBuilding and Shipping\nBuilding and deploying backends is inherently complex\u2014especially in polyglot environments. Shipping production systems requires tight collaboration between developers and operations, and automation often takes weeks to get right.\nBeyond that, cloud provider lock-in, complicated deployment strategies (e.g., rollbacks, blue/green deployments), and a lack of deployment tooling increase the risk of failure.\nMotia abstracts these concerns by providing:\nTrue cloud-provider agnosticism\nAtomic blue/green deployments and one-click rollbacks via Motia Cloud (canary support coming soon)\nFirst-class polyglot backend support (currently Node.js and Python, with more on the way)\nThe image above shows several Steps being build to a single Motia deployable that are ultimately deployed to a cloud provider of your choice.\nCurrently we're supporting AWS and Kubernetes, more Cloud providers coming soon. Check ourroadmapfor more details.\nRollbacks and deployment strategies\nDeploying cloud-native, fault-tolerant applications often involves modifying queue systems and other infrastructure components.\nThese changes can introduce incompatibilities and lead to runtime failures.\nMotia Cloud solves this withAtomic Deployments, which:\nEach deployment spins up a new isolated service that shares the same data layer\nEnsures safe, rollback-capable deployments without risking service downtime\nInstant rollbacks with one click since each deployment is isolated\nReal-time data streaming\nHandling real-time data is one of the most common\u2014and complex\u2014challenges in backend development. It's necessary when building event-driven applications,\nand it typically requires setting up and maintaining a significant amount of infrastructure.\nMotia provides what we callStreams: Developers define the structure of the data\u2014any changes to these objects are streamed to all subscribed clients in real-time.\nThe image above shows a Stream definition, a Node.js Step mutating the data and a client subscribing to the stream receiving real-time updates.\nQuick Start\nGet up and running with a new Motia project in just a few seconds.\nOn"
}
================================================================================
{
    "source_page": "Welcome to Motia",
    "source_url": "https://www.motia.dev/docs=====",
    "chunk_topic": "Welcome to Motia",
    "chunk_id": "Welcome to Motia (Part 4)",
    "text": " real-time.\nThe image above shows a Stream definition, a Node.js Step mutating the data and a client subscribing to the stream receiving real-time updates.\nQuick Start\nGet up and running with a new Motia project in just a few seconds.\nOn this page"
}
================================================================================
{
    "source_page": "Quick Start",
    "source_url": "https://www.motia.dev/docs/getting-started/quick-start =====",
    "chunk_topic": "Quick Start",
    "chunk_id": "Quick Start",
    "text": "Quick Start\nGet up and running with a new Motia project in just a few seconds.\n1. Create Your Project\nUsenpxto create a new Motia project. This single command will scaffold a new application and install all necessary dependencies.\nnpx\nnpxmotia@latestcreate\nnpxmotia@latestcreate\nThe installer will guide you through a few questions to set up your project. Once it's done, you will have a new project directory ready to go.\n2. Start the Development Server\nNavigate into your new project directory and start the Motia development server.\ncd<your-project-name># If you've created a new folder for the project, navigate into itnpxmotiadev\ncd<your-project-name># If you've created a new folder for the project, navigate into itnpxmotiadev\nThecreatecommand usesnpmby default. If you chose a different package manager during setup, usepnpm dev,yarn dev, orbun dev.\ncreate\nnpm\npnpm dev\nyarn dev\nbun dev\nThis command starts the Motia runtime and the Workbench, a powerful UI for developing and debugging your workflows. By default, it's available athttp://localhost:3000.\nhttp://localhost:3000\n3. Run Your First Flow\nThe starter project comes with a pre-builtbasic-tutorialflow. Let's run it.\nbasic-tutorial\nOpen the Workbenchin your browser athttp://localhost:3000.\nhttp://localhost:3000\nClick theTutorialbutton on the top right of the workbench.\nTutorial\nComplete theTutorialto get an understanding of the basics of Motia and using the Workbench.\nTutorial\nNext Steps\nCongratulations! You've successfully ran, and observed your first Motia workflow.\nBuild your first application from scratch, follow ourBuild Your First Motia Appguide.\nTo learn about Motia, dive into ourCore Concepts.\nWelcome to Motia\nMotia is a multi-language, event-driven runtime manager built on a core primitive: the Step. It feels like a backend framework, but powers distributed backends for APIs, background jobs, queues, workflows, agents, streaming, state, and observability, all unified in one system.\nBuild Your First Motia App\nLearn Motia step-by-step by building a real pet store backend\nOn this page"
}
================================================================================
{
    "source_page": "Build Your First Motia App",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app =====",
    "chunk_topic": "Build Your First Motia App",
    "chunk_id": "Build Your First Motia App (Part 1)",
    "text": "Build Your First Motia App\nLearn Motia step-by-step by building a real pet store backend\nWhat You'll Build\nA complete pet store backend system that grows with you:\nAPI Endpoints\u2192 Handle requests, return responses\nBackground Jobs\u2192 Process tasks without blocking APIs\nWorkflows\u2192 Coordinate complex business logic automatically\nAI Agents\u2192 Make intelligent decisions that drive your workflows\nReal-Time Streaming\u2192 Push live updates to clients as workflows execute\nBy the end, you'll have a production-ready backend that handles everything from simple CRUD to intelligent, real-time systems.\nBefore You Start\nYou'll need:\nNode.js installed (v18 or higher)\nBasic understanding of TypeScript/JavaScript/Python\n10-20 minutes per tutorial\nThat's it. No database setup, no complex config, no separate services to run.\nYour Journey\n1. API Endpoints\nWhat:Create HTTP endpoints that handle pet operations.\nYou'll learn:\nHow to define API Steps\nRequest validation with schemas\nReturning proper HTTP responses\nTesting endpoints in Workbench\nTime:10 minutes\nStart with APIs \u2192\nBuild your first HTTP endpoints\n2. Background Jobs\nWhat:Add async tasks that run without blocking your APIs.\nYou'll learn:\nEvent Steps that trigger from your APIs\nCron Steps that run on a schedule\nHow events connect your system\nMonitoring jobs in Workbench\nTime:15 minutes\nAdd Background Jobs \u2192\nHandle async tasks efficiently\n3. Workflows\nWhat:Coordinate complex processes with automatic transitions and validation.\nYou'll learn:\nBuilding workflow orchestrators\nAutomatic vs manual transitions\nState validation and progression\nChaining multiple actions together\nTime:20 minutes\nBuild Workflows \u2192\nOrchestrate complex business logic\n4. AI Agents\nWhat:Add intelligent decision-making to your workflows.\nYou'll learn:\nContent generation with AI\nDecision-making agents\nIntegrating AI with workflows\nBuilding agentic routing\nTime:20 minutes\nAdd AI Agents \u2192\nMake your backend intelligent\n5. Real-Time Streaming\nWhat:Push live updates to clients while your workflows run in the background.\nYou'll learn:\nDefining stream configurations\nStreaming from APIs that return immediately\nBackground jobs that push progress updates\nAI agents that stream enrichment progress\nConnecting multiple steps to the same stream\nTime:20 minutes\nAdd Streaming \u2192\nBuild real-time experiences\nThe Example Project\nAll tutorials use the same project - a pet store backend that handles:\nPet management\u2192 Create, update, list"
}
================================================================================
{
    "source_page": "Build Your First Motia App",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app =====",
    "chunk_topic": "Build Your First Motia App",
    "chunk_id": "Build Your First Motia App (Part 2)",
    "text": " progress\nConnecting multiple steps to the same stream\nTime:20 minutes\nAdd Streaming \u2192\nBuild real-time experiences\nThe Example Project\nAll tutorials use the same project - a pet store backend that handles:\nPet management\u2192 Create, update, list pets\nAdoption workflow\u2192 Guide pets through quarantine, health checks, and availability\nFeeding reminders\u2192 Set up schedules when pets arrive\nHealth decisions\u2192 AI evaluates symptoms and recommends treatment\nCleanup jobs\u2192 Remove soft-deleted pets on a schedule\nReal-time updates\u2192 Stream progress to clients as workflows execute\nIt's a real system with the kind of complexity you'll face building production backends.\nInteractive Tutorials\nEach guide includes aninteractive tutorialyou can run directly in Workbench. It walks you through the code, explains what's happening, and lets you test everything live.\nPrefer reading? The written guides cover everything too. They're detailed, with code examples and explanations for every concept.\nReady?\nPick your starting point. If you're new to Motia, start with API Endpoints. If you've already covered the basics, jump to wherever you want to learn more.\nAPI Endpoints\nStart here if you're new\nBackground Jobs\nAdd async processing\nWorkflows\nCoordinate complex logic\nAI Agents\nBuild intelligent systems\nReal-Time Streaming\nPush live updates\nQuick Start\nGet up and running with a new Motia project in just a few seconds.\nAPI Endpoints\nLearn how to create HTTP API endpoints with Motia\nOn this page"
}
================================================================================
{
    "source_page": "API Endpoints",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/api-endpoints =====",
    "chunk_topic": "API Endpoints",
    "chunk_id": "API Endpoints (Part 1)",
    "text": "API Endpoints\nLearn how to create HTTP API endpoints with Motia\nWhat You'll Build\nA pet management API with these endpoints:\nPOST/pets- Create a new pet\n/pets\nGET/pets- List all pets\n/pets\nGET/pets/:id- Get a specific pet\n/pets/:id\nPUT/pets/:id- Update a pet\n/pets/:id\nDELETE/pets/:id- Delete a pet\n/pets/:id\nGetting Started\nClone the example repository:\ngitclonehttps://github.com/MotiaDev/build-your-first-app.gitcdbuild-your-first-appgitcheckoutapi-endpoints\ngitclonehttps://github.com/MotiaDev/build-your-first-app.gitcdbuild-your-first-appgitcheckoutapi-endpoints\nInstall dependencies:\nnpminstall\nnpminstall\nStart the Workbench:\nnpmrundev\nnpmrundev\nYour Workbench will be available athttp://localhost:3000.\nhttp://localhost:3000\nProject Structure\nFiles likefeatures.jsonandtutorial.tsxare only for the interactive tutorial and are not part of Motia's project structure.\nfeatures.json\ntutorial.tsx\nAll code examples in this guide are available in thebuild-your-first-apprepository.\nYou can follow this guide to learn how to build a REST API with Motia step by step, or you can clone the repository and dive into our Interactive Tutorial to learn by doing directly in the Workbench.\nCreating Your First Endpoint\nThis tutorial focuses on Motia's capabilities to create complete backend system from APIs to Streaming AI agents step-by-step. Here, we're showcasing writing APIs with Motia Steps - For data persistence, we use a simple JSON file store in the examples. In a real application, you would use a database like PostgreSQL, MongoDB, or any other data store of your choice. The complete store implementation is available in theGitHub repository.\nConfiguration\nEvery API endpoint has two parts:\nConfig- Defines when and how the step runs:\nname\ntype\n'api'\npath\nmethod\nHandler- The function that executes your business logic.\nView on GitHub:\nTypeScript\nPython\nJavaScript\nimport{ ApiRouteConfig, Handlers }from'motia'import{ z }from'zod'import{ TSStore }from'./ts-store'constcreatePetSchema=z.object({name: z.string().min(1,'Name is required'),species: z.enum(['dog','"
}
================================================================================
{
    "source_page": "API Endpoints",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/api-endpoints =====",
    "chunk_topic": "API Endpoints",
    "chunk_id": "API Endpoints (Part 2)",
    "text": "otia'import{ z }from'zod'import{ TSStore }from'./ts-store'constcreatePetSchema=z.object({name: z.string().min(1,'Name is required'),species: z.enum(['dog','cat','bird','other']),ageMonths: z.number().int().min(0),})exportconstconfig:ApiRouteConfig={name:'CreatePet',type:'api',path:'/pets',method:'POST',bodySchema: createPetSchema,flows: ['PetManagement'],}exportconsthandler:Handlers['CreatePet']=async(req, {logger})=>{constdata=createPetSchema.parse(req.body)// In a real application, this would be a database call// e.g., await db.pets.create(data)constpet=TSStore.create(data)logger.info('Pet created', { petId: pet.id })return{ status:201, body: pet }}\nimport{ ApiRouteConfig, Handlers }from'motia'import{ z }from'zod'import{ TSStore }from'./ts-store'constcreatePetSchema=z.object({name: z.string().min(1,'Name is required'),species: z.enum(['dog','cat','bird','other']),ageMonths: z.number().int().min(0),})exportconstconfig:ApiRouteConfig={name:'CreatePet',type:'api',path:'/pets',method:'POST',bodySchema: createPetSchema,flows: ['PetManagement'],}exportconsthandler:Handlers['CreatePet']=async(req, {logger})=>{constdata=createPetSchema.parse(req.body)// In a real application, this would be a database call// e.g., await db.pets.create(data)constpet=TSStore.create(data)logger.info('Pet created', { petId: pet.id })return{ status:201, body: pet }}\nTesting Your API\nYou can test your endpoints using curl or the Workbench interface.\nUsing curl\n# Create a petcurl-XPOSThttp://localhost:3000/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Max\", \"species\": \"dog\", \"ageMonths\": 24}'\n# Create a petcurl-XPOSThttp://localhost:3000/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Max\", \"species\": \"dog\", \"ageMonths\": 24}'\nUsing Workbench\nYou can"
}
================================================================================
{
    "source_page": "API Endpoints",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/api-endpoints =====",
    "chunk_topic": "API Endpoints",
    "chunk_id": "API Endpoints (Part 3)",
    "text": " a petcurl-XPOSThttp://localhost:3000/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Max\", \"species\": \"dog\", \"ageMonths\": 24}'\nUsing Workbench\nYou can also test your endpoint directly in the Workbench, which provides an interactive interface to test your API endpoints with real requests and see the responses in real-time:\nAdding GET Endpoints\nList All Pets\nView on GitHub:\nTypeScript\nPython\nJavaScript\nimport{ ApiRouteConfig, Handlers }from'motia'import{ TSStore }from'./ts-store'exportconstconfig:ApiRouteConfig={name:'GetPets',type:'api',path:'/pets',method:'GET',flows: ['PetManagement'],}exportconsthandler:Handlers['GetPets']=async(req, {logger})=>{// In a real application, this would be a database call// e.g., const pets = await db.pets.findMany()constpets=TSStore.list()logger.info('Retrieved all pets', { count: pets.length})return{ status:200, body: pets }}\nimport{ ApiRouteConfig, Handlers }from'motia'import{ TSStore }from'./ts-store'exportconstconfig:ApiRouteConfig={name:'GetPets',type:'api',path:'/pets',method:'GET',flows: ['PetManagement'],}exportconsthandler:Handlers['GetPets']=async(req, {logger})=>{// In a real application, this would be a database call// e.g., const pets = await db.pets.findMany()constpets=TSStore.list()logger.info('Retrieved all pets', { count: pets.length})return{ status:200, body: pets }}\nTesting List All Pets\nTest with curl:\n# List all petscurlhttp://localhost:3000/pets\n# List all petscurlhttp://localhost:3000/pets\nOr use the Workbench interface:\nGet Single Pet\nView on GitHub:\nTypeScript\nPython\nJavaScript\nimport{ ApiRouteConfig, Handlers }from'motia'import{ TSStore }from'./ts-store'exportconstconfig:ApiRouteConfig={name:'GetPet',type:'api',path:'/pets/:id',method:'GET',flows: ['PetManagement'],}exportconsthandler:Handlers['GetPet']=async(req, {logger})=>{// In a real application, this would"
}
================================================================================
{
    "source_page": "API Endpoints",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/api-endpoints =====",
    "chunk_topic": "API Endpoints",
    "chunk_id": "API Endpoints (Part 4)",
    "text": "name:'GetPet',type:'api',path:'/pets/:id',method:'GET',flows: ['PetManagement'],}exportconsthandler:Handlers['GetPet']=async(req, {logger})=>{// In a real application, this would be a database call// e.g., const pet = await db.pets.findById(req.pathParams.id)constpet=TSStore.get(req.pathParams.id)if(!pet) {logger.warn('Pet not found', { id: req.pathParams.id })return{ status:404, body: { message:'Pet not found'} }}return{ status:200, body: pet }}\nimport{ ApiRouteConfig, Handlers }from'motia'import{ TSStore }from'./ts-store'exportconstconfig:ApiRouteConfig={name:'GetPet',type:'api',path:'/pets/:id',method:'GET',flows: ['PetManagement'],}exportconsthandler:Handlers['GetPet']=async(req, {logger})=>{// In a real application, this would be a database call// e.g., const pet = await db.pets.findById(req.pathParams.id)constpet=TSStore.get(req.pathParams.id)if(!pet) {logger.warn('Pet not found', { id: req.pathParams.id })return{ status:404, body: { message:'Pet not found'} }}return{ status:200, body: pet }}\nTesting tip:When testing GET endpoints with path parameters like/pets/:id, switch to theParamstab (not Body) to enter the ID value.\n/pets/:id\nThe:idin the path creates a path parameter accessible viareq.pathParams.id.\n:id\nreq.pathParams.id\nTesting Get Single Pet\nTest with curl:\n# Get specific pet (replace 1 with an actual pet ID)curlhttp://localhost:3000/pets/1\n# Get specific pet (replace 1 with an actual pet ID)curlhttp://localhost:3000/pets/1\nOr use the Workbench interface:\nAdding UPDATE Endpoint\nView on GitHub:\nTypeScript\nPython\nJavaScript\nimport{ ApiRouteConfig, Handlers }from'motia'import{ z }from'zod'import{ TSStore }from'./ts-store'constupdatePetSchema=z.object({name: z.string().min(1).optional(),status: z.enum(['available','pending','adopted']).optional(),ageMonths: z.number()."
}
================================================================================
{
    "source_page": "API Endpoints",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/api-endpoints =====",
    "chunk_topic": "API Endpoints",
    "chunk_id": "API Endpoints (Part 5)",
    "text": "'import{ TSStore }from'./ts-store'constupdatePetSchema=z.object({name: z.string().min(1).optional(),status: z.enum(['available','pending','adopted']).optional(),ageMonths: z.number().int().min(0).optional(),})exportconstconfig:ApiRouteConfig={name:'UpdatePet',type:'api',path:'/pets/:id',method:'PUT',bodySchema: updatePetSchema,flows: ['PetManagement'],}exportconsthandler:Handlers['UpdatePet']=async(req, {logger})=>{constupdates=updatePetSchema.parse(req.body)// In a real application, this would be a database call// e.g., const pet = await db.pets.update(req.pathParams.id, updates)constpet=TSStore.update(req.pathParams.id, updates)if(!pet) {return{ status:404, body: { message:'Pet not found'} }}logger.info('Pet updated', { petId: pet.id })return{ status:200, body: pet }}\nimport{ ApiRouteConfig, Handlers }from'motia'import{ z }from'zod'import{ TSStore }from'./ts-store'constupdatePetSchema=z.object({name: z.string().min(1).optional(),status: z.enum(['available','pending','adopted']).optional(),ageMonths: z.number().int().min(0).optional(),})exportconstconfig:ApiRouteConfig={name:'UpdatePet',type:'api',path:'/pets/:id',method:'PUT',bodySchema: updatePetSchema,flows: ['PetManagement'],}exportconsthandler:Handlers['UpdatePet']=async(req, {logger})=>{constupdates=updatePetSchema.parse(req.body)// In a real application, this would be a database call// e.g., const pet = await db.pets.update(req.pathParams.id, updates)constpet=TSStore.update(req.pathParams.id, updates)if(!pet) {return{ status:404, body: { message:'Pet not found'} }}logger.info('Pet updated', { petId: pet.id })return{ status:200, body: pet }}\nTesting Update Pet\nTest with curl:\n# Update a pet (replace 1 with an actual pet ID)curl-XPUThttp://localhost:3000/pets/1\\-H\"Content-Type: application/json\"\\-d'{\"status\": \"adopted"
}
================================================================================
{
    "source_page": "API Endpoints",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/api-endpoints =====",
    "chunk_topic": "API Endpoints",
    "chunk_id": "API Endpoints (Part 6)",
    "text": "\nTest with curl:\n# Update a pet (replace 1 with an actual pet ID)curl-XPUThttp://localhost:3000/pets/1\\-H\"Content-Type: application/json\"\\-d'{\"status\": \"adopted\"}'\n# Update a pet (replace 1 with an actual pet ID)curl-XPUThttp://localhost:3000/pets/1\\-H\"Content-Type: application/json\"\\-d'{\"status\": \"adopted\"}'\nOr use the Workbench interface:\nAdding DELETE Endpoint\nView on GitHub:\nTypeScript\nPython\nJavaScript\nimport{ ApiRouteConfig, Handlers }from'motia'import{ TSStore }from'./ts-store'exportconstconfig:ApiRouteConfig={name:'DeletePet',type:'api',path:'/pets/:id',method:'DELETE',flows: ['PetManagement'],}exportconsthandler:Handlers['DeletePet']=async(req, {logger})=>{// In a real application, this would be a database call// e.g., const deleted = await db.pets.delete(req.pathParams.id)constdeleted=TSStore.remove(req.pathParams.id)if(!deleted) {return{ status:404, body: { message:'Pet not found'} }}logger.info('Pet deleted', { petId: req.pathParams.id })return{ status:204}}\nimport{ ApiRouteConfig, Handlers }from'motia'import{ TSStore }from'./ts-store'exportconstconfig:ApiRouteConfig={name:'DeletePet',type:'api',path:'/pets/:id',method:'DELETE',flows: ['PetManagement'],}exportconsthandler:Handlers['DeletePet']=async(req, {logger})=>{// In a real application, this would be a database call// e.g., const deleted = await db.pets.delete(req.pathParams.id)constdeleted=TSStore.remove(req.pathParams.id)if(!deleted) {return{ status:404, body: { message:'Pet not found'} }}logger.info('Pet deleted', { petId: req.pathParams.id })return{ status:204}}\nDELETE endpoints return204 No Contenton success.\n204 No Content\nTesting Delete Pet\nTest with curl:\n# Delete a pet (replace 1 with an actual pet ID)curl-XDELETEhttp://localhost:3000/pets/1\n# Delete a pet (replace 1 with an actual pet ID)curl-XDELETEhttp://localhost"
}
================================================================================
{
    "source_page": "API Endpoints",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/api-endpoints =====",
    "chunk_topic": "API Endpoints",
    "chunk_id": "API Endpoints (Part 7)",
    "text": " curl:\n# Delete a pet (replace 1 with an actual pet ID)curl-XDELETEhttp://localhost:3000/pets/1\n# Delete a pet (replace 1 with an actual pet ID)curl-XDELETEhttp://localhost:3000/pets/1\nOr use the Workbench interface:\nAs you can see in this example, Motia handles routing, validation, and error handling automatically. With just a few lines of code, you've built a complete REST API with:\nAutomatic routingbased on your step configuration\nPath parameter extraction(/pets/:id\u2192req.pathParams.id)\n/pets/:id\nreq.pathParams.id\nHTTP method handling(GET, POST, PUT, DELETE)\nResponse formattingwith proper status codes\nBuilt-in error handlingand validation\n\ud83c\udf89Congratulations!You've successfully created your first API endpoints with Motia. Your pet store API is now ready to handle all CRUD operations.\nWhat's Next?\nYou now have a working REST API for your pet store! But a complete backend system needs more than just API endpoints. In the next guide, we'll add background jobs using Event Steps and scheduled tasks with Cron Steps to handle tasks like:\nSetNextFeedingReminder- Queue jobs that automatically schedule feeding reminders when pets are added or updated\nDeletion Reaper- Cron jobs that run daily to clean up soft-deleted records and expired data\nLet's continue building your complete backend system by adding these background jobs with Event Steps and scheduled tasks with Cron Steps.\nBuild Your First Motia App\nLearn Motia step-by-step by building a real pet store backend\nBackground Jobs\nLearn how to create async background jobs and scheduled tasks with Motia\nOn this page"
}
================================================================================
{
    "source_page": "Background Jobs",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/background-jobs =====",
    "chunk_topic": "Background Jobs",
    "chunk_id": "Background Jobs (Part 1)",
    "text": "Background Jobs\nLearn how to create async background jobs and scheduled tasks with Motia\nWhat You'll Build\nA pet management system with background jobs that handle:\nEvent Step- Async job that sets feeding reminders when pets are created\nCron Step- Scheduled job that runs daily to clean up deleted pets\nGetting Started\nClone the example repository:\ngitclonehttps://github.com/MotiaDev/build-your-first-app.gitcdbuild-your-first-appgitcheckoutbackground-jobs\ngitclonehttps://github.com/MotiaDev/build-your-first-app.gitcdbuild-your-first-appgitcheckoutbackground-jobs\nInstall dependencies:\nnpminstall\nnpminstall\nStart the Workbench:\nnpmrundev\nnpmrundev\nYour Workbench will be available athttp://localhost:3000.\nhttp://localhost:3000\nProject Structure\nFiles likefeatures.jsonandtutorial.tsxare only for the interactive tutorial and are not part of Motia's project structure.\nfeatures.json\ntutorial.tsx\nAll code examples in this guide are available in thebuild-your-first-apprepository.\nYou can follow this guide to learn how to build background jobs with Motia step by step, or you can clone the repository and dive into our Interactive Tutorial to learn by doing directly in the Workbench.\nUnderstanding Background Jobs\nBackground jobs let you handle time-consuming tasks without blocking your API responses. When a user creates a pet, they get an immediate response while tasks like sending emails or processing data happen in the background.\nMotia provides two types of background jobs:\nEvent Steps- Triggered by events from your API endpoints\nCron Steps- Run on a schedule (like daily cleanup tasks)\nCreating Your First Event Step\nLet's create a background job that sets feeding reminders when a pet is created. First, we need to emit an event from our API endpoint.\nStep 1: Emit Events from API\nView on GitHub:\nTypeScript\nPython\nJavaScript\nimport{ ApiRouteConfig, Handlers }from'motia'import{ z }from'zod'import{ TSStore }from'./ts-store'constcreatePetSchema=z.object({name: z.string().min(1,'Name is required').trim(),species: z.enum(['dog','cat','bird','other']),ageMonths: z.number().int().min(0,'Age must be a positive number')})exportconstconfig:ApiRouteConfig={type:'api',name:'TsCreatePet"
}
================================================================================
{
    "source_page": "Background Jobs",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/background-jobs =====",
    "chunk_topic": "Background Jobs",
    "chunk_id": "Background Jobs (Part 2)",
    "text": "species: z.enum(['dog','cat','bird','other']),ageMonths: z.number().int().min(0,'Age must be a positive number')})exportconstconfig:ApiRouteConfig={type:'api',name:'TsCreatePet',path:'/ts/pets',method:'POST',// Declare what events this endpoint can emitemits: ['ts.feeding.reminder.enqueued'],flows: ['TsPetManagement'],bodySchema: createPetSchema}exportconsthandler:Handlers['TsCreatePet']=async(req, {emit,logger})=>{try{constvalidatedData=createPetSchema.parse(req.body)constpet=TSStore.create({name: validatedData.name,species: validatedData.species,ageMonths: validatedData.ageMonths})if(logger) {logger.info('\ud83d\udc3e Pet created', {petId: pet.id,name: pet.name,species: pet.species,status: pet.status})}// Emit event to trigger background jobif(emit) {awaitemit({topic:'ts.feeding.reminder.enqueued',data: {petId: pet.id,enqueuedAt: Date.now()}})}return{ status:201, body: pet }}catch(error) {if(errorinstanceofz.ZodError) {return{status:400,body: {message:'Validation error',errors: error.errors}}}if(logger) {logger.error('\u274c Pet creation failed', {error: errorinstanceofError?error.message:'Unknown error'})}return{status:500,body: { message:'Internal server error'}}}}\nimport{ ApiRouteConfig, Handlers }from'motia'import{ z }from'zod'import{ TSStore }from'./ts-store'constcreatePetSchema=z.object({name: z.string().min(1,'Name is required').trim(),species: z.enum(['dog','cat','bird','other']),ageMonths: z.number().int().min(0,'Age must be a positive number')})exportconstconfig:ApiRouteConfig={type:'api',name:'TsCreatePet',path:'/ts/pets',method:'POST',// Declare what events this endpoint can emitemits: ['ts.feeding.reminder.enqueued'],flows: ['TsPetManagement'],bodySchema: createPetSchema}exportconsthandler:Handlers['TsCreatePet']=async(req, {emit,logger})=>{try{constvalidatedData=createPetSchema.parse(req.body)constpet=TSStore.create({"
}
================================================================================
{
    "source_page": "Background Jobs",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/background-jobs =====",
    "chunk_topic": "Background Jobs",
    "chunk_id": "Background Jobs (Part 3)",
    "text": " ['TsPetManagement'],bodySchema: createPetSchema}exportconsthandler:Handlers['TsCreatePet']=async(req, {emit,logger})=>{try{constvalidatedData=createPetSchema.parse(req.body)constpet=TSStore.create({name: validatedData.name,species: validatedData.species,ageMonths: validatedData.ageMonths})if(logger) {logger.info('\ud83d\udc3e Pet created', {petId: pet.id,name: pet.name,species: pet.species,status: pet.status})}// Emit event to trigger background jobif(emit) {awaitemit({topic:'ts.feeding.reminder.enqueued',data: {petId: pet.id,enqueuedAt: Date.now()}})}return{ status:201, body: pet }}catch(error) {if(errorinstanceofz.ZodError) {return{status:400,body: {message:'Validation error',errors: error.errors}}}if(logger) {logger.error('\u274c Pet creation failed', {error: errorinstanceofError?error.message:'Unknown error'})}return{status:500,body: { message:'Internal server error'}}}}\nThe API endpoint now emits an event after creating a pet. The response returns immediately while the background job processes asynchronously.\nStep 2: Create the Event Step\nNow let's create the background job that listens for this event and sets feeding reminders.\nView on GitHub:\nTypeScript\nPython\nJavaScript\nimport{ EventConfig, Handlers }from'motia'import{ TSStore }from'./ts-store'exportconstconfig={type:'event',name:'TsSetNextFeedingReminder',description:'Background job that sets next feeding reminder and adds welcome notes',// Subscribe to the event emitted by CreatePetsubscribes: ['ts.feeding.reminder.enqueued'],emits: [],flows: ['TsPetManagement']}exportconsthandler:Handlers['TsSetNextFeedingReminder']=async(input, {emit,logger})=>{const{petId,enqueuedAt}=inputif(logger) {logger.info('\ud83d\udd04 Setting next feeding reminder', { petId, enqueuedAt })}try{// Calculate next feeding time (24 hours from now)constnextFeedingAt=Date.now()+(24*60*60*1000)// Fill in non-critical detailsconstupdates={notes:'Welcome to our pet store! We\\'ll take great care of this pet.',nextFeedingAt: nextFeedingAt}const"
}
================================================================================
{
    "source_page": "Background Jobs",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/background-jobs =====",
    "chunk_topic": "Background Jobs",
    "chunk_id": "Background Jobs (Part 4)",
    "text": ".now()+(24*60*60*1000)// Fill in non-critical detailsconstupdates={notes:'Welcome to our pet store! We\\'ll take great care of this pet.',nextFeedingAt: nextFeedingAt}constupdatedPet=TSStore.update(petId, updates)if(!updatedPet) {if(logger) {logger.error('\u274c Failed to set feeding reminder - pet not found', { petId })}return}if(logger) {logger.info('\u2705 Next feeding reminder set', {petId,notes: updatedPet.notes?.substring(0,50)+'...',nextFeedingAt:newDate(nextFeedingAt).toISOString()})}// Feeding reminder scheduled successfully}catch(error:any) {if(logger) {logger.error('\u274c Feeding reminder job error', { petId, error: error.message })}}}\nimport{ EventConfig, Handlers }from'motia'import{ TSStore }from'./ts-store'exportconstconfig={type:'event',name:'TsSetNextFeedingReminder',description:'Background job that sets next feeding reminder and adds welcome notes',// Subscribe to the event emitted by CreatePetsubscribes: ['ts.feeding.reminder.enqueued'],emits: [],flows: ['TsPetManagement']}exportconsthandler:Handlers['TsSetNextFeedingReminder']=async(input, {emit,logger})=>{const{petId,enqueuedAt}=inputif(logger) {logger.info('\ud83d\udd04 Setting next feeding reminder', { petId, enqueuedAt })}try{// Calculate next feeding time (24 hours from now)constnextFeedingAt=Date.now()+(24*60*60*1000)// Fill in non-critical detailsconstupdates={notes:'Welcome to our pet store! We\\'ll take great care of this pet.',nextFeedingAt: nextFeedingAt}constupdatedPet=TSStore.update(petId, updates)if(!updatedPet) {if(logger) {logger.error('\u274c Failed to set feeding reminder - pet not found', { petId })}return}if(logger) {logger.info('\u2705 Next feeding reminder set', {petId,notes: updatedPet.notes?.substring(0,50)+'...',nextFeedingAt:newDate(nextFeedingAt).toISOString()})}// Feeding reminder scheduled successfully}catch(error:any) {if(logger) {logger.error('\u274c Feeding reminder job error',"
}
================================================================================
{
    "source_page": "Background Jobs",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/background-jobs =====",
    "chunk_topic": "Background Jobs",
    "chunk_id": "Background Jobs (Part 5)",
    "text": "Pet.notes?.substring(0,50)+'...',nextFeedingAt:newDate(nextFeedingAt).toISOString()})}// Feeding reminder scheduled successfully}catch(error:any) {if(logger) {logger.error('\u274c Feeding reminder job error', { petId, error: error.message })}}}\nHow Event Steps Work\nEvent Steps have a few key differences from API Steps:\ntypeis set to'event'instead of'api'\n'event'\n'api'\nsubscribeslists the events this job listens for\nhandlerreceives the event data as the first argument\nWhen you create a pet, the API returns immediately. The background job picks up the event and processes it asynchronously.\nTesting Your Background Job\nCreate a pet and watch the background job execute:\n# Create a petcurl-XPOSThttp://localhost:3000/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Max\", \"species\": \"dog\", \"ageMonths\": 24}'\n# Create a petcurl-XPOSThttp://localhost:3000/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Max\", \"species\": \"dog\", \"ageMonths\": 24}'\nCheck the logs in Workbench to see both the API call and the background job execution:\nYou'll see:\n\"Pet created\" log from the API endpoint\n\"Setting next feeding reminder\" log from the background job\n\"Next feeding reminder set\" log when the job completes\nCreating a Scheduled Cron Job\nNow let's create a cron job that runs daily to clean up soft-deleted pets. This demonstrates how to handle scheduled maintenance tasks.\nView on GitHub:\nTypeScript\nPython\nJavaScript\nimport{ CronConfig, Handlers }from'motia'import{ TSStore }from'./ts-store'exportconstconfig:CronConfig={type:'cron',name:'TsDeletionReaper',description:'Daily job that permanently removes pets scheduled for deletion',cron:'0 2 * * *',// Daily at 2:00 AMemits: [],flows: ['TsPetManagement']}exportconsthandler:Handlers['TsDeletionReaper']=async({emit,logger})=>{if(logger) {logger.info('\ud83d\udd04 Deletion Reaper started - scanning for pets to purge')}try{constpetsToReap=TSStore.findDeletedPetsReadyToPurge()if(petsToReap.length===0) {if(logger)"
}
================================================================================
{
    "source_page": "Background Jobs",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/background-jobs =====",
    "chunk_topic": "Background Jobs",
    "chunk_id": "Background Jobs (Part 6)",
    "text": ") {logger.info('\ud83d\udd04 Deletion Reaper started - scanning for pets to purge')}try{constpetsToReap=TSStore.findDeletedPetsReadyToPurge()if(petsToReap.length===0) {if(logger) {logger.info('\u2705 Deletion Reaper completed - no pets to purge')}// No emit - no subscribers for ts.reaper.completedreturn}letpurgedCount=0for(constpetofpetsToReap) {constsuccess=TSStore.remove(pet.id)if(success) {purgedCount++if(logger) {logger.info('\ud83d\udc80 Pet permanently purged', {petId: pet.id,name: pet.name,deletedAt:newDate(pet.deletedAt!).toISOString(),purgeAt:newDate(pet.purgeAt!).toISOString()})}// No emit - no subscribers for ts.pet.purged}else{if(logger) {logger.warn('\u26a0\ufe0f Failed to purge pet', { petId: pet.id, name: pet.name })}}}if(logger) {logger.info('\u2705 Deletion Reaper completed', {totalScanned: petsToReap.length,purgedCount,failedCount: petsToReap.length-purgedCount})}// No emit - no subscribers for ts.reaper.completed}catch(error:any) {if(logger) {logger.error('\u274c Deletion Reaper error', { error: error.message })}}}\nimport{ CronConfig, Handlers }from'motia'import{ TSStore }from'./ts-store'exportconstconfig:CronConfig={type:'cron',name:'TsDeletionReaper',description:'Daily job that permanently removes pets scheduled for deletion',cron:'0 2 * * *',// Daily at 2:00 AMemits: [],flows: ['TsPetManagement']}exportconsthandler:Handlers['TsDeletionReaper']=async({emit,logger})=>{if(logger) {logger.info('\ud83d\udd04 Deletion Reaper started - scanning for pets to purge')}try{constpetsToReap=TSStore.findDeletedPetsReadyToPurge()if(petsToReap.length===0) {if(logger) {logger.info('\u2705 Deletion Reaper completed - no pets to purge')}// No emit - no subscribers for ts.reaper.completedreturn}letpurgedCount=0for(constpetofpetsToReap) {constsuccess=TSStore.remove(pet.id)if(success) {"
}
================================================================================
{
    "source_page": "Background Jobs",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/background-jobs =====",
    "chunk_topic": "Background Jobs",
    "chunk_id": "Background Jobs (Part 7)",
    "text": " - no pets to purge')}// No emit - no subscribers for ts.reaper.completedreturn}letpurgedCount=0for(constpetofpetsToReap) {constsuccess=TSStore.remove(pet.id)if(success) {purgedCount++if(logger) {logger.info('\ud83d\udc80 Pet permanently purged', {petId: pet.id,name: pet.name,deletedAt:newDate(pet.deletedAt!).toISOString(),purgeAt:newDate(pet.purgeAt!).toISOString()})}// No emit - no subscribers for ts.pet.purged}else{if(logger) {logger.warn('\u26a0\ufe0f Failed to purge pet', { petId: pet.id, name: pet.name })}}}if(logger) {logger.info('\u2705 Deletion Reaper completed', {totalScanned: petsToReap.length,purgedCount,failedCount: petsToReap.length-purgedCount})}// No emit - no subscribers for ts.reaper.completed}catch(error:any) {if(logger) {logger.error('\u274c Deletion Reaper error', { error: error.message })}}}\nUnderstanding Cron Steps\nCron Steps run on a schedule defined by a cron expression:\ntypeis set to'cron'\n'cron'\ncrondefines when the job runs (e.g.,'0 2 * * *'= daily at 2 AM)\n'0 2 * * *'\nhandlerreceives only the context (no input data like Event Steps)\nCommon cron patterns:\n'*/5 * * * *'- Every 5 minutes\n'*/5 * * * *'\n'0 * * * *'- Every hour\n'0 * * * *'\n'0 0 * * *'- Daily at midnight\n'0 0 * * *'\n'0 9 * * 1'- Every Monday at 9 AM\n'0 9 * * 1'\nMonitoring Background Jobs\nWorkbench provides tools to monitor your background jobs:\nTracing\nSee the complete execution flow from API call to background job:\nEach trace shows:\nWhen the API endpoint was called\nWhen events were emitted\nWhen background jobs started and completed\nTotal processing time\n\ud83c\udf89Congratulations!You've successfully created background jobs with Motia. Your pet store now handles async tasks efficiently without blocking API responses.\nWhat's Next?\nYou now have a complete backend system with API endpoints and background jobs! But there's more power in Motia when you combine"
}
================================================================================
{
    "source_page": "Background Jobs",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/background-jobs =====",
    "chunk_topic": "Background Jobs",
    "chunk_id": "Background Jobs (Part 8)",
    "text": " successfully created background jobs with Motia. Your pet store now handles async tasks efficiently without blocking API responses.\nWhat's Next?\nYou now have a complete backend system with API endpoints and background jobs! But there's more power in Motia when you combine everything into workflows.\nIn the next guide, we'll build completeworkflow orchestrationsthat connect multiple Steps together:\nQueue-Based Job Processing- SetNextFeedingReminder triggered by pet creation, processing asynchronously without blocking API responses\nScheduled Maintenance Tasks- Deletion Reaper running daily at 2 AM to permanently remove soft-deleted pets past their purge date\nPet Lifecycle Orchestration- Staff-driven workflow managing pet status transitions from creation through quarantine, health checks, and adoption\nEvent-Driven State Management- Centralized orchestrator ensuring consistent pet status changes with automatic progressions and staff decision points\nLet's continue building by creating workflows that orchestrate your APIs and background jobs into powerful, event-driven systems.\nAPI Endpoints\nLearn how to create HTTP API endpoints with Motia\nWorkflows\nLearn how to build automated workflows that manage complex business logic with Motia\nOn this page"
}
================================================================================
{
    "source_page": "Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/workflows =====",
    "chunk_topic": "Workflows",
    "chunk_id": "Workflows (Part 1)",
    "text": "Workflows\nLearn how to build automated workflows that manage complex business logic with Motia\nWhat You'll Build\nA pet lifecycle management system that automatically guides pets through their journey at your shelter:\nAutomated Status Transitions- Pets move through stages automatically when conditions are met\nStaff Decision Points- Critical checkpoints where staff make the calls\nSmart Progressions- Some transitions trigger follow-up actions automatically\nValidation Rules- Prevents invalid status changes to keep data consistent\nGetting Started\nClone the example repository:\ngitclonehttps://github.com/MotiaDev/build-your-first-app.gitcdbuild-your-first-appgitcheckoutworkflow-orchestration\ngitclonehttps://github.com/MotiaDev/build-your-first-app.gitcdbuild-your-first-appgitcheckoutworkflow-orchestration\nInstall dependencies:\nnpminstall\nnpminstall\nStart the Workbench:\nnpmrundev\nnpmrundev\nYour Workbench will be available athttp://localhost:3000.\nhttp://localhost:3000\nProject Structure\nFiles likefeatures.jsonandtutorial.tsxare only for the interactive tutorial and are not part of Motia's project structure.\nfeatures.json\ntutorial.tsx\nAll code examples in this guide are available in thebuild-your-first-apprepository.\nYou can follow this guide to learn how to build workflow orchestration with Motia step by step, or you can clone the repository and dive into our Interactive Tutorial to learn by doing directly in the Workbench.\nUnderstanding Workflows\nSo far, you've built API endpoints that respond to requests and background jobs that handle async tasks. But what about coordinating complex business processes that involve multiple steps and decision points?\nThat's where workflows come in. It's the conductor of your system - making sure things happen in the right order, at the right time, and only when it makes sense.\nIn our pet shelter example, a pet goes through many stages:\nNew arrivals need health checks\nHealthy pets become available for adoption\nSick pets need treatment before they're ready\nAdoption applications require staff approval\nA workflow manages all these transitions, enforcing the rules and keeping everything consistent.\nThe Pet Lifecycle Journey\nWhen you create a pet, it starts asnew. Once the feeding reminder job completes, it automatically moves toin_quarantine. Staff then checks on it and marks ithealthy, which automatically progresses toavailable. When someone wants to adopt, it goespending, then finallyadopted.\nnew\nin_quarantine"
}
================================================================================
{
    "source_page": "Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/workflows =====",
    "chunk_topic": "Workflows",
    "chunk_id": "Workflows (Part 2)",
    "text": " reminder job completes, it automatically moves toin_quarantine. Staff then checks on it and marks ithealthy, which automatically progresses toavailable. When someone wants to adopt, it goespending, then finallyadopted.\nnew\nin_quarantine\nhealthy\navailable\npending\nadopted\nThe key here is some transitions happen automatically (likehealthy\u2192available), while others need staff approval (likein_quarantine\u2192healthy).\nhealthy\navailable\nin_quarantine\nhealthy\nWhat about sick pets?\nIf staff finds a pet isill, it automatically moves tounder_treatment. When staff marks itrecovered, it chains through automatic transitions:recovered\u2192healthy\u2192available.\nill\nunder_treatment\nrecovered\nrecovered\nhealthy\navailable\nThis mix of automatic progressions and human decision points is what makes workflows powerful - the system handles the routine stuff while keeping people in control of important calls.\nCreating the Workflow\nThe workflow orchestrator is a single Event Step that manages all pet lifecycle transitions. Here's the complete implementation:\nView on GitHub:\nTypeScript\nPython\nJavaScript\n// steps/typescript/pet-lifecycle-orchestrator.step.tsimport{ EventConfig, Handlers }from'motia';import{ TSStore, Pet }from'./ts-store';typeLifecycleEvent=|'pet.created'|'feeding.reminder.completed'|'status.update.requested';typeTransitionRule={from:Pet[\"status\"][];to:Pet[\"status\"];event:LifecycleEvent;description:string;};constTRANSITION_RULES:TransitionRule[]=[{from: [\"new\"],to:\"in_quarantine\",event:\"feeding.reminder.completed\",description:\"Pet moved to quarantine after feeding setup\"},{from: [\"in_quarantine\"],to:\"healthy\",event:\"status.update.requested\",description:\"Staff health check - pet cleared from quarantine\"},{from: [\"healthy\",\"in_quarantine\",\"available\"],to:\"ill\",event:\"status.update.requested\",description:\"Staff assessment - pet identified as ill\"},{from: [\"healthy\"],to:\"available\",event:\"status.update.requested\",description:\"Staff decision - pet ready for adoption\"},{from: [\"ill\"],to:\"under_treatment\",event:\"status.update.requested\",description:\"Staff decision - treatment started\"},{from: [\"under_treatment\"],to:\"recovered\",event:\"status.update.requested\",description:\"Staff assessment - treatment completed\"},{from"
}
================================================================================
{
    "source_page": "Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/workflows =====",
    "chunk_topic": "Workflows",
    "chunk_id": "Workflows (Part 3)",
    "text": ":\"under_treatment\",event:\"status.update.requested\",description:\"Staff decision - treatment started\"},{from: [\"under_treatment\"],to:\"recovered\",event:\"status.update.requested\",description:\"Staff assessment - treatment completed\"},{from: [\"recovered\"],to:\"healthy\",event:\"status.update.requested\",description:\"Staff clearance - pet fully recovered\"},{from: [\"available\"],to:\"pending\",event:\"status.update.requested\",description:\"Adoption application received\"},{from: [\"pending\"],to:\"adopted\",event:\"status.update.requested\",description:\"Adoption completed\"},{from: [\"pending\"],to:\"available\",event:\"status.update.requested\",description:\"Adoption application rejected/cancelled\"}];exportconstconfig={type:'event',name:'TsPetLifecycleOrchestrator',description:'Pet lifecycle state management with staff interaction points',subscribes: ['ts.pet.created','ts.feeding.reminder.completed','ts.pet.status.update.requested'],emits: [],flows: ['TsPetManagement']};exportconsthandler:Handlers['TsPetLifecycleOrchestrator']=async(input, {emit,logger})=>{const{petId,event:eventType,requestedStatus,automatic}=input;if(logger) {constlogMessage=automatic?'\ud83e\udd16 Automatic progression':'\ud83d\udd04 Lifecycle orchestrator processing';logger.info(logMessage, { petId, eventType, requestedStatus, automatic });}try{constpet=TSStore.get(petId);if(!pet) {if(logger) {logger.error('\u274c Pet not found for lifecycle transition', { petId, eventType });}return;}// For status update requests, find the rule based on requested statusletrule;if(eventType==='status.update.requested'&&requestedStatus) {rule=TRANSITION_RULES.find(r=>r.event===eventType&&r.from.includes(pet.status)&&r.to===requestedStatus);}else{// For other events (like feeding.reminder.completed)rule=TRANSITION_RULES.find(r=>r.event===eventType&&r.from.includes(pet.status));}if(!rule) {constreason=eventType==='status.update.requested'?`Invalid transition: cannot change from ${pet.status} to ${requestedStatus}`:`No transition rule found for ${eventType} from ${pet.status}`;if(logger) {logger.warn('\u26a0\ufe0f Transition rejected', {petId,currentStatus: pet.status,requestedStatus,eventType,reason"
}
================================================================================
{
    "source_page": "Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/workflows =====",
    "chunk_topic": "Workflows",
    "chunk_id": "Workflows (Part 4)",
    "text": "} to ${requestedStatus}`:`No transition rule found for ${eventType} from ${pet.status}`;if(logger) {logger.warn('\u26a0\ufe0f Transition rejected', {petId,currentStatus: pet.status,requestedStatus,eventType,reason});}// Transition rejected - no event emission neededreturn;}// Check for idempotencyif(pet.status===rule.to) {if(logger) {logger.info('\u2705 Already in target status', {petId,status: pet.status,eventType});}return;}// Apply the transitionconstoldStatus=pet.status;constupdatedPet=TSStore.updateStatus(petId, rule.to);if(!updatedPet) {if(logger) {logger.error('\u274c Failed to update pet status', { petId, oldStatus, newStatus: rule.to });}return;}if(logger) {logger.info('\u2705 Lifecycle transition completed', {petId,oldStatus,newStatus: rule.to,eventType,description: rule.description,timestamp: Date.now()});}// Transition completed successfullyif(logger) {logger.info('\u2705 Pet status transition completed', {petId,oldStatus,newStatus: rule.to,eventType,description: rule.description});}// Check for automatic progressions after successful transitionawaitprocessAutomaticProgression(petId, rule.to, emit, logger);}catch(error:any) {if(logger) {logger.error('\u274c Lifecycle orchestrator error', { petId, eventType, error: error.message });}}};asyncfunctionprocessAutomaticProgression(petId:string,currentStatus:Pet[\"status\"],emit:any,logger:any) {// Define automatic progressionsconstautomaticProgressions:Partial<Record<Pet[\"status\"], {to:Pet[\"status\"],description:string}>>={'healthy': { to:'available', description:'Automatic progression - pet ready for adoption'},'ill': { to:'under_treatment', description:'Automatic progression - treatment started'},'recovered': { to:'healthy', description:'Automatic progression - recovery complete'}};constprogression=automaticProgressions[currentStatus];if(progression) {if(logger) {logger.info('\ud83e\udd16 Processing automatic progression', {petId,currentStatus,nextStatus: progression.to});}// Find the transition rule for automatic progressionconstrule=TRANSITION_RULES.find(r=>r.event==='status.update.requested'&&r.from.includes(currentStatus)&&r.to===progression.to);if(rule) {// Apply the automatic transition immediatelyconstoldStatus=currentStatus;"
}
================================================================================
{
    "source_page": "Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/workflows =====",
    "chunk_topic": "Workflows",
    "chunk_id": "Workflows (Part 5)",
    "text": " for automatic progressionconstrule=TRANSITION_RULES.find(r=>r.event==='status.update.requested'&&r.from.includes(currentStatus)&&r.to===progression.to);if(rule) {// Apply the automatic transition immediatelyconstoldStatus=currentStatus;constupdatedPet=TSStore.updateStatus(petId, rule.to);if(updatedPet) {if(logger) {logger.info('\u2705 Automatic progression completed', {petId,oldStatus,newStatus: rule.to,description: progression.description,timestamp: Date.now()});}// Automatic progression completed successfullyif(logger) {logger.info('\u2705 Automatic progression completed', {petId,oldStatus,newStatus: rule.to,description: progression.description});}// Check for further automatic progressions (for chaining like recovered \u2192 healthy \u2192 available)awaitprocessAutomaticProgression(petId, rule.to, emit, logger);}elseif(logger) {logger.error('\u274c Failed to apply automatic progression', { petId, oldStatus, newStatus: rule.to });}}elseif(logger) {logger.warn('\u26a0\ufe0f No transition rule found for automatic progression', {petId,currentStatus,targetStatus: progression.to});}}}\n// steps/typescript/pet-lifecycle-orchestrator.step.tsimport{ EventConfig, Handlers }from'motia';import{ TSStore, Pet }from'./ts-store';typeLifecycleEvent=|'pet.created'|'feeding.reminder.completed'|'status.update.requested';typeTransitionRule={from:Pet[\"status\"][];to:Pet[\"status\"];event:LifecycleEvent;description:string;};constTRANSITION_RULES:TransitionRule[]=[{from: [\"new\"],to:\"in_quarantine\",event:\"feeding.reminder.completed\",description:\"Pet moved to quarantine after feeding setup\"},{from: [\"in_quarantine\"],to:\"healthy\",event:\"status.update.requested\",description:\"Staff health check - pet cleared from quarantine\"},{from: [\"healthy\",\"in_quarantine\",\"available\"],to:\"ill\",event:\"status.update.requested\",description:\"Staff assessment - pet identified as ill\"},{from: [\"healthy\"],to:\"available\",event:\"status.update.requested\",description:\"Staff decision - pet ready for adoption\"},{from: [\"ill\"],to:\"under_treatment\",event:\"status.update.requested\",description:\"Staff decision - treatment started\"},{from: [\"under_treatment\"],to:\"recovered\",event:\"status.update.requested"
}
================================================================================
{
    "source_page": "Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/workflows =====",
    "chunk_topic": "Workflows",
    "chunk_id": "Workflows (Part 6)",
    "text": " ready for adoption\"},{from: [\"ill\"],to:\"under_treatment\",event:\"status.update.requested\",description:\"Staff decision - treatment started\"},{from: [\"under_treatment\"],to:\"recovered\",event:\"status.update.requested\",description:\"Staff assessment - treatment completed\"},{from: [\"recovered\"],to:\"healthy\",event:\"status.update.requested\",description:\"Staff clearance - pet fully recovered\"},{from: [\"available\"],to:\"pending\",event:\"status.update.requested\",description:\"Adoption application received\"},{from: [\"pending\"],to:\"adopted\",event:\"status.update.requested\",description:\"Adoption completed\"},{from: [\"pending\"],to:\"available\",event:\"status.update.requested\",description:\"Adoption application rejected/cancelled\"}];exportconstconfig={type:'event',name:'TsPetLifecycleOrchestrator',description:'Pet lifecycle state management with staff interaction points',subscribes: ['ts.pet.created','ts.feeding.reminder.completed','ts.pet.status.update.requested'],emits: [],flows: ['TsPetManagement']};exportconsthandler:Handlers['TsPetLifecycleOrchestrator']=async(input, {emit,logger})=>{const{petId,event:eventType,requestedStatus,automatic}=input;if(logger) {constlogMessage=automatic?'\ud83e\udd16 Automatic progression':'\ud83d\udd04 Lifecycle orchestrator processing';logger.info(logMessage, { petId, eventType, requestedStatus, automatic });}try{constpet=TSStore.get(petId);if(!pet) {if(logger) {logger.error('\u274c Pet not found for lifecycle transition', { petId, eventType });}return;}// For status update requests, find the rule based on requested statusletrule;if(eventType==='status.update.requested'&&requestedStatus) {rule=TRANSITION_RULES.find(r=>r.event===eventType&&r.from.includes(pet.status)&&r.to===requestedStatus);}else{// For other events (like feeding.reminder.completed)rule=TRANSITION_RULES.find(r=>r.event===eventType&&r.from.includes(pet.status));}if(!rule) {constreason=eventType==='status.update.requested'?`Invalid transition: cannot change from ${pet.status} to ${requestedStatus}`:`No transition rule found for ${eventType} from ${pet.status}`;if(logger) {logger.warn('\u26a0\ufe0f Transition rejected', {petId,current"
}
================================================================================
{
    "source_page": "Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/workflows =====",
    "chunk_topic": "Workflows",
    "chunk_id": "Workflows (Part 7)",
    "text": "'?`Invalid transition: cannot change from ${pet.status} to ${requestedStatus}`:`No transition rule found for ${eventType} from ${pet.status}`;if(logger) {logger.warn('\u26a0\ufe0f Transition rejected', {petId,currentStatus: pet.status,requestedStatus,eventType,reason});}// Transition rejected - no event emission neededreturn;}// Check for idempotencyif(pet.status===rule.to) {if(logger) {logger.info('\u2705 Already in target status', {petId,status: pet.status,eventType});}return;}// Apply the transitionconstoldStatus=pet.status;constupdatedPet=TSStore.updateStatus(petId, rule.to);if(!updatedPet) {if(logger) {logger.error('\u274c Failed to update pet status', { petId, oldStatus, newStatus: rule.to });}return;}if(logger) {logger.info('\u2705 Lifecycle transition completed', {petId,oldStatus,newStatus: rule.to,eventType,description: rule.description,timestamp: Date.now()});}// Transition completed successfullyif(logger) {logger.info('\u2705 Pet status transition completed', {petId,oldStatus,newStatus: rule.to,eventType,description: rule.description});}// Check for automatic progressions after successful transitionawaitprocessAutomaticProgression(petId, rule.to, emit, logger);}catch(error:any) {if(logger) {logger.error('\u274c Lifecycle orchestrator error', { petId, eventType, error: error.message });}}};asyncfunctionprocessAutomaticProgression(petId:string,currentStatus:Pet[\"status\"],emit:any,logger:any) {// Define automatic progressionsconstautomaticProgressions:Partial<Record<Pet[\"status\"], {to:Pet[\"status\"],description:string}>>={'healthy': { to:'available', description:'Automatic progression - pet ready for adoption'},'ill': { to:'under_treatment', description:'Automatic progression - treatment started'},'recovered': { to:'healthy', description:'Automatic progression - recovery complete'}};constprogression=automaticProgressions[currentStatus];if(progression) {if(logger) {logger.info('\ud83e\udd16 Processing automatic progression', {petId,currentStatus,nextStatus: progression.to});}// Find the transition rule for automatic progressionconstrule=TRANSITION_RULES.find(r=>r.event==='status.update.requested'&&r.from.includes(currentStatus)&&r.to===progression.to);if(rule) {//"
}
================================================================================
{
    "source_page": "Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/workflows =====",
    "chunk_topic": "Workflows",
    "chunk_id": "Workflows (Part 8)",
    "text": ",nextStatus: progression.to});}// Find the transition rule for automatic progressionconstrule=TRANSITION_RULES.find(r=>r.event==='status.update.requested'&&r.from.includes(currentStatus)&&r.to===progression.to);if(rule) {// Apply the automatic transition immediatelyconstoldStatus=currentStatus;constupdatedPet=TSStore.updateStatus(petId, rule.to);if(updatedPet) {if(logger) {logger.info('\u2705 Automatic progression completed', {petId,oldStatus,newStatus: rule.to,description: progression.description,timestamp: Date.now()});}// Automatic progression completed successfullyif(logger) {logger.info('\u2705 Automatic progression completed', {petId,oldStatus,newStatus: rule.to,description: progression.description});}// Check for further automatic progressions (for chaining like recovered \u2192 healthy \u2192 available)awaitprocessAutomaticProgression(petId, rule.to, emit, logger);}elseif(logger) {logger.error('\u274c Failed to apply automatic progression', { petId, oldStatus, newStatus: rule.to });}}elseif(logger) {logger.warn('\u26a0\ufe0f No transition rule found for automatic progression', {petId,currentStatus,targetStatus: progression.to});}}}\nHow the Orchestrator Works\nThe orchestrator has three main responsibilities:\nValidate Transitions- Ensures pets can only move to valid next statuses\nApply Transitions- Updates the pet's status in the store\nTrigger Automatic Progressions- Some statuses automatically progress to the next stage\nKey Points:\nemits: []- The orchestrator doesn't declare emits because it only manages state internally\nemits: []\nJavaScript/Python emit events for workflow tracking (optional pattern)\nTypeScript focuses purely on state management\nAll languages validate transitions using the sameTRANSITION_RULES\nTRANSITION_RULES\nTesting Your Orchestrator\nThe best way to test your orchestrator is throughWorkbench. It lets you send requests, watch the workflow execute in real-time, and see all the logs in one place.\nCreate a Pet\nOpen Workbench and test the CreatePet endpoint:\nYou'll see in the logs:\n\ud83d\udc3e Pet created { petId: '1', name: 'Max', species: 'dog', status: 'new' }\ud83d\udd04 Setting next feeding reminder { petId: '1' }\u2705 Next feeding reminder set { petId: '1' }\ud83d\udd04 Lifecycle orchestrator processing { petId: '1', eventType:"
}
================================================================================
{
    "source_page": "Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/workflows =====",
    "chunk_topic": "Workflows",
    "chunk_id": "Workflows (Part 9)",
    "text": "', status: 'new' }\ud83d\udd04 Setting next feeding reminder { petId: '1' }\u2705 Next feeding reminder set { petId: '1' }\ud83d\udd04 Lifecycle orchestrator processing { petId: '1', eventType: 'feeding.reminder.completed' }\u2705 Lifecycle transition completed { oldStatus: 'new', newStatus: 'in_quarantine' }\n\ud83d\udc3e Pet created { petId: '1', name: 'Max', species: 'dog', status: 'new' }\ud83d\udd04 Setting next feeding reminder { petId: '1' }\u2705 Next feeding reminder set { petId: '1' }\ud83d\udd04 Lifecycle orchestrator processing { petId: '1', eventType: 'feeding.reminder.completed' }\u2705 Lifecycle transition completed { oldStatus: 'new', newStatus: 'in_quarantine' }\nPrefer using curl?You can also test with command line:\ncurl-XPOSThttp://localhost:3000/ts/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Max\", \"species\": \"dog\", \"ageMonths\": 24}'\ncurl-XPOSThttp://localhost:3000/ts/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Max\", \"species\": \"dog\", \"ageMonths\": 24}'\nStaff Health Check\nTest the UpdatePet endpoint in Workbench to mark the pet as healthy:\nWatch the automatic progression:\n\ud83d\udc64 Staff requesting status change { petId: '1', requestedStatus: 'healthy' }\ud83d\udd04 Lifecycle orchestrator processing { petId: '1', eventType: 'status.update.requested' }\u2705 Lifecycle transition completed { oldStatus: 'in_quarantine', newStatus: 'healthy' }\ud83e\udd16 Processing automatic progression { petId: '1', currentStatus: 'healthy', nextStatus: 'available' }\u2705 Automatic progression completed { oldStatus: 'healthy', newStatus: 'available' }\n\ud83d\udc64 Staff requesting status change { petId: '1', requestedStatus: 'healthy' }\ud83d\udd04 Lifecycle orchestrator processing { petId: '1', eventType: 'status.update.requested' }\u2705 Lifecycle transition completed { oldStatus: 'in_quarantine', newStatus: 'healthy' }\ud83e\udd16 Processing automatic progression { petId: '1', currentStatus: 'healthy', nextStatus: '"
}
================================================================================
{
    "source_page": "Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/workflows =====",
    "chunk_topic": "Workflows",
    "chunk_id": "Workflows (Part 10)",
    "text": ".update.requested' }\u2705 Lifecycle transition completed { oldStatus: 'in_quarantine', newStatus: 'healthy' }\ud83e\udd16 Processing automatic progression { petId: '1', currentStatus: 'healthy', nextStatus: 'available' }\u2705 Automatic progression completed { oldStatus: 'healthy', newStatus: 'available' }\nUsing curl?\ncurl-XPUThttp://localhost:3000/ts/pets/1\\-H\"Content-Type: application/json\"\\-d'{\"status\": \"healthy\"}'\ncurl-XPUThttp://localhost:3000/ts/pets/1\\-H\"Content-Type: application/json\"\\-d'{\"status\": \"healthy\"}'\nTest Invalid Transitions\nTry to skip a step in Workbench:\nThe orchestrator rejects it:\n\u26a0\ufe0f Transition rejected {currentStatus: 'in_quarantine',requestedStatus: 'available',reason: 'Invalid transition: cannot change from in_quarantine to available'}\n\u26a0\ufe0f Transition rejected {currentStatus: 'in_quarantine',requestedStatus: 'available',reason: 'Invalid transition: cannot change from in_quarantine to available'}\nUsing curl?\ncurl-XPUThttp://localhost:3000/ts/pets/1\\-H\"Content-Type: application/json\"\\-d'{\"status\": \"available\"}'\ncurl-XPUThttp://localhost:3000/ts/pets/1\\-H\"Content-Type: application/json\"\\-d'{\"status\": \"available\"}'\nTest the Illness Workflow\nMark a pet as ill in Workbench:\nWatch the automatic treatment start:\n\u2705 Lifecycle transition completed { oldStatus: 'healthy', newStatus: 'ill' }\ud83e\udd16 Processing automatic progression { currentStatus: 'ill', nextStatus: 'under_treatment' }\u2705 Automatic progression completed { oldStatus: 'ill', newStatus: 'under_treatment' }\n\u2705 Lifecycle transition completed { oldStatus: 'healthy', newStatus: 'ill' }\ud83e\udd16 Processing automatic progression { currentStatus: 'ill', nextStatus: 'under_treatment' }\u2705 Automatic progression completed { oldStatus: 'ill', newStatus: 'under_treatment' }\nUsing curl?\ncurl-XPUThttp://localhost:3000/ts/pets/1\\-H\"Content-Type: application/json\"\\-d'{\"status\": \"ill\"}'\ncurl-XPUThttp://localhost:3000/ts/pets/"
}
================================================================================
{
    "source_page": "Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/workflows =====",
    "chunk_topic": "Workflows",
    "chunk_id": "Workflows (Part 11)",
    "text": " }\nUsing curl?\ncurl-XPUThttp://localhost:3000/ts/pets/1\\-H\"Content-Type: application/json\"\\-d'{\"status\": \"ill\"}'\ncurl-XPUThttp://localhost:3000/ts/pets/1\\-H\"Content-Type: application/json\"\\-d'{\"status\": \"ill\"}'\nThen mark the pet as recovered in Workbench:\nWatch the chained automatic progressions:\n\u2705 Lifecycle transition completed { oldStatus: 'under_treatment', newStatus: 'recovered' }\ud83e\udd16 Processing automatic progression { currentStatus: 'recovered', nextStatus: 'healthy' }\u2705 Automatic progression completed { oldStatus: 'recovered', newStatus: 'healthy' }\ud83e\udd16 Processing automatic progression { currentStatus: 'healthy', nextStatus: 'available' }\u2705 Automatic progression completed { oldStatus: 'healthy', newStatus: 'available' }\n\u2705 Lifecycle transition completed { oldStatus: 'under_treatment', newStatus: 'recovered' }\ud83e\udd16 Processing automatic progression { currentStatus: 'recovered', nextStatus: 'healthy' }\u2705 Automatic progression completed { oldStatus: 'recovered', newStatus: 'healthy' }\ud83e\udd16 Processing automatic progression { currentStatus: 'healthy', nextStatus: 'available' }\u2705 Automatic progression completed { oldStatus: 'healthy', newStatus: 'available' }\nUsing curl?\ncurl-XPUThttp://localhost:3000/ts/pets/1\\-H\"Content-Type: application/json\"\\-d'{\"status\": \"recovered\"}'\ncurl-XPUThttp://localhost:3000/ts/pets/1\\-H\"Content-Type: application/json\"\\-d'{\"status\": \"recovered\"}'\nMonitoring Your Orchestrator\nUse the Workbench to visualize the entire flow:\nTracing\nSee how events flow through your system:\nEach trace shows:\nThe initial API call\nBackground job processing\nOrchestrator transitions\nAutomatic progressions\nTotal time for each step\nLogs\nFilter by pet ID to see the complete lifecycle:\nThe logs tell the story of each pet's journey through your shelter.\n\ud83c\udf89Congratulations!You've built a complete workflow orchestrator that manages complex business logic while keeping your code clean and maintainable.\nWhat's Next?\nYour pet shelter now has a complete backend system with workflow orchestration! But what about decisions that aren't black and white?"
}
================================================================================
{
    "source_page": "Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/workflows =====",
    "chunk_topic": "Workflows",
    "chunk_id": "Workflows (Part 12)",
    "text": "'ve built a complete workflow orchestrator that manages complex business logic while keeping your code clean and maintainable.\nWhat's Next?\nYour pet shelter now has a complete backend system with workflow orchestration! But what about decisions that aren't black and white? Should this pet's symptoms require treatment?\nIn the next guide, we'll addAgentic Workflowsthat make intelligent decisions within your workflows:\nHealth Review Agentic Step- Analyzes symptoms and decides if treatment is needed\nAdoption Review Agentic Step- Assesses if pets are ready for adoption\nAI Profile Enrichment- Automatically generates engaging pet profiles\nAgentic Decision Making- AI that chooses which workflow path to take\nLet's continue building by adding intelligent decision-making to your workflows.\nBackground Jobs\nLearn how to create async background jobs and scheduled tasks with Motia\nAgentic Workflows\nLearn how to build intelligent agentic workflows that make decisions and automate workflows with Motia\nOn this page"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 1)",
    "text": "Agentic Workflows\nLearn how to build intelligent agentic workflows that make decisions and automate workflows with Motia\nWhat You'll Build\nAn intelligent pet management system with agentic workflows that automate decisions and enrich data:\nAI Profile Enrichment- Automatically generates detailed pet profiles using AI\nHealth Review Agentic Step- Makes intelligent health decisions based on symptoms\nAdoption Review Agentic Step- Assesses adoption readiness and data completeness\nOrchestrator Integration- AI decisions that drive real workflow changes\nGetting Started\nClone the example repository:\ngitclonehttps://github.com/MotiaDev/build-your-first-app.gitcdbuild-your-first-appgitcheckoutai-agents\ngitclonehttps://github.com/MotiaDev/build-your-first-app.gitcdbuild-your-first-appgitcheckoutai-agents\nInstall dependencies:\nnpminstall\nnpminstall\nSet up your OpenAI API key in.env:\n.env\nOPENAI_API_KEY=your_api_key_here\nOPENAI_API_KEY=your_api_key_here\nImportant!This tutorial requires an OpenAI API key. Get yours atplatform.openai.com/api-keys. Without it, the agentic workflows won't work.\nStart the Workbench:\nnpmrundev\nnpmrundev\nYour Workbench will be available athttp://localhost:3000.\nhttp://localhost:3000\nProject Structure\nFiles likefeatures.jsonandtutorial.tsxare only for the interactive tutorial and are not part of Motia's project structure.\nfeatures.json\ntutorial.tsx\nAll code examples in this guide are available in thebuild-your-first-apprepository.\nYou can follow this guide to learn how to build agentic workflows with Motia step by step, or you can clone the repository and dive into our Interactive Tutorial to learn by doing directly in the Workbench.\nUnderstanding Agentic Workflows\nYou've built APIs, background jobs, and workflows that orchestrate your pet shelter. But what about decisions that aren't black and white? Should this pet's symptoms require treatment? Is this profile ready for the adoption page?\nThat's where agentic workflows come in. They're smart assistants that make judgment calls based on context - the kind of decisions that would normally need a human to review every single case.\nIn our pet shelter, we use two flavors:\nContent generatorswrite engaging pet profiles automatically\nDecision makersevaluate health symptoms and choose whether treatment is needed\nData reviewersassess if adoption information is complete\nThe difference from"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 2)",
    "text": " review every single case.\nIn our pet shelter, we use two flavors:\nContent generatorswrite engaging pet profiles automatically\nDecision makersevaluate health symptoms and choose whether treatment is needed\nData reviewersassess if adoption information is complete\nThe difference from traditional code? Instead of writing hundreds of if-else rules for every possible symptom combination, you describe what matters to the AI. It reads the context and makes an informed call.\nWhen a pet arrives with \"coughing, lethargy, loss of appetite\" - the AI evaluates these symptoms together and decides if treatment is needed. No hardcoded rules. Just intelligent analysis of the situation.\nCreating Your First Agentic Step\nLet's start with a content generation agentic step that automatically enriches pet profiles when they're created.\nStep 1: Set Up Pet Creation to Emit Events\nFirst, update your pet creation endpoint to emit events that will trigger the agentic step.\nView on GitHub:\nTypeScript\nPython\nJavaScript\nimport{ ApiRouteConfig, Handlers }from'motia'import{ z }from'zod'import{ TSStore }from'./ts-store'constcreatePetSchema=z.object({name: z.string().min(1,'Name is required').trim(),species: z.enum(['dog','cat','bird','other']),ageMonths: z.number().int().min(0,'Age must be a positive number')})exportconstconfig:ApiRouteConfig={type:'api',name:'TsCreatePet',path:'/ts/pets',method:'POST',emits: ['ts.pet.created','ts.feeding.reminder.enqueued'],flows: ['TsPetManagement']}exportconsthandler:Handlers['TsCreatePet']=async(req, {emit,logger})=>{try{constvalidatedData=createPetSchema.parse(req.body)constpet=TSStore.create({name: validatedData.name,species: validatedData.species,ageMonths: validatedData.ageMonths})if(logger) {logger.info('\ud83d\udc3e Pet created', { petId: pet.id, name: pet.name, species: pet.species, status: pet.status })}if(emit) {await(emitasany)({topic:'ts.pet.created',data: { petId: pet.id, event:'pet.created', name: pet.name, species: validatedData.species }})await(emitasany)({topic:'ts.feeding.reminder.enqueued',data: { petId: pet.id"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 3)",
    "text": ": { petId: pet.id, event:'pet.created', name: pet.name, species: validatedData.species }})await(emitasany)({topic:'ts.feeding.reminder.enqueued',data: { petId: pet.id, enqueuedAt: Date.now() }})}return{ status:201, body: pet }}catch(error) {if(errorinstanceofz.ZodError) {return{status:400,body: {message:'Validation error',errors: error.errors}}}return{status:500,body: { message:'Internal server error'}}}}\nimport{ ApiRouteConfig, Handlers }from'motia'import{ z }from'zod'import{ TSStore }from'./ts-store'constcreatePetSchema=z.object({name: z.string().min(1,'Name is required').trim(),species: z.enum(['dog','cat','bird','other']),ageMonths: z.number().int().min(0,'Age must be a positive number')})exportconstconfig:ApiRouteConfig={type:'api',name:'TsCreatePet',path:'/ts/pets',method:'POST',emits: ['ts.pet.created','ts.feeding.reminder.enqueued'],flows: ['TsPetManagement']}exportconsthandler:Handlers['TsCreatePet']=async(req, {emit,logger})=>{try{constvalidatedData=createPetSchema.parse(req.body)constpet=TSStore.create({name: validatedData.name,species: validatedData.species,ageMonths: validatedData.ageMonths})if(logger) {logger.info('\ud83d\udc3e Pet created', { petId: pet.id, name: pet.name, species: pet.species, status: pet.status })}if(emit) {await(emitasany)({topic:'ts.pet.created',data: { petId: pet.id, event:'pet.created', name: pet.name, species: validatedData.species }})await(emitasany)({topic:'ts.feeding.reminder.enqueued',data: { petId: pet.id, enqueuedAt: Date.now() }})}return{ status:201, body: pet }}catch(error) {if(errorinstanceofz.ZodError) {return{status:400,body: {message:'Validation error',errors: error.errors}}}return{status:500,body: { message:'Internal server error'}}}}\nThe API endpoint now emits an event after creating a pet. The response"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 4)",
    "text": "Error) {return{status:400,body: {message:'Validation error',errors: error.errors}}}return{status:500,body: { message:'Internal server error'}}}}\nThe API endpoint now emits an event after creating a pet. The response returns immediately while the agentic step processes asynchronously in the background.\nStep 2: Create the AI Profile Enrichment Agentic Step\nNow let's create the agentic step that listens for new pets and enriches their profiles with AI-generated content.\nView on GitHub:\nTypeScript\nPython\nJavaScript\n// steps/typescript/ai-profile-enrichment.step.tsimport{ EventConfig, Handlers }from'motia';import{ TSStore, PetProfile }from'./ts-store';exportconstconfig={type:'event',name:'TsAiProfileEnrichment',description:'Agentic step that enriches pet profiles using OpenAI',subscribes: ['ts.pet.created'],emits: [],flows: ['TsPetManagement']};exportconsthandler:Handlers['TsAiProfileEnrichment']=async(input, {logger})=>{const{petId,name,species}=input;if(logger) {logger.info('\ud83e\udd16 AI Profile Enrichment started', { petId, name, species });}try{constapiKey=process.env.OPENAI_API_KEY;if(!apiKey) {thrownewError('OPENAI_API_KEY environment variable is not set');}constprompt=`Generate a pet profile for adoption purposes. Pet details:- Name: ${name}- Species: ${species}Please provide a JSON response with these fields:- bio: A warm, engaging 2-3 sentence description that would appeal to potential adopters- breedGuess: Your best guess at the breed or breed mix (be specific but realistic)- temperamentTags: An array of 3-5 personality traits (e.g., \"friendly\", \"energetic\", \"calm\")- adopterHints: Practical advice for potential adopters (family type, living situation, care needs)Keep it positive, realistic, and adoption-focused.`;constresponse=awaitfetch('https://api.openai.com/v1/chat/completions', {method:'POST',headers: {'Authorization':`Bearer ${apiKey}`,'Content-Type':'application/json',},body:JSON.stringify({model:'gpt-3.5-turbo',messages: [{role:'system',content:'You are a pet adoption specialist who creates compelling, accurate pet profiles"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 5)",
    "text": " ${apiKey}`,'Content-Type':'application/json',},body:JSON.stringify({model:'gpt-3.5-turbo',messages: [{role:'system',content:'You are a pet adoption specialist who creates compelling, accurate pet profiles. Always respond with valid JSON only.'},{role:'user',content: prompt}],max_tokens:500,temperature:0.7,}),});if(!response.ok) {thrownewError(`OpenAI API error: ${response.status} ${response.statusText}`);}constdata=awaitresponse.json();constaiResponse=data.choices[0]?.message?.content;if(!aiResponse) {thrownewError('No response from OpenAI API');}letprofile:PetProfile;try{profile=JSON.parse(aiResponse);}catch(parseError) {profile={bio:`${name} is a wonderful ${species} looking for a loving home. This pet has a unique personality and would make a great companion.`,breedGuess: species==='dog'?'Mixed Breed':species==='cat'?'Domestic Shorthair':'Mixed Breed',temperamentTags: ['friendly','loving','loyal'],adopterHints:`${name} would do well in a caring home with patience and love.`};if(logger) {logger.warn('\u26a0\ufe0f AI response parsing failed, using fallback profile', { petId, parseError: parseErrorinstanceofError?parseError.message:String(parseError) });}}constupdatedPet=TSStore.updateProfile(petId, profile);if(!updatedPet) {thrownewError(`Pet not found: ${petId}`);}if(logger) {logger.info('\u2705 AI Profile Enrichment completed', {petId,profile: {bio: profile.bio.substring(0,50)+'...',breedGuess: profile.breedGuess,temperamentTags: profile.temperamentTags,adopterHints: profile.adopterHints.substring(0,50)+'...'}});}}catch(error:any) {if(logger) {logger.error('\u274c AI Profile Enrichment failed', {petId,error: error.message});}constfallbackProfile:PetProfile={bio:`${name} is a lovely ${species} with a unique personality, ready to find their forever home.`,breedGuess: species==='dog'?'Mixed Breed':species==='cat'?'Domestic Shorthair':'Mixed Breed',temperamentTags: ['friendly','adaptable'],"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 6)",
    "text": " a unique personality, ready to find their forever home.`,breedGuess: species==='dog'?'Mixed Breed':species==='cat'?'Domestic Shorthair':'Mixed Breed',temperamentTags: ['friendly','adaptable'],adopterHints:`${name} is looking for a patient and loving family.`};TSStore.updateProfile(petId, fallbackProfile);}};\n// steps/typescript/ai-profile-enrichment.step.tsimport{ EventConfig, Handlers }from'motia';import{ TSStore, PetProfile }from'./ts-store';exportconstconfig={type:'event',name:'TsAiProfileEnrichment',description:'Agentic step that enriches pet profiles using OpenAI',subscribes: ['ts.pet.created'],emits: [],flows: ['TsPetManagement']};exportconsthandler:Handlers['TsAiProfileEnrichment']=async(input, {logger})=>{const{petId,name,species}=input;if(logger) {logger.info('\ud83e\udd16 AI Profile Enrichment started', { petId, name, species });}try{constapiKey=process.env.OPENAI_API_KEY;if(!apiKey) {thrownewError('OPENAI_API_KEY environment variable is not set');}constprompt=`Generate a pet profile for adoption purposes. Pet details:- Name: ${name}- Species: ${species}Please provide a JSON response with these fields:- bio: A warm, engaging 2-3 sentence description that would appeal to potential adopters- breedGuess: Your best guess at the breed or breed mix (be specific but realistic)- temperamentTags: An array of 3-5 personality traits (e.g., \"friendly\", \"energetic\", \"calm\")- adopterHints: Practical advice for potential adopters (family type, living situation, care needs)Keep it positive, realistic, and adoption-focused.`;constresponse=awaitfetch('https://api.openai.com/v1/chat/completions', {method:'POST',headers: {'Authorization':`Bearer ${apiKey}`,'Content-Type':'application/json',},body:JSON.stringify({model:'gpt-3.5-turbo',messages: [{role:'system',content:'You are a pet adoption specialist who creates compelling, accurate pet profiles. Always respond with valid JSON only.'},{role:'user',content: prompt}],max_tokens:500,temperature:0.7,}),});if(!response"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 7)",
    "text": "system',content:'You are a pet adoption specialist who creates compelling, accurate pet profiles. Always respond with valid JSON only.'},{role:'user',content: prompt}],max_tokens:500,temperature:0.7,}),});if(!response.ok) {thrownewError(`OpenAI API error: ${response.status} ${response.statusText}`);}constdata=awaitresponse.json();constaiResponse=data.choices[0]?.message?.content;if(!aiResponse) {thrownewError('No response from OpenAI API');}letprofile:PetProfile;try{profile=JSON.parse(aiResponse);}catch(parseError) {profile={bio:`${name} is a wonderful ${species} looking for a loving home. This pet has a unique personality and would make a great companion.`,breedGuess: species==='dog'?'Mixed Breed':species==='cat'?'Domestic Shorthair':'Mixed Breed',temperamentTags: ['friendly','loving','loyal'],adopterHints:`${name} would do well in a caring home with patience and love.`};if(logger) {logger.warn('\u26a0\ufe0f AI response parsing failed, using fallback profile', { petId, parseError: parseErrorinstanceofError?parseError.message:String(parseError) });}}constupdatedPet=TSStore.updateProfile(petId, profile);if(!updatedPet) {thrownewError(`Pet not found: ${petId}`);}if(logger) {logger.info('\u2705 AI Profile Enrichment completed', {petId,profile: {bio: profile.bio.substring(0,50)+'...',breedGuess: profile.breedGuess,temperamentTags: profile.temperamentTags,adopterHints: profile.adopterHints.substring(0,50)+'...'}});}}catch(error:any) {if(logger) {logger.error('\u274c AI Profile Enrichment failed', {petId,error: error.message});}constfallbackProfile:PetProfile={bio:`${name} is a lovely ${species} with a unique personality, ready to find their forever home.`,breedGuess: species==='dog'?'Mixed Breed':species==='cat'?'Domestic Shorthair':'Mixed Breed',temperamentTags: ['friendly','adaptable'],adopterHints:`${name} is looking for a patient and loving family.`};TSStore.updateProfile(petId, fallbackProfile);}};\nHow This Agentic"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 8)",
    "text": "air':'Mixed Breed',temperamentTags: ['friendly','adaptable'],adopterHints:`${name} is looking for a patient and loving family.`};TSStore.updateProfile(petId, fallbackProfile);}};\nHow This Agentic Step Works\nThis is acontent generation agentic step- it enriches data without making workflow decisions:\nSubscribestopet.createdevents\npet.created\nCalls OpenAIwith a carefully crafted prompt\nParses the responseinto structured data\nUpdates the petwith AI-generated content\nHas a fallbackif the AI call fails\nThe key is the prompt engineering - we tell the AI exactly what fields we need and what tone to use. The AI returns JSON that we can parse and store directly.\nTesting Your Agentic Step\nThe best way to test your agentic step is throughWorkbench. It lets you create pets, watch the AI enrichment happen in real-time, and see all the logs in one place.\nCreate a Pet\nOpen Workbench and test the CreatePet endpoint. The AI will automatically start enriching the profile in the background.\nPrefer using curl?\ncurl-XPOSThttp://localhost:3000/ts/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Max\", \"species\": \"dog\", \"ageMonths\": 24}'\ncurl-XPOSThttp://localhost:3000/ts/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Max\", \"species\": \"dog\", \"ageMonths\": 24}'\nCheck the logs in Workbench to see the agentic step in action:\nYou'll see:\n\"Pet created\" log from the API endpoint\n\"AI Profile Enrichment started\" log\n\"AI Profile Enrichment completed\" with generated content\nView the Enriched Profile\nFetch the pet in Workbench to see the AI-generated profile, or use curl:\nUsing curl?\ncurlhttp://localhost:3000/ts/pets/1\ncurlhttp://localhost:3000/ts/pets/1\nYou'll get back something like:\nBuilding a Decision-Making Agentic Step\nNow let's create an agentic step that doesn't just generate content - it makes decisions that control the workflow. This is calledagentic routing.\nThe Health Review Agentic Step\nThis agentic step analyzes pet symptoms and decides if treatment is needed. Instead of you writing complex if-else logic, the AI evaluates the context and"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 9)",
    "text": " decisions that control the workflow. This is calledagentic routing.\nThe Health Review Agentic Step\nThis agentic step analyzes pet symptoms and decides if treatment is needed. Instead of you writing complex if-else logic, the AI evaluates the context and chooses the appropriate action.\nView on GitHub:\nTypeScript\nPython\nJavaScript\n// steps/typescript/health-review-agent.step.tsimport{ ApiRouteConfig, Handlers }from'motia';import{ TSStore }from'./ts-store';import{HEALTH_REVIEW_EMITS,buildAgentContext,callAgentDecision,getAgentArtifacts}from'./agent-decision-framework';exportconstconfig:ApiRouteConfig={type:'api',name:'TsHealthReviewAgent',path:'/ts/pets/:id/health-review',method:'POST',emits: ['ts.health.treatment_required','ts.health.no_treatment_needed'],flows: ['TsPetManagement']};exportconsthandler:Handlers['TsHealthReviewAgent']=async(req, {emit,logger})=>{constpetId=req.pathParams?.id;if(!petId) {return{ status:400, body: { message:'Pet ID is required'} };}constpet=TSStore.get(petId);if(!pet) {return{ status:404, body: { message:'Pet not found'} };}if(logger) {logger.info('\ud83c\udfe5 Health Review Agent triggered', {petId,currentStatus: pet.status,symptoms: pet.symptoms||[]});}if(!['healthy','in_quarantine','available'].includes(pet.status)) {return{status:400,body: {message:'Health review can only be performed on healthy, quarantined, or available pets',currentStatus: pet.status}};}constagentContext=buildAgentContext(pet);constrecentArtifacts=getAgentArtifacts(petId).filter(a=>a.agentType==='health-review'&&a.success&&a.inputs.currentStatus===pet.status&&(Date.now()-a.timestamp)<60000);if(recentArtifacts.length>0) {constrecent=recentArtifacts[recentArtifacts.length-1];if(logger) {logger.info('\ud83d\udd04 Idempotent health review - returning cached decision', {petId,chosenEmit: recent.parsedDecision.chosenEmit,timestamp: recent.timestamp});}return{status:200,body: {message:'Health review completed (cached)',petId,agentDecision: recent"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 10)",
    "text": " returning cached decision', {petId,chosenEmit: recent.parsedDecision.chosenEmit,timestamp: recent.timestamp});}return{status:200,body: {message:'Health review completed (cached)',petId,agentDecision: recent.parsedDecision,artifact: {timestamp: recent.timestamp,success: recent.success}}};}try{if(logger) {logger.info('\ud83d\udd0d Starting agent decision call', { petId, agentContext });}constartifact=awaitcallAgentDecision('health-review',agentContext,HEALTH_REVIEW_EMITS,logger);if(logger) {logger.info('\u2705 Agent decision call completed', { petId, success: artifact.success });}if(!artifact.success) {if(logger) {logger.warn('\u26a0\ufe0f Agent decision failed, but returning error response', {petId,error: artifact.error});}return{status:500,body: {message:'Agent decision failed',error: artifact.error,petId,suggestion:'Check OpenAI API key and try again'}};}constchosenEmitDef=HEALTH_REVIEW_EMITS.find(e=>e.id===artifact.parsedDecision.chosenEmit);if(!chosenEmitDef) {return{status:500,body: {message:'Invalid emit chosen by agent',chosenEmit: artifact.parsedDecision.chosenEmit}};}if(emit) {(emitasany)({topic: chosenEmitDef.topicas'ts.health.treatment_required'|'ts.health.no_treatment_needed',data: {petId,event: chosenEmitDef.id.replace('emit.',''),agentDecision: artifact.parsedDecision,timestamp: artifact.timestamp,context: agentContext}});if(logger) {logger.info('\u2705 Health review emit fired', {petId,chosenEmit: artifact.parsedDecision.chosenEmit,topic: chosenEmitDef.topic,rationale: artifact.parsedDecision.rationale});}}return{status:200,body: {message:'Health review completed',petId,agentDecision: artifact.parsedDecision,emitFired: chosenEmitDef.topic,artifact: {timestamp: artifact.timestamp,success: artifact.success,availableEmits: artifact.availableEmits.map(e=>e.id)}}};}catch(error:any) {if(logger) {logger.error('\u274c Health review agent error', {petId,error: error.message});}return{status:500,body: {message:'Health review failed',"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 11)",
    "text": ".map(e=>e.id)}}};}catch(error:any) {if(logger) {logger.error('\u274c Health review agent error', {petId,error: error.message});}return{status:500,body: {message:'Health review failed',error: error.message,petId}};}};\n// steps/typescript/health-review-agent.step.tsimport{ ApiRouteConfig, Handlers }from'motia';import{ TSStore }from'./ts-store';import{HEALTH_REVIEW_EMITS,buildAgentContext,callAgentDecision,getAgentArtifacts}from'./agent-decision-framework';exportconstconfig:ApiRouteConfig={type:'api',name:'TsHealthReviewAgent',path:'/ts/pets/:id/health-review',method:'POST',emits: ['ts.health.treatment_required','ts.health.no_treatment_needed'],flows: ['TsPetManagement']};exportconsthandler:Handlers['TsHealthReviewAgent']=async(req, {emit,logger})=>{constpetId=req.pathParams?.id;if(!petId) {return{ status:400, body: { message:'Pet ID is required'} };}constpet=TSStore.get(petId);if(!pet) {return{ status:404, body: { message:'Pet not found'} };}if(logger) {logger.info('\ud83c\udfe5 Health Review Agent triggered', {petId,currentStatus: pet.status,symptoms: pet.symptoms||[]});}if(!['healthy','in_quarantine','available'].includes(pet.status)) {return{status:400,body: {message:'Health review can only be performed on healthy, quarantined, or available pets',currentStatus: pet.status}};}constagentContext=buildAgentContext(pet);constrecentArtifacts=getAgentArtifacts(petId).filter(a=>a.agentType==='health-review'&&a.success&&a.inputs.currentStatus===pet.status&&(Date.now()-a.timestamp)<60000);if(recentArtifacts.length>0) {constrecent=recentArtifacts[recentArtifacts.length-1];if(logger) {logger.info('\ud83d\udd04 Idempotent health review - returning cached decision', {petId,chosenEmit: recent.parsedDecision.chosenEmit,timestamp: recent.timestamp});}return{status:200,body: {message:'Health review completed (cached)',petId,agentDecision: recent.parsedDecision,artifact:"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 12)",
    "text": "Id,chosenEmit: recent.parsedDecision.chosenEmit,timestamp: recent.timestamp});}return{status:200,body: {message:'Health review completed (cached)',petId,agentDecision: recent.parsedDecision,artifact: {timestamp: recent.timestamp,success: recent.success}}};}try{if(logger) {logger.info('\ud83d\udd0d Starting agent decision call', { petId, agentContext });}constartifact=awaitcallAgentDecision('health-review',agentContext,HEALTH_REVIEW_EMITS,logger);if(logger) {logger.info('\u2705 Agent decision call completed', { petId, success: artifact.success });}if(!artifact.success) {if(logger) {logger.warn('\u26a0\ufe0f Agent decision failed, but returning error response', {petId,error: artifact.error});}return{status:500,body: {message:'Agent decision failed',error: artifact.error,petId,suggestion:'Check OpenAI API key and try again'}};}constchosenEmitDef=HEALTH_REVIEW_EMITS.find(e=>e.id===artifact.parsedDecision.chosenEmit);if(!chosenEmitDef) {return{status:500,body: {message:'Invalid emit chosen by agent',chosenEmit: artifact.parsedDecision.chosenEmit}};}if(emit) {(emitasany)({topic: chosenEmitDef.topicas'ts.health.treatment_required'|'ts.health.no_treatment_needed',data: {petId,event: chosenEmitDef.id.replace('emit.',''),agentDecision: artifact.parsedDecision,timestamp: artifact.timestamp,context: agentContext}});if(logger) {logger.info('\u2705 Health review emit fired', {petId,chosenEmit: artifact.parsedDecision.chosenEmit,topic: chosenEmitDef.topic,rationale: artifact.parsedDecision.rationale});}}return{status:200,body: {message:'Health review completed',petId,agentDecision: artifact.parsedDecision,emitFired: chosenEmitDef.topic,artifact: {timestamp: artifact.timestamp,success: artifact.success,availableEmits: artifact.availableEmits.map(e=>e.id)}}};}catch(error:any) {if(logger) {logger.error('\u274c Health review agent error', {petId,error: error.message});}return{status:500,body: {message:'Health review failed',error: error.message,pet"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 13)",
    "text": "};}catch(error:any) {if(logger) {logger.error('\u274c Health review agent error', {petId,error: error.message});}return{status:500,body: {message:'Health review failed',error: error.message,petId}};}};\nHow Decision-Making Agentic Steps Work\nThis agentic step is fundamentally different from the enrichment agentic step:\nIt's an API Step- Staff trigger it explicitly when they need a decision\nIt defines an emits registry- Lists all possible actions the AI can choose from (inagent-decision-framework.ts/js)\nagent-decision-framework.ts/js\nIt calls the AI with context + options- The AI evaluates and picks one\nIt fires the chosen emit- This emit goes to the orchestrator, changing workflow state\nIt uses idempotency checking- Caches recent decisions to prevent duplicate AI calls\nThe framework functions (buildAgentContext,callAgentDecision,getAgentArtifacts) handle the OpenAI call and ensure the AI picks from valid options.\nbuildAgentContext\ncallAgentDecision\ngetAgentArtifacts\nTesting the Health Review Agentic Step\nThe best way to test decision-making agentic steps is throughWorkbench. You can create pets, trigger the health review, and watch the AI make decisions in real-time.\nCreate a Pet\nUse Workbench to create a pet. The AI enrichment will automatically trigger.\nPrefer using curl?\ncurl-XPOSThttp://localhost:3000/ts/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Buddy\",\"species\": \"dog\",\"ageMonths\": 36}'\ncurl-XPOSThttp://localhost:3000/ts/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Buddy\",\"species\": \"dog\",\"ageMonths\": 36}'\nTrigger the Health Review\nIn Workbench, test the health review endpoint to see the AI make a decision.\nUsing curl?\ncurl-XPOSThttp://localhost:3000/ts/pets/1/health-review\\-H\"Content-Type: application/json\"\ncurl-XPOSThttp://localhost:3000/ts/pets/1/health-review\\-H\"Content-Type: application/json\"\nYou'll get a response like:\n{\"message\":\"Health review completed\",\"petId\":\"1\",\"agentDecision\": {\"chosenEmit\":\"emit.health.treatment_required\",\"rationale\":\"The pet shows concerning symptoms including coughing, lethargy, and loss of appetite"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 14)",
    "text": " a response like:\n{\"message\":\"Health review completed\",\"petId\":\"1\",\"agentDecision\": {\"chosenEmit\":\"emit.health.treatment_required\",\"rationale\":\"The pet shows concerning symptoms including coughing, lethargy, and loss of appetite. These symptoms suggest a potential respiratory infection or illness requiring veterinary attention.\"},\"emitFired\":\"ts.health.treatment_required\",\"artifact\": {\"timestamp\":1234567890,\"success\":true,\"availableEmits\": [\"emit.health.treatment_required\",\"emit.health.no_treatment_needed\"]}}\n{\"message\":\"Health review completed\",\"petId\":\"1\",\"agentDecision\": {\"chosenEmit\":\"emit.health.treatment_required\",\"rationale\":\"The pet shows concerning symptoms including coughing, lethargy, and loss of appetite. These symptoms suggest a potential respiratory infection or illness requiring veterinary attention.\"},\"emitFired\":\"ts.health.treatment_required\",\"artifact\": {\"timestamp\":1234567890,\"success\":true,\"availableEmits\": [\"emit.health.treatment_required\",\"emit.health.no_treatment_needed\"]}}\nThe AI evaluates the pet's data and makes a decision. The emit it fires will trigger the orchestrator to handle the appropriate state transition.\nVerify the Status Change\nCheck the pet status in Workbench to see the AI's decision reflected in the workflow state.\nUsing curl?\ncurlhttp://localhost:3000/ts/pets/1\ncurlhttp://localhost:3000/ts/pets/1\nThe pet's status has automatically changed based on the AI's decision!\nConnecting Agentic Steps to the Orchestrator\nThe real power comes when your agentic steps integrate with a workflow orchestrator. The orchestrator subscribes to the events emitted by agentic steps and handles the actual state transitions.\nThe orchestrator configuration shows it subscribes to agentic step events:\nexportconstconfig={type:'event',name:'TsPetLifecycleOrchestrator',description:'Pet lifecycle state management with staff interaction points',subscribes: ['ts.feeding.reminder.completed','ts.pet.status.update.requested','ts.health.treatment_required',// From Health Review Agentic Step'ts.health.no_treatment_needed',// From Health Review Agentic Step'ts.adoption.needs_data',// From Adoption Review Agentic Step'ts.adoption.ready'// From Adoption Review Agentic Step],emits: ['ts.treatment.required','ts.adoption.ready','ts.treatment.completed'],flows: ['TsPetManagement']}// The orchestrator has"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 15)",
    "text": " Adoption Review Agentic Step'ts.adoption.ready'// From Adoption Review Agentic Step],emits: ['ts.treatment.required','ts.adoption.ready','ts.treatment.completed'],flows: ['TsPetManagement']}// The orchestrator has transition rules that handle agentic step eventsconstTRANSITION_RULES:TransitionRule[]=[// ... other rules ...// Agentic step-driven health transitions{from: [\"healthy\",\"in_quarantine\"],to:\"ill\",event:\"health.treatment_required\",description:\"Agent assessment - pet requires medical treatment\"},{from: [\"healthy\",\"in_quarantine\"],to:\"healthy\",event:\"health.no_treatment_needed\",description:\"Agent assessment - pet remains healthy\"},// Agentic step-driven adoption transitions{from: [\"healthy\"],to:\"healthy\",event:\"adoption.needs_data\",description:\"Agent assessment - pet needs additional data before adoption\",flagAction: { action:'add', flag:'needs_data'}},{from: [\"healthy\"],to:\"available\",event:\"adoption.ready\",description:\"Agent assessment - pet ready for adoption\",guards: ['no_needs_data_flag']}]\nexportconstconfig={type:'event',name:'TsPetLifecycleOrchestrator',description:'Pet lifecycle state management with staff interaction points',subscribes: ['ts.feeding.reminder.completed','ts.pet.status.update.requested','ts.health.treatment_required',// From Health Review Agentic Step'ts.health.no_treatment_needed',// From Health Review Agentic Step'ts.adoption.needs_data',// From Adoption Review Agentic Step'ts.adoption.ready'// From Adoption Review Agentic Step],emits: ['ts.treatment.required','ts.adoption.ready','ts.treatment.completed'],flows: ['TsPetManagement']}// The orchestrator has transition rules that handle agentic step eventsconstTRANSITION_RULES:TransitionRule[]=[// ... other rules ...// Agentic step-driven health transitions{from: [\"healthy\",\"in_quarantine\"],to:\"ill\",event:\"health.treatment_required\",description:\"Agent assessment - pet requires medical treatment\"},{from: [\"healthy\",\"in_quarantine\"],to:\"healthy\",event:\"health.no_treatment_needed\",description:\"Agent assessment - pet remains healthy\"},// Agentic step-driven adoption transitions{from: [\"healthy\"],to:\"healthy\",event:\"adoption.needs_data\",description:\"Agent assessment - pet needs additional data before adoption\",flagAction: { action:'"
}
================================================================================
{
    "source_page": "Agentic Workflows",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/ai-agents =====",
    "chunk_topic": "Agentic Workflows",
    "chunk_id": "Agentic Workflows (Part 16)",
    "text": "Agent assessment - pet remains healthy\"},// Agentic step-driven adoption transitions{from: [\"healthy\"],to:\"healthy\",event:\"adoption.needs_data\",description:\"Agent assessment - pet needs additional data before adoption\",flagAction: { action:'add', flag:'needs_data'}},{from: [\"healthy\"],to:\"available\",event:\"adoption.ready\",description:\"Agent assessment - pet ready for adoption\",guards: ['no_needs_data_flag']}]\n\ud83c\udf89Congratulations!You've built intelligent agentic workflows that make decisions and drive workflows. Your pet shelter now has automated intelligence that would have taken hundreds of lines of complex logic to implement manually.\nWhat's Next?\nYour pet shelter now has intelligent agentic workflows making decisions! But how do you give users real-time feedback while all this AI processing happens in the background?\nIn the final guide, we'll addReal-Time Streamingto provide live updates as your workflows execute:\nStream Configuration- Define stream schemas for type-safe updates\nAPI with Streaming- Initialize streams and return immediately to clients\nBackground Job Streaming- Push real-time progress updates as jobs process\nAgentic Step Streaming- Stream AI enrichment progress in real-time\nMulti-Step Streaming- Multiple steps updating the same stream\nLet's complete your system by adding real-time streaming capabilities!\nExplore more examples in theMotia Examples Repository.\nWorkflows\nLearn how to build automated workflows that manage complex business logic with Motia\nReal-Time Streaming\nLearn how to add real-time streaming updates to your Motia workflows\nOn this page"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 1)",
    "text": "Real-Time Streaming\nLearn how to add real-time streaming updates to your Motia workflows\nWhat You'll Build\nA pet management system with real-time streaming that provides live updates to clients:\nStream Configuration- Define stream schemas for type-safe updates\nAPI with Streaming- APIs that initialize streams and return immediately\nBackground Job Streaming- Jobs that push real-time progress updates\nAgentic Step Streaming- AI enrichment with live progress updates\nMulti-Step Streaming- Multiple steps updating the same stream\nGetting Started\nClone the example repository:\ngitclonehttps://github.com/MotiaDev/build-your-first-app.gitcdbuild-your-first-appgitcheckoutstream-ai-agents\ngitclonehttps://github.com/MotiaDev/build-your-first-app.gitcdbuild-your-first-appgitcheckoutstream-ai-agents\nInstall dependencies:\nnpminstall\nnpminstall\nSet up your OpenAI API key in.env:\n.env\nOPENAI_API_KEY=your_api_key_here\nOPENAI_API_KEY=your_api_key_here\nStart the Workbench:\nnpmrundev\nnpmrundev\nYour Workbench will be available athttp://localhost:3000.\nhttp://localhost:3000\nProject Structure\nFiles likefeatures.jsonandtutorial.tsxare only for the interactive tutorial and are not part of Motia's project structure.\nfeatures.json\ntutorial.tsx\nAll code examples in this guide are available in thebuild-your-first-apprepository.\nYou can follow this guide to learn how to build real-time streaming with Motia step by step, or you can clone the repository and dive into our Interactive Tutorial to learn by doing directly in the Workbench.\nUnderstanding Real-Time Streaming\nYou've built APIs that return immediately, background jobs that process asynchronously, workflows that orchestrate complex logic, and agentic workflows that make intelligent decisions. But how do you give users real-time feedback while all this async processing happens in the background?\nThat's wherestreamingcomes in. Motia provides streams as part of the context in any step handler - you can use them anywhere in your code. Streams use Server-Sent Events (SSE) to push live updates directly to clients as your workflow progresses.\nIn our pet shelter example:\nThe API initializes a stream and returns immediately with a stream ID\nBackground jobs push updates as they process (quarantine entry, health checks)\nAgentic steps stream enrichment progress (bio generation, breed analysis)\nClients get live feedback throughout the entire workflow"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 2)",
    "text": "The API initializes a stream and returns immediately with a stream ID\nBackground jobs push updates as they process (quarantine entry, health checks)\nAgentic steps stream enrichment progress (bio generation, breed analysis)\nClients get live feedback throughout the entire workflow\nThe power is in the simplicity -streamsis available in your handler's context, just likeemit,logger, andstate. Any step can update any stream, creating a unified real-time experience without complex orchestration.\nstreams\nemit\nlogger\nstate\nCreating Your First Stream\nStep 1: Define the Stream Configuration\nFirst, define a stream configuration file. This makes the stream available in thecontext.streamsobject for all your step handlers.\ncontext.streams\nView on GitHub:\nTypeScript\nPython\nJavaScript\nimport{ StreamConfig }from'motia'import{ z }from'zod'exportconstconfig:StreamConfig={/*** This will be available as context.streams.petCreation in the FlowContext*/name:'petCreation',/*** Schema defines the structure of stream updates*/schema: z.object({message: z.string()}),/*** Use default storage for the stream*/baseConfig: {storageType:'default',},}\nimport{ StreamConfig }from'motia'import{ z }from'zod'exportconstconfig:StreamConfig={/*** This will be available as context.streams.petCreation in the FlowContext*/name:'petCreation',/*** Schema defines the structure of stream updates*/schema: z.object({message: z.string()}),/*** Use default storage for the stream*/baseConfig: {storageType:'default',},}\nHow Stream Configuration Works\nStream configuration is simple:\nname- Identifier for accessing the stream (e.g.,context.streams.petCreation)\ncontext.streams.petCreation\nschema- Zod schema defining what data can be pushed to the stream\nbaseConfig- Storage settings (default uses in-memory storage)\nOnce you create this configuration file, the stream is automatically available asstreams.petCreationin the context of any step handler. It's just likeemit,logger, orstate- part of the tools available in your handler.\nstreams.petCreation\nemit\nlogger\nstate\nStep 2: Initialize Streams from APIs\nNow let's update the pet creation API to initialize a stream and return it immediately to the client.\nView on GitHub:\nTypeScript\nPython\nJavaScript\n// steps/typescript/create-pet.step.tsimport{ ApiRouteConfig, Handlers }from"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 3)",
    "text": "\nNow let's update the pet creation API to initialize a stream and return it immediately to the client.\nView on GitHub:\nTypeScript\nPython\nJavaScript\n// steps/typescript/create-pet.step.tsimport{ ApiRouteConfig, Handlers }from'motia';import{ z }from'zod';import{ TSStore }from'./ts-store';constcreatePetSchema=z.object({name: z.string().min(1,'Name is required').trim(),species: z.enum(['dog','cat','bird','other']),ageMonths: z.number().int().min(0,'Age must be a positive number'),weightKg: z.number().positive().optional(),symptoms: z.array(z.string()).optional()});exportconstconfig:ApiRouteConfig={type:'api',name:'TsCreatePet',path:'/ts/pets',method:'POST',emits: ['ts.pet.created','ts.feeding.reminder.enqueued'],flows: ['TsPetManagement']};exportconsthandler:Handlers['TsCreatePet']=async(req, {emit,logger,streams,traceId})=>{try{constvalidatedData=createPetSchema.parse(req.body);constpet=TSStore.create({name: validatedData.name,species: validatedData.species,ageMonths: validatedData.ageMonths,weightKg: validatedData.weightKg,symptoms: validatedData.symptoms});if(logger) {logger.info('\ud83d\udc3e Pet created', { petId: pet.id, name: pet.name, species: pet.species, status: pet.status });}// Create & return the initial stream record (following working pattern)constresult=awaitstreams.petCreation.set(traceId,'message', {message:`Pet ${pet.name} (ID: ${pet.id}) created successfully - Species: ${pet.species}, Age: ${pet.ageMonths} months, Status: ${pet.status}`});if(emit) {awaitemit({topic:'ts.pet.created',data: { petId: pet.id, event:'pet.created', name: pet.name, species: validatedData.species, traceId }}asany);awaitemit({topic:'ts.feeding.reminder.enqueued',data: { petId: pet.id, enqueuedAt: Date.now(), traceId }}asany);}return{status:201,body: result};}catch(error) {if(errorinstanceofz.ZodError) {return{status:400,body: {message:'"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 4)",
    "text": " pet.id, enqueuedAt: Date.now(), traceId }}asany);}return{status:201,body: result};}catch(error) {if(errorinstanceofz.ZodError) {return{status:400,body: {message:'Validation error',errors: error.errors}};}return{status:500,body: { message:'Internal server error'}};}};\n// steps/typescript/create-pet.step.tsimport{ ApiRouteConfig, Handlers }from'motia';import{ z }from'zod';import{ TSStore }from'./ts-store';constcreatePetSchema=z.object({name: z.string().min(1,'Name is required').trim(),species: z.enum(['dog','cat','bird','other']),ageMonths: z.number().int().min(0,'Age must be a positive number'),weightKg: z.number().positive().optional(),symptoms: z.array(z.string()).optional()});exportconstconfig:ApiRouteConfig={type:'api',name:'TsCreatePet',path:'/ts/pets',method:'POST',emits: ['ts.pet.created','ts.feeding.reminder.enqueued'],flows: ['TsPetManagement']};exportconsthandler:Handlers['TsCreatePet']=async(req, {emit,logger,streams,traceId})=>{try{constvalidatedData=createPetSchema.parse(req.body);constpet=TSStore.create({name: validatedData.name,species: validatedData.species,ageMonths: validatedData.ageMonths,weightKg: validatedData.weightKg,symptoms: validatedData.symptoms});if(logger) {logger.info('\ud83d\udc3e Pet created', { petId: pet.id, name: pet.name, species: pet.species, status: pet.status });}// Create & return the initial stream record (following working pattern)constresult=awaitstreams.petCreation.set(traceId,'message', {message:`Pet ${pet.name} (ID: ${pet.id}) created successfully - Species: ${pet.species}, Age: ${pet.ageMonths} months, Status: ${pet.status}`});if(emit) {awaitemit({topic:'ts.pet.created',data: { petId: pet.id, event:'pet.created', name: pet.name, species: validatedData.species, traceId }}asany);awaitemit({topic:'ts.feeding.reminder.enqueued',data: { petId: pet.id, enqueuedAt:"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 5)",
    "text": ", event:'pet.created', name: pet.name, species: validatedData.species, traceId }}asany);awaitemit({topic:'ts.feeding.reminder.enqueued',data: { petId: pet.id, enqueuedAt: Date.now(), traceId }}asany);}return{status:201,body: result};}catch(error) {if(errorinstanceofz.ZodError) {return{status:400,body: {message:'Validation error',errors: error.errors}};}return{status:500,body: { message:'Internal server error'}};}};\nHow API Stream Initialization Works\nThe key changes from a regular API:\nAccess streams from context-streamsis available in the FlowContext\nstreams\nCreate initial stream message-await streams.petCreation.set(traceId, 'message', data)\nawait streams.petCreation.set(traceId, 'message', data)\nReturn the stream result- Contains stream ID and initial message\nBackground jobs update the same stream- Using the same traceId\nThe API returns immediately with a stream ID. Clients can connect to this stream via SSE to receive real-time updates as background jobs process.\nStep 3: Stream Updates from Background Jobs\nNow let's update the feeding reminder job to push real-time updates to the stream as it processes.\nView on GitHub:\nTypeScript\nPython\nJavaScript\n// steps/typescript/set-next-feeding-reminder.job.step.tsimport{ EventConfig, Handlers }from'motia';import{ TSStore }from'./ts-store';exportconstconfig={type:'event',name:'TsSetNextFeedingReminder',description:'Background job that sets next feeding reminder and adds welcome notes',subscribes: ['ts.feeding.reminder.enqueued'],emits: ['ts.feeding.reminder.completed'],flows: ['TsPetManagement']};exportconsthandler:Handlers['TsSetNextFeedingReminder']=async(input, {emit,logger,streams,traceId})=>{const{petId,enqueuedAt}=input;if(logger) {logger.info('\ud83d\udd04 Setting next feeding reminder', { petId, enqueuedAt });}try{// Calculate next feeding time (24 hours from now)constnextFeedingAt=Date.now()+(24*60*60*1000);// Fill in non-critical details and change status to in_quarantineconstupdates={notes:'Welcome to our pet store! We\\'ll take great care of this pet.',nextFeedingAt: nextFe"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 6)",
    "text": "*60*60*1000);// Fill in non-critical details and change status to in_quarantineconstupdates={notes:'Welcome to our pet store! We\\'ll take great care of this pet.',nextFeedingAt: nextFeedingAt,status:'in_quarantine'asconst};constupdatedPet=TSStore.update(petId, updates);if(!updatedPet) {if(logger) {logger.error('\u274c Failed to set feeding reminder - pet not found', { petId });}return;}if(logger) {logger.info('\u2705 Next feeding reminder set', {petId,notes: updatedPet.notes?.substring(0,50)+'...',nextFeedingAt:newDate(nextFeedingAt).toISOString()});}// Stream status updates using the simple patternif(streams?.petCreation&&traceId) {awaitstreams.petCreation.set(traceId,'message', {message:`Pet ${updatedPet.name} entered quarantine period`});// Check symptoms and stream appropriate updatesif(!updatedPet.symptoms||updatedPet.symptoms.length===0) {awaitnewPromise(resolve=>setTimeout(resolve,1000));awaitstreams.petCreation.set(traceId,'message', {message:`Health check passed for ${updatedPet.name} - no symptoms found`});awaitnewPromise(resolve=>setTimeout(resolve,1000));awaitstreams.petCreation.set(traceId,'message', {message:`${updatedPet.name} is healthy and ready for adoption! \u2705`});}else{awaitnewPromise(resolve=>setTimeout(resolve,1000));awaitstreams.petCreation.set(traceId,'message', {message:`Health check failed for ${updatedPet.name} - symptoms detected: ${updatedPet.symptoms.join(', ')}`});awaitnewPromise(resolve=>setTimeout(resolve,1000));awaitstreams.petCreation.set(traceId,'message', {message:`${updatedPet.name} needs medical treatment \u274c`});}}if(emit) {(emitasany)({topic:'ts.feeding.reminder.completed',data: {petId,event:'feeding.reminder.completed',completedAt: Date.now(),processingTimeMs: Date.now()-enqueuedAt}});}}catch(error:any) {if(logger) {logger.error('\u274c Feeding reminder job error', { petId, error: error.message });}}};\n// steps/typescript/set-next-feeding-reminder.job.step.tsimport{ EventConfig, Handlers }from'motia';import{ TSStore }from'./ts-store';"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 7)",
    "text": " job error', { petId, error: error.message });}}};\n// steps/typescript/set-next-feeding-reminder.job.step.tsimport{ EventConfig, Handlers }from'motia';import{ TSStore }from'./ts-store';exportconstconfig={type:'event',name:'TsSetNextFeedingReminder',description:'Background job that sets next feeding reminder and adds welcome notes',subscribes: ['ts.feeding.reminder.enqueued'],emits: ['ts.feeding.reminder.completed'],flows: ['TsPetManagement']};exportconsthandler:Handlers['TsSetNextFeedingReminder']=async(input, {emit,logger,streams,traceId})=>{const{petId,enqueuedAt}=input;if(logger) {logger.info('\ud83d\udd04 Setting next feeding reminder', { petId, enqueuedAt });}try{// Calculate next feeding time (24 hours from now)constnextFeedingAt=Date.now()+(24*60*60*1000);// Fill in non-critical details and change status to in_quarantineconstupdates={notes:'Welcome to our pet store! We\\'ll take great care of this pet.',nextFeedingAt: nextFeedingAt,status:'in_quarantine'asconst};constupdatedPet=TSStore.update(petId, updates);if(!updatedPet) {if(logger) {logger.error('\u274c Failed to set feeding reminder - pet not found', { petId });}return;}if(logger) {logger.info('\u2705 Next feeding reminder set', {petId,notes: updatedPet.notes?.substring(0,50)+'...',nextFeedingAt:newDate(nextFeedingAt).toISOString()});}// Stream status updates using the simple patternif(streams?.petCreation&&traceId) {awaitstreams.petCreation.set(traceId,'message', {message:`Pet ${updatedPet.name} entered quarantine period`});// Check symptoms and stream appropriate updatesif(!updatedPet.symptoms||updatedPet.symptoms.length===0) {awaitnewPromise(resolve=>setTimeout(resolve,1000));awaitstreams.petCreation.set(traceId,'message', {message:`Health check passed for ${updatedPet.name} - no symptoms found`});awaitnewPromise(resolve=>setTimeout(resolve,1000));awaitstreams.petCreation.set(traceId,'message', {message:`${updatedPet.name} is healthy and ready for adoption! \u2705`});}else{awaitnewPromise(resolve=>setTimeout"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 8)",
    "text": "});awaitnewPromise(resolve=>setTimeout(resolve,1000));awaitstreams.petCreation.set(traceId,'message', {message:`${updatedPet.name} is healthy and ready for adoption! \u2705`});}else{awaitnewPromise(resolve=>setTimeout(resolve,1000));awaitstreams.petCreation.set(traceId,'message', {message:`Health check failed for ${updatedPet.name} - symptoms detected: ${updatedPet.symptoms.join(', ')}`});awaitnewPromise(resolve=>setTimeout(resolve,1000));awaitstreams.petCreation.set(traceId,'message', {message:`${updatedPet.name} needs medical treatment \u274c`});}}if(emit) {(emitasany)({topic:'ts.feeding.reminder.completed',data: {petId,event:'feeding.reminder.completed',completedAt: Date.now(),processingTimeMs: Date.now()-enqueuedAt}});}}catch(error:any) {if(logger) {logger.error('\u274c Feeding reminder job error', { petId, error: error.message });}}};\nHow Background Job Streaming Works\nBackground jobs can push multiple updates to a stream:\nAccess the stream-streams.petCreationis available in context\nstreams.petCreation\nPush updates-await streams.petCreation.set(traceId, 'message', data)\nawait streams.petCreation.set(traceId, 'message', data)\nUse the same traceId- Links updates to the original API request\nSend multiple updates- Eachset()call sends immediately to connected clients\nset()\nThe background job processes asynchronously, pushing updates at each stage. Clients connected to the stream receive these updates in real-time via SSE.\nStep 4: Agentic Step Streaming\nAgentic steps can also stream progress updates as they generate content. This provides live feedback during potentially long-running AI operations.\nView on GitHub:\nTypeScript\nPython\nJavaScript\n// steps/typescript/ai-profile-enrichment.step.tsimport{ EventConfig, Handlers }from'motia';import{ TSStore, PetProfile }from'./ts-store';exportconstconfig={type:'event',name:'TsAiProfileEnrichment',description:'Agentic step that enriches pet profiles using OpenAI',subscribes: ['ts.pet.created'],emits: [],flows: ['TsPetManagement']};exportconsthandler:Handlers['TsAiProfileEnrichment']=async(input, {logger,streams,traceId})=>{const{petId,name,species}=input;if(logger) {logger.info"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 9)",
    "text": " [],flows: ['TsPetManagement']};exportconsthandler:Handlers['TsAiProfileEnrichment']=async(input, {logger,streams,traceId})=>{const{petId,name,species}=input;if(logger) {logger.info('\ud83e\udd16 AI Profile Enrichment started', { petId, name, species });}// Stream enrichment started eventif(streams&&traceId) {await(streamsasany).petCreation.set(traceId,'enrichment_started', {message:`AI enrichment started for ${name}`}asany);}try{constapiKey=process.env.OPENAI_API_KEY;if(!apiKey) {thrownewError('OPENAI_API_KEY environment variable is not set');}constprompt=`Generate a pet profile for adoption purposes. Pet details:- Name: ${name}- Species: ${species}Please provide a JSON response with these fields:- bio: A warm, engaging 2-3 sentence description that would appeal to potential adopters- breedGuess: Your best guess at the breed or breed mix (be specific but realistic)- temperamentTags: An array of 3-5 personality traits (e.g., \"friendly\", \"energetic\", \"calm\")- adopterHints: Practical advice for potential adopters (family type, living situation, care needs)Keep it positive, realistic, and adoption-focused.`;constenrichmentFields=['bio','breedGuess','temperamentTags','adopterHints'];constenrichedProfile:any={};constresponse=awaitfetch('https://api.openai.com/v1/chat/completions', {method:'POST',headers: {'Authorization':`Bearer ${apiKey}`,'Content-Type':'application/json',},body:JSON.stringify({model:'gpt-3.5-turbo',messages: [{role:'system',content:'You are a pet adoption specialist who creates compelling, accurate pet profiles. Always respond with valid JSON only.'},{role:'user',content: prompt}],max_tokens:500,temperature:0.7,}),});if(!response.ok) {thrownewError(`OpenAI API error: ${response.status} ${response.statusText}`);}constdata=awaitresponse.json();constaiResponse=data.choices[0]?.message?.content;if(!aiResponse) {thrownewError('No response from OpenAI API');}letprofile:PetProfile;try{profile=JSON.parse(aiResponse);}catch(parseError) {profile={bio:`${name}"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 10)",
    "text": "0]?.message?.content;if(!aiResponse) {thrownewError('No response from OpenAI API');}letprofile:PetProfile;try{profile=JSON.parse(aiResponse);}catch(parseError) {profile={bio:`${name} is a wonderful ${species} looking for a loving home. This pet has a unique personality and would make a great companion.`,breedGuess: species==='dog'?'Mixed Breed':species==='cat'?'Domestic Shorthair':'Mixed Breed',temperamentTags: ['friendly','loving','loyal'],adopterHints:`${name} would do well in a caring home with patience and love.`};if(logger) {logger.warn('\u26a0\ufe0f AI response parsing failed, using fallback profile', { petId, parseError: parseErrorinstanceofError?parseError.message:String(parseError) });}}constupdatedPet=TSStore.updateProfile(petId, profile);if(!updatedPet) {thrownewError(`Pet not found: ${petId}`);}if(logger) {logger.info('\u2705 AI Profile Enrichment completed', {petId,profile: {bio: profile.bio.substring(0,50)+'...',breedGuess: profile.breedGuess,temperamentTags: profile.temperamentTags,adopterHints: profile.adopterHints.substring(0,50)+'...'}});}// Stream each field as it's processedfor(constfieldofenrichmentFields) {awaitnewPromise(resolve=>setTimeout(resolve,300));constvalue=profile[fieldaskeyofPetProfile];if(streams&&traceId) {await(streamsasany).petCreation.set(traceId,`progress_${field}`, {message:`Generated ${field} for ${name}`}asany);}}// Stream enrichment completed eventif(streams&&traceId) {await(streamsasany).petCreation.set(traceId,'completed', {message:`AI enrichment completed for ${name}`}asany);}}catch(error:any) {if(logger) {logger.error('\u274c AI Profile Enrichment failed', {petId,error: error.message});}constfallbackProfile:PetProfile={bio:`${name} is a lovely ${species} with a unique personality, ready to find their forever home.`,breedGuess: species==='dog'?'Mixed Breed':species==='cat'?'Domestic Shorthair':'Mixed Breed',temperamentTags: ['friendly','adap"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 11)",
    "text": "} with a unique personality, ready to find their forever home.`,breedGuess: species==='dog'?'Mixed Breed':species==='cat'?'Domestic Shorthair':'Mixed Breed',temperamentTags: ['friendly','adaptable'],adopterHints:`${name} is looking for a patient and loving family.`};TSStore.updateProfile(petId, fallbackProfile);// Stream fallback profile completionif(streams&&traceId) {await(streamsasany).petCreation.set(traceId,'completed', {message:`AI enrichment completed with fallback profile for ${name}`}asany);}}};\n// steps/typescript/ai-profile-enrichment.step.tsimport{ EventConfig, Handlers }from'motia';import{ TSStore, PetProfile }from'./ts-store';exportconstconfig={type:'event',name:'TsAiProfileEnrichment',description:'Agentic step that enriches pet profiles using OpenAI',subscribes: ['ts.pet.created'],emits: [],flows: ['TsPetManagement']};exportconsthandler:Handlers['TsAiProfileEnrichment']=async(input, {logger,streams,traceId})=>{const{petId,name,species}=input;if(logger) {logger.info('\ud83e\udd16 AI Profile Enrichment started', { petId, name, species });}// Stream enrichment started eventif(streams&&traceId) {await(streamsasany).petCreation.set(traceId,'enrichment_started', {message:`AI enrichment started for ${name}`}asany);}try{constapiKey=process.env.OPENAI_API_KEY;if(!apiKey) {thrownewError('OPENAI_API_KEY environment variable is not set');}constprompt=`Generate a pet profile for adoption purposes. Pet details:- Name: ${name}- Species: ${species}Please provide a JSON response with these fields:- bio: A warm, engaging 2-3 sentence description that would appeal to potential adopters- breedGuess: Your best guess at the breed or breed mix (be specific but realistic)- temperamentTags: An array of 3-5 personality traits (e.g., \"friendly\", \"energetic\", \"calm\")- adopterHints: Practical advice for potential adopters (family type, living situation, care needs)Keep it positive, realistic, and adoption-focused.`;constenrichmentFields=['bio','breedGuess','temperamentTags','adopterHints'];const"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 12)",
    "text": ": Practical advice for potential adopters (family type, living situation, care needs)Keep it positive, realistic, and adoption-focused.`;constenrichmentFields=['bio','breedGuess','temperamentTags','adopterHints'];constenrichedProfile:any={};constresponse=awaitfetch('https://api.openai.com/v1/chat/completions', {method:'POST',headers: {'Authorization':`Bearer ${apiKey}`,'Content-Type':'application/json',},body:JSON.stringify({model:'gpt-3.5-turbo',messages: [{role:'system',content:'You are a pet adoption specialist who creates compelling, accurate pet profiles. Always respond with valid JSON only.'},{role:'user',content: prompt}],max_tokens:500,temperature:0.7,}),});if(!response.ok) {thrownewError(`OpenAI API error: ${response.status} ${response.statusText}`);}constdata=awaitresponse.json();constaiResponse=data.choices[0]?.message?.content;if(!aiResponse) {thrownewError('No response from OpenAI API');}letprofile:PetProfile;try{profile=JSON.parse(aiResponse);}catch(parseError) {profile={bio:`${name} is a wonderful ${species} looking for a loving home. This pet has a unique personality and would make a great companion.`,breedGuess: species==='dog'?'Mixed Breed':species==='cat'?'Domestic Shorthair':'Mixed Breed',temperamentTags: ['friendly','loving','loyal'],adopterHints:`${name} would do well in a caring home with patience and love.`};if(logger) {logger.warn('\u26a0\ufe0f AI response parsing failed, using fallback profile', { petId, parseError: parseErrorinstanceofError?parseError.message:String(parseError) });}}constupdatedPet=TSStore.updateProfile(petId, profile);if(!updatedPet) {thrownewError(`Pet not found: ${petId}`);}if(logger) {logger.info('\u2705 AI Profile Enrichment completed', {petId,profile: {bio: profile.bio.substring(0,50)+'...',breedGuess: profile.breedGuess,temperamentTags: profile.temperamentTags,adopterHints: profile.adopterHints.substring(0,50)+'...'}});}// Stream each field as it's processedfor(constfieldof"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 13)",
    "text": "breedGuess: profile.breedGuess,temperamentTags: profile.temperamentTags,adopterHints: profile.adopterHints.substring(0,50)+'...'}});}// Stream each field as it's processedfor(constfieldofenrichmentFields) {awaitnewPromise(resolve=>setTimeout(resolve,300));constvalue=profile[fieldaskeyofPetProfile];if(streams&&traceId) {await(streamsasany).petCreation.set(traceId,`progress_${field}`, {message:`Generated ${field} for ${name}`}asany);}}// Stream enrichment completed eventif(streams&&traceId) {await(streamsasany).petCreation.set(traceId,'completed', {message:`AI enrichment completed for ${name}`}asany);}}catch(error:any) {if(logger) {logger.error('\u274c AI Profile Enrichment failed', {petId,error: error.message});}constfallbackProfile:PetProfile={bio:`${name} is a lovely ${species} with a unique personality, ready to find their forever home.`,breedGuess: species==='dog'?'Mixed Breed':species==='cat'?'Domestic Shorthair':'Mixed Breed',temperamentTags: ['friendly','adaptable'],adopterHints:`${name} is looking for a patient and loving family.`};TSStore.updateProfile(petId, fallbackProfile);// Stream fallback profile completionif(streams&&traceId) {await(streamsasany).petCreation.set(traceId,'completed', {message:`AI enrichment completed with fallback profile for ${name}`}asany);}}};\nHow Agentic Step Streaming Works\nAgentic steps stream progress as they work:\nStream start notification- Let users know AI processing has begun\nProgress updates- Stream each stage of generation (bio, breed, temperament, etc.)\nStream completion- Notify when AI processing is done\nError streaming- Stream errors gracefully with fallback messages\nThis transforms a potentially slow AI operation into an engaging real-time experience.\nTesting Streaming in Action\nThe best way to test streams is throughWorkbench.\nTest 1: Create a Pet with Streaming\nOpen Workbench and navigate to the Endpoints section, then test the Pet Creation endpoint:\nPrefer using curl?\ncurl-XPOSThttp://localhost:3000/ts/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Max\",\"species\": \"dog\",\"ageMonths\": 24,\"symptoms"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 14)",
    "text": " endpoint:\nPrefer using curl?\ncurl-XPOSThttp://localhost:3000/ts/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Max\",\"species\": \"dog\",\"ageMonths\": 24,\"symptoms\": [\"coughing\"]}'\ncurl-XPOSThttp://localhost:3000/ts/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Max\",\"species\": \"dog\",\"ageMonths\": 24,\"symptoms\": [\"coughing\"]}'\nYou'll get an immediate response with the stream result. The API returns right away while background jobs process asynchronously.\nTest 2: Monitor Stream Updates in Workbench\nAfter creating a pet, check the Tracing view in Workbench:\nAutomatically switched to theTracingtab so you can see the stream updates in real-time\nClick on the most recent trace\nWatch the timeline as steps execute\nSee stream updates appear in real-time in the timeline\nYou'll observe:\nPet creation completes immediately\nFeeding reminder job streams quarantine updates\nAI enrichment streams progress updates\nAll updates visible in the trace timeline\nTest 3: Create Pet with Symptoms\nTest the conditional streaming logic by creating a pet with symptoms:\ncurl-XPOSThttp://localhost:3000/ts/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Luna\",\"species\": \"cat\",\"ageMonths\": 18,\"symptoms\": [\"sneezing\", \"watery eyes\"]}'\ncurl-XPOSThttp://localhost:3000/ts/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Luna\",\"species\": \"cat\",\"ageMonths\": 18,\"symptoms\": [\"sneezing\", \"watery eyes\"]}'\nWatch the logs to see different stream messages based on the symptoms detected.\nTest 4: Create Pet Without Symptoms\nCompare the streaming behavior with a healthy pet:\ncurl-XPOSThttp://localhost:3000/ts/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Buddy\",\"species\": \"dog\",\"ageMonths\": 12}'\ncurl-XPOSThttp://localhost:3000/ts/pets\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Buddy\",\"species\": \"dog\",\"ageMonths\": 12}'\nThe stream will show health check passed messages instead of treatment needed messages.\nObserving Stream Updates\nWatch"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 15)",
    "text": "\\-H\"Content-Type: application/json\"\\-d'{\"name\": \"Buddy\",\"species\": \"dog\",\"ageMonths\": 12}'\nThe stream will show health check passed messages instead of treatment needed messages.\nObserving Stream Updates\nWatch the Workbench console logs to see the real-time stream updates as they're pushed:\n\ud83d\udc3e Pet created { petId: '1', name: 'Max', species: 'dog', status: 'new' }\ud83d\udccb Setting next feeding reminder { petId: '1' }\ud83e\udd16 AI Profile Enrichment started { petId: '1', name: 'Max' }\u2705 Next feeding reminder set { petId: '1' }\u2705 AI Profile Enrichment completed { petId: '1' }\n\ud83d\udc3e Pet created { petId: '1', name: 'Max', species: 'dog', status: 'new' }\ud83d\udccb Setting next feeding reminder { petId: '1' }\ud83e\udd16 AI Profile Enrichment started { petId: '1', name: 'Max' }\u2705 Next feeding reminder set { petId: '1' }\u2705 AI Profile Enrichment completed { petId: '1' }\nEach emoji-prefixed log corresponds to a stream update being pushed to connected clients.\n\ud83c\udf89Congratulations!You've built a complete real-time streaming system with Motia. Your pet management system now provides live feedback to users while complex workflows execute in the background.\nWhat's Next?\nYou've now mastered the complete Motia stack:\nAPI Endpoints- Build RESTful APIs with validation\nBackground Jobs- Process async tasks efficiently\nWorkflows- Orchestrate complex business logic\nAgentic Workflows- Make intelligent decisions with AI\nReal-Time Streaming- Provide live updates using streams in any step handler\nThis is thecomplete progressionfrom simple APIs to intelligent, real-time systems!\nKey Takeaway:Streams are just another tool in your step handler's context - use them wherever you need real-time updates!\nHere are some ideas to extend your streaming implementation:\nAdd stream analytics- Track how many clients are connected, message delivery rates\nImplement stream persistence- Use Redis adapter for stream storage across restarts\nCreate stream multiplexing- Multiple streams per workflow for different update types\nBuild progress bars- Use structured progress data (0-100%) instead of just messages\nAdd stream authentication- Ensure only authorized clients can access"
}
================================================================================
{
    "source_page": "Real-Time Streaming",
    "source_url": "https://www.motia.dev/docs/getting-started/build-your-first-motia-app/streaming-agents =====",
    "chunk_topic": "Real-Time Streaming",
    "chunk_id": "Real-Time Streaming (Part 16)",
    "text": " for stream storage across restarts\nCreate stream multiplexing- Multiple streams per workflow for different update types\nBuild progress bars- Use structured progress data (0-100%) instead of just messages\nAdd stream authentication- Ensure only authorized clients can access streams\nExplore more examples in theMotia Examples Repository.\nAgentic Workflows\nLearn how to build intelligent agentic workflows that make decisions and automate workflows with Motia\nOverview\nOne primitive, any language, event-driven by default - that's Motia\nOn this page"
}
================================================================================
{
    "source_page": "Overview",
    "source_url": "https://www.motia.dev/docs/concepts/overview =====",
    "chunk_topic": "Overview",
    "chunk_id": "Overview (Part 1)",
    "text": "Overview\nOne primitive, any language, event-driven by default - that's Motia\nMotia is a backend framework built around a single core primitive:everything is a Step.\nWant an API? That's a Step.Need a background job? That's a Step.Scheduled task? Also a Step.\nWrite each Step in whatever language makes sense - TypeScript, Python, or JavaScript. They all run together, share the same state, and talk through events.\nHow It Works\nEvery Step is just a file with two parts:\n1. Config\u2192 When and how it runs2. Handler\u2192 What it does\nimport{ ApiRouteConfig, Handlers }from'motia'// Config - when it runsexportconstconfig:ApiRouteConfig={name:'MyStep',type:'api',path:'/endpoint',method:'POST',emits: ['task.done']}// Handler - what it doesexportconsthandler:Handlers['MyStep']=async(req, {emit,logger})=>{logger.info('Processing request')awaitemit({topic:'task.done',data: { result:'success'}})return{ status:200, body: { success:true} }}\nimport{ ApiRouteConfig, Handlers }from'motia'// Config - when it runsexportconstconfig:ApiRouteConfig={name:'MyStep',type:'api',path:'/endpoint',method:'POST',emits: ['task.done']}// Handler - what it doesexportconsthandler:Handlers['MyStep']=async(req, {emit,logger})=>{logger.info('Processing request')awaitemit({topic:'task.done',data: { result:'success'}})return{ status:200, body: { success:true} }}\n\ud83d\udc49 Drop this file in yoursteps/folder and Motia finds it automatically. No registration, no imports, no setup.\nsteps/\nLearn more about Steps \u2192\nEvent-Driven Architecture\nSteps don't call each other. Theyemitandsubscribeto events.\nThis means:\nYour API can trigger a background job without waiting for it\nSteps run independently and retry on failure\nYou can add new Steps without touching existing ones\nEverything is traceable from start to finish\nExample:An API emits an event, a background Step picks it up:\n// API Step emitsawaitemit({ topic:'user.created', data: { email } })// Event Step subscribes and processesconfig={type:'event',subscribes: ['"
}
================================================================================
{
    "source_page": "Overview",
    "source_url": "https://www.motia.dev/docs/concepts/overview =====",
    "chunk_topic": "Overview",
    "chunk_id": "Overview (Part 2)",
    "text": "An API emits an event, a background Step picks it up:\n// API Step emitsawaitemit({ topic:'user.created', data: { email } })// Event Step subscribes and processesconfig={type:'event',subscribes: ['user.created']}\n// API Step emitsawaitemit({ topic:'user.created', data: { email } })// Event Step subscribes and processesconfig={type:'event',subscribes: ['user.created']}\nThat's it. No coupling, no dependencies.\nProject Structure & Auto-Discovery\nMotia automatically discovers Steps - no manual registration required.\nBasic Structure\nThesteps/directory is the heart of your Motia application. All your workflow logic lives here, and Motia automatically discovers any file following the naming pattern.\nsteps/\nAuto-Discovery Rules\nMotia scans thesteps/directory and automatically registers files that:\nsteps/\n\u2705Match naming pattern:TypeScript:.step.tsJavaScript:.step.jsPython:_step.py(note: underscore beforestep)\n\u2705Match naming pattern:\nTypeScript:.step.ts\n.step.ts\nJavaScript:.step.js\n.step.js\nPython:_step.py(note: underscore beforestep)\n_step.py\nstep\n\u2705Export aconfigobjectwith Step configuration\n\u2705Export aconfigobjectwith Step configuration\nconfig\n\u2705Export ahandlerfunctionwith business logic\n\u2705Export ahandlerfunctionwith business logic\nhandler\nNo imports. No registration. Just create the file and Motia finds it.\nMulti-Language Support\nEvery Step can be in a different language. They all run in the same process and share everything.\nCurrently Supported:\nTypeScript\u2192.step.ts\n.step.ts\nPython\u2192_step.py\n_step.py\nJavaScript\u2192.step.js\n.step.js\nComing Soon:\nRuby \u2192.step.rb\n.step.rb\nC# \u2192.step.cs\n.step.cs\nGo \u2192.step.go\n.step.go\nAnd many more...\nExample project:\nAll three Steps work together. TypeScript API emits an event \u2192 Python processes with ML \u2192 JavaScript sends the result.\nCore Concepts\nState Management\nPersistent key-value storage that works across all Steps and languages.\nawaitstate.set('users','user-123', { name:'John'})constuser=awaitstate.get('users','user-123')\nawaitstate.set('users','user-123', { name:'John'})constuser=awaitstate.get('users','user-123')\nLearn about State \u2192\nReal-Time Streams\nPush"
}
================================================================================
{
    "source_page": "Overview",
    "source_url": "https://www.motia.dev/docs/concepts/overview =====",
    "chunk_topic": "Overview",
    "chunk_id": "Overview (Part 3)",
    "text": "user=awaitstate.get('users','user-123')\nawaitstate.set('users','user-123', { name:'John'})constuser=awaitstate.get('users','user-123')\nLearn about State \u2192\nReal-Time Streams\nPush live updates to connected clients (browsers, mobile apps).\nawaitstreams.notifications.set('user-123','notif-1', {message:'Order shipped!',timestamp:newDate().toISOString()})\nawaitstreams.notifications.set('user-123','notif-1', {message:'Order shipped!',timestamp:newDate().toISOString()})\nClients receive updates instantly.\nLearn about Streams \u2192\nContext Object\nEvery handler gets a context object with everything you need:\nlogger\nemit\nstate\nstreams\ntraceId\nDevelopment Tool - Workbench\nVisual interface for testing APIs, building and debugging flows:\nSee your entire flow as a beautiful diagram\nTest API endpoints in the browser\nWatch logs in real-time\nInspect state as it changes\nLearn about Workbench \u2192\nWhat's Next?\n\ud83d\udce6 Steps\nDeep dive into Steps - the only primitive you need\n\ud83d\ude80 Quick Start\nBuild your first app in 5 minutes\nReal-Time Streaming\nLearn how to add real-time streaming updates to your Motia workflows\nSteps\nOne primitive to build any backend. Simple, composable, and multi-language.\nOn this page"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 1)",
    "text": "Steps\nOne primitive to build any backend. Simple, composable, and multi-language.\nOne Primitive for Any Backend\nAStepis the core primitive in Motia. Instead of juggling separate frameworks for APIs, background jobs, queues, or workflows, you define everything in one place:how it runs, when it runs, where it runs, and what it does.\nEvery Step file contains two parts:\nConfig\u2192 defines when and how the Step runs, and gives it a uniquename\nname\nHandler\u2192 the function that executes your business logic\nMotia automatically discovers any file ending in.step.ts,.step.js, or_step.py.The filename tells Motia to load it, and thenamein theconfiguniquely identifies the Step inside your system.\n.step.ts\n.step.js\n_step.py\nname\nconfig\nThe Simplest Example\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\n\ud83d\udc49 That\u2019s all you need to make a running API endpoint.Motia will auto-discover this file and wire it into your backend.\nSteps Work Together: Emit + Subscribe\nSteps aren\u2019t isolated. They communicate byemittingandsubscribingto events.This is the core of how you build backends with Motia.\nExample Flow: API Step \u2192 Event Step\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true}"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 2)",
    "text": ".sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\n\ud83d\udc49 With just two files, you have anAPI endpointthat triggers anevent-driven workflow.\nTriggers\nEvery Step has atypethat defineshow it triggers:\ntype\napi\nevent\ncron\nAPI Trigger\nRuns when an HTTP request hits the path.\nExample:\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id:"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 3)",
    "text": "/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nConfig:\nname\ntype\n'api'\npath\n:params\nmethod\nbodySchema\nHandler:handler(req, ctx)\nhandler(req, ctx)\nreq- Request withbody,headers,pathParams,queryParams\nreq\nbody\nheaders\npathParams\nqueryParams\nctx- Context withlogger,emit,state,streams,traceId\nctx\nlogger\nemit\nstate\nstreams\ntraceId\nReturns{ status, body, headers? }\n{ status, body, headers? }\nContext Object\nEvery handler receives actxobject with these tools:\nctx\nlogger\ninfo\nwarn\nerror\nemit\nstate\nstreams\ntraceId\nCore Functionality\nState \u2013 Persistent Data\nKey-value storage shared across Steps and workflows.\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nLogging \u2013 Structured & Contextual\nFor debugging, monitoring, and observability.\nlogger.info('Processing user', { userId:'123'});\nlogger.info('Processing user', { userId:'123'});\nStreams \u2013 Real-Time Data\nPush updates directly to connected clients.\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nRemember\nSteps are just files.Export aconfigandhandler.\nconfig\nhandler\nMotia auto-discovers and connects them.\nCombine Steps withemit + subscribeto build APIs, workflows, background jobs, or entire systems.\nWhat\u2019s Next?\n\ud83d\udc49Build your first app \u2192\nOverview\nOne primitive, any language, event-driven by default - that's Motia\nWorkbench\nVisualize, test, and debug your Motia flows with the built-in development platform\nOn this page"
}
================================================================================
{
    "source_page": "Workbench",
    "source_url": "https://www.motia.dev/docs/concepts/workbench =====",
    "chunk_topic": "Workbench",
    "chunk_id": "Workbench",
    "text": "Workbench\nVisualize, test, and debug your Motia flows with the built-in development platform\nMotia Workbench\nMotia Workbench is a development platform that helps you build and debug your Motia flows. It serves as your control center where you can:\nVisualize flows as interactive diagrams\nTest steps directly in the UI\nMonitor real-time logs\nDebug issues\nGetting Started\nStart workbench by running:\nnpm run dev\nRunning the dev command starts:\nMotia Server: Backend services and API endpoints\nMotia Workbench: Web interface athttp://localhost:3000\nDevelopment Mode: Auto-reloads when changes are made\nKey Features\nFlow Visualization\nSee your entire flow as an interactive diagram:\nSteps appear as connected nodes\nAPI endpoints are highlighted as entry points\nEvent connections show data flow\nClick any step to see its details\nReal-time Testing\nTest your flows directly in the interface:\nSend test requests to API endpoints\nMonitor how events flow through steps\nVisualize step sequence execution\nInspect data at each stage\nLive Logs\nMonitor your flow execution in real-time with structured logging and trace information.\nDevelopment Tools\nHot Reload: Changes reflect immediately in the UI\nError Handling: Detailed error messages with contextual debugging information\nState Inspector: Real-time monitoring of state management\nSteps\nOne primitive to build any backend. Simple, composable, and multi-language.\nProduct Showcase\nNext Page\nOn this page"
}
================================================================================
{
    "source_page": "Product Showcase",
    "source_url": "https://www.motia.dev/docs/product-showcase =====",
    "chunk_topic": "Product Showcase",
    "chunk_id": "Product Showcase",
    "text": "Product Showcase\nExplore full-scale production applications built with Motia that demonstrate the framework's capabilities in real-world scenarios.\nChessArena AI\nProduction-grade chess platform with real-time AI battles, move evaluation, and live leaderboards\n\ud83d\udcbb Live Applications\nThese are not just examples or tutorials - they are fully functional, production-ready applications that handle real user traffic and demonstrate Motia's capabilities at scale.\nProduction-Ready Applications\nThese applications demonstrate Motia's enterprise capabilities with real user traffic, production deployments, and battle-tested architectures.\n\ud83c\udfc6 Live Chess Platform\n\ud83d\udcda Source Code \u2192\nContribute\nHave you built something amazing with Motia? We'd love to feature your production application! Pleasereach out to uswith details about your project.\nWorkbench\nVisualize, test, and debug your Motia flows with the built-in development platform\nChessArena AI\nNext Page\nOn this page"
}
================================================================================
{
    "source_page": "ChessArena AI",
    "source_url": "https://www.motia.dev/docs/product-showcase/chessarena-ai =====",
    "chunk_topic": "ChessArena AI",
    "chunk_id": "ChessArena AI (Part 1)",
    "text": "ChessArena AI\nIn the world of AI development, chess serves as the perfect benchmark for intelligence and strategic thinking. But how do you measure which AI models truly \"understand\" chess beyond simple win/loss statistics? ChessArena.AI solves this challenge by focusing on move quality and game insight rather than just outcomes.\nThis comprehensive guide explores how to build a production-ready chess platform using Motia's event-driven architecture and real-time streaming capabilities. We'll cover:\nReal-Time Chess Streaming: How Motia Streams enable live game updates across all connected players\nMulti-Language Architecture: Combining TypeScript orchestration with Python chess engine integration\nAI Model Integration: Supporting multiple LLM providers (OpenAI, Anthropic Claude, Google Gemini, xAI Grok) for chess gameplay\nMove Evaluation System: Using Stockfish engine for real-time move analysis and scoring\nProduction Deployment: How this exact platform powers the live ChessArena.AI website\nLet's build a chess platform that measures AI intelligence through gameplay quality.\n\ud83c\udfed Production-Grade Chess Platform\nThis is not a tutorial project- this is battle-tested, production-ready code that handles real traffic at scale. Every aspect has been designed for enterprise use:\n\ud83c\udfae Live Chess Platform: Real-time games with multiple AI models competing simultaneously\n\ud83d\udcca Move Quality Analysis: Every move evaluated by Stockfish engine for strategic insight\n\u26a1 Real-Time Updates: Live game state synchronization across all connected clients\n\ud83e\udd16 Multi-AI Support: OpenAI GPT, Anthropic Claude, XAI Grok, Google Gemini integration\n\ud83c\udfc6 Dynamic Leaderboards: Real-time scoring based on move quality, not just wins\n\ud83c\udf0d Global Scale: Production deployment on Motia Cloud with worldwide accessibility\n\ud83d\udcb0 Cost Efficient: Event-driven architecture that scales efficiently\nLive Proof: Powering ChessArena.AI\nThis isn't just a demo- this exact code powers the live chess platform atChessArena.AI!\nVisit the platform and you'll see:\n\ud83c\udfc6 Live AI Leaderboardranking models by move quality\n\u26a1 Real-Time Gameswith instant move updates and evaluations\n\ud83d\udcca Move Analysisshowing centipawn scores and blunder detection\n\ud83c\udfae Multi-Model Battleswith GPT-5, Claude Opus 4, Gemini 2.5 Flash, and Grok 4 competing\nThat live chess platform with real-time AI battles? That's this exact implementation in production, processing thousands of moves and providing instant"
}
================================================================================
{
    "source_page": "ChessArena AI",
    "source_url": "https://www.motia.dev/docs/product-showcase/chessarena-ai =====",
    "chunk_topic": "ChessArena AI",
    "chunk_id": "ChessArena AI (Part 2)",
    "text": " GPT-5, Claude Opus 4, Gemini 2.5 Flash, and Grok 4 competing\nThat live chess platform with real-time AI battles? That's this exact implementation in production, processing thousands of moves and providing instant feedback to chess enthusiasts worldwide!\nThe Power of Strategic AI Evaluation\nAt its core, ChessArena.AI solves a fundamental challenge: how do you measure AI intelligence in chess beyond simple win/loss statistics? Traditional chess platforms focus on game outcomes, but most LLM games end in draws, making it difficult to distinguish between models.\nOur Motia-powered solution revolutionizes AI chess evaluation through:\nStockfish Integration: World's strongest open-source chess engine for move analysis\nCentipawn Scoring: Precise move quality measurement in hundredths of a pawn\nReal-Time Streaming: Live game updates and move evaluations\nMulti-LLM Support: Support for OpenAI, Anthropic, and Google AI models\nInstead of focusing on who wins, we measure how well each AI model understands chess strategy and tactics.\nThe Anatomy of Our Chess Platform\nOur application consists of specialized components handling different aspects of chess gameplay, from game creation to move evaluation. Let's explore the complete architecture.\nThe entry point that exposes available AI models from different providers (OpenAI, Anthropic, Google, xAI) for chess gameplay. The platform supports cutting-edge models and allows easy extension for new providers.\nimport{ AiModelsSchema }from'@chessarena/types/ai-models'import{ ApiRouteConfig, Handlers }from'motia'import{ z }from'zod'import{ supportedModelsByProvider }from'../../services/ai/models'// Current supported models (as of 2025)exportconstsupportedModelsByProvider:AiModels={openai: ['gpt-5-2025-08-07',// Latest GPT-5'o4-mini-2025-04-16',// O4 Mini'gpt-4.1-nano-2025-04-14',// GPT-4.1 Nano'o3-mini-2025-01-31',// O3 Mini'gpt-4o-mini-2024-07-18',// GPT-4o Mini],gemini: ['gemini-2.5-flash',// Latest Gemini 2.5 Flash'gemini-2.0-flash-001',// Gemini 2.0 Flash],claude: ['claude-op"
}
================================================================================
{
    "source_page": "ChessArena AI",
    "source_url": "https://www.motia.dev/docs/product-showcase/chessarena-ai =====",
    "chunk_topic": "ChessArena AI",
    "chunk_id": "ChessArena AI (Part 3)",
    "text": "PT-4o Mini],gemini: ['gemini-2.5-flash',// Latest Gemini 2.5 Flash'gemini-2.0-flash-001',// Gemini 2.0 Flash],claude: ['claude-opus-4-1-20250805',// Claude Opus 4.1'claude-opus-4-20250514',// Claude Opus 4'claude-sonnet-4-20250514',// Claude Sonnet 4'claude-3-7-sonnet-20250219',// Claude 3.7 Sonnet'claude-3-5-sonnet-20241022',// Claude 3.5 Sonnet'claude-3-5-haiku-20241022',// Claude 3.5 Haiku],grok: ['grok-4',// Latest Grok 4'grok-3',// Grok 3],}exportconstconfig:ApiRouteConfig={type:'api',name:'AvailableModels',description:'Expose all available AI models for supported providers',path:'/chess/models',method:'GET',emits: [],flows: ['chess'],responseSchema: {200: z.object({ models:AiModelsSchema() }),404: z.object({ message: z.string() }),400: z.object({ message: z.string() }),},}exportconsthandler:Handlers['AvailableModels']=async(_, {logger})=>{logger.info('Received available models request')return{status:200,body: {models: supportedModelsByProvider,},}}\nimport{ AiModelsSchema }from'@chessarena/types/ai-models'import{ ApiRouteConfig, Handlers }from'motia'import{ z }from'zod'import{ supportedModelsByProvider }from'../../services/ai/models'// Current supported models (as of 2025)exportconstsupportedModelsByProvider:AiModels={openai: ['gpt-5-2025-08-07',// Latest GPT-5'o4-mini-2025-04-16',// O4 Mini'gpt-4.1-nano-2025-04-14',// GPT-4.1 Nano'o3-mini-2025-01-31',// O3 Mini'gpt-4o-mini-2024-07-18',// GPT-4o Mini],gemini: ['gem"
}
================================================================================
{
    "source_page": "ChessArena AI",
    "source_url": "https://www.motia.dev/docs/product-showcase/chessarena-ai =====",
    "chunk_topic": "ChessArena AI",
    "chunk_id": "ChessArena AI (Part 4)",
    "text": "14',// GPT-4.1 Nano'o3-mini-2025-01-31',// O3 Mini'gpt-4o-mini-2024-07-18',// GPT-4o Mini],gemini: ['gemini-2.5-flash',// Latest Gemini 2.5 Flash'gemini-2.0-flash-001',// Gemini 2.0 Flash],claude: ['claude-opus-4-1-20250805',// Claude Opus 4.1'claude-opus-4-20250514',// Claude Opus 4'claude-sonnet-4-20250514',// Claude Sonnet 4'claude-3-7-sonnet-20250219',// Claude 3.7 Sonnet'claude-3-5-sonnet-20241022',// Claude 3.5 Sonnet'claude-3-5-haiku-20241022',// Claude 3.5 Haiku],grok: ['grok-4',// Latest Grok 4'grok-3',// Grok 3],}exportconstconfig:ApiRouteConfig={type:'api',name:'AvailableModels',description:'Expose all available AI models for supported providers',path:'/chess/models',method:'GET',emits: [],flows: ['chess'],responseSchema: {200: z.object({ models:AiModelsSchema() }),404: z.object({ message: z.string() }),400: z.object({ message: z.string() }),},}exportconsthandler:Handlers['AvailableModels']=async(_, {logger})=>{logger.info('Received available models request')return{status:200,body: {models: supportedModelsByProvider,},}}\nExtensible AI Provider System\nChessArena.AI features a plugin-based architecture that makes adding new AI providers incredibly simple. The unifiedmakePromptsystem handles all provider differences behind a clean interface.\nmakePrompt\nAdding New AI Providers\nTo add a new AI provider (like Anthropic's upcoming models or other LLM providers), you only need to:\nCreate a provider handlerinservices/ai/your-provider.ts:\nservices/ai/your-provider.ts\nimport{ Handler }from'./types'exportconstyourProvider:Handler=async({prompt,zod,logger,model})=>{// Initialize your AI clientconstclient=newYourAIClient({ apiKey: process.env.YOUR_API_KEY})"
}
================================================================================
{
    "source_page": "ChessArena AI",
    "source_url": "https://www.motia.dev/docs/product-showcase/chessarena-ai =====",
    "chunk_topic": "ChessArena AI",
    "chunk_id": "ChessArena AI (Part 5)",
    "text": "-provider.ts\nimport{ Handler }from'./types'exportconstyourProvider:Handler=async({prompt,zod,logger,model})=>{// Initialize your AI clientconstclient=newYourAIClient({ apiKey: process.env.YOUR_API_KEY})// Make the API call with structured outputconstresponse=awaitclient.chat({model: model??'your-default-model',messages: [{ role:'user', content: prompt }],responseFormat: { type:'json_schema', schema:zodToJsonSchema(zod) },})logger.info('Your provider response received', { model })returnJSON.parse(response.content)}\nimport{ Handler }from'./types'exportconstyourProvider:Handler=async({prompt,zod,logger,model})=>{// Initialize your AI clientconstclient=newYourAIClient({ apiKey: process.env.YOUR_API_KEY})// Make the API call with structured outputconstresponse=awaitclient.chat({model: model??'your-default-model',messages: [{ role:'user', content: prompt }],responseFormat: { type:'json_schema', schema:zodToJsonSchema(zod) },})logger.info('Your provider response received', { model })returnJSON.parse(response.content)}\nRegister the providerinservices/ai/make-prompt.ts:\nservices/ai/make-prompt.ts\nimport{ yourProvider }from'./your-provider'constproviders:Record<AiModelProvider,Handler>={openai,gemini,claude,grok,yourProvider,// Add your provider here}\nimport{ yourProvider }from'./your-provider'constproviders:Record<AiModelProvider,Handler>={openai,gemini,claude,grok,yourProvider,// Add your provider here}\nUpdate the type definitionsintypes/ai-models.ts:\ntypes/ai-models.ts\nexportconstAiModelProviderSchema=()=>z.enum(['openai','gemini','claude','grok','yourProvider'])\nexportconstAiModelProviderSchema=()=>z.enum(['openai','gemini','claude','grok','yourProvider'])\nAdd supported modelsinservices/ai/models.ts:\nservices/ai/models.ts\nexportconstsupportedModelsByProvider:AiModels={// ... existing providersyourProvider: ['your-model-v1','your-model-v2-turbo','your-model-reasoning',],}\nexportconstsupportedModelsByProvider:AiModels={// ... existing providersyourProvider: ['your-model-v1','your-model"
}
================================================================================
{
    "source_page": "ChessArena AI",
    "source_url": "https://www.motia.dev/docs/product-showcase/chessarena-ai =====",
    "chunk_topic": "ChessArena AI",
    "chunk_id": "ChessArena AI (Part 6)",
    "text": "yourProvider: ['your-model-v1','your-model-v2-turbo','your-model-reasoning',],}\nexportconstsupportedModelsByProvider:AiModels={// ... existing providersyourProvider: ['your-model-v1','your-model-v2-turbo','your-model-reasoning',],}\nThat's it! Your new AI provider is now fully integrated and can compete in chess battles alongside GPT, Claude, Gemini, and Grok.\nCurrent Provider Implementations\nThe platform currently supports four major AI providers with their latest models:\nOpenAI: GPT-5, O4 Mini, GPT-4.1 series, O3 Mini\nAnthropic: Claude Opus 4.1, Claude Sonnet 4, Claude 3.7 series\nGoogle: Gemini 2.5 Flash, Gemini 2.0 Flash\nxAI: Grok 4, Grok 3\nEach provider uses optimized API calls with structured JSON output and proper error handling.\nReal-Time Chess Architecture\nThe beauty of this chess platform lies in its event-driven, real-time architecture. Here's how live chess games flow through the system:\nGame Creation\u2192 User selects AI models and creates a new game\nMove Generation\u2192 AI models generate moves using LLM APIs\nMove Validation\u2192 Chess rules validation and board state updates\nStockfish Analysis\u2192 Real-time move evaluation and scoring\nStream Updates\u2192 Live game state propagated to all connected clients\nLeaderboard Updates\u2192 AI model rankings updated based on move quality\nNo manual state management, no complex WebSocket handling, no synchronization code required!\nKey Features & Benefits\n\ud83c\udfaeReal-Time Chess Gameplay\nLive games with instant move updates across all connected clients - watch AI models battle in real-time.\n\ud83c\udfc6Intelligent Scoring System\nMove quality evaluation using Stockfish engine with centipawn precision and blunder detection.\n\ud83e\udd16Multi-AI Integration\nSupport for OpenAI GPT, Anthropic Claude, and Google Gemini models with unified API interface.\n\u26a1Event-Driven Architecture\nScalable, maintainable system where each component handles specific chess functionality.\n\ud83d\udccaLive Leaderboards\nReal-time AI model rankings based on move quality, strategic insight, and game performance.\n\ud83c\udf10Production-Ready\nBattle-tested code powering the live ChessArena.AI platform with global accessibility.\nTrying It Out\nReady to build your own AI chess platform? Let's get it running.\nClone and Install\n"
}
================================================================================
{
    "source_page": "ChessArena AI",
    "source_url": "https://www.motia.dev/docs/product-showcase/chessarena-ai =====",
    "chunk_topic": "ChessArena AI",
    "chunk_id": "ChessArena AI (Part 7)",
    "text": " insight, and game performance.\n\ud83c\udf10Production-Ready\nBattle-tested code powering the live ChessArena.AI platform with global accessibility.\nTrying It Out\nReady to build your own AI chess platform? Let's get it running.\nClone and Install\nStart by getting the project locally and installing dependencies.\ngitclonehttps://github.com/MotiaDev/chessarena-ai.gitcdchessarena-aipnpminstall\ngitclonehttps://github.com/MotiaDev/chessarena-ai.gitcdchessarena-aipnpminstall\nInstall Stockfish Engine\nThe platform requires Stockfish for move evaluation. Choose your installation method:\nOption A: Using Homebrew (macOS - Recommended)\nbrewinstallstockfish\nbrewinstallstockfish\nOption B: Using the project installer\npnpminstall-stockfish<platform># Supported: linux-x86, mac-m1\npnpminstall-stockfish<platform># Supported: linux-x86, mac-m1\nOption C: Manual InstallationDownload fromstockfishchess.org\nConfigure Environment Variables\nCreate a.envfile with your AI provider API keys:\n.env\n# Required: AI Model API KeysOPENAI_API_KEY=\"sk-...\"ANTHROPIC_API_KEY=\"sk-ant-...\"GOOGLE_AI_API_KEY=\"...\"# Required: Stockfish Engine PathSTOCKFISH_BIN_PATH=\"/opt/homebrew/bin/stockfish\"# Optional: Authentication (for user management)JWT_SECRET=\"your-jwt-secret\"\n# Required: AI Model API KeysOPENAI_API_KEY=\"sk-...\"ANTHROPIC_API_KEY=\"sk-ant-...\"GOOGLE_AI_API_KEY=\"...\"# Required: Stockfish Engine PathSTOCKFISH_BIN_PATH=\"/opt/homebrew/bin/stockfish\"# Optional: Authentication (for user management)JWT_SECRET=\"your-jwt-secret\"\nStart the Chess Platform\nLaunch both the API backend and React frontend:\npnpmdev\npnpmdev\nThis starts:\nAPI Backend:http://localhost:3000(Motia API with chess logic)\nhttp://localhost:3000\nReact Frontend:http://localhost:5173(Chess game interface)\nhttp://localhost:5173\nCreate Your First AI Battle\nOpen the Chess Platform: Navigate tohttp://localhost:5173\nhttp://localhost:5173\nSelect AI Models: Choose different models for white and black players\nStart the Game: Watch AI models battle with real-time move evaluation\n"
}
================================================================================
{
    "source_page": "ChessArena AI",
    "source_url": "https://www.motia.dev/docs/product-showcase/chessarena-ai =====",
    "chunk_topic": "ChessArena AI",
    "chunk_id": "ChessArena AI (Part 8)",
    "text": " Battle\nOpen the Chess Platform: Navigate tohttp://localhost:5173\nhttp://localhost:5173\nSelect AI Models: Choose different models for white and black players\nStart the Game: Watch AI models battle with real-time move evaluation\nView Analysis: See centipawn scores, best moves, and blunder detection\nCheck Leaderboards: Monitor AI model performance rankings\nAccess Real-Time Data\nYour chess games are available via the Motia streams API:\n# Get all active gamescurlhttp://localhost:3000/api/streams/chessGame# Get specific game statecurlhttp://localhost:3000/api/streams/chessGame/{gameId}# Get move history with evaluationscurlhttp://localhost:3000/api/streams/chessGameMove/{gameId}# Get AI model leaderboardcurlhttp://localhost:3000/api/streams/chessLeaderboard\n# Get all active gamescurlhttp://localhost:3000/api/streams/chessGame# Get specific game statecurlhttp://localhost:3000/api/streams/chessGame/{gameId}# Get move history with evaluationscurlhttp://localhost:3000/api/streams/chessGameMove/{gameId}# Get AI model leaderboardcurlhttp://localhost:3000/api/streams/chessLeaderboard\nDeploy to Production\nOnce your chess platform is working locally, deploy it to production with Motia Cloud:\nOption 1: CLI Deployment\n# Deploy with version and API keymotiaclouddeploy--api-keyyour-api-key--version-name1.0.0# Deploy with environment variablesmotiaclouddeploy--api-keyyour-api-key\\--version-name1.0.0\\--env-file.env.production\\--environment-idyour-env-id\n# Deploy with version and API keymotiaclouddeploy--api-keyyour-api-key--version-name1.0.0# Deploy with environment variablesmotiaclouddeploy--api-keyyour-api-key\\--version-name1.0.0\\--env-file.env.production\\--environment-idyour-env-id\nOption 2: One-Click Web Deployment\nEnsure your local project is running (pnpm dev)\npnpm dev\nGo toMotia Cloud -> Import from Workbench\nSelect your local project port\nChoose project and environment name\nUpload environment variables (optional)\nClickDeployand watch the magic happen! \u2728\n\ud83d\ude80 Production Deployment Guide\nEnvironment Variables\nConfigure these environment variables for production security"
}
================================================================================
{
    "source_page": "ChessArena AI",
    "source_url": "https://www.motia.dev/docs/product-showcase/chessarena-ai =====",
    "chunk_topic": "ChessArena AI",
    "chunk_id": "ChessArena AI (Part 9)",
    "text": " from Workbench\nSelect your local project port\nChoose project and environment name\nUpload environment variables (optional)\nClickDeployand watch the magic happen! \u2728\n\ud83d\ude80 Production Deployment Guide\nEnvironment Variables\nConfigure these environment variables for production security and functionality:\n# Required: AI Model API KeysOPENAI_API_KEY=\"sk-your-openai-key\"# For GPT-5, O4 Mini, GPT-4.1 seriesANTHROPIC_API_KEY=\"sk-ant-your-anthropic-key\"# For Claude Opus 4.1, Sonnet 4GEMINI_API_KEY=\"your-google-gemini-key\"# For Gemini 2.5 Flash, 2.0 FlashXAI_API_KEY=\"your-xai-grok-key\"# For Grok 4, Grok 3# Required: Stockfish Engine PathSTOCKFISH_BIN_PATH=\"/opt/homebrew/bin/stockfish\"# Optional: Authentication for user managementJWT_SECRET=\"your-secure-jwt-secret\"# Optional: Database configuration for user dataDATABASE_URL=\"postgresql://user:password@host:port/database\"\n# Required: AI Model API KeysOPENAI_API_KEY=\"sk-your-openai-key\"# For GPT-5, O4 Mini, GPT-4.1 seriesANTHROPIC_API_KEY=\"sk-ant-your-anthropic-key\"# For Claude Opus 4.1, Sonnet 4GEMINI_API_KEY=\"your-google-gemini-key\"# For Gemini 2.5 Flash, 2.0 FlashXAI_API_KEY=\"your-xai-grok-key\"# For Grok 4, Grok 3# Required: Stockfish Engine PathSTOCKFISH_BIN_PATH=\"/opt/homebrew/bin/stockfish\"# Optional: Authentication for user managementJWT_SECRET=\"your-secure-jwt-secret\"# Optional: Database configuration for user dataDATABASE_URL=\"postgresql://user:password@host:port/database\"\nSecurity Best Practices\nFor production deployments, ensure you:\nSecure API keys:# Generate a cryptographically secure JWT secretopensslrand-hex32\nSecure API keys:\n# Generate a cryptographically secure JWT secretopensslrand-hex32\n# Generate a cryptographically secure JWT secretopensslrand-hex32\nStore secrets securely: Use environment variables, never commit API keys to code\nStore secrets securely: Use environment variables, never commit API keys to code\nMonitor AI usage: Track API usage and costs"
}
================================================================================
{
    "source_page": "ChessArena AI",
    "source_url": "https://www.motia.dev/docs/product-showcase/chessarena-ai =====",
    "chunk_topic": "ChessArena AI",
    "chunk_id": "ChessArena AI (Part 10)",
    "text": " secure JWT secretopensslrand-hex32\nStore secrets securely: Use environment variables, never commit API keys to code\nStore secrets securely: Use environment variables, never commit API keys to code\nMonitor AI usage: Track API usage and costs across different model providers\nMonitor AI usage: Track API usage and costs across different model providers\nEnable rate limiting: Implement request limits to prevent abuse\nEnable rate limiting: Implement request limits to prevent abuse\nScaling Considerations\nThis architecture scales automatically with your chess platform traffic:\nMultiple games: Each game gets its own stream for real-time updates\nHigh concurrency: Motia streams handle thousands of concurrent chess games\nGlobal distribution: Deploy to multiple regions for worldwide performance\nAI model optimization: Load balance across different model providers\nCost optimization: Pay only for actual usage with serverless scaling\n\ud83d\udcbb Dive into the Code\nWant to explore the complete chess platform implementation? Check out the full source code with AI integration, real-time streams, and production deployment:\nLive ChessArena.AI Platform\nAccess the complete implementation powering the live chess platform. See exactly how AI models battle with real-time evaluation and scoring!\nView ChessArena.AI Code\nPlay Live Chess \u2192\nConclusion: Intelligence Through Strategic Play\nThis ChessArena.AI platform demonstrates how to build sophisticated AI evaluation systems using event-driven architecture. By focusing on move quality rather than simple win/loss statistics, we've created a platform that truly measures AI strategic understanding.\nThe beauty of this approach is its extensibility:\nAdd new AI models: Integrate any LLM provider with the unified interface\nEnhanced analysis: Implement opening book analysis, endgame evaluation\nTournament modes: Multi-round competitions with advanced scoring\nEducational features: Move explanations, tactical puzzles, learning modes\nKey architectural benefits:\nReal-time synchronization: All clients see live game updates automatically\nScalable evaluation: Stockfish analysis runs independently of game flow\nMulti-language power: TypeScript orchestration with Python chess engine integration\nProduction reliability: Battle-tested code handling real user traffic\nThis exact implementation powers the live chess platform atChessArena.AI- that real-time AI battle system with move-by-move evaluation? It's this code in action, proven at scale with thousands of chess enthusiasts worldwide.\nProduction Metrics:\nHandles 1,000+ concurrent chess games\nProcesses 10,000+ moves daily with real-time evaluation\nSub-100ms move analysis and streaming updates\n99.9% uptime with automatic scaling\nReady to build AI"
}
================================================================================
{
    "source_page": "ChessArena AI",
    "source_url": "https://www.motia.dev/docs/product-showcase/chessarena-ai =====",
    "chunk_topic": "ChessArena AI",
    "chunk_id": "ChessArena AI (Part 11)",
    "text": ".\nProduction Metrics:\nHandles 1,000+ concurrent chess games\nProcesses 10,000+ moves daily with real-time evaluation\nSub-100ms move analysis and streaming updates\n99.9% uptime with automatic scaling\nReady to build AI evaluation platforms that measure true intelligence? Deploy production-ready chess systems with Motia today!\nProduct Showcase\nPrevious Page\nExamples\nNext Page\nOn this page"
}
================================================================================
{
    "source_page": "Examples",
    "source_url": "https://www.motia.dev/docs/examples =====",
    "chunk_topic": "Examples",
    "chunk_id": "Examples",
    "text": "Examples\nWe have curated examples to help you learn Motia, organized by complexity from basic concepts to production-ready implementations.\n\ud83d\udcda Basic Examples\nStart here to learn core Motia concepts with straightforward implementations.\nSentiment Analysis\nLearn dynamic workflows with LLM-driven decision making and event routing\nMulti-Language Processing\nCombine TypeScript, Python, and JavaScript in unified data pipelines\n\ud83d\udd27 Intermediate Examples\nBuild more complex workflows with integrations and advanced patterns.\nAI Content Moderation\nHuman-in-the-loop content moderation with AI analysis and Slack integration\nRAG PDF Analyzer\nIntelligent document processing with Docling and Weaviate vector database\nTrello Automation\nAutomated card progression system with AI-powered summaries and notifications\n\ud83c\udfed Production Examples\nEnterprise-ready implementations handling real traffic at scale.\nUptime Monitor\nComplete monitoring system with smart alerting and Discord integration\nGitHub Stars Counter\nReal-time stars counter with secure webhooks and live streaming\nGitHub Integration\nAutomated issue and PR management with AI-powered classification and routing\nGmail Automation\nSmart email classification, auto-responses, and AI-powered filtering with OAuth2\nFinance Agent\nEvent-driven financial analysis with web search and real-time market data\nAI Research Agent\nComprehensive web research assistant with iterative depth and parallel processing\n\ud83d\udcbb Explore the Source Code\nAll examples include complete, runnable source code with configuration files, setup instructions, and production-ready implementations:\nMotia Examples Repository\nAccess complete implementations, step-by-step tutorials, and production-ready configurations for all our examples. Perfect for learning, experimentation, and building your own applications.\nRepository\nRAG Example \u2192\nMonitor Example \u2192\nContribute\nWe welcome contributions to the examples. Please submit a PR to theexamples repository.\nChessArena AI\nPrevious Page\nSentiment Analysis\nDynamic Workflows: Building a Sentiment Analyzer with Motia\nOn this page"
}
================================================================================
{
    "source_page": "Sentiment Analysis",
    "source_url": "https://www.motia.dev/docs/examples/sentiment-analysis =====",
    "chunk_topic": "Sentiment Analysis",
    "chunk_id": "Sentiment Analysis (Part 1)",
    "text": "Sentiment Analysis\nDynamic Workflows: Building a Sentiment Analyzer with Motia\nIn modern application development, workflows are rarely linear. Whether you're building a simple \"prompt => response\" system or a complex, multi-stage data processing pipeline, you often need your application to make decisions and route data dynamically. This is where the power of event-driven architecture shines, and where the Motia framework provides a clear path forward.\nThis guide explores how to build a dynamic sentiment analysis application that uses an LLM to determine how to proceed. We'll cover:\nThe Motia Philosophy: Howstepsas a core primitive simplify complex architectures.\nsteps\nBuilding the Workflow: A step-by-step guide to creating the four key components of our application.\nVisualizing the Flow: How events chain together to create a cohesive, dynamic system.\nHands-On with the API: How to run and test your new sentiment analyzer.\nLet's dive in.\nA Step at a Time\nAt the heart of the Motia framework is a simple but powerful idea: thestep. A step is a self-contained, independent unit of logic that listens for an event, performs a task, and, optionally, emits a new event. This concept is the core primitive that allows you to break down even the most complex architectures into a series of simple, manageable components.\nstep\nInstead of a monolithic application where business logic is tightly coupled, Motia encourages a decoupled, event-driven approach. This has several key advantages:\nClarity: Each step has a single responsibility, making the application easier to understand and reason about.\nScalability: Steps can be scaled independently, so you can allocate resources where they're needed most.\nExtensibility: Adding new functionality is as simple as creating a new step and subscribing it to an existing event.\nResilience: The decoupled nature of steps means that a failure in one part of the system doesn't necessarily bring down the entire application.\nIn this project, we'll see this philosophy in action as we build a sentiment analyzer with four distinct steps, each with its own clear purpose.\nThe Anatomy of Our Sentiment Analyzer\nOur application will be composed of four steps. Let's explore each one.\nThis is the entry point to our workflow. It's an API step that listens forPOSTrequests, validates the incoming data, and emits anopenai.analyzeSentimentRequestevent.\nPOST\nopenai.analyzeSentimentRequest\n// Receives user text, emits \"open"
}
================================================================================
{
    "source_page": "Sentiment Analysis",
    "source_url": "https://www.motia.dev/docs/examples/sentiment-analysis =====",
    "chunk_topic": "Sentiment Analysis",
    "chunk_id": "Sentiment Analysis (Part 2)",
    "text": " our workflow. It's an API step that listens forPOSTrequests, validates the incoming data, and emits anopenai.analyzeSentimentRequestevent.\nPOST\nopenai.analyzeSentimentRequest\n// Receives user text, emits \"openai.analyzeSentimentRequest\".import{ Handlers }from'motia'import{ z }from'zod'exportconstconfig={type:'api',name:'analyzeSentimentApi',description:'Receives user text and emits an event to trigger sentiment analysis.',path:'/api/analyze-sentiment',method:'POST',emits: ['openai.analyzeSentimentRequest'],bodySchema: z.object({text: z.string().min(1,'text is required'),}),flows: ['sentiment-demo'],}asconstexportconsthandler:Handlers['analyzeSentimentApi']=async(req, {emit,logger})=>{const{text}=req.bodylogger.info('[AnalyzeSentimentAPI] Received text', { text })// Emit an event to call OpenAIawaitemit({topic:'openai.analyzeSentimentRequest',data: { text },})// Return right awayreturn{status:200,body: { status:'Accepted', message:'Your text is being analyzed'},}}\n// Receives user text, emits \"openai.analyzeSentimentRequest\".import{ Handlers }from'motia'import{ z }from'zod'exportconstconfig={type:'api',name:'analyzeSentimentApi',description:'Receives user text and emits an event to trigger sentiment analysis.',path:'/api/analyze-sentiment',method:'POST',emits: ['openai.analyzeSentimentRequest'],bodySchema: z.object({text: z.string().min(1,'text is required'),}),flows: ['sentiment-demo'],}asconstexportconsthandler:Handlers['analyzeSentimentApi']=async(req, {emit,logger})=>{const{text}=req.bodylogger.info('[AnalyzeSentimentAPI] Received text', { text })// Emit an event to call OpenAIawaitemit({topic:'openai.analyzeSentimentRequest',data: { text },})// Return right awayreturn{status:200,body: { status:'Accepted', message:'Your text is being analyzed'},}}\nExplore the Workbench\nYou can explore the workflow in the Workbench.\nYou can also read your files and watch logs, traces, debug your architecture directly"
}
================================================================================
{
    "source_page": "Sentiment Analysis",
    "source_url": "https://www.motia.dev/docs/examples/sentiment-analysis =====",
    "chunk_topic": "Sentiment Analysis",
    "chunk_id": "Sentiment Analysis (Part 3)",
    "text": "status:200,body: { status:'Accepted', message:'Your text is being analyzed'},}}\nExplore the Workbench\nYou can explore the workflow in the Workbench.\nYou can also read your files and watch logs, traces, debug your architecture directly in the Workbench.\nTrying It Out\nReady to see it in action? Let's get the project running.\nInstall Dependencies\nFirst, install the necessary npm packages.\nnpminstall\nnpminstall\nSet Your Environment Variables\nYou'll need an OpenAI API key for this project. Export it as an environment variable.\nexportOPENAI_API_KEY=\"sk-...\"\nexportOPENAI_API_KEY=\"sk-...\"\nRun the Project\nStart the Motia development server.\nnpmrundev\nnpmrundev\nTest the API\nNow you can send requests to your API and see the workflow in action.\ncurl-XPOSThttp://localhost:3000/api/analyze-sentiment\\-H\"Content-Type: application/json\"\\-d'{\"text\":\"I absolutely love this new device! It is amazing and works perfectly.\"}'\ncurl-XPOSThttp://localhost:3000/api/analyze-sentiment\\-H\"Content-Type: application/json\"\\-d'{\"text\":\"I absolutely love this new device! It is amazing and works perfectly.\"}'\nCheck your logs, and you should see the[Positive Responder]has been triggered.\n[Positive Responder]\ncurl-XPOSThttp://localhost:3000/api/analyze-sentiment\\-H\"Content-Type: application/json\"\\-d'{\"text\":\"This is the worst product I have ever used. It broke after one day.\"}'\ncurl-XPOSThttp://localhost:3000/api/analyze-sentiment\\-H\"Content-Type: application/json\"\\-d'{\"text\":\"This is the worst product I have ever used. It broke after one day.\"}'\nThis time, the[Negative Responder]will fire.\n[Negative Responder]\n\ud83d\udcbb Dive into the Code\nWant to explore the complete implementation? Check out the full source code and additional examples in our GitHub repository:\nExplore More Examples\nGet hands-on with the complete source code, configuration files, and additional examples to accelerate your learning.\nView Sentiment Example\nMore Examples \u2192\nConclusion: The Power of a Simple Primitive\nThis sentiment analysis application is a powerful demonstration of the Motia philosophy. By embracing thestepas a core primitive, we've turned a potentially complex,"
}
================================================================================
{
    "source_page": "Sentiment Analysis",
    "source_url": "https://www.motia.dev/docs/examples/sentiment-analysis =====",
    "chunk_topic": "Sentiment Analysis",
    "chunk_id": "Sentiment Analysis (Part 4)",
    "text": " learning.\nView Sentiment Example\nMore Examples \u2192\nConclusion: The Power of a Simple Primitive\nThis sentiment analysis application is a powerful demonstration of the Motia philosophy. By embracing thestepas a core primitive, we've turned a potentially complex, branching workflow into a series of simple, understandable, and scalable components.\nstep\nThis is just the beginning. From here, you can extend the application by adding new steps to handle neutral sentiment, send notifications, or store results in a database. The event-driven architecture of Motia makes it easy to add new functionality without disrupting the existing flow.\nWe encourage you to explore, experiment, and see for yourself how Motia can simplify your most complex backend challenges. Happy coding!\nExamples\nPrevious Page\nMulti-Language Processing\nMulti-Language Data Processing: Building a Unified Pipeline with Motia\nOn this page"
}
================================================================================
{
    "source_page": "Multi-Language Processing",
    "source_url": "https://www.motia.dev/docs/examples/multi-language-data-processing =====",
    "chunk_topic": "Multi-Language Processing",
    "chunk_id": "Multi-Language Processing (Part 1)",
    "text": "Multi-Language Processing\nMulti-Language Data Processing: Building a Unified Pipeline with Motia\nModern backend development often requires combining the strengths of different programming languages. TypeScript for APIs, Python for data processing and AI, JavaScript for rapid prototyping. Traditional approaches involve complex microservices architectures with intricate communication patterns.\nThis comprehensive guide explores how to build a unified multi-language data processing pipeline using Motia'sstepprimitive. We'll cover:\nSteps as Core Primitive: How steps unify different languages under a single abstraction.\nBuilding the Pipeline: A step-by-step guide to creating a cohesive multi-language data processing workflow.\nUnified Execution Model: How steps enable seamless communication between different runtime environments.\nHands-On Development: How to build, run, and observe your unified multi-language pipeline.\nLet's build a production-ready data processing system where steps unify TypeScript, Python, and JavaScript into a single cohesive workflow.\nThe Power of Steps: A Unified Multi-Language Primitive\nAt its core, our data processing pipeline demonstrates howstepssolve the fundamental challenge of multi-language systems: unifying different programming languages under a single, coherent abstraction. Traditional polyglot architectures require complex inter-process communication and deployment coordination. Motia'sstepprimitive unifies everything.\nSteps enable true language unification:\nTypeScriptsteps: Strong typing and excellent tooling for APIs and orchestration\nPythonsteps: Rich ecosystem for data processing, ML, and scientific computing\nJavaScriptsteps: Dynamic processing and rapid development\nMotia's Step Primitive: The unifying abstraction that makes all languages work as a single system\nInstead of managing multiple services,stepsprovide a single programming model. Whether written in TypeScript, Python, or JavaScript, every step follows the same pattern: receive data, process it, emit events. This unification is what makes multi-language development straightforward.\nThe Anatomy of Our Multi-Language Pipeline\nOur application consists of six specialized steps, each leveraging the optimal language for its specific task. Let's explore the complete architecture.\nThe entry point for our multi-language workflow. This TypeScript API endpoint receives data, validates it with Zod schemas, and kicks off the processing pipeline.\nimport{ z }from'zod'constbodySchema=z.object({data: z.record(z.unknown()).optional(),message: z.string().optional()})// API endpoint to start the multi-language pipelineexportconstconfig={type:'api',name:'AppStarter',description:'Start the multi-language app pipeline',method:'POST',path:'/start-app',bodySchema"
}
================================================================================
{
    "source_page": "Multi-Language Processing",
    "source_url": "https://www.motia.dev/docs/examples/multi-language-data-processing =====",
    "chunk_topic": "Multi-Language Processing",
    "chunk_id": "Multi-Language Processing (Part 2)",
    "text": ": z.string().optional()})// API endpoint to start the multi-language pipelineexportconstconfig={type:'api',name:'AppStarter',description:'Start the multi-language app pipeline',method:'POST',path:'/start-app',bodySchema,responseSchema: {200: z.object({message: z.string(),appId: z.number(),traceId: z.string()})},emits: ['app.started'],flows: ['data-processing']}asconstexportconsthandler=async(req:any, {logger,emit,traceId}:any)=>{logger.info('\ud83d\ude80 Starting multi-language app', { body: req.body, traceId })constappData={id: Date.now(),input: req.body.data||{},started_at:newDate().toISOString(),traceId}// Emit to next stepawaitemit({topic:'app.started',data: appData})logger.info('\u2705 App started successfully', {appId: appData.id,traceId})return{status:200,body: {message:'Multi-language app started successfully',appId: appData.id,traceId}}}\nimport{ z }from'zod'constbodySchema=z.object({data: z.record(z.unknown()).optional(),message: z.string().optional()})// API endpoint to start the multi-language pipelineexportconstconfig={type:'api',name:'AppStarter',description:'Start the multi-language app pipeline',method:'POST',path:'/start-app',bodySchema,responseSchema: {200: z.object({message: z.string(),appId: z.number(),traceId: z.string()})},emits: ['app.started'],flows: ['data-processing']}asconstexportconsthandler=async(req:any, {logger,emit,traceId}:any)=>{logger.info('\ud83d\ude80 Starting multi-language app', { body: req.body, traceId })constappData={id: Date.now(),input: req.body.data||{},started_at:newDate().toISOString(),traceId}// Emit to next stepawaitemit({topic:'app.started',data: appData})logger.info('\u2705 App started successfully', {appId: appData.id,traceId})return{status:200,body: {message:'Multi-language app started successfully',appId: appData.id,traceId}}}\nType Definitions\nOur unified system uses shared TypeScript types to ensure type safety across the multi-language pipeline:\n// types/index.tsexportinterfaceAppData{id:numberinput:Record<string"
}
================================================================================
{
    "source_page": "Multi-Language Processing",
    "source_url": "https://www.motia.dev/docs/examples/multi-language-data-processing =====",
    "chunk_topic": "Multi-Language Processing",
    "chunk_id": "Multi-Language Processing (Part 3)",
    "text": "-language app started successfully',appId: appData.id,traceId}}}\nType Definitions\nOur unified system uses shared TypeScript types to ensure type safety across the multi-language pipeline:\n// types/index.tsexportinterfaceAppData{id:numberinput:Record<string,unknown>started_at:stringtraceId:string}exportinterfaceProcessedResult{original_id:numberprocessed_at:stringresult:stringconfidence:numbermodel_version:string}exportinterfacePythonResult{id:numberpython_message:stringprocessed_by:string[]processing_time:number}exportinterfaceNotificationData{id:numbermessage:stringprocessed_by:string[]sent_at:string}exportinterfaceAppSummary{appId:numberstatus:stringcompleted_at:stringsteps_executed:string[]result:string}\n// types/index.tsexportinterfaceAppData{id:numberinput:Record<string,unknown>started_at:stringtraceId:string}exportinterfaceProcessedResult{original_id:numberprocessed_at:stringresult:stringconfidence:numbermodel_version:string}exportinterfacePythonResult{id:numberpython_message:stringprocessed_by:string[]processing_time:number}exportinterfaceNotificationData{id:numbermessage:stringprocessed_by:string[]sent_at:string}exportinterfaceAppSummary{appId:numberstatus:stringcompleted_at:stringsteps_executed:string[]result:string}\nExplore the Workbench\nThe Motia Workbench provides a visual representation of your multi-language pipeline, making it easy to trace data flow between TypeScript, Python, and JavaScript steps.\nYou can monitor real-time execution, view logs from all languages in a unified interface, and trace the complete data flow from the TypeScript API through Python processing to JavaScript summary generation.\nEvent Flow Architecture\nThe pipeline follows a clear event-driven flow that connects all languages seamlessly:\napp.started- TypeScript API \u2192 TypeScript Bridge\napp.started\ndata.processed- TypeScript Bridge \u2192 Python Processor\ndata.processed\npython.done- Python Processor \u2192 TypeScript Notification Handler\npython.done\nnotification.sent- TypeScript Notification \u2192 TypeScript Finalizer\nnotification.sent\napp.completed- TypeScript Finalizer \u2192 JavaScript Summary Generator\napp.completed\nEach step only needs to know the events it subscribes to and emits, creating loose coupling while maintaining strong data flow guarantees.\nKey Features & Benefits\n\ud83e\udde9Step as Universal Primitive\nEvery piece of logic\u2014whether TypeScript, Python, or JavaScript\u2014follows the same step pattern, creating true unification.\n\ud83c\udf10Seamless Language Integration\nSteps eliminate the complexity of multi-language systems by providing a unified programming model.\n\ud83d\udccaUnified Development Experience\nWrite, debug, and monitor all languages through a single interface and shared execution model.\n\u26a1Hot Reload"
}
================================================================================
{
    "source_page": "Multi-Language Processing",
    "source_url": "https://www.motia.dev/docs/examples/multi-language-data-processing =====",
    "chunk_topic": "Multi-Language Processing",
    "chunk_id": "Multi-Language Processing (Part 4)",
    "text": "Seamless Language Integration\nSteps eliminate the complexity of multi-language systems by providing a unified programming model.\n\ud83d\udccaUnified Development Experience\nWrite, debug, and monitor all languages through a single interface and shared execution model.\n\u26a1Hot Reload Across Languages\nEdit any step in any language and see changes instantly across the entire pipeline.\n\ud83d\udd04Event-Driven Communication\nSteps communicate through events, enabling loose coupling and independent scaling.\n\ud83c\udfafSingle Deployment Model\nDeploy all languages together as a cohesive system, not as separate microservices.\n\ud83d\udc0dPython Step Naming\nPython steps use the_step.pysuffix convention for proper module resolution (e.g.,simple-python_step.py).\n_step.py\nsimple-python_step.py\nTrying It Out\nReady to build your first multi-language Motia application? Let's get it running.\nCreate Your Motia App\nStart by creating a new Motia project with the interactive setup.\nnpxmotia@latestcreate\nnpxmotia@latestcreate\nNavigate and Start Development\nMove into your project directory and start the development server.\ncdmy-app# Replace with your project namenpmrundev\ncdmy-app# Replace with your project namenpmrundev\nOpen the Workbench\nNavigate tohttp://localhost:3000to access the Workbench and run your workflow.\nhttp://localhost:3000\nTest the Multi-Language Pipeline\nSend a request to your API endpoint to see the multi-language workflow in action:\ncurl-XPOSThttp://localhost:3000/start-app\\-H\"Content-Type: application/json\"\\-d'{\"data\": {\"test\": \"value\"}, \"message\": \"Hello!\"}'\ncurl-XPOSThttp://localhost:3000/start-app\\-H\"Content-Type: application/json\"\\-d'{\"data\": {\"test\": \"value\"}, \"message\": \"Hello!\"}'\nWatch in the Workbench as your data flows through:\nTypeScriptvalidation and event emission\nTypeScriptbridge processing and forwarding\nPythondata processing with rich logging\nTypeScriptnotification handling\nTypeScriptfinalization and aggregation\nJavaScriptsummary generation and metrics\n\ud83d\udcbb Dive into the Code\nWant to explore multi-language workflows further? Check out additional examples and the complete source code:\nMulti-Language Examples\nAccess complete multi-language implementations, configuration examples, and learn how to integrate TypeScript, Python, and JavaScript in production applications.\nExplore Examples\nQuick Start \u2192\nConclusion: The Power of Unification Through Steps\nThis multi"
}
================================================================================
{
    "source_page": "Multi-Language Processing",
    "source_url": "https://www.motia.dev/docs/examples/multi-language-data-processing =====",
    "chunk_topic": "Multi-Language Processing",
    "chunk_id": "Multi-Language Processing (Part 5)",
    "text": " source code:\nMulti-Language Examples\nAccess complete multi-language implementations, configuration examples, and learn how to integrate TypeScript, Python, and JavaScript in production applications.\nExplore Examples\nQuick Start \u2192\nConclusion: The Power of Unification Through Steps\nThis multi-language data processing pipeline demonstrates howstepsfundamentally change multi-language development. By providing a single primitive that works across TypeScript, Python, and JavaScript, we've eliminated the traditional complexity of polyglot architectures.\nThe step primitive enables true unification:\nUniversal Pattern- Every step, regardless of language, follows the same receive-process-emit pattern\nSeamless Integration- Add Ruby, Go, Rust, or any language using the same step abstraction\nUnified Deployment- All languages deploy together as a single, coherent system\nShared Development Model- Write, debug, and monitor everything through the same interface\nKey benefits of step-based unification:\nSingle Mental Model- Learn the step pattern once, apply it to any language\nCohesive System- All components work together as parts of one application, not separate services\nConsistent Experience- Development, debugging, and monitoring work the same way across all languages\nNatural Scaling- Each step can scale independently while maintaining system coherence\nExtend your pipeline with more steps:\nAdd specialized processing steps for different data types and business logic\nIntegrate machine learning workflows with Python steps for AI processing\nBuild real-time analytics with streaming steps for live data processing\nConnect to enterprise systems through database and API integration steps\nImplement scheduled processing with cron steps for batch operations\nThestep primitivemakes all extensions natural and straightforward\u2014every new capability follows the same unified pattern.\nReady to unify your multi-language systems? Start building with steps today!\nSentiment Analysis\nDynamic Workflows: Building a Sentiment Analyzer with Motia\nAI Content Moderation\nIntelligent Content Moderation: Building Human-in-the-Loop Systems with Motia\nOn this page"
}
================================================================================
{
    "source_page": "AI Content Moderation",
    "source_url": "https://www.motia.dev/docs/examples/ai-content-moderation =====",
    "chunk_topic": "AI Content Moderation",
    "chunk_id": "AI Content Moderation (Part 1)",
    "text": "AI Content Moderation\nIntelligent Content Moderation: Building Human-in-the-Loop Systems with Motia\nIn today's digital landscape, content moderation is crucial for maintaining safe and appropriate user experiences. Whether you're building a social platform, forum, or any user-generated content system, you need intelligent moderation that can scale with your user base while maintaining human oversight for complex decisions.\nThis comprehensive guide explores how to build a production-ready content moderation system using Motia's event-driven architecture. We'll cover:\nAI-Powered Analysis: Using OpenAI for text toxicity detection and image safety analysis\nConfidence-Based Routing: Automatically handling clear cases while flagging uncertain content for human review\nSlack Integration: Creating interactive moderation workflows within existing team communication tools\nHuman-in-the-Loop: Seamlessly integrating human decision-making into automated processes\nLet's build a content moderation system that scales intelligently.\nThe Power of Intelligent Content Moderation\nAt its core, our content moderation system solves a fundamental challenge: how do you efficiently moderate user-generated content at scale while maintaining human oversight for complex decisions? Traditional approaches often involve either fully manual processes that don't scale or fully automated systems that lack nuance.\nOur Motia-powered solution combines the best of both worlds through intelligent routing:\nOpenAI Integration: Advanced AI analysis for text toxicity and image safety detection\nConfidence-Based Routing: Automatic handling of clear cases, human review for uncertain content\nSlack Integration: Interactive moderation workflows within existing team communication tools\nMotia Framework: Event-driven orchestration with built-in state management and error handling\nInstead of a monolithic moderation system, we get a flexible architecture where each component can be scaled, modified, or replaced independently.\nThe Anatomy of Our Content Moderation System\nOur application consists of six specialized steps, each handling a specific part of the moderation workflow. Let's explore the complete architecture.\nThe entry point for content moderation. This API endpoint receives user-generated content (text and/or images) and initiates the moderation workflow.\nimport{ z }from\"zod\";import{ ApiRouteConfig, Handlers }from\"motia\";constContentSubmitInputSchema=z.object({text: z.string().optional(),imageUrl: z.string().optional(),userId: z.string(),platform: z.string(),});exportconstconfig:ApiRouteConfig={type:\"api\",name:\"ContentSubmitAPI\",description:\"Receives user-generated content for moderation\",path:\"/content/submit\",method:\"POST\",bodySchema:"
}
================================================================================
{
    "source_page": "AI Content Moderation",
    "source_url": "https://www.motia.dev/docs/examples/ai-content-moderation =====",
    "chunk_topic": "AI Content Moderation",
    "chunk_id": "AI Content Moderation (Part 2)",
    "text": "(),platform: z.string(),});exportconstconfig:ApiRouteConfig={type:\"api\",name:\"ContentSubmitAPI\",description:\"Receives user-generated content for moderation\",path:\"/content/submit\",method:\"POST\",bodySchema: ContentSubmitInputSchema,emits: [\"content.submitted\"],flows: [\"content-moderation\"],};exportconsthandler:Handlers[\"ContentSubmitAPI\"]=async(req,{logger,emit})=>{const{text,imageUrl,userId,platform}=req.body;constsubmissionId=`sub_${Date.now()}_${Math.random().toString(36).slice(2,11)}`;logger.info(`Content submitted for moderation`, {submissionId,hasText:!!text,hasImage:!!imageUrl,userId,platform,});awaitemit({topic:\"content.submitted\",data: {submissionId,text,imageUrl,userId,platform,timestamp:newDate().toISOString(),},});return{status:200,body: {message:\"Content submitted for moderation\",submissionId,},};};\nimport{ z }from\"zod\";import{ ApiRouteConfig, Handlers }from\"motia\";constContentSubmitInputSchema=z.object({text: z.string().optional(),imageUrl: z.string().optional(),userId: z.string(),platform: z.string(),});exportconstconfig:ApiRouteConfig={type:\"api\",name:\"ContentSubmitAPI\",description:\"Receives user-generated content for moderation\",path:\"/content/submit\",method:\"POST\",bodySchema: ContentSubmitInputSchema,emits: [\"content.submitted\"],flows: [\"content-moderation\"],};exportconsthandler:Handlers[\"ContentSubmitAPI\"]=async(req,{logger,emit})=>{const{text,imageUrl,userId,platform}=req.body;constsubmissionId=`sub_${Date.now()}_${Math.random().toString(36).slice(2,11)}`;logger.info(`Content submitted for moderation`, {submissionId,hasText:!!text,hasImage:!!imageUrl,userId,platform,});awaitemit({topic:\"content.submitted\",data: {submissionId,text,imageUrl,userId,platform,timestamp:newDate().toISOString(),},});return{status:200,body: {message:\"Content submitted for moderation\",submissionId,},};};\nExplore the Workbench\nThe Motia Workbench provides a visual representation of your content moderation pipeline, making it easy to understand the flow and monitor moderation decisions in real-time"
}
================================================================================
{
    "source_page": "AI Content Moderation",
    "source_url": "https://www.motia.dev/docs/examples/ai-content-moderation =====",
    "chunk_topic": "AI Content Moderation",
    "chunk_id": "AI Content Moderation (Part 3)",
    "text": ",body: {message:\"Content submitted for moderation\",submissionId,},};};\nExplore the Workbench\nThe Motia Workbench provides a visual representation of your content moderation pipeline, making it easy to understand the flow and monitor moderation decisions in real-time.\nYou can monitor real-time content analysis, view Slack notifications, and trace the execution of each moderation decision directly in the Workbench interface. This makes development and debugging significantly easier compared to traditional monolithic moderation systems.\nHuman-in-the-Loop Workflow Demo\nLet's see the complete human-in-the-loop process in action using a real example. We'll submit problematic content and watch it flow through the moderation pipeline.\nStep 1: Submit Content for Moderation\nSubmit the sample content that should trigger human review:\ncurl-XPOSThttp://localhost:3000/content/submit\\-H\"Content-Type: application/json\"\\-d'{\"text\": \"I hate this stupid garbage, it\\'scompletetrashandmakesmewanttohurtsomeone\",\"userId\": \"user456\",\"platform\": \"web\"}'\ncurl-XPOSThttp://localhost:3000/content/submit\\-H\"Content-Type: application/json\"\\-d'{\"text\": \"I hate this stupid garbage, it\\'scompletetrashandmakesmewanttohurtsomeone\",\"userId\": \"user456\",\"platform\": \"web\"}'\nStep 2: AI Analysis & Routing\nThe system will:\nAnalyze the contentusing OpenAI's GPT-4 for toxicity detection\nCalculate risk scoresbased on detected harmful content\nRoute for human reviewsince the content contains hate speech and violence references\nYou'll see logs like:\nContent submitted for moderation: submissionId=sub_123, hasText=true, userId=user456Starting content analysis: submissionId=sub_123, hasText=trueContent analysis completed: submissionId=sub_123, overallScore=0.87, textScore=0.87Content needs human review: submissionId=sub_123, overallScore=0.87\nContent submitted for moderation: submissionId=sub_123, hasText=true, userId=user456Starting content analysis: submissionId=sub_123, hasText=trueContent analysis completed: submissionId=sub_123, overallScore=0.87, textScore=0.87Content needs human review: submissionId=sub_123, overallScore=0.87\nStep 3: Slack Notification for Human Review\nThe system automatically sends an interactive"
}
================================================================================
{
    "source_page": "AI Content Moderation",
    "source_url": "https://www.motia.dev/docs/examples/ai-content-moderation =====",
    "chunk_topic": "AI Content Moderation",
    "chunk_id": "AI Content Moderation (Part 4)",
    "text": "_123, overallScore=0.87, textScore=0.87Content needs human review: submissionId=sub_123, overallScore=0.87\nStep 3: Slack Notification for Human Review\nThe system automatically sends an interactive message to your moderation team in Slack:\nThe Slack message includes:\nRisk score: 87% confidence of harmful content\nPriority level: HIGH (since score \u2265 70%)\nAI analysis: Detailed breakdown of detected issues\nInteractive buttons: Approve, Reject, or Escalate options\nStep 4: Human Decision & Execution\nWhen a moderator clicks a button in Slack:\nDecision is recordedwith moderator attribution\nContent is processedaccording to the decision\nUser is notifiedof the moderation outcome\nAudit trail is maintainedfor compliance\nThe complete workflow demonstrates how AI handles the initial analysis while humans provide the final judgment for nuanced decisions.\nKey Features & Benefits\n\ud83e\udd16AI-Powered Analysis\nAdvanced OpenAI integration for both text toxicity detection and image safety analysis with confidence scoring.\n\ud83c\udfafIntelligent Routing\nConfidence-based decision making that automatically handles clear cases while flagging uncertain content for human review.\n\ud83d\udcacSlack Integration\nInteractive moderation workflows within existing team communication tools - no custom dashboard required.\n\ud83d\udc65Human-in-the-Loop\nSeamless integration of human decision-making with approve/reject/escalate buttons and contextual information.\n\ud83d\udccaPriority-Based Routing\nContent is routed to different Slack channels based on risk level and urgency.\n\ud83d\udd12Security & Compliance\nBuilt-in signature verification, audit trails, and comprehensive logging for compliance requirements.\nGetting Started\nReady to build your own intelligent content moderation system? Here's how to set it up and run it.\n1. Install Dependencies\nInstall the necessary npm packages and set up the development environment.\nnpminstall\nnpminstall\n2. Configure Environment Variables\nCreate a.envfile with your API keys and Slack configuration:\n.env\n# Required: OpenAI API key for content analysisOPENAI_API_KEY=\"sk-...\"# Required: Slack bot configurationSLACK_BOT_TOKEN=\"xoxb-your-bot-token\"SLACK_SIGNING_SECRET=\"your-signing-secret\"# Required: Slack channels for different priority levelsSLACK_CHANNEL_MODERATION=\"C1234567890\"# Normal prioritySLACK_CHANNEL_URGENT=\"C0987654321\"# High prioritySLACK_CHANNEL_ESCALATED=\"C1122334455\"# Escalated content"
}
================================================================================
{
    "source_page": "AI Content Moderation",
    "source_url": "https://www.motia.dev/docs/examples/ai-content-moderation =====",
    "chunk_topic": "AI Content Moderation",
    "chunk_id": "AI Content Moderation (Part 5)",
    "text": " priority levelsSLACK_CHANNEL_MODERATION=\"C1234567890\"# Normal prioritySLACK_CHANNEL_URGENT=\"C0987654321\"# High prioritySLACK_CHANNEL_ESCALATED=\"C1122334455\"# Escalated content\n# Required: OpenAI API key for content analysisOPENAI_API_KEY=\"sk-...\"# Required: Slack bot configurationSLACK_BOT_TOKEN=\"xoxb-your-bot-token\"SLACK_SIGNING_SECRET=\"your-signing-secret\"# Required: Slack channels for different priority levelsSLACK_CHANNEL_MODERATION=\"C1234567890\"# Normal prioritySLACK_CHANNEL_URGENT=\"C0987654321\"# High prioritySLACK_CHANNEL_ESCALATED=\"C1122334455\"# Escalated content\n3. Set Up Slack Integration\nCreate a Slack app with the following permissions:chat:write- Send messages to channelschannels:read- Access channel information\nchat:write- Send messages to channels\nchat:write\nchannels:read- Access channel information\nchannels:read\nEnable Interactive Components and set webhook URL to:https://your-domain.com/slack/webhook\nhttps://your-domain.com/slack/webhook\nInstall the app to your workspace\nCopy the bot token and signing secret to your.envfile\n.env\n4. Run the Moderation System\nStart the Motia development server to begin processing content.\nnpmrundev\nnpmrundev\nAdvanced Configuration\nAdjusting Confidence Thresholds\nModify the decision thresholds in the content router step:\n// In 03-content-router.step.tsif(overallScore<=0.05) {decision=\"approved\";// Auto-approve threshold (5%)}elseif(overallScore>=0.95) {decision=\"rejected\";// Auto-reject threshold (95%)}else{decision=\"review\";// Human review range (5-95%)}\n// In 03-content-router.step.tsif(overallScore<=0.05) {decision=\"approved\";// Auto-approve threshold (5%)}elseif(overallScore>=0.95) {decision=\"rejected\";// Auto-reject threshold (95%)}else{decision=\"review\";// Human review range (5-95%)}\nCustom Channel Routing\nImplement custom routing logic based on content type or user behavior:\n// Route based on user history or content typeconstchannel=getChannelForContent(contentType, userHistory, riskScore);\n// Route based on user history or content typeconstchannel=getChannelForContent"
}
================================================================================
{
    "source_page": "AI Content Moderation",
    "source_url": "https://www.motia.dev/docs/examples/ai-content-moderation =====",
    "chunk_topic": "AI Content Moderation",
    "chunk_id": "AI Content Moderation (Part 6)",
    "text": " custom routing logic based on content type or user behavior:\n// Route based on user history or content typeconstchannel=getChannelForContent(contentType, userHistory, riskScore);\n// Route based on user history or content typeconstchannel=getChannelForContent(contentType, userHistory, riskScore);\nIntegration with External Systems\nExtend the action executor to integrate with your existing systems:\n// In 06-action-executor.step.tscase\"approved\":awaitpublishContent(submissionId);awaitnotifyUser(userId,\"Your content has been approved\");break;\n// In 06-action-executor.step.tscase\"approved\":awaitpublishContent(submissionId);awaitnotifyUser(userId,\"Your content has been approved\");break;\n\ud83d\udcbb Dive into the Code\nWant to explore the complete content moderation implementation? Check out the full source code, including all steps, Slack integration, and production-ready configuration:\nComplete Content Moderation System\nAccess the full implementation with AI analysis, Slack integration, and human-in-the-loop workflows.\nView Content Moderation Example\nMore Examples \u2192\nConclusion: Intelligent Content Moderation at Scale\nThis content moderation system demonstrates the power of combining AI analysis with human oversight in an event-driven architecture. By breaking down moderation into discrete, specialized components, we've created a system that's not only intelligent but also flexible and maintainable.\nThe human-in-the-loop approach means you can:\nScale efficiently: Automatically handle 80-90% of content while maintaining quality\nAdapt quickly: Adjust thresholds and routing logic without system changes\nMaintain oversight: Human moderators focus on complex cases that require judgment\nIntegrate seamlessly: Use existing team communication tools like Slack\nKey architectural benefits:\nIntelligent routing: Confidence-based decisions reduce human workload\nFlexible integration: Works with any team communication platform\nAudit compliance: Complete decision trails and moderator attribution\nScalable architecture: Each component can be scaled independently\nFrom here, you can extend the system by:\nAdding support for video content moderation\nImplementing custom AI models for specific content types\nBuilding analytics dashboards for moderation insights\nIntegrating with user management and content management systems\nAdding escalation policies and moderator workflows\nThe event-driven architecture makes all of these extensions straightforward to implement without disrupting the existing moderation pipeline.\nReady to build content moderation that scales with your platform? Start building with Motia today!\nMulti-Language Processing\nMulti-Language Data Processing: Building a Unified Pipeline with Motia\nRAG PDF Analyzer\nIntelligent Document Processing: Building a R"
}
================================================================================
{
    "source_page": "AI Content Moderation",
    "source_url": "https://www.motia.dev/docs/examples/ai-content-moderation =====",
    "chunk_topic": "AI Content Moderation",
    "chunk_id": "AI Content Moderation (Part 7)",
    "text": " pipeline.\nReady to build content moderation that scales with your platform? Start building with Motia today!\nMulti-Language Processing\nMulti-Language Data Processing: Building a Unified Pipeline with Motia\nRAG PDF Analyzer\nIntelligent Document Processing: Building a RAG System with Motia\nOn this page"
}
================================================================================
{
    "source_page": "RAG PDF Analyzer",
    "source_url": "https://www.motia.dev/docs/examples/rag-docling-weaviate =====",
    "chunk_topic": "RAG PDF Analyzer",
    "chunk_id": "RAG PDF Analyzer (Part 1)",
    "text": "RAG PDF Analyzer\nIntelligent Document Processing: Building a RAG System with Motia\nIn the era of AI-powered applications, the ability to extract insights from documents is crucial. Whether you're building a knowledge base, a research assistant, or a customer support system, you need to transform static PDFs into queryable, intelligent systems. This is where Retrieval-Augmented Generation (RAG) architecture shines, and where the Motia framework provides an elegant solution.\nThis comprehensive guide explores how to build a production-ready RAG system that intelligently processes PDFs and answers questions about their content. We'll cover:\nThe RAG Architecture: Understanding how document processing, vector storage, and AI generation work together.\nMotia's Event-Driven Approach: Howstepscreate a scalable, maintainable RAG pipeline.\nsteps\nBuilding the Workflow: A detailed walkthrough of our polyglot processing pipeline.\nAdvanced Features: Real-time progress tracking, error handling, and production considerations.\nHands-On Testing: How to ingest documents and query your knowledge base.\nLet's transform your documents into an intelligent AI assistant.\nThe Power of Intelligent Document Processing\nAt its core, our RAG agent solves a fundamental challenge: how do you make unstructured documents searchable and queryable by AI? Traditional approaches often involve complex, monolithic systems that are difficult to scale and maintain. Our Motia-powered solution breaks this down into discrete, event-driven steps that each handle a specific aspect of the pipeline.\nThe magic happens through the integration of three powerful technologies:\nDocling: Advanced PDF parsing with intelligent chunking that preserves document structure\nWeaviate: Cloud-native vector database with built-in OpenAI integration\nMotia: Event-driven framework that orchestrates the entire pipeline\nInstead of a brittle, tightly-coupled system, we get a resilient architecture where each component can be scaled, modified, or replaced independently.\nThe Anatomy of Our RAG Pipeline\nOur application consists of seven specialized steps, each handling a specific part of the document processing and querying workflow. Let's explore the complete architecture.\nThe entry point for document ingestion. This API endpoint receives a folder path, kicks off the processing pipeline, and returns immediately with a tracking ID for real-time progress monitoring.\nimport{ Handlers }from'motia'import{ z }from'zod'import{ v4asuuidv4 }from'uuid'exportconstconfig={type:'api',name:'api-process-pdfs',description:'API endpoint to"
}
================================================================================
{
    "source_page": "RAG PDF Analyzer",
    "source_url": "https://www.motia.dev/docs/examples/rag-docling-weaviate =====",
    "chunk_topic": "RAG PDF Analyzer",
    "chunk_id": "RAG PDF Analyzer (Part 2)",
    "text": "{ Handlers }from'motia'import{ z }from'zod'import{ v4asuuidv4 }from'uuid'exportconstconfig={type:'api',name:'api-process-pdfs',description:'API endpoint to start PDF processing pipeline',path:'/api/rag/process-pdfs',method:'POST',emits: ['rag.read.pdfs'],bodySchema: z.object({folderPath: z.string().min(1,'folderPath is required'),}),flows: ['rag-workflow'],}asconstexportconsthandler:Handlers['api-process-pdfs']=async(req, {emit,logger})=>{const{folderPath}=req.bodyconststreamId=uuidv4()logger.info('Starting PDF processing pipeline', { folderPath, streamId })// Emit event to start the processing chainawaitemit({topic:'rag.read.pdfs',data: { folderPath, streamId },})return{status:200,body: {message:'PDF processing started',streamId,status:'processing'},}}\nimport{ Handlers }from'motia'import{ z }from'zod'import{ v4asuuidv4 }from'uuid'exportconstconfig={type:'api',name:'api-process-pdfs',description:'API endpoint to start PDF processing pipeline',path:'/api/rag/process-pdfs',method:'POST',emits: ['rag.read.pdfs'],bodySchema: z.object({folderPath: z.string().min(1,'folderPath is required'),}),flows: ['rag-workflow'],}asconstexportconsthandler:Handlers['api-process-pdfs']=async(req, {emit,logger})=>{const{folderPath}=req.bodyconststreamId=uuidv4()logger.info('Starting PDF processing pipeline', { folderPath, streamId })// Emit event to start the processing chainawaitemit({topic:'rag.read.pdfs',data: { folderPath, streamId },})return{status:200,body: {message:'PDF processing started',streamId,status:'processing'},}}\nExplore the Workbench\nThe Motia Workbench provides a visual representation of your RAG pipeline, making it easy to understand the flow and debug any issues.\nYou can monitor real-time processing, view logs, and trace the execution of each step directly in the Workbench interface. This makes development and debugging significantly easier compared to traditional monolithic approaches.\nKey Features & Benefits\n\ud83d\ude80Event"
}
================================================================================
{
    "source_page": "RAG PDF Analyzer",
    "source_url": "https://www.motia.dev/docs/examples/rag-docling-weaviate =====",
    "chunk_topic": "RAG PDF Analyzer",
    "chunk_id": "RAG PDF Analyzer (Part 3)",
    "text": " any issues.\nYou can monitor real-time processing, view logs, and trace the execution of each step directly in the Workbench interface. This makes development and debugging significantly easier compared to traditional monolithic approaches.\nKey Features & Benefits\n\ud83d\ude80Event-Driven Architecture\nEach step is independent and communicates through events, making the system highly scalable and maintainable.\n\ud83e\udde0Intelligent Document Processing\nDocling's hybrid chunking preserves document structure while creating optimal chunks for embedding.\n\u26a1High-Performance Vector Search\nWeaviate's cloud-native architecture provides fast, scalable similarity search with built-in OpenAI integration.\n\ud83d\udd04Real-Time Progress Tracking\nMonitor document processing progress with detailed logging and status updates.\n\ud83c\udf10Polyglot Support\nSeamlessly combine Python (Docling) and TypeScript (orchestration) in a single workflow.\n\ud83d\udee1\ufe0fProduction-Ready\nBuilt-in error handling, batch processing, and resource cleanup ensure reliability.\nTrying It Out\nReady to build your own intelligent document assistant? Let's get the system running.\nInstall Dependencies\nInstall both Node.js and Python dependencies. The prepare script automatically sets up the Python virtual environment.\nnpminstall\nnpminstall\nSet Your Environment Variables\nYou'll need API keys for OpenAI and Weaviate Cloud. Create a.envfile:\n.env\nOPENAI_API_KEY=\"sk-...\"WEAVIATE_URL=\"https://your-cluster.weaviate.network\"WEAVIATE_API_KEY=\"your-weaviate-api-key\"\nOPENAI_API_KEY=\"sk-...\"WEAVIATE_URL=\"https://your-cluster.weaviate.network\"WEAVIATE_API_KEY=\"your-weaviate-api-key\"\nRun the Project\nStart the Motia development server to begin processing documents.\nnpmrundev\nnpmrundev\nProcess Your First Documents\nAdd some PDF files to thedocs/pdfs/folder, then start the ingestion pipeline:\ndocs/pdfs/\ncurl-XPOSThttp://localhost:3000/api/rag/process-pdfs\\-H\"Content-Type: application/json\"\\-d'{\"folderPath\":\"docs/pdfs\"}'\ncurl-XPOSThttp://localhost:3000/api/rag/process-pdfs\\-H\"Content-Type: application/json\"\\-d'{\"folderPath\":\"docs/pdfs\"}'\nWatch the logs as your documents are processed through the pipeline:\nPDF Reading: Files are discovered and queued\nDocling Processing: Intelligent chunking with structure"
}
================================================================================
{
    "source_page": "RAG PDF Analyzer",
    "source_url": "https://www.motia.dev/docs/examples/rag-docling-weaviate =====",
    "chunk_topic": "RAG PDF Analyzer",
    "chunk_id": "RAG PDF Analyzer (Part 4)",
    "text": "H\"Content-Type: application/json\"\\-d'{\"folderPath\":\"docs/pdfs\"}'\nWatch the logs as your documents are processed through the pipeline:\nPDF Reading: Files are discovered and queued\nDocling Processing: Intelligent chunking with structure preservation\nWeaviate Loading: Chunks are embedded and stored\nQuery Your Knowledge Base\nOnce processing is complete, you can ask questions about your documents:\ncurl-XPOSThttp://localhost:3000/api/rag/query\\-H\"Content-Type: application/json\"\\-d'{\"query\":\"What are the main topics covered in these documents?\",\"limit\":3}'\ncurl-XPOSThttp://localhost:3000/api/rag/query\\-H\"Content-Type: application/json\"\\-d'{\"query\":\"What are the main topics covered in these documents?\",\"limit\":3}'\ncurl-XPOSThttp://localhost:3000/api/rag/query\\-H\"Content-Type: application/json\"\\-d'{\"query\":\"What methodology was used in the research?\",\"limit\":5}'\ncurl-XPOSThttp://localhost:3000/api/rag/query\\-H\"Content-Type: application/json\"\\-d'{\"query\":\"What methodology was used in the research?\",\"limit\":5}'\nThe response includes both a generated answer and the source chunks with page numbers for verification.\nAdvanced Usage\nCustom Chunking Strategies\nModify the Python processing step to implement custom chunking logic:\n# In process-pdfs.step.pychunker=HybridChunker(tokenizer=\"cl100k_base\",max_tokens=1024,# Larger chunks for more contextoverlap_tokens=100,# More overlap for better continuityheading_hierarchies=True,split_by_page=True# Preserve page boundaries)\n# In process-pdfs.step.pychunker=HybridChunker(tokenizer=\"cl100k_base\",max_tokens=1024,# Larger chunks for more contextoverlap_tokens=100,# More overlap for better continuityheading_hierarchies=True,split_by_page=True# Preserve page boundaries)\nBatch Processing Optimization\nAdjust batch sizes in the Weaviate loading step for optimal performance:\n// In load-weaviate.step.tsconstBATCH_SIZE=50// Smaller batches for large documents\n// In load-weaviate.step.tsconstBATCH_SIZE=50// Smaller batches for large documents\nMulti-Collection Support\nExtend the system to handle different document types by creating separate Weaviate collections:\nconstCOLLECTIONS={research:'ResearchPapers',manual"
}
================================================================================
{
    "source_page": "RAG PDF Analyzer",
    "source_url": "https://www.motia.dev/docs/examples/rag-docling-weaviate =====",
    "chunk_topic": "RAG PDF Analyzer",
    "chunk_id": "RAG PDF Analyzer (Part 5)",
    "text": "ate.step.tsconstBATCH_SIZE=50// Smaller batches for large documents\nMulti-Collection Support\nExtend the system to handle different document types by creating separate Weaviate collections:\nconstCOLLECTIONS={research:'ResearchPapers',manuals:'TechnicalManuals',reports:'BusinessReports'}\nconstCOLLECTIONS={research:'ResearchPapers',manuals:'TechnicalManuals',reports:'BusinessReports'}\nTroubleshooting\nCommon Issues\nENOENT Path Errors: The system automatically handles path normalization, but ensure yourfolderPathis relative to the project root.\nfolderPath\nEmpty Answers: Check that documents were successfully processed by examining the logs. Verify your OpenAI API key is valid.\nWeaviate Connection Issues: Ensure yourWEAVIATE_URLandWEAVIATE_API_KEYare correct and your cluster is running.\nWEAVIATE_URL\nWEAVIATE_API_KEY\nPerformance Tips\nDocument Size: For large PDFs, consider preprocessing to split them into smaller files\nBatch Size: Adjust the Weaviate batch size based on your cluster's capacity\nChunking Strategy: Experiment with different chunk sizes and overlap for your specific use case\n\ud83d\udcbb Dive into the Code\nWant to explore the complete RAG implementation? Check out the full source code, including all steps, configuration files, and setup instructions:\nComplete RAG Implementation\nAccess the full source code for this RAG agent, including Python processing scripts, TypeScript orchestration, and production configuration.\nView RAG Example\nMore Examples \u2192\nConclusion: The Future of Document Intelligence\nThis RAG system demonstrates the power of combining best-in-class technologies with Motia's event-driven architecture. By breaking down complex document processing into discrete, manageable steps, we've created a system that's not only powerful but also maintainable and scalable.\nThe polyglot nature of the solution: Python for document processing, TypeScript for orchestration, shows how Motia enables you to use the right tool for each job without sacrificing integration or maintainability.\nFrom here, you can extend the system by:\nAdding support for other document formats (Word, PowerPoint, etc.)\nImplementing document classification and routing\nAdding real-time document updates and synchronization\nBuilding a web interface for document management\nIntegrating with existing business systems\nThe event-driven architecture makes all of these extensions straightforward to implement without disrupting the existing pipeline.\nReady to transform your documents into intelligent, queryable knowledge bases? Start building with Motia today!\nAI Content"
}
================================================================================
{
    "source_page": "RAG PDF Analyzer",
    "source_url": "https://www.motia.dev/docs/examples/rag-docling-weaviate =====",
    "chunk_topic": "RAG PDF Analyzer",
    "chunk_id": "RAG PDF Analyzer (Part 6)",
    "text": " management\nIntegrating with existing business systems\nThe event-driven architecture makes all of these extensions straightforward to implement without disrupting the existing pipeline.\nReady to transform your documents into intelligent, queryable knowledge bases? Start building with Motia today!\nAI Content Moderation\nIntelligent Content Moderation: Building Human-in-the-Loop Systems with Motia\nTrello Automation\nBuild an automated card progression system for Trello boards with AI-powered summaries\nOn this page"
}
================================================================================
{
    "source_page": "Trello Automation",
    "source_url": "https://www.motia.dev/docs/examples/trello-automation =====",
    "chunk_topic": "Trello Automation",
    "chunk_id": "Trello Automation (Part 1)",
    "text": "Trello Automation\nBuild an automated card progression system for Trello boards with AI-powered summaries\nLet's build a Trello automation system that:\nAutomatically progresses cards across board lists\nValidates card completeness\nGenerates AI-powered summaries for code review\nIntegrates with Slack for notifications\nMonitors due dates and sends overdue alerts\nBoard Structure\nThe Trello board is organized into four main lists:\nNew Cards: Entry point for all new cards\nIn Progress: Active development stage\nNeeds Review: Code review stage with AI summaries\nCompleted: Successfully reviewed and approved cards\nThe Steps\nVisual Overview\nHere's how the automation flow works:\nCard Validation\u2192 Checks for required information\nProgress Tracking\u2192 Moves cards between lists\nReview Process\u2192 Generates AI summaries and notifies reviewers\nCompletion Handling\u2192 Processes approved cards\nTry It Out\nPrerequisites\nMake sure you have:\nTrello account with API access\nNode.js installed\nSlack workspace (for notifications)\nOpenAI API key (for AI summaries)\nClone the Repository\ngitclonegit@github.com:MotiaDev/motia-examples.gitcdexamples/trello-flow\ngitclonegit@github.com:MotiaDev/motia-examples.gitcdexamples/trello-flow\nInstall Dependencies\npnpminstall\npnpminstall\nConfigure Environment Variables\nCreate a.envfile by copying the example:\n.env\ncp.env.example.env\ncp.env.example.env\nUpdate your.envwith the following credentials:\n.env\nTRELLO_API_KEY=your_trello_api_keyTRELLO_TOKEN=your_trello_tokenOPENAI_API_KEY=your_openai_api_keyOPENAI_MODEL=your_openai_modelSLACK_WEBHOOK_URL=your_slack_webhook_urlTRELLO_NEW_TASKS_LIST_ID=your_new_tasks_list_idTRELLO_IN_PROGRESS_LIST_ID=your_in_progress_list_idTRELLO_NEEDS_REVIEW_LIST_ID=your_needs_review_list_idTRELLO_COMPLETED_LIST_ID=your_completed_list_id\nTRELLO_API_KEY=your_trello_api_keyTRELLO_TOKEN=your_trello_tokenOPENAI_API_KEY=your_openai_api_keyOPENAI_MODEL=your_openai_modelSLACK_WEBHOOK_URL=your_slack_webhook_urlTRELLO_NEW_TASKS_LIST_ID=your_new_tasks_list_idTRELLO_IN_PROGRESS_LIST_ID=your_in_progress_list_idTRELLO_NEEDS_REVIEW_LIST_ID=your_needs_review_list_idT"
}
================================================================================
{
    "source_page": "Trello Automation",
    "source_url": "https://www.motia.dev/docs/examples/trello-automation =====",
    "chunk_topic": "Trello Automation",
    "chunk_id": "Trello Automation (Part 2)",
    "text": "your_slack_webhook_urlTRELLO_NEW_TASKS_LIST_ID=your_new_tasks_list_idTRELLO_IN_PROGRESS_LIST_ID=your_in_progress_list_idTRELLO_NEEDS_REVIEW_LIST_ID=your_needs_review_list_idTRELLO_COMPLETED_LIST_ID=your_completed_list_id\nSet Up Trello Board\nCreate a new Trello board with these lists:New TasksIn ProgressNeeds ReviewCompleted\nCreate a new Trello board with these lists:\nNew Tasks\nIn Progress\nNeeds Review\nCompleted\nAdd a custom field:Status (dropdown: Todo, In Progress, Done)\nAdd a custom field:\nStatus (dropdown: Todo, In Progress, Done)\nRun the Application\npnpmdev\npnpmdev\nTest the Flow\nCreate a new card in the \"New Tasks\" list\nAssign a member to see it move to \"In Progress\"\nAdd an \"approved\" comment to see it move to \"Completed\"\nCheck Slack for notifications\nFor more detailed setup instructions and configuration options, check out thefull\ndocumentation.\nRAG PDF Analyzer\nIntelligent Document Processing: Building a RAG System with Motia\nUptime Monitor\nReal-Time Uptime Monitoring: Building a Resilient Website Monitor with Motia\nOn this page"
}
================================================================================
{
    "source_page": "Uptime Monitor",
    "source_url": "https://www.motia.dev/docs/examples/uptime-discord-monitor =====",
    "chunk_topic": "Uptime Monitor",
    "chunk_id": "Uptime Monitor (Part 1)",
    "text": "Uptime Monitor\nReal-Time Uptime Monitoring: Building a Resilient Website Monitor with Motia\nIn today's modern era, website uptime is critical for business success. Whether you're monitoring a personal blog or enterprise applications, you need a reliable system that can detect outages, send alerts, and provide visibility into your site's health. Traditional monitoring solutions often involve complex infrastructure and vendor lock-in, but there's a better way.\nThis comprehensive guide explores how to build a production-ready uptime monitoring system using Motia's event-driven architecture. We'll cover:\nEvent-Driven Monitoring: How Motia'sstepscreate a scalable, maintainable monitoring pipeline.\nsteps\nBuilding the Architecture: A detailed walkthrough of our five-component monitoring system.\nSmart Alerting: Implementing rate limiting and status change detection to prevent spam.\nLet's build a monitoring system that actually works for you.\nThe Power of Event-Driven Monitoring\nAt its core, our uptime monitoring system solves a fundamental challenge: how do you continuously monitor multiple websites without creating a brittle, monolithic application? Traditional monitoring tools often suffer from tight coupling, making them difficult to scale and customize. Our Motia-powered solution breaks this down into discrete, event-driven components that each handle a specific aspect of monitoring.\nThe magic happens through the integration of proven technologies and patterns:\nCron-Based Scheduling: Configurable check intervals using familiar cron expressions\nDiscord Webhooks: Instant notifications with rich formatting\nToken Bucket Rate Limiting: Intelligent alert throttling to prevent spam\nMotia Framework: Event-driven orchestration with built-in observability\nInstead of a monolithic monitoring daemon, we get a resilient architecture where each component can be scaled, modified, or replaced independently.\nThe Anatomy of Our Monitoring System\nOur application consists of five specialized steps, each handling a specific part of the monitoring workflow. Let's explore the complete architecture.\nThe heartbeat of our monitoring system. This cron-triggered step periodically emits check requests for all configured websites, acting as the central scheduler.\nimport{ configasenvConfig }from'../lib/env.js';exportconstconfig={type:'cron',name:'UptimeCronTrigger',cron: envConfig.cron,emits: ['check.requested'],flows: ['uptime-monitoring']};exportasyncfunctionhandler(context) {context.logger.info(`Starting uptime checks for ${envConfig.sites.length} sites`);context.logger.info(`Sites configured: ${JSON.stringify(envConfig.sites)}`);try"
}
================================================================================
{
    "source_page": "Uptime Monitor",
    "source_url": "https://www.motia.dev/docs/examples/uptime-discord-monitor =====",
    "chunk_topic": "Uptime Monitor",
    "chunk_id": "Uptime Monitor (Part 2)",
    "text": ": ['uptime-monitoring']};exportasyncfunctionhandler(context) {context.logger.info(`Starting uptime checks for ${envConfig.sites.length} sites`);context.logger.info(`Sites configured: ${JSON.stringify(envConfig.sites)}`);try{// Emit one check.requested event per configured site URLfor(consturlofenvConfig.sites) {context.logger.info(`Scheduling check for: ${url}`);awaitcontext.emit({topic:'check.requested',data: { url: url }});context.logger.info(`Successfully emitted for: ${url}`);}context.logger.info(`Successfully scheduled checks for all ${envConfig.sites.length} sites`);}catch(error) {context.logger.error('Error during cron execution:', error);throwerror;}}\nimport{ configasenvConfig }from'../lib/env.js';exportconstconfig={type:'cron',name:'UptimeCronTrigger',cron: envConfig.cron,emits: ['check.requested'],flows: ['uptime-monitoring']};exportasyncfunctionhandler(context) {context.logger.info(`Starting uptime checks for ${envConfig.sites.length} sites`);context.logger.info(`Sites configured: ${JSON.stringify(envConfig.sites)}`);try{// Emit one check.requested event per configured site URLfor(consturlofenvConfig.sites) {context.logger.info(`Scheduling check for: ${url}`);awaitcontext.emit({topic:'check.requested',data: { url: url }});context.logger.info(`Successfully emitted for: ${url}`);}context.logger.info(`Successfully scheduled checks for all ${envConfig.sites.length} sites`);}catch(error) {context.logger.error('Error during cron execution:', error);throwerror;}}\nExplore the Workbench\nThe Motia Workbench provides a visual representation of your monitoring pipeline, making it easy to understand the event flow and debug issues in real-time.\nYou can monitor real-time status checks, view Discord alert logs, and trace the execution of each step directly in the Workbench interface. This makes development and debugging significantly easier compared to traditional monitoring solutions.\nKey Features & Benefits\n\u26a1Event-Driven Architecture\nEach component is independent and communicates through events, making the system highly scalable and maintainable.\n\ud83c\udfafSmart Status Detection\nOnly triggers alerts when status actually changes (UP \u2194 DOWN), eliminating noise from temporary fluctuations.\n\ud83d\udea8Intelligent Rate Limiting\nToken bucket algorithm prevents alert spam during site fl"
}
================================================================================
{
    "source_page": "Uptime Monitor",
    "source_url": "https://www.motia.dev/docs/examples/uptime-discord-monitor =====",
    "chunk_topic": "Uptime Monitor",
    "chunk_id": "Uptime Monitor (Part 3)",
    "text": " system highly scalable and maintainable.\n\ud83c\udfafSmart Status Detection\nOnly triggers alerts when status actually changes (UP \u2194 DOWN), eliminating noise from temporary fluctuations.\n\ud83d\udea8Intelligent Rate Limiting\nToken bucket algorithm prevents alert spam during site flapping while ensuring critical alerts get through.\n\ud83d\udccaBuilt-in Observability\nComprehensive logging, health checks, and real-time status tracking with persistent storage.\n\ud83d\udd27Production-Ready\nRobust error handling, timeout management, and configurable check intervals ensure reliability.\n\ud83c\udfa8Rich Discord Alerts\nBeautiful embedded messages with response times, error details, and status transitions.\nData Flow & Event Architecture\nEvent Flow\nCron Trigger\u2192 Emitscheck.requestedevents for each configured site\ncheck.requested\nWebsite Checker\u2192 Receivescheck.requested, performs HTTP check\ncheck.requested\nStatus Update\u2192 Checker emitscheck.resultwith result\ncheck.result\nAlert Processing\u2192 Alerter receivescheck.result, detects status changes\ncheck.result\nDiscord Notification\u2192 Alerter sends webhook if status changed and rate limit allows\nStatus Storage\u2192 Status is persisted for health endpoint and future comparisons\nTrying It Out\nReady to build your own production-ready monitoring system? Let's get it running.\nInstall Dependencies\nInstall the necessary npm packages and set up the development environment.\nnpminstall\nnpminstall\nConfigure Environment Variables\nCreate a.envfile with your monitoring configuration. You'll need a Discord webhook URL and the sites you want to monitor.\n.env\n# Required: Discord webhook for alertsDISCORD_WEBHOOK=\"https://discord.com/api/webhooks/123456789/your-webhook-token\"# Required: JSON array of URLs to monitorSITES='[\"https://example.com\", \"https://api.yourdomain.com\", \"https://blog.yoursite.org\"]'# Optional: Check frequency (default: every minute)CHECK_INTERVAL_CRON=\"*/1 * * * *\"# Optional: Rate limiting (default: 3 alerts per 5 minutes)ALERT_BURST=\"3\"ALERT_WINDOW_SEC=\"300\"\n# Required: Discord webhook for alertsDISCORD_WEBHOOK=\"https://discord.com/api/webhooks/123456789/your-webhook-token\"# Required: JSON array of URLs to monitorSITES='[\"https://example.com\", \"https://api.yourdomain.com\", \"https://blog.yoursite.org\"]'# Optional: Check frequency (default: every minute)CHECK_INTERVAL_CR"
}
================================================================================
{
    "source_page": "Uptime Monitor",
    "source_url": "https://www.motia.dev/docs/examples/uptime-discord-monitor =====",
    "chunk_topic": "Uptime Monitor",
    "chunk_id": "Uptime Monitor (Part 4)",
    "text": "\"# Required: JSON array of URLs to monitorSITES='[\"https://example.com\", \"https://api.yourdomain.com\", \"https://blog.yoursite.org\"]'# Optional: Check frequency (default: every minute)CHECK_INTERVAL_CRON=\"*/1 * * * *\"# Optional: Rate limiting (default: 3 alerts per 5 minutes)ALERT_BURST=\"3\"ALERT_WINDOW_SEC=\"300\"\nSet Up Discord Webhook\nCreate a Discord webhook to receive alerts:\nGo to your Discord server settings\nNavigate toIntegrations\u2192Webhooks\nClickNew Webhook\nCopy the webhook URL and add it to your.envfile\n.env\nRun the Monitoring System\nStart the Motia development server to begin monitoring your websites.\nnpmrundev\nnpmrundev\nCheck System Health\nVerify your monitoring system is working correctly:\ncurlhttp://localhost:3000/healthz\ncurlhttp://localhost:3000/healthz\nYou should see a response with your configured sites and their current status:\n{\"status\":\"ok\",\"sitesConfigured\":3,\"lastKnown\": {\"https://example.com\": {\"url\":\"https://example.com\",\"status\":\"UP\",\"code\":200,\"responseTime\":245,\"checkedAt\":\"2024-01-15T10:30:00.000Z\",\"error\":null}},\"now\":\"2024-01-15T10:35:00.000Z\"}\n{\"status\":\"ok\",\"sitesConfigured\":3,\"lastKnown\": {\"https://example.com\": {\"url\":\"https://example.com\",\"status\":\"UP\",\"code\":200,\"responseTime\":245,\"checkedAt\":\"2024-01-15T10:30:00.000Z\",\"error\":null}},\"now\":\"2024-01-15T10:35:00.000Z\"}\nMonitor the Logs\nWatch the logs to see your monitoring system in action:\nCron triggers: Check scheduling for all configured sites\nWebsite checks: HTTP requests and response analysis\nStatus changes: UP/DOWN transitions and Discord alerts\nRate limiting: Alert suppression during site flapping\nAdvanced Configuration\nCustom Check Intervals\nModify the cron expression to change monitoring frequency:\n# Every 5 minutesCHECK_INTERVAL_CRON=\"*/5 * * * *\"# Every hourCHECK_INTERVAL_CRON=\"0 * * * *\"# Every 6 hoursCHECK_INTERVAL_CRON=\"0 */6 * * *\"# Business hours"
}
================================================================================
{
    "source_page": "Uptime Monitor",
    "source_url": "https://www.motia.dev/docs/examples/uptime-discord-monitor =====",
    "chunk_topic": "Uptime Monitor",
    "chunk_id": "Uptime Monitor (Part 5)",
    "text": " frequency:\n# Every 5 minutesCHECK_INTERVAL_CRON=\"*/5 * * * *\"# Every hourCHECK_INTERVAL_CRON=\"0 * * * *\"# Every 6 hoursCHECK_INTERVAL_CRON=\"0 */6 * * *\"# Business hours only (9 AM - 5 PM, Mon-Fri)CHECK_INTERVAL_CRON=\"* 9-17 * * 1-5\"\n# Every 5 minutesCHECK_INTERVAL_CRON=\"*/5 * * * *\"# Every hourCHECK_INTERVAL_CRON=\"0 * * * *\"# Every 6 hoursCHECK_INTERVAL_CRON=\"0 */6 * * *\"# Business hours only (9 AM - 5 PM, Mon-Fri)CHECK_INTERVAL_CRON=\"* 9-17 * * 1-5\"\nAlert Rate Limiting\nFine-tune the rate limiting to match your needs:\n# Very strict: 1 alert per 10 minutesALERT_BURST=\"1\"ALERT_WINDOW_SEC=\"600\"# More permissive: 5 alerts per 2 minutesALERT_BURST=\"5\"ALERT_WINDOW_SEC=\"120\"\n# Very strict: 1 alert per 10 minutesALERT_BURST=\"1\"ALERT_WINDOW_SEC=\"600\"# More permissive: 5 alerts per 2 minutesALERT_BURST=\"5\"ALERT_WINDOW_SEC=\"120\"\nMulti-Environment Monitoring\nSet up different monitoring configurations for different environments:\n# Production sitesSITES='[\"https://app.production.com\", \"https://api.production.com\"]'# Staging sitesSITES='[\"https://app.staging.com\", \"https://api.staging.com\"]'# Development sitesSITES='[\"https://app.dev.com\", \"http://localhost:8080\"]'\n# Production sitesSITES='[\"https://app.production.com\", \"https://api.production.com\"]'# Staging sitesSITES='[\"https://app.staging.com\", \"https://api.staging.com\"]'# Development sitesSITES='[\"https://app.dev.com\", \"http://localhost:8080\"]'\nCustom Discord Alert Formatting\nModify thecreateDiscordMessagefunction inalerter.step.jsto customize alert appearance:\ncreateDiscordMessage\nalerter.step.js\nfunctioncreateDiscordMessage(result,previousStatus) {const{url,status,code,responseTime}=result// Custom colors for your brandconstcolor=status==='UP'?0x2ecc71:0xe74c3c//"
}
================================================================================
{
    "source_page": "Uptime Monitor",
    "source_url": "https://www.motia.dev/docs/examples/uptime-discord-monitor =====",
    "chunk_topic": "Uptime Monitor",
    "chunk_id": "Uptime Monitor (Part 6)",
    "text": "ter.step.js\nfunctioncreateDiscordMessage(result,previousStatus) {const{url,status,code,responseTime}=result// Custom colors for your brandconstcolor=status==='UP'?0x2ecc71:0xe74c3c// Custom emoji and formattingconstemoji=status==='UP'?'\u2705':'\u274c'consturgency=responseTime>5000?'\ud83d\udc0c SLOW':'\u26a1 FAST'return{content:`${emoji} **${url}** is ${status}`,embeds: [{title:`${urgency} Website ${status}`,description:`**${url}** changed from ${previousStatus} to ${status}`,color,timestamp: result.checkedAt,fields: [{name:'\u23f1\ufe0f Response Time',value:`${responseTime}ms`,inline:true},{name:'\ud83d\udcca Status Code',value: code?.toString()||'N/A',inline:true}]}]}}\nfunctioncreateDiscordMessage(result,previousStatus) {const{url,status,code,responseTime}=result// Custom colors for your brandconstcolor=status==='UP'?0x2ecc71:0xe74c3c// Custom emoji and formattingconstemoji=status==='UP'?'\u2705':'\u274c'consturgency=responseTime>5000?'\ud83d\udc0c SLOW':'\u26a1 FAST'return{content:`${emoji} **${url}** is ${status}`,embeds: [{title:`${urgency} Website ${status}`,description:`**${url}** changed from ${previousStatus} to ${status}`,color,timestamp: result.checkedAt,fields: [{name:'\u23f1\ufe0f Response Time',value:`${responseTime}ms`,inline:true},{name:'\ud83d\udcca Status Code',value: code?.toString()||'N/A',inline:true}]}]}}\nTroubleshooting\nCommon Issues\nSites not being checked:\nVerifySITESenvironment variable is valid JSON\nSITES\nCheck cron expression syntax usingcrontab.guru\nReview logs for parsing errors\nDiscord alerts not working:\nVerifyDISCORD_WEBHOOKURL is correct\nDISCORD_WEBHOOK\nTest webhook manually:curl -X POST $DISCORD_WEBHOOK -H \"Content-Type: application/json\" -d '{\"content\":\"Test message\"}'\ncurl -X POST $DISCORD_WEBHOOK -H \"Content-Type: application/json\" -d '{\"content\":\"Test message\"}'\nCheck Discord webhook permissions\n"
}
================================================================================
{
    "source_page": "Uptime Monitor",
    "source_url": "https://www.motia.dev/docs/examples/uptime-discord-monitor =====",
    "chunk_topic": "Uptime Monitor",
    "chunk_id": "Uptime Monitor (Part 7)",
    "text": " -H \"Content-Type: application/json\" -d '{\"content\":\"Test message\"}'\ncurl -X POST $DISCORD_WEBHOOK -H \"Content-Type: application/json\" -d '{\"content\":\"Test message\"}'\nCheck Discord webhook permissions\nHigh memory usage:\nMonitor status store size with health endpoint\nConsider implementing status history cleanup\nReduce check frequency for many sites\nFalse positive alerts:\nIncrease timeout values in checker step\nImplement retry logic before marking as DOWN\nAdjust rate limiting to reduce noise\nPerformance Tips\nLarge Site Lists: Consider sharding across multiple instances\nSlow Sites: Implement custom timeout values per site\nHigh Frequency: Use Redis for status storage instead of file system\nAlert Fatigue: Implement escalation policies and alert grouping\nMonitoring the Monitor\nSet up monitoring for your monitoring system:\n# Monitor the health endpoint itselfcurl-fhttp://localhost:3000/healthz||echo\"Monitor is down!\"# Check for recent status updatescurlhttp://localhost:3000/healthz|jq'.lastKnown | to_entries | map(select(.value.checkedAt > (now - 300)))'# Verify all sites are being checkedcurlhttp://localhost:3000/healthz|jq'.sitesConfigured == (.lastKnown | length)'\n# Monitor the health endpoint itselfcurl-fhttp://localhost:3000/healthz||echo\"Monitor is down!\"# Check for recent status updatescurlhttp://localhost:3000/healthz|jq'.lastKnown | to_entries | map(select(.value.checkedAt > (now - 300)))'# Verify all sites are being checkedcurlhttp://localhost:3000/healthz|jq'.sitesConfigured == (.lastKnown | length)'\n\ud83d\udcbb Dive into the Code\nWant to explore the complete monitoring implementation? Check out the full source code, including all steps, utilities, and configuration examples:\nComplete Uptime Monitor\nAccess the full implementation with event steps, utility libraries, Discord integration, and production-ready configuration.\nView Monitor Example\nMore Examples \u2192\nConclusion: Monitoring That Actually Works\nThis uptime monitoring system demonstrates the power of event-driven architecture for infrastructure monitoring. By breaking down monitoring into discrete, specialized components, we've created a system that's not only reliable but also extensible and maintainable.\nThe event-driven approach means you can easily:\nAdd new notification channels(Slack, PagerDuty, email) by creating new steps\nImplement custom health checks(database connectivity, API endpoints, SSL certificates)\n"
}
================================================================================
{
    "source_page": "Uptime Monitor",
    "source_url": "https://www.motia.dev/docs/examples/uptime-discord-monitor =====",
    "chunk_topic": "Uptime Monitor",
    "chunk_id": "Uptime Monitor (Part 8)",
    "text": " reliable but also extensible and maintainable.\nThe event-driven approach means you can easily:\nAdd new notification channels(Slack, PagerDuty, email) by creating new steps\nImplement custom health checks(database connectivity, API endpoints, SSL certificates)\nScale monitoringacross multiple regions or environments\nIntegrate with existing systemswithout disrupting the core monitoring loop\nKey architectural benefits:\nResilience: Component failures don't bring down the entire system\nObservability: Built-in logging and tracing at every step\nFlexibility: Easy to modify check intervals, alert logic, or add new features\nTesting: Each component can be tested in isolation\nFrom here, you can extend the system by:\nAdding support for different check types (TCP, database, custom health endpoints)\nImplementing escalation policies and on-call rotations\nBuilding a web dashboard for historical data and trends\nAdding integration with incident management systems\nImplementing multi-region monitoring with failover\nThe event-driven architecture makes all of these extensions straightforward to implement without disrupting the existing monitoring pipeline.\nReady to build monitoring infrastructure that scales with your business? Start building with Motia today!\nTrello Automation\nBuild an automated card progression system for Trello boards with AI-powered summaries\nGitHub Stars Counter\nReal-Time GitHub Stars Counter: Building Live Updates with Motia Streams\nOn this page"
}
================================================================================
{
    "source_page": "GitHub Stars Counter",
    "source_url": "https://www.motia.dev/docs/examples/github-stars-counter =====",
    "chunk_topic": "GitHub Stars Counter",
    "chunk_id": "GitHub Stars Counter (Part 1)",
    "text": "GitHub Stars Counter\nReal-Time GitHub Stars Counter: Building Live Updates with Motia Streams\nIn today's social-driven development world, real-time metrics and live updates are essential for building engaging applications. Whether you're creating a portfolio site, an open-source project showcase, or a developer dashboard, you need systems that can display live data without complex infrastructure.\nThis comprehensive guide explores how to build a production-ready, real-time GitHub stars counter using Motia's event-driven architecture and streaming capabilities. We'll cover:\nReal-Time Streams: How Motia's streams enable effortless live data synchronization\nSecure Webhooks: Production-ready webhook signature verification and event handling\nMinimal Architecture: Building powerful real-time features with just two components\nLive Integration: How this exact counter powers the live star count on the Motia website\nLet's build a stars counter that updates in real-time across all connected clients.\n\ud83c\udfed Production-Grade Example\nThis is not a tutorial project- this is battle-tested, production-ready code that handles real traffic at scale. Every aspect has been designed for enterprise use:\n\ud83d\udd10 Enterprise Security: HMAC webhook verification, timing-safe comparisons, comprehensive input validation\n\u26a1 High Performance: Handles thousands of concurrent connections with automatic scaling\n\ud83d\udcca Full Observability: Structured logging, error tracking, and comprehensive monitoring\n\ud83d\udee1\ufe0f Error Resilience: Graceful degradation, retry logic, and fault tolerance\n\ud83c\udf0d Global Scale: Production deployment on Motia Cloud with worldwide CDN\n\ud83d\udcb0 Cost Efficient: Serverless architecture that scales to zero when not in use\nLive Proof: Powering Motia.dev Header\nThis isn't just a demo- this exact code powers the live GitHub star counter you can see right now in the header ofMotia.dev!\nLook at the top-right corner of the Motia website and you'll see:\n\ud83c\udfe0 Motialogo on the left\n\ud83d\udcd1 Blog, Docs, Manifestonavigation\n\u2b50 GitHubicon with alive star count(currently showing 7953+ stars)\n\ud83d\ude80 Vercel OSS 2025badge\nThat live-updating number next to the GitHub icon? That's this exact implementation in production, processing real webhook events and streaming updates to thousands of visitors in real-time!\nThe Power of Real-Time Simplicity\nAt its core, our GitHub stars counter solves a fundamental challenge: how do you display live, real-time metrics without complex WebSocket infrastructure or manual state management? Traditional approaches"
}
================================================================================
{
    "source_page": "GitHub Stars Counter",
    "source_url": "https://www.motia.dev/docs/examples/github-stars-counter =====",
    "chunk_topic": "GitHub Stars Counter",
    "chunk_id": "GitHub Stars Counter (Part 2)",
    "text": " to thousands of visitors in real-time!\nThe Power of Real-Time Simplicity\nAt its core, our GitHub stars counter solves a fundamental challenge: how do you display live, real-time metrics without complex WebSocket infrastructure or manual state management? Traditional approaches often involve intricate server-side event handling, client connection management, and complex state synchronization.\nOur Motia-powered solution breaks this down into just two simple components:\nGitHub Webhooks: Instant notifications when repository stars change\nMotia Streams: Real-time data synchronization with automatic state management\nProduction Security: Built-in webhook signature verification\n\ud83c\udfafLive in Action: This exact implementation powers the real-time star counter visible in the header ofMotia.dev(look for the GitHub icon with live count), updating instantly whenever developers star the repository!\nInstead of complex infrastructure, we get a resilient real-time system where data flows effortlessly from GitHub events to live client updates.\nThe Anatomy of Our Real-Time Counter\nOur application consists of just two specialized components, each handling a specific part of the real-time data flow. Let's explore the complete architecture.\nThe real-time data stream that holds our repository star counts. This stream automatically synchronizes data to all connected clients with zero configuration.\nimport{ StreamConfig }from'motia'import{ z }from'zod'constRepositoryStarsSchema=z.object({stars: z.number(),name: z.string(),fullName: z.string(),organization: z.string(),lastUpdated: z.string(),})exporttypeRepositoryStars=z.infer<typeofRepositoryStarsSchema>exportconstconfig:StreamConfig={name:'stars',schema: RepositoryStarsSchema,baseConfig: { storageType:'default'},}\nimport{ StreamConfig }from'motia'import{ z }from'zod'constRepositoryStarsSchema=z.object({stars: z.number(),name: z.string(),fullName: z.string(),organization: z.string(),lastUpdated: z.string(),})exporttypeRepositoryStars=z.infer<typeofRepositoryStarsSchema>exportconstconfig:StreamConfig={name:'stars',schema: RepositoryStarsSchema,baseConfig: { storageType:'default'},}\nReal-Time Data Flow\nThe beauty of this architecture lies in its simplicity. Here's how real-time updates flow through the system:\nGitHub Event\u2192 User stars/unstars your repository\nWebhook Delivery\u2192 GitHub sends POST request to your endpoint\nSecurity Validation\u2192 Signature verification ensures request authenticity\nStream Update\u2192 Data is written to Motia stream withstreams.stars.set()\nstreams"
}
================================================================================
{
    "source_page": "GitHub Stars Counter",
    "source_url": "https://www.motia.dev/docs/examples/github-stars-counter =====",
    "chunk_topic": "GitHub Stars Counter",
    "chunk_id": "GitHub Stars Counter (Part 3)",
    "text": " system:\nGitHub Event\u2192 User stars/unstars your repository\nWebhook Delivery\u2192 GitHub sends POST request to your endpoint\nSecurity Validation\u2192 Signature verification ensures request authenticity\nStream Update\u2192 Data is written to Motia stream withstreams.stars.set()\nstreams.stars.set()\nLive Propagation\u2192 All connected clients automatically receive the update\nUI Updates\u2192 Client applications re-render with new star count\nNo manual WebSocket management, no connection handling, no state synchronization code required!\nKey Features & Benefits\n\u26a1Instant Real-Time Updates\nStars update across all connected clients the moment GitHub sends the webhook - no polling, no delays.\n\ud83d\udd10Production-Ready Security\nHMAC signature verification with timing-safe comparison prevents unauthorized webhook requests.\n\ud83e\udde9Minimal Architecture\nJust two components handle the complete real-time functionality - no complex infrastructure required.\n\ud83d\udccaAutomatic State Management\nMotia streams handle data persistence, synchronization, and client updates automatically.\n\ud83c\udfafType-Safe Development\nFull TypeScript integration with Zod validation ensures zero runtime surprises.\n\ud83c\udf10Live Production Usage\nThis exact implementation powers the real-time counter visible in the Motia website header - go check it out now!\n\ud83d\ude80Production-Grade Architecture\nBuilt for enterprise scale with proper error handling, security, monitoring, and deployment automation.\nTrying It Out\nReady to build your own real-time GitHub stars counter? Let's get it running.\nClone and Install\nStart by getting the project locally and installing dependencies.\ngitclonehttps://github.com/MotiaDev/github-stars-counter.gitcdgithub-stars-counternpminstall\ngitclonehttps://github.com/MotiaDev/github-stars-counter.gitcdgithub-stars-counternpminstall\nConfigure GitHub Webhook (Optional)\nSet up webhook security with a secret for production use. This is optional for testing but essential for production deployments.\n# Generate a secure random secretexportGITHUB_WEBHOOK_SECRET=$(opensslrand-hex32)echo\"GITHUB_WEBHOOK_SECRET=$GITHUB_WEBHOOK_SECRET\">>.env\n# Generate a secure random secretexportGITHUB_WEBHOOK_SECRET=$(opensslrand-hex32)echo\"GITHUB_WEBHOOK_SECRET=$GITHUB_WEBHOOK_SECRET\">>.env\nStart Development Server\nLaunch the Motia development server to begin receiving webhook events.\nnpmrundev\nnpmrundev\nYour webhook endpoint will be available at:http://localhost:3000/webhooks/github/star\nhttp://localhost:3000/webhooks/github/star\nSet"
}
================================================================================
{
    "source_page": "GitHub Stars Counter",
    "source_url": "https://www.motia.dev/docs/examples/github-stars-counter =====",
    "chunk_topic": "GitHub Stars Counter",
    "chunk_id": "GitHub Stars Counter (Part 4)",
    "text": " Motia development server to begin receiving webhook events.\nnpmrundev\nnpmrundev\nYour webhook endpoint will be available at:http://localhost:3000/webhooks/github/star\nhttp://localhost:3000/webhooks/github/star\nSet Up GitHub Webhook\nConfigure GitHub to send star events to your endpoint:\nGo to your GitHub repository settings\nNavigate toSettings\u2192Webhooks\nClickAdd webhook\nSetPayload URLto your endpoint (use ngrok for local testing)\nSetContent typetoapplication/json\napplication/json\nAdd your webhook secret if configured\nSelectIndividual events\u2192Stars\nClickAdd webhook\nTest the Real-Time Updates\nTest your webhook by starring/unstarring your repository:\nStar your repositoryon GitHub\nCheck the logs- you should see webhook processing\nAccess the stream- query/api/streams/starsto see current data\n/api/streams/stars\nWatch real-time updatesin the Motia Workbench\nAccess Real-Time Data\nYour star data is now available via the Motia streams API:\n# Get all repository star countscurlhttp://localhost:3000/api/streams/stars# Get specific repository star countcurlhttp://localhost:3000/api/streams/stars/{org}/{repo}\n# Get all repository star countscurlhttp://localhost:3000/api/streams/stars# Get specific repository star countcurlhttp://localhost:3000/api/streams/stars/{org}/{repo}\nThe response includes live star counts that update automatically whenever GitHub sends webhook events.\nDeploy to Production\nOnce your counter is working locally, deploy it to production with Motia Cloud:\nOption 1: CLI Deployment\n# Deploy with version and API keymotiaclouddeploy--api-keyyour-api-key--version-name1.0.0# Deploy with environment variablesmotiaclouddeploy--api-keyyour-api-key\\--version-name1.0.0\\--env-file.env.production\\--environment-idyour-env-id\n# Deploy with version and API keymotiaclouddeploy--api-keyyour-api-key--version-name1.0.0# Deploy with environment variablesmotiaclouddeploy--api-keyyour-api-key\\--version-name1.0.0\\--env-file.env.production\\--environment-idyour-env-id\nOption 2: One-Click Web Deployment\nEnsure your local project is running (npm run dev)\nnpm run dev\nGo toMotia Cloud -> Import from Workbench\nSelect your local project"
}
================================================================================
{
    "source_page": "GitHub Stars Counter",
    "source_url": "https://www.motia.dev/docs/examples/github-stars-counter =====",
    "chunk_topic": "GitHub Stars Counter",
    "chunk_id": "GitHub Stars Counter (Part 5)",
    "text": ".env.production\\--environment-idyour-env-id\nOption 2: One-Click Web Deployment\nEnsure your local project is running (npm run dev)\nnpm run dev\nGo toMotia Cloud -> Import from Workbench\nSelect your local project port\nChoose project and environment name\nUpload environment variables (optional)\nClickDeployand watch the magic happen! \u2728\n\ud83d\ude80 Production Deployment Guide\nEnvironment Variables\nConfigure these environment variables for production security and functionality:\n# Required: GitHub webhook secret for securityGITHUB_WEBHOOK_SECRET=\"your-secure-random-secret\"# Optional: GitHub personal access token for enhanced API limitsGITHUB_TOKEN=\"ghp_your_github_token\"\n# Required: GitHub webhook secret for securityGITHUB_WEBHOOK_SECRET=\"your-secure-random-secret\"# Optional: GitHub personal access token for enhanced API limitsGITHUB_TOKEN=\"ghp_your_github_token\"\nSecurity Best Practices\nFor production deployments, ensure you:\nGenerate secure webhook secrets:# Generate a cryptographically secure secretopensslrand-hex32\nGenerate secure webhook secrets:\n# Generate a cryptographically secure secretopensslrand-hex32\n# Generate a cryptographically secure secretopensslrand-hex32\nStore secrets securely: Use environment variables, never commit to code\nStore secrets securely: Use environment variables, never commit to code\nMonitor webhook signatures: The handler automatically verifies signatures whenGITHUB_WEBHOOK_SECRETis set\nMonitor webhook signatures: The handler automatically verifies signatures whenGITHUB_WEBHOOK_SECRETis set\nGITHUB_WEBHOOK_SECRET\nEnable logging: Monitor for signature verification failures and unauthorized requests\nEnable logging: Monitor for signature verification failures and unauthorized requests\nScaling Considerations\nThis architecture scales automatically with your traffic:\nMultiple repositories: Each repo gets its own stream key (org/repo)\norg/repo\nHigh concurrency: Motia streams handle thousands of concurrent connections\nGlobal distribution: Deploy to multiple regions for worldwide performance\nCost optimization: Pay only for actual usage with serverless scaling\n\ud83d\udcbb Dive into the Code\nWant to explore the complete real-time implementation? Check out the full source code and see how simple real-time features can be with Motia:\nLive GitHub Stars Counter\nAccess the complete implementation with webhook security, real-time streams, and production deployment configurations. See exactly how the Motia website's live counter works!\nView Stars Counter Code\nSee It Live in Header \u2192\nConclusion: Real-Time Made Simple\nThis GitHub stars counter demonstrates how Motia transforms"
}
================================================================================
{
    "source_page": "GitHub Stars Counter",
    "source_url": "https://www.motia.dev/docs/examples/github-stars-counter =====",
    "chunk_topic": "GitHub Stars Counter",
    "chunk_id": "GitHub Stars Counter (Part 6)",
    "text": ", real-time streams, and production deployment configurations. See exactly how the Motia website's live counter works!\nView Stars Counter Code\nSee It Live in Header \u2192\nConclusion: Real-Time Made Simple\nThis GitHub stars counter demonstrates how Motia transforms complex real-time development into simple, manageable components. With just two files and minimal configuration, we've built a production-ready system that handles webhook security, real-time synchronization, and live client updates.\nThe beauty of this approach is its scalability and extensibility:\nAdd more repositories: Each gets its own stream automatically\nEnhance with analytics: Track starring patterns and user insights\nMultiple notification channels: Slack, Discord, email alerts for milestones\nRich frontend integrations: React, Vue, vanilla JS - all work seamlessly\nKey architectural benefits:\nNo WebSocket complexity: Streams handle all real-time synchronization automatically\nBuilt-in security: Production-ready webhook verification out of the box\nType safety: Full TypeScript support prevents runtime errors\nZero configuration: Real-time features work with no additional setup\nThis exact implementation powers the live star counter you see in the header ofMotia.dev- that 7953+ count updating in real-time? It's this code in action, proven at enterprise scale with thousands of daily visitors.\nProduction Metrics:\nHandles 10,000+ webhook events per day\nSub-50ms response times globally\n99.9% uptime with automatic failover\nZero maintenance serverless architecture\nReady to add enterprise-grade real-time features to your applications? Deploy production-ready code with Motia today!\nUptime Monitor\nReal-Time Uptime Monitoring: Building a Resilient Website Monitor with Motia\nGitHub Integration\nBuild an automated GitHub issue and PR management system with AI-powered classification and routing\nOn this page"
}
================================================================================
{
    "source_page": "GitHub Integration",
    "source_url": "https://www.motia.dev/docs/examples/github-integration-workflow =====",
    "chunk_topic": "GitHub Integration",
    "chunk_id": "GitHub Integration (Part 1)",
    "text": "GitHub Integration\nBuild an automated GitHub issue and PR management system with AI-powered classification and routing\nLet's build a GitHub automation system that:\nAutomatically triages and classifies new issues\nIntelligently assigns labels based on content\nSuggests appropriate assignees and reviewers\nMonitors PR test status\nGenerates contextual comments\nWorkflow Structure\nThe GitHub integration workflow is organized into two main components:\nIssue Triage: Handles the management of GitHub issues\nPR Classifier: Manages pull request workflows\nThe Steps\nVisual Overview\nHere's how the automation flow works:\nWebhook Reception\u2192 Captures GitHub events\nIssue/PR Classification\u2192 Analyzes content with AI\nAutomated Labeling\u2192 Applies appropriate labels\nSmart Assignment\u2192 Suggests reviewers and assignees\nStatus Monitoring\u2192 Tracks PR test status\nTry It Out\nPrerequisites\nMake sure you have:\nGitHub account with personal access token\nNode.js installed\nOpenAI API key (for AI classification)\nClone the Repository\ngitclonegit@github.com:MotiaDev/motia-examples.gitcdexamples/github-integration-workflow\ngitclonegit@github.com:MotiaDev/motia-examples.gitcdexamples/github-integration-workflow\nInstall Dependencies\nnpminstall\nnpminstall\nConfigure Environment Variables\nCreate a.envfile by copying the example:\n.env\ncp.env.example.env\ncp.env.example.env\nUpdate your.envwith the following credentials:\n.env\nGITHUB_TOKEN=your_github_token_hereOPENAI_API_KEY=your_openai_api_key\nGITHUB_TOKEN=your_github_token_hereOPENAI_API_KEY=your_openai_api_key\nSet Up GitHub Webhook\nGo to your GitHub repository settings\nNavigate to Webhooks and add a new webhook\nSet the Payload URL to your Motia server endpoint\nSelect content type asapplication/json\napplication/json\nChoose which events to trigger the webhook (Issues, Pull requests)\nSave the webhook\nRun the Application\nnpmrundev\nnpmrundev\nTest the Flow\nCreate a new issue in your GitHub repository\nWatch as it gets automatically classified and labeled\nCreate a new PR to see the reviewer assignment in action\nCheck the PR comments for test status updates\nFor more detailed setup instructions and configuration options, check out thefull\ndocumentation.\nGitHub Stars Counter\nReal-Time GitHub Stars Counter: Building Live Updates with Motia Streams\nGmail Automation\nBuild an automated email system with smart labeling,"
}
================================================================================
{
    "source_page": "GitHub Integration",
    "source_url": "https://www.motia.dev/docs/examples/github-integration-workflow =====",
    "chunk_topic": "GitHub Integration",
    "chunk_id": "GitHub Integration (Part 2)",
    "text": " status updates\nFor more detailed setup instructions and configuration options, check out thefull\ndocumentation.\nGitHub Stars Counter\nReal-Time GitHub Stars Counter: Building Live Updates with Motia Streams\nGmail Automation\nBuild an automated email system with smart labeling, auto-responses, and AI-powered filtering\nOn this page"
}
================================================================================
{
    "source_page": "Gmail Automation",
    "source_url": "https://www.motia.dev/docs/examples/gmail-automation =====",
    "chunk_topic": "Gmail Automation",
    "chunk_id": "Gmail Automation (Part 1)",
    "text": "Gmail Automation\nBuild an automated email system with smart labeling, auto-responses, and AI-powered filtering\nLet's build a Gmail automation system that:\n\ud83d\udcca Smart email classification by category (work, personal, social, promotion, spam, update)\n\ud83d\udea8 Urgency detection (high, medium, low) with prioritization\n\ud83d\udcac Intelligent automated responses based on email context\n\ud83c\udff7\ufe0f Automatic email organization (labeling, archiving)\n\ud83d\udcc8 Daily summary reports via Discord\n\ud83d\udd12 Secure Gmail API integration with OAuth2 authentication flow\n\u26a1 Real-time email monitoring with webhook notifications\nThe Steps\nVisual Overview\nHere's how the automation flow works:\n\ud83c\udf0a Workflow Architecture\nThe Gmail Account Manager workflow consists of the following steps:\n1. Gmail Authentication (Multi-Step Flow)\nFiles:steps/gmail-get-auth-url.step.ts: Generates OAuth2 authorization URLsteps/gmail-auth.step.ts: Handles authorization code exchangesteps/gmail-token-status.step.ts: Checks token validity and refreshes if needed\nsteps/gmail-get-auth-url.step.ts: Generates OAuth2 authorization URL\nsteps/gmail-get-auth-url.step.ts\nsteps/gmail-auth.step.ts: Handles authorization code exchange\nsteps/gmail-auth.step.ts\nsteps/gmail-token-status.step.ts: Checks token validity and refreshes if needed\nsteps/gmail-token-status.step.ts\n2. Gmail Webhook (API Step)\nFile:steps/gmail-webhook.step.ts\nsteps/gmail-webhook.step.ts\nPurpose: Receives notifications from Gmail when new emails arrive\nEmits:gmail.new_emailevent with message details\ngmail.new_email\nEndpoint:POST /api/gmail-webhook\nPOST /api/gmail-webhook\n3. Gmail Watch (API Step)\nFile:steps/gmail-watch.step.ts\nsteps/gmail-watch.step.ts\nPurpose: Sets up push notifications for the Gmail account\nEndpoint:GET /api/watch\nGET /api/watch\n4. Fetch Email (Event Step)\nFile:steps/fetch-email.step.ts\nsteps/fetch-email.step.ts\nPurpose: Retrieves the full email content from Gmail API\nSubscribes to:gmail.email.received\ngmail.email.received\nEmits:gmail.email.fetchedwith complete email data\ngmail.email.fetched\nKey Functions: Authenticates with Gmail API, fetches message content, parses attachments\n5. Analyze Email (Event Step)\nFile:steps/analyze"
}
================================================================================
{
    "source_page": "Gmail Automation",
    "source_url": "https://www.motia.dev/docs/examples/gmail-automation =====",
    "chunk_topic": "Gmail Automation",
    "chunk_id": "Gmail Automation (Part 2)",
    "text": "ceived\nEmits:gmail.email.fetchedwith complete email data\ngmail.email.fetched\nKey Functions: Authenticates with Gmail API, fetches message content, parses attachments\n5. Analyze Email (Event Step)\nFile:steps/analyze-email.step.py\nsteps/analyze-email.step.py\nPurpose: Uses Hugging Face models to analyze email content\nSubscribes to:gmail.email.fetched\ngmail.email.fetched\nEmits:gmail.email.analyzedwith analysis results\ngmail.email.analyzed\nAnalysis Performed:Category classificationUrgency detectionSentiment analysisKey information extraction\nCategory classification\nUrgency detection\nSentiment analysis\nKey information extraction\n6. Organize Email (Event Step)\nFile:steps/organize-email.step.ts\nsteps/organize-email.step.ts\nPurpose: Applies labels and organization based on analysis\nSubscribes to:gmail.email.analyzed\ngmail.email.analyzed\nEmits:[gmail.email.organized, gmail.email.archived]\n[gmail.email.organized, gmail.email.archived]\nActions: Creates/applies labels, archives certain emails, marks importance\n7. Auto-Respond to Email (Event Step)\nFile:steps/auto-responder.step.ts\nsteps/auto-responder.step.ts\nPurpose: Generates and sends appropriate responses for certain emails\nSubscribes to:gmail.email.analyzed\ngmail.email.analyzed\nEmits:gmail.email.responded\ngmail.email.responded\nFeatures:Template selection based on email contextPersonalization of responsesAuto-reply for urgent messagesFollow-up scheduling\nTemplate selection based on email context\nPersonalization of responses\nAuto-reply for urgent messages\nFollow-up scheduling\n8. Daily Summary (Cron Step)\nFile:steps/daily-summary.step.ts\nsteps/daily-summary.step.ts\nPurpose: Compiles and sends daily email activity summary\nSchedule: Runs daily at 6:00 PM\nEmits:gmail.summary.sent\ngmail.summary.sent\nDelivery: Sends report to Discord via webhook\nTry It Out\n\ud83d\udccb Prerequisites\nNode.js(v18+)\nPython(v3.8+)\nGmail API credentials(client_id and client_secret)\nGoogle Cloud projectwith Pub/Sub API enabled\nHugging Face API token\nDiscord webhook URL(for daily summaries)\n\ud83d\ude80 Quick Start\nClone this repositorygitclonehttps://github.com/yourusername/gmail-flow.gitcdgmail-flow\nClone this repository\ngitclonehttps://github.com/yourusername/gmail"
}
================================================================================
{
    "source_page": "Gmail Automation",
    "source_url": "https://www.motia.dev/docs/examples/gmail-automation =====",
    "chunk_topic": "Gmail Automation",
    "chunk_id": "Gmail Automation (Part 3)",
    "text": "\nDiscord webhook URL(for daily summaries)\n\ud83d\ude80 Quick Start\nClone this repositorygitclonehttps://github.com/yourusername/gmail-flow.gitcdgmail-flow\nClone this repository\ngitclonehttps://github.com/yourusername/gmail-flow.gitcdgmail-flow\ngitclonehttps://github.com/yourusername/gmail-flow.gitcdgmail-flow\nInstall Node.js dependenciespnpminstall\nInstall Node.js dependencies\npnpminstall\npnpminstall\nInstall Python dependenciespipinstall-rrequirements.txt\nInstall Python dependencies\npipinstall-rrequirements.txt\npipinstall-rrequirements.txt\nConfigure environment variablescp.env.example.envThen edit the.envfile with your credentials (see setup sections below).\nConfigure environment variables\ncp.env.example.env\ncp.env.example.env\nThen edit the.envfile with your credentials (see setup sections below).\n.env\nStart the development serverpnpmdev\nStart the development server\npnpmdev\npnpmdev\nOpen the Motia WorkbenchNavigate tohttp://localhost:3000to access the workflow UI.\nOpen the Motia Workbench\nNavigate tohttp://localhost:3000to access the workflow UI.\n\ud83d\udd27 Detailed Setup\nSetting up Google Cloud Project and Gmail API\nBefore you can use the Gmail Account Manager, you need to set up a Google Cloud project with the Gmail API and Pub/Sub:\nCreate a Google Cloud Project:Go toGoogle Cloud ConsoleClick on \"New Project\" and follow the steps to create a new projectNote your project ID for later use\nCreate a Google Cloud Project:\nGo toGoogle Cloud Console\nClick on \"New Project\" and follow the steps to create a new project\nNote your project ID for later use\nEnable the Gmail API:In your project, go to \"APIs & Services\" > \"Library\"Search for \"Gmail API\" and click on itClick \"Enable\"\nEnable the Gmail API:\nIn your project, go to \"APIs & Services\" > \"Library\"\nSearch for \"Gmail API\" and click on it\nClick \"Enable\"\nEnable the Pub/Sub API:In your project, go to \"APIs & Services\" > \"Library\"Search for \"Cloud Pub/Sub API\" and click on itClick \"Enable\"\nEnable the Pub/Sub API:\nIn your project, go to \"APIs & Services\" > \"Library\"\nSearch for \"Cloud Pub/Sub API\" and click on it\nClick \"Enable\"\nCreate"
}
================================================================================
{
    "source_page": "Gmail Automation",
    "source_url": "https://www.motia.dev/docs/examples/gmail-automation =====",
    "chunk_topic": "Gmail Automation",
    "chunk_id": "Gmail Automation (Part 4)",
    "text": " API\" and click on itClick \"Enable\"\nEnable the Pub/Sub API:\nIn your project, go to \"APIs & Services\" > \"Library\"\nSearch for \"Cloud Pub/Sub API\" and click on it\nClick \"Enable\"\nCreate OAuth Credentials:Go to \"APIs & Services\" > \"Credentials\"Click \"Create Credentials\" > \"OAuth client ID\"Set the application type to \"Desktop app\"Click \"Create\"Note your Client ID and Client Secret for your.envfile:GOOGLE_CLIENT_ID=your_client_idGOOGLE_CLIENT_SECRET=your_client_secret\nCreate OAuth Credentials:\nGo to \"APIs & Services\" > \"Credentials\"\nClick \"Create Credentials\" > \"OAuth client ID\"\nSet the application type to \"Desktop app\"\nClick \"Create\"\nNote your Client ID and Client Secret for your.envfile:GOOGLE_CLIENT_ID=your_client_idGOOGLE_CLIENT_SECRET=your_client_secret\n.env\nGOOGLE_CLIENT_ID=your_client_idGOOGLE_CLIENT_SECRET=your_client_secret\nGOOGLE_CLIENT_ID=your_client_idGOOGLE_CLIENT_SECRET=your_client_secret\nSetting up Google Pub/Sub for Gmail Notifications\nTo enable real-time email notifications, you need to set up a Google Cloud Pub/Sub topic and subscription:\nCreate a Pub/Sub Topic:In your Google Cloud Console, go to \"Pub/Sub\" > \"Topics\"Click \"Create Topic\"Name your topic (e.g.,gmail-notifications)Add the service accountgmail-api-push@system.gserviceaccount.comas a Topic Publisher to allow Gmail to publish notificationsClick \"Create\"Note the full topic name (usuallyprojects/your-project-id/topics/gmail-notifications) for your.envfile:GOOGLE_PUBSUB_TOPIC=projects/your-project-id/topics/gmail-notifications\nCreate a Pub/Sub Topic:\nIn your Google Cloud Console, go to \"Pub/Sub\" > \"Topics\"\nClick \"Create Topic\"\nName your topic (e.g.,gmail-notifications)\ngmail-notifications\nAdd the service accountgmail-api-push@system.gserviceaccount.comas a Topic Publisher to allow Gmail to publish notifications\ngmail-api-push@system.gserviceaccount.com\nClick \"Create\"\nNote the full topic name (usuallyprojects/your-project-id/topics/gmail-notifications) for your.envfile:GOOGLE_PUBSUB_TOPIC=projects/your-project-id/topics/gmail-notifications\nprojects/your-project-id/topics/gmail-notifications\n.env\nGOOGLE_PUBSUB_TOPIC="
}
================================================================================
{
    "source_page": "Gmail Automation",
    "source_url": "https://www.motia.dev/docs/examples/gmail-automation =====",
    "chunk_topic": "Gmail Automation",
    "chunk_id": "Gmail Automation (Part 5)",
    "text": "-id/topics/gmail-notifications) for your.envfile:GOOGLE_PUBSUB_TOPIC=projects/your-project-id/topics/gmail-notifications\nprojects/your-project-id/topics/gmail-notifications\n.env\nGOOGLE_PUBSUB_TOPIC=projects/your-project-id/topics/gmail-notifications\nGOOGLE_PUBSUB_TOPIC=projects/your-project-id/topics/gmail-notifications\nCreate a Pub/Sub Subscription:Once your topic is created, click \"Create Subscription\"Name your subscription (e.g.,gmail-notifications-push)Set the Delivery Type to \"Push\"Set the Endpoint URL to your webhook URL (e.g.,https://your-domain.com/api/gmail-webhook)For local development, you'll need to use a tool like ngrok to expose your local serverClick \"Create\"\nCreate a Pub/Sub Subscription:\nOnce your topic is created, click \"Create Subscription\"\nName your subscription (e.g.,gmail-notifications-push)\ngmail-notifications-push\nSet the Delivery Type to \"Push\"\nSet the Endpoint URL to your webhook URL (e.g.,https://your-domain.com/api/gmail-webhook)For local development, you'll need to use a tool like ngrok to expose your local server\nhttps://your-domain.com/api/gmail-webhook\nFor local development, you'll need to use a tool like ngrok to expose your local server\nClick \"Create\"\nSet up Domain Verification(if needed):If you're using a custom domain for your webhook endpoint, you may need to verify domain ownershipFollow the instructions in Google Cloud Console for domain verification\nSet up Domain Verification(if needed):\nIf you're using a custom domain for your webhook endpoint, you may need to verify domain ownership\nFollow the instructions in Google Cloud Console for domain verification\nGmail API Authentication\nThis project includes a complete OAuth2 authentication flow for the Gmail API:\nStart the development server:pnpm dev\npnpm dev\nNavigate to the authentication workflow in the Motia Workbench\nThe workflow will generate an authorization URL\nOpen the URL in your browser and authorize the application\nThe application will receive and store your authentication tokens\nDiscord Webhook Configuration\nTo receive daily email summaries in Discord, follow these steps to set up a webhook:\nCreate a Discord Server(skip if you already have one):Open Discord and click the \"+\" icon on the left sidebarSelect \"Create My Own\" and follow the setup wizard\nCreate a Discord Server(skip if you already have one):\nOpen Discord"
}
================================================================================
{
    "source_page": "Gmail Automation",
    "source_url": "https://www.motia.dev/docs/examples/gmail-automation =====",
    "chunk_topic": "Gmail Automation",
    "chunk_id": "Gmail Automation (Part 6)",
    "text": " a webhook:\nCreate a Discord Server(skip if you already have one):Open Discord and click the \"+\" icon on the left sidebarSelect \"Create My Own\" and follow the setup wizard\nCreate a Discord Server(skip if you already have one):\nOpen Discord and click the \"+\" icon on the left sidebar\nSelect \"Create My Own\" and follow the setup wizard\nCreate a Channel for Notifications:Right-click on your server name and select \"Server Settings\"Go to \"Channels\" and click \"Create Channel\"Name it (e.g., \"email-summaries\") and click \"Create\"\nCreate a Channel for Notifications:\nRight-click on your server name and select \"Server Settings\"\nGo to \"Channels\" and click \"Create Channel\"\nName it (e.g., \"email-summaries\") and click \"Create\"\nCreate a Webhook:Right-click on your new channel and select \"Edit Channel\"Go to \"Integrations\" tabClick \"Create Webhook\"Give it a name (e.g., \"Gmail Summary Bot\")Optionally, customize the avatarClick \"Copy Webhook URL\"\nCreate a Webhook:\nRight-click on your new channel and select \"Edit Channel\"\nGo to \"Integrations\" tab\nClick \"Create Webhook\"\nGive it a name (e.g., \"Gmail Summary Bot\")\nOptionally, customize the avatar\nClick \"Copy Webhook URL\"\nAdd Webhook URL to Environment Variables:Open your.envfileAdd or update the Discord webhook URL:DISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook-url\nAdd Webhook URL to Environment Variables:\nOpen your.envfile\n.env\nAdd or update the Discord webhook URL:DISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook-url\nDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook-url\nDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook-url\nTest the Webhook:You can test if your webhook is working correctly with this curl command:curl-XPOST-H\"Content-Type: application/json\"\\-d'{\"content\": \"Testing Gmail Account Manager webhook\"}'\\https://discord.com/api/webhooks/your-webhook-urlYou should see the message appear in your Discord channel\nTest the Webhook:\nYou can test if your webhook is working correctly with this curl command:curl-XPOST-H\"Content-Type: application/json\"\\-d'{\"content\":"
}
================================================================================
{
    "source_page": "Gmail Automation",
    "source_url": "https://www.motia.dev/docs/examples/gmail-automation =====",
    "chunk_topic": "Gmail Automation",
    "chunk_id": "Gmail Automation (Part 7)",
    "text": "-webhook-urlYou should see the message appear in your Discord channel\nTest the Webhook:\nYou can test if your webhook is working correctly with this curl command:curl-XPOST-H\"Content-Type: application/json\"\\-d'{\"content\": \"Testing Gmail Account Manager webhook\"}'\\https://discord.com/api/webhooks/your-webhook-url\ncurl-XPOST-H\"Content-Type: application/json\"\\-d'{\"content\": \"Testing Gmail Account Manager webhook\"}'\\https://discord.com/api/webhooks/your-webhook-url\ncurl-XPOST-H\"Content-Type: application/json\"\\-d'{\"content\": \"Testing Gmail Account Manager webhook\"}'\\https://discord.com/api/webhooks/your-webhook-url\nYou should see the message appear in your Discord channel\nHugging Face Setup\nCreate a Hugging Face Account:Sign up atHugging Face\nCreate a Hugging Face Account:\nSign up atHugging Face\nGenerate an API Token:Go to yourHugging Face account settingsCreate a new API tokenCopy the token to your.envfile:HUGGINGFACE_API_TOKEN=your_api_token\nGenerate an API Token:\nGo to yourHugging Face account settings\nCreate a new API token\nCopy the token to your.envfile:HUGGINGFACE_API_TOKEN=your_api_token\n.env\nHUGGINGFACE_API_TOKEN=your_api_token\nHUGGINGFACE_API_TOKEN=your_api_token\n\ud83d\udcc1 Project Structure\nsteps/- Contains all workflow stepsgmail-get-auth-url.step.ts- Generates OAuth2 URLgmail-auth.step.ts- Handles OAuth2 flowgmail-token-status.step.ts- Manages token refreshgmail-webhook.step.ts- Webhook endpoint for Gmail notificationsgmail-watch.step.ts- Sets up Gmail push notificationsfetch-email.step.ts- Fetches email content from Gmail APIanalyze-email.step.py- Python step for email analysis using Hugging Faceorganize-email.step.ts- Organizes emails (labels, archives)auto-responder.step.ts- Generates appropriate responsesdaily-summary.step.ts- Sends daily summary to Discord\nsteps/\ngmail-get-auth-url.step.ts- Generates OAuth2 URL\ngmail-get-auth-url.step.ts\ngmail-auth.step.ts- Handles OAuth2 flow\ngmail-auth.step.ts\ngmail-token-status.step.ts- Manages token refresh\ngmail-token-status.step.ts\ngmail-webhook.step.ts- Webhook endpoint for Gmail notifications\ngmail-webhook.step.ts\ngmail-watch.step.ts- Sets up Gmail push notifications\ngmail-watch.step"
}
================================================================================
{
    "source_page": "Gmail Automation",
    "source_url": "https://www.motia.dev/docs/examples/gmail-automation =====",
    "chunk_topic": "Gmail Automation",
    "chunk_id": "Gmail Automation (Part 8)",
    "text": "gmail-token-status.step.ts- Manages token refresh\ngmail-token-status.step.ts\ngmail-webhook.step.ts- Webhook endpoint for Gmail notifications\ngmail-webhook.step.ts\ngmail-watch.step.ts- Sets up Gmail push notifications\ngmail-watch.step.ts\nfetch-email.step.ts- Fetches email content from Gmail API\nfetch-email.step.ts\nanalyze-email.step.py- Python step for email analysis using Hugging Face\nanalyze-email.step.py\norganize-email.step.ts- Organizes emails (labels, archives)\norganize-email.step.ts\nauto-responder.step.ts- Generates appropriate responses\nauto-responder.step.ts\ndaily-summary.step.ts- Sends daily summary to Discord\ndaily-summary.step.ts\nservices/- Shared service modules\nservices/\nconfig/- Configuration files\nconfig/\n.motia/- Motia framework configuration\n.motia/\n\ud83d\udce6 Dependencies\nNode.js Dependencies\n@motiadev/core,@motiadev/workbench,motia: Motia framework\ngoogleapis,google-auth-library: Google API integration\ngmail-api-parse-message-ts: Gmail message parsing\naxios: HTTP client\nzod: Schema validation\nreact: UI components\nPython Dependencies\ntransformers,torch: Machine learning models\nscikit-learn,numpy,pandas: Data processing\nhuggingface_hub: Access to Hugging Face models\npython-dotenv: Environment variable loading\n\ud83d\udee0\ufe0f Troubleshooting\nPython Module Errors: Ensure you've installed all required Python packages withpip install -r requirements.txt\npip install -r requirements.txt\nAuthentication Errors: Verify your API credentials and follow the authentication flow\nWebhook Issues: Make sure the webhook endpoint is publicly accessible or properly configured for testing\nToken Refresh Errors: Check that your OAuth tokens are valid and that the refresh flow is working properly\nPub/Sub Not Working: Verify that your Pub/Sub topic and subscription are properly configured and that your service account has the necessary permissions\n\ud83d\udcdd Environment Variables\nCreate a.envfile with the following variables:\n.env\n# Google API ConfigurationGOOGLE_CLIENT_ID=your_client_idGOOGLE_CLIENT_SECRET=your_client_secretGOOGLE_PUBSUB_TOPIC=projects/your-project-id/topics/gmail-notifications# HuggingFace ConfigurationHUGGINGFACE_API_TOKEN=your_huggingface_token# Discord IntegrationDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook-url# Auto-Responder ConfigurationAUTO_RESPONDER_NAME=Your NameAUTO_RESPON"
}
================================================================================
{
    "source_page": "Gmail Automation",
    "source_url": "https://www.motia.dev/docs/examples/gmail-automation =====",
    "chunk_topic": "Gmail Automation",
    "chunk_id": "Gmail Automation (Part 9)",
    "text": "Face ConfigurationHUGGINGFACE_API_TOKEN=your_huggingface_token# Discord IntegrationDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook-url# Auto-Responder ConfigurationAUTO_RESPONDER_NAME=Your NameAUTO_RESPONDER_EMAIL=your-email@example.com\n# Google API ConfigurationGOOGLE_CLIENT_ID=your_client_idGOOGLE_CLIENT_SECRET=your_client_secretGOOGLE_PUBSUB_TOPIC=projects/your-project-id/topics/gmail-notifications# HuggingFace ConfigurationHUGGINGFACE_API_TOKEN=your_huggingface_token# Discord IntegrationDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook-url# Auto-Responder ConfigurationAUTO_RESPONDER_NAME=Your NameAUTO_RESPONDER_EMAIL=your-email@example.com\nGitHub Integration\nBuild an automated GitHub issue and PR management system with AI-powered classification and routing\nFinance Agent\nA powerful event-driven financial analysis workflow that combines web search, financial data, and AI analysis to provide comprehensive investment insights.\nOn this page"
}
================================================================================
{
    "source_page": "Finance Agent",
    "source_url": "https://www.motia.dev/docs/examples/finance-agent =====",
    "chunk_topic": "Finance Agent",
    "chunk_id": "Finance Agent (Part 1)",
    "text": "Finance Agent\nA powerful event-driven financial analysis workflow that combines web search, financial data, and AI analysis to provide comprehensive investment insights.\nLet's build a finance agent that:\nReal-time Financial Analysis: Combines multiple data sources for comprehensive insights\nAI-Powered Insights: Leverages OpenAI GPT-4 for intelligent market analysis\nWeb Search Integration: Aggregates latest market news and analysis\nFinancial Data Integration: Real-time stock and company information\nThe Steps\n\ud83d\ude80 Features\nReal-time Financial Analysis: Combines multiple data sources for comprehensive insights\nAI-Powered Insights: Leverages OpenAI GPT-4 for intelligent market analysis\nEvent-Driven Architecture: Built on Motia's robust event system for reliable processing\nWeb Search Integration: Aggregates latest market news and analysis\nFinancial Data Integration: Real-time stock and company information\nPersistent Storage: Stores analysis results for future reference\nRESTful API: Easy integration with existing systems\n\ud83d\udccb Prerequisites\nNode.js v16+\nnpm or pnpm\nAPI keys for:Alpha Vantage(financial data)SerperDev(web search)OpenAI(AI analysis)\nAlpha Vantage(financial data)\nSerperDev(web search)\nOpenAI(AI analysis)\n\ud83d\udee0\ufe0f Installation\nClone the repository:gitclonehttps://github.com/MotiaDev/motia-examplescdexamples/finance-agent\nClone the repository:\ngitclonehttps://github.com/MotiaDev/motia-examplescdexamples/finance-agent\ngitclonehttps://github.com/MotiaDev/motia-examplescdexamples/finance-agent\nInstall dependencies:pnpminstall# ornpminstall\nInstall dependencies:\npnpminstall# ornpminstall\npnpminstall# ornpminstall\nConfigure environment variables:cp.env.example.envUpdate.envwith your API keys:ALPHA_VANTAGE_API_KEY=your_alpha_vantage_api_key_hereSERPER_API_KEY=your_serper_api_key_hereOPENAI_API_KEY=your_openai_api_key_here\nConfigure environment variables:\ncp.env.example.env\ncp.env.example.env\nUpdate.envwith your API keys:\n.env\nALPHA_VANTAGE_API_KEY=your_alpha_vantage_api_key_hereSERPER_API_KEY=your_serper_api_key_hereOPENAI_API_KEY=your_openai_api_key_here\nALPHA_VANTAGE_API_KEY=your_alpha_vantage_api_key_hereSERPER_API"
}
================================================================================
{
    "source_page": "Finance Agent",
    "source_url": "https://www.motia.dev/docs/examples/finance-agent =====",
    "chunk_topic": "Finance Agent",
    "chunk_id": "Finance Agent (Part 2)",
    "text": "_KEY=your_alpha_vantage_api_key_hereSERPER_API_KEY=your_serper_api_key_hereOPENAI_API_KEY=your_openai_api_key_here\nALPHA_VANTAGE_API_KEY=your_alpha_vantage_api_key_hereSERPER_API_KEY=your_serper_api_key_hereOPENAI_API_KEY=your_openai_api_key_here\n\ud83c\udfd7\ufe0f Architecture\nThe workflow consists of several specialized steps that work together to provide comprehensive financial analysis:\n\ud83d\udea6 API Endpoints\nQuery Endpoint\nPOST/finance-queryContent-Type:application/json{\"query\":\"Latest information about AAPL and MSFT\"}\nPOST/finance-queryContent-Type:application/json{\"query\":\"Latest information about AAPL and MSFT\"}\nResponse:\n{\"message\":\"Query received and processing started\",\"traceId\":\"abc123def456\"}\n{\"message\":\"Query received and processing started\",\"traceId\":\"abc123def456\"}\nResults Endpoint\nGET/finance-result/:traceId\nGET/finance-result/:traceId\nResponse:\n{\"query\":\"Latest information about AAPL and MSFT\",\"timestamp\":\"2023-06-15T12:34:56.789Z\",\"response\": {\"summary\":\"Results for\\\"Latest information about AAPL and MSFT\\\"\",\"webResources\": [...],\"financialData\": [...],\"aiAnalysis\": {...}},\"status\":\"success\"}\n{\"query\":\"Latest information about AAPL and MSFT\",\"timestamp\":\"2023-06-15T12:34:56.789Z\",\"response\": {\"summary\":\"Results for\\\"Latest information about AAPL and MSFT\\\"\",\"webResources\": [...],\"financialData\": [...],\"aiAnalysis\": {...}},\"status\":\"success\"}\n\ud83c\udfc3\u200d\u2642\ufe0f Running the Application\nStart the development server:pnpmdev\nStart the development server:\npnpmdev\npnpmdev\nAccess the Motia Workbench:http://localhost:3000\nAccess the Motia Workbench:\nhttp://localhost:3000\nhttp://localhost:3000\nMake a test request:curl-XPOSThttp://localhost:3000/finance-query\\-H\"Content-Type: application/json\"\\-d'{\"query\": \"Latest information about AAPL and MSFT\"}'\nMake a test request:\ncurl-XPOSThttp://localhost:3000/finance-query\\-H\"Content-Type: application/json\"\\-d'{\"query\": \"Latest information about AAPL and MSFT\"}'\ncurl-XPOSThttp://localhost:3000"
}
================================================================================
{
    "source_page": "Finance Agent",
    "source_url": "https://www.motia.dev/docs/examples/finance-agent =====",
    "chunk_topic": "Finance Agent",
    "chunk_id": "Finance Agent (Part 3)",
    "text": " test request:\ncurl-XPOSThttp://localhost:3000/finance-query\\-H\"Content-Type: application/json\"\\-d'{\"query\": \"Latest information about AAPL and MSFT\"}'\ncurl-XPOSThttp://localhost:3000/finance-query\\-H\"Content-Type: application/json\"\\-d'{\"query\": \"Latest information about AAPL and MSFT\"}'\n\ud83d\ude4f Acknowledgments\nMotia Frameworkfor the event-driven workflow engine\nAlpha Vantagefor financial data\nSerperDevfor web search capabilities\nOpenAIfor AI analysis\nGmail Automation\nBuild an automated email system with smart labeling, auto-responses, and AI-powered filtering\nAI Research Agent\nA powerful research assistant that leverages the Motia Framework to perform comprehensive web research on any topic and any question.\nOn this page"
}
================================================================================
{
    "source_page": "AI Research Agent",
    "source_url": "https://www.motia.dev/docs/examples/ai-deep-research-agent =====",
    "chunk_topic": "AI Research Agent",
    "chunk_id": "AI Research Agent (Part 1)",
    "text": "AI Research Agent\nA powerful research assistant that leverages the Motia Framework to perform comprehensive web research on any topic and any question.\nLet's build a AI Deep Research Agent that:\nDeep Web Research: Automatically searches the web, extracts content, and synthesizes findings\nIterative Research Process: Supports multiple layers of research depth for comprehensive exploration\nEvent-Driven Architecture: Built using Motia Framework's event system for robust workflow management\nParallel Processing: Efficiently processes search results and content extraction\nAPI Endpoints: REST API access for initiating research and retrieving reports\nStateful Processing: Maintains research state throughout the entire process\nThe Steps\n\ud83d\ude80 Features\nDeep Web Research: Automatically searches the web, extracts content, and synthesizes findings\nIterative Research Process: Supports multiple layers of research depth for comprehensive exploration\nEvent-Driven Architecture: Built using Motia Framework's event system for robust workflow management\nParallel Processing: Efficiently processes search results and content extraction\nAPI Endpoints: REST API access for initiating research and retrieving reports\nStateful Processing: Maintains research state throughout the entire process\n\ud83d\udccb Prerequisites\nNode.js v18 or later\nnpm or pnpm\nAPI keys for:OpenAI(AI analysis)Firecrawl(Web Crawler)\nOpenAI(AI analysis)\nFirecrawl(Web Crawler)\n\ud83d\udee0\ufe0f Installation\nClone the repository:gitclonehttps://github.com/MotiaDev/motia-examplescdexamples/ai-deep-research-agent\nClone the repository:\ngitclonehttps://github.com/MotiaDev/motia-examplescdexamples/ai-deep-research-agent\ngitclonehttps://github.com/MotiaDev/motia-examplescdexamples/ai-deep-research-agent\nInstall dependencies:pnpminstall# ornpminstall\nInstall dependencies:\npnpminstall# ornpminstall\npnpminstall# ornpminstall\nConfigure environment variables:cp.env.example.envUpdate.envwith your API keys:# RequiredOPENAI_API_KEY=your-openai-api-key-hereFIRECRAWL_API_KEY=your-firecrawl-api-key-here# Optional# OPENAI_MODEL=gpt-4o# FIRECRAWL_BASE_URL=http://your-firecrawl-instance-url\nConfigure environment variables:\ncp.env.example.env\ncp.env.example.env\nUpdate.envwith your API keys:\n.env\n# RequiredOPENAI_API_KEY=your-open"
}
================================================================================
{
    "source_page": "AI Research Agent",
    "source_url": "https://www.motia.dev/docs/examples/ai-deep-research-agent =====",
    "chunk_topic": "AI Research Agent",
    "chunk_id": "AI Research Agent (Part 2)",
    "text": "-4o# FIRECRAWL_BASE_URL=http://your-firecrawl-instance-url\nConfigure environment variables:\ncp.env.example.env\ncp.env.example.env\nUpdate.envwith your API keys:\n.env\n# RequiredOPENAI_API_KEY=your-openai-api-key-hereFIRECRAWL_API_KEY=your-firecrawl-api-key-here# Optional# OPENAI_MODEL=gpt-4o# FIRECRAWL_BASE_URL=http://your-firecrawl-instance-url\n# RequiredOPENAI_API_KEY=your-openai-api-key-hereFIRECRAWL_API_KEY=your-firecrawl-api-key-here# Optional# OPENAI_MODEL=gpt-4o# FIRECRAWL_BASE_URL=http://your-firecrawl-instance-url\n\ud83c\udfd7\ufe0f Architecture\n\ud83d\udea6 API Endpoints\nStart Research\nPOST /researchContent-Type: application/json{\"query\": \"The research topic or question\",\"breadth\": 4,// Number of search queries to generate (1-10)\"depth\": 2// Depth of research iterations (1-5)}\nPOST /researchContent-Type: application/json{\"query\": \"The research topic or question\",\"breadth\": 4,// Number of search queries to generate (1-10)\"depth\": 2// Depth of research iterations (1-5)}\nResponse:\n{\"message\":\"Research process started\",\"requestId\":\"unique-trace-id\"}\n{\"message\":\"Research process started\",\"requestId\":\"unique-trace-id\"}\nCheck Research Status\nGET /research/status?requestId=unique-trace-id\nGET /research/status?requestId=unique-trace-id\nResponse:\n{\"message\":\"Research status retrieved successfully\",\"requestId\":\"unique-trace-id\",\"originalQuery\":\"The research topic or question\",\"status\":\"in-progress\",\"progress\": {\"currentDepth\":1,\"totalDepth\":2,\"percentComplete\":50},\"reportAvailable\":false}\n{\"message\":\"Research status retrieved successfully\",\"requestId\":\"unique-trace-id\",\"originalQuery\":\"The research topic or question\",\"status\":\"in-progress\",\"progress\": {\"currentDepth\":1,\"totalDepth\":2,\"percentComplete\":50},\"reportAvailable\":false}\nGet Research Report\nGET /research/report?requestId=unique-trace-id\nGET /research/report?requestId=unique-trace-id\nResponse:\n{\"message\":\"Research report retrieved successfully\",\"report\": {\"title\":\"Research Report Title\",\"overview\":\"Executive summary...\",\"sections\": [{\"title\":\"Section Title\",\"content\":\""
}
================================================================================
{
    "source_page": "AI Research Agent",
    "source_url": "https://www.motia.dev/docs/examples/ai-deep-research-agent =====",
    "chunk_topic": "AI Research Agent",
    "chunk_id": "AI Research Agent (Part 3)",
    "text": "-id\nGET /research/report?requestId=unique-trace-id\nResponse:\n{\"message\":\"Research report retrieved successfully\",\"report\": {\"title\":\"Research Report Title\",\"overview\":\"Executive summary...\",\"sections\": [{\"title\":\"Section Title\",\"content\":\"Section content...\"}],\"keyTakeaways\": [\"Key takeaway 1\",\"Key takeaway 2\"],\"sources\": [{\"title\":\"Source Title\",\"url\":\"Source URL\"}],\"originalQuery\":\"The research topic or question\",\"metadata\": {\"depthUsed\":2,\"completedAt\":\"2025-03-18T16:45:30Z\"}},\"requestId\":\"unique-trace-id\"}\n{\"message\":\"Research report retrieved successfully\",\"report\": {\"title\":\"Research Report Title\",\"overview\":\"Executive summary...\",\"sections\": [{\"title\":\"Section Title\",\"content\":\"Section content...\"}],\"keyTakeaways\": [\"Key takeaway 1\",\"Key takeaway 2\"],\"sources\": [{\"title\":\"Source Title\",\"url\":\"Source URL\"}],\"originalQuery\":\"The research topic or question\",\"metadata\": {\"depthUsed\":2,\"completedAt\":\"2025-03-18T16:45:30Z\"}},\"requestId\":\"unique-trace-id\"}\n\ud83c\udfc3\u200d\u2642\ufe0f Running the Application\nStart the development server:pnpmdev\nStart the development server:\npnpmdev\npnpmdev\nAccess the Motia Workbench:http://localhost:3000\nAccess the Motia Workbench:\nhttp://localhost:3000\nhttp://localhost:3000\nMake a test request:curl--requestPOST\\--urlhttp://localhost:3000/research\\--header'Content-Type: application/json'\\--data'{\"query\": \"Advancements in renewable energy storage\",\"depth\": 1,\"breadth\": 1}'\nMake a test request:\ncurl--requestPOST\\--urlhttp://localhost:3000/research\\--header'Content-Type: application/json'\\--data'{\"query\": \"Advancements in renewable energy storage\",\"depth\": 1,\"breadth\": 1}'\ncurl--requestPOST\\--urlhttp://localhost:3000/research\\--header'Content-Type: application/json'\\--data'{\"query\": \"Advancements in renewable energy storage\",\"depth\": 1,\"breadth\": 1}'\n\ud83d\ude4f Acknowledgments\nMotia Frameworkfor the event-driven workflow engine\nOpenAIfor AI analysis\nFirecrawlfor Web search and content extraction API\nFinance Agent"
}
================================================================================
{
    "source_page": "AI Research Agent",
    "source_url": "https://www.motia.dev/docs/examples/ai-deep-research-agent =====",
    "chunk_topic": "AI Research Agent",
    "chunk_id": "AI Research Agent (Part 4)",
    "text": " renewable energy storage\",\"depth\": 1,\"breadth\": 1}'\n\ud83d\ude4f Acknowledgments\nMotia Frameworkfor the event-driven workflow engine\nOpenAIfor AI analysis\nFirecrawlfor Web search and content extraction API\nFinance Agent\nA powerful event-driven financial analysis workflow that combines web search, financial data, and AI analysis to provide comprehensive investment insights.\nProject Structure\nLearn about Motia's project structure, file organization, and automatic step discovery system for building scalable workflow applications.\nOn this page"
}
================================================================================
{
    "source_page": "AI Development Guide",
    "source_url": "https://www.motia.dev/docs/ai-development-guide =====",
    "chunk_topic": "AI Development Guide",
    "chunk_id": "AI Development Guide",
    "text": "AI Development Guide\nGuide for building Motia applications with AI coding tools\nQuick Setup\nWhen you create a new Motia project, the AI development guides are automatically included:\nnpxmotia@latestcreatecd<your-project>\nnpxmotia@latestcreatecd<your-project>\nYour project now has AI development guides in.cursor/rules/that work with all major AI coding tools.\n.cursor/rules/\nWhat's Included\nComplete guides withTypeScript, JavaScript, and Pythonexamples for:\nAPI Steps, Event Steps, Cron Steps\nState Management, Middleware, Real-time Streaming\nVirtual Steps, UI Steps\nArchitecture & Error Handling\nSupported AI Tools\nWorks Out of the Box\nCursor IDE- Reads.cursor/rules/directly\n.cursor/rules/\nClaude Code- Uses pre-configured subagents in.claude/agents/\n.claude/agents/\nOpenCode, Codex- ViaAGENTS.md\nAGENTS.md\nAider, Jules, Factory, Amp, GitHub Copilot, Gemini CLI- ViaAGENTS.mdstandard\nComing Soon\nWindsurf, Cline\nUsage\nJust start coding - your AI tool will automatically read the guides and follow Motia patterns.\nFor Claude Code:Use/agentsto see available subagents, or invoke them directly:\n/agents\nUse the motia-developer subagent to create a email marketing backend system\nUse the motia-developer subagent to create a email marketing backend system\nUpdate Guides\nnpxmotiarulespull# Update to latestnpxmotiarulespull--force# Overwrite existing\nnpxmotiarulespull# Update to latestnpxmotiarulespull--force# Overwrite existing\nBest Practices\nCommit.cursor/,AGENTS.md, and config files to Git\n.cursor/\nAGENTS.md\nRunnpx motia rules pullafter upgrading Motia\nnpx motia rules pull\nCustomize guides for project-specific needs\nView source:/cursor-rules\nContinuous Deployment\nMove faster with continuous deployment\nVideo Showcase\nWatch Motia in action through our video demonstrations and tutorials\nOn this page"
}
================================================================================
{
    "source_page": "Video Showcase",
    "source_url": "https://www.motia.dev/docs/video-showcase =====",
    "chunk_topic": "Video Showcase",
    "chunk_id": "Video Showcase",
    "text": "Video Showcase\nWatch Motia in action through our video demonstrations and tutorials\nVideo Showcase\nExplore Motia's capabilities through our collection of demonstration videos and tutorials. These videos showcase real-world examples, feature walkthroughs, and development workflows.\nFeatured Videos\nWatch Motia in action with these curated video demonstrations\nA challenge to traditional backend development flow\nA challenge to traditional backend\nVercel but for backend\nMotia Overview\nNext.js Background Jobs Are Easy Now\nNext.js Background Jobs with Motia\nYou have never seen a DX (Developer Experience) like this\nMotia's Interactive tutorial Demo\nThe only AI framework you\u2019ll ever need\nMotia's tutorial for LinkedIn and Twitter Automation on Typefully\nAdding More Videos\nTo add more videos to this showcase, simply edit this file and add new video objects to thevideosarray. Each video should have:\nvideos\nid: A unique identifier for the video\nid\ntitle: The display title for the video\ntitle\ndescription: A brief description of what the video covers\ndescription\nurl: The YouTube URL (supports various formats)\nurl\n{id:\"your-video-id\",title:\"Your Video Title\",description:\"Brief description of the video content\",url:\"https://youtu.be/YOUR_VIDEO_ID\"}\n{id:\"your-video-id\",title:\"Your Video Title\",description:\"Brief description of the video content\",url:\"https://youtu.be/YOUR_VIDEO_ID\"}\nAI Development Guide\nGuide for building Motia applications with AI coding tools\nHow to Contribute\nGuide for developers who want to contribute to Motia\nOn this page"
}
================================================================================
{
    "source_page": "How to Contribute",
    "source_url": "https://www.motia.dev/docs/contribution =====",
    "chunk_topic": "How to Contribute",
    "chunk_id": "How to Contribute",
    "text": "How to Contribute\nGuide for developers who want to contribute to Motia\nHow to Contribute\nThank you for your interest in contributing to Motia! We welcome contributions from the community to help make Motia better. Here are some ways you can contribute:\nReporting Issues\nIf you encounter any bugs, have feature requests, or want to discuss improvements, pleaseopen an issueon our GitHub repository. When reporting bugs, please provide detailed information about your environment and steps to reproduce the issue.\nSubmitting Pull Requests\nWe appreciate pull requests for bug fixes, enhancements, or new features. To submit a pull request:\nFork theMotia repositoryon GitHub.\nCreate a new branch from themainbranch for your changes.\nmain\nMake your modifications and ensure that the code follows our coding conventions.\nWrite tests to cover your changes, if applicable.\nCommit your changes and push them to your forked repository.\nOpen a pull request against themainbranch of the Motia repository.\nmain\nPlease provide a clear description of your changes in the pull request, along with any relevant information or context.\nDocumentation Improvements\nImproving the documentation is a great way to contribute to Motia. If you find any errors, typos, or areas that need clarification, please submit a pull request with the necessary changes. The documentation source files are located in thepackages/docs/contentdirectory.\npackages/docs/content\nSharing Examples and Use Cases\nIf you have built something interesting with Motia or have a real-world use case to share, we would love to showcase it in ourExamplessection. You can contribute your examples by submitting a pull request to theMotia Examples repository.\nSpreading the Word\nHelp spread the word about Motia by sharing it with your friends, colleagues, and the developer community. You can also star ourGitHub repository, follow us onTwitter, and join ourDiscord communityto stay updated with the latest news and engage with other Motia developers.\nWe appreciate all forms of contributions and look forward to collaborating with you to make Motia even better!\nVideo Showcase\nWatch Motia in action through our video demonstrations and tutorials\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "Community Resources",
    "source_url": "https://www.motia.dev/docs/community-resources =====",
    "chunk_topic": "Community Resources",
    "chunk_id": "Community Resources (Part 1)",
    "text": "Community Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nCommunity Resources\nWelcome to the Motia community! Whether you're just getting started or building production applications, our community is here to help you succeed with Motia.\n\ud83d\udcac Get Help & Support\nDiscord Community\nBest for: Real-time help, discussions, and community support\nJoin Discord Community\nConnect with the Motia team and fellow developers, ask questions, share ideas, and get real-time help from the community.\nGitHub Issues\nBest for: Bug reports, feature requests, technical issues\nReport Issues on GitHub\nFound a bug or have a feature request? Open an issue on our GitHub repository with detailed information about your environment and steps to reproduce.\n\ud83d\ude80 Development & Contribution\nMain Repository\nThe heart of Motia development\n\u2b50 Star on GitHub\nStar our repository, contribute to the project, submit pull requests, and help shape the future of Motia.\nExamples Repository\nLearn from real-world implementations\nBrowse Examples\nExplore complete implementations, step-by-step tutorials, and production-ready configurations. Perfect for learning and building your own applications.\nRoadmap\nSee what's coming next\nView Roadmap\nCheck out our public roadmap to see upcoming features, improvements, and community requests.\n\ud83d\udcf1 Stay Connected\nSocial Media\nFollow us for the latest news, updates, and community highlights:\nYouTube Channel\nVideo tutorials, demos, and deep dives\nSubscribe to YouTube\nWatch video tutorials, live streams, and learn from the Motia team and community.\n\ud83c\udfaf Quick Links\nDocumentation\nGetting Started- Learn the basics of Motia\nAPI Endpoints Tutorial- Hands-on REST API tutorial\nExamples- Real-world use cases and implementations\nAPI Reference- Complete API documentation\nCommunity Guidelines\nHow to Contribute- Guidelines for contributing to Motia\nBe respectful- Treat everyone with kindness and respect\nHelp others- Share your knowledge and help fellow developers\nStay on topic- Keep discussions relevant to Motia and development\n\ud83d\udc9d Ways to Support Motia\n\u2b50Star our repositoryon GitHub\n\ud83d\udc26Share on social media- Help spread the word about Motia\n\ud83d\udcddWrite about your experience- Blog posts, tutorials, case studies\n\ud83d\udc1bReport bugs- Help us improve by reporting issues\n\ud83d\udca1Suggest features- Share your ideas for new features\n\ud83e\udd1dContribute code- Submit pull requests and improvements\n\ud83d\udcd6"
}
================================================================================
{
    "source_page": "Community Resources",
    "source_url": "https://www.motia.dev/docs/community-resources =====",
    "chunk_topic": "Community Resources",
    "chunk_id": "Community Resources (Part 2)",
    "text": " Blog posts, tutorials, case studies\n\ud83d\udc1bReport bugs- Help us improve by reporting issues\n\ud83d\udca1Suggest features- Share your ideas for new features\n\ud83e\udd1dContribute code- Submit pull requests and improvements\n\ud83d\udcd6Improve documentation- Help make our docs better\n\ud83c\udd98 Getting Help\nBefore Asking for Help\nCheck the documentation- Most questions are answered in our docs\nSearch existing issues- Your question might already be answered\nTry the examples- See if our examples solve your problem\nWhen Asking for Help\nBe specific- Include code snippets, error messages, and steps to reproduce\nShare your environment- OS, Node.js version, Motia version\nExplain your goal- Help us understand what you're trying to achieve\nResponse Times\nDiscord: Real-time community support (fastest)\nGitHub Issues: Official team response within 1-3 business days\nSocial Media: Community engagement and announcements\nWelcome to the Motia community!\ud83c\udf89\nWe're excited to have you here and can't wait to see what amazing things you'll build with Motia. Whether you're just getting started or you're a seasoned developer, our community is here to support your journey.\nHow to Contribute\nGuide for developers who want to contribute to Motia\nAPI Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nOn this page"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 1)",
    "text": "API Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nAPI Reference\nComplete reference documentation for Motia's TypeScript/JavaScript and Python APIs.\nCore Types\nStep Configuration Types\nConfiguration for API Steps (HTTP endpoints).\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\nConfiguration for Event Steps (background tasks).\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\nConfiguration for Cron Steps (scheduled tasks).\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\nConfiguration for NOOP Steps (visual connectors).\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 2)",
    "text": "type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\nLogger\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\nStateManager\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\nStreamsManager\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 3)",
    "text": "Channel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\nHandler Types\nAPI Handler\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\nEvent Handler\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\nCron Handler\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\nMiddleware\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\nRequest & Response Types\nApiRequest\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\nApiResponse\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 4)",
    "text": "interfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\nEmitEvent\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\nStream Configuration\nStreamConfig\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\nUtility Types\nEmit\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\nQueryParam\ninterfaceQueryParam{name:stringdescription:string}\ninterfaceQueryParam{name:stringdescription:string}\nStreamItem\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\nWhat's Next?\n\ud83d\udcdd Defining Steps\nLearn how to use these types in your Steps\n\ud83d\udd04 State Management\nDeep dive into the State API\n\ud83d\udce1 Streams\nLearn about real-time streaming\n\ud83d\udca1 Examples\nSee these APIs in action\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#api-reference =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 1)",
    "text": "API Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nAPI Reference\nComplete reference documentation for Motia's TypeScript/JavaScript and Python APIs.\nCore Types\nStep Configuration Types\nConfiguration for API Steps (HTTP endpoints).\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\nConfiguration for Event Steps (background tasks).\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\nConfiguration for Cron Steps (scheduled tasks).\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\nConfiguration for NOOP Steps (visual connectors).\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#api-reference =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 2)",
    "text": "type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\nLogger\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\nStateManager\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\nStreamsManager\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#api-reference =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 3)",
    "text": "Channel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\nHandler Types\nAPI Handler\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\nEvent Handler\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\nCron Handler\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\nMiddleware\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\nRequest & Response Types\nApiRequest\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\nApiResponse\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#api-reference =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 4)",
    "text": "interfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\nEmitEvent\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\nStream Configuration\nStreamConfig\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\nUtility Types\nEmit\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\nQueryParam\ninterfaceQueryParam{name:stringdescription:string}\ninterfaceQueryParam{name:stringdescription:string}\nStreamItem\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\nWhat's Next?\n\ud83d\udcdd Defining Steps\nLearn how to use these types in your Steps\n\ud83d\udd04 State Management\nDeep dive into the State API\n\ud83d\udce1 Streams\nLearn about real-time streaming\n\ud83d\udca1 Examples\nSee these APIs in action\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#core-types =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 1)",
    "text": "API Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nAPI Reference\nComplete reference documentation for Motia's TypeScript/JavaScript and Python APIs.\nCore Types\nStep Configuration Types\nConfiguration for API Steps (HTTP endpoints).\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\nConfiguration for Event Steps (background tasks).\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\nConfiguration for Cron Steps (scheduled tasks).\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\nConfiguration for NOOP Steps (visual connectors).\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#core-types =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 2)",
    "text": "type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\nLogger\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\nStateManager\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\nStreamsManager\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#core-types =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 3)",
    "text": "Channel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\nHandler Types\nAPI Handler\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\nEvent Handler\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\nCron Handler\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\nMiddleware\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\nRequest & Response Types\nApiRequest\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\nApiResponse\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#core-types =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 4)",
    "text": "interfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\nEmitEvent\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\nStream Configuration\nStreamConfig\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\nUtility Types\nEmit\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\nQueryParam\ninterfaceQueryParam{name:stringdescription:string}\ninterfaceQueryParam{name:stringdescription:string}\nStreamItem\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\nWhat's Next?\n\ud83d\udcdd Defining Steps\nLearn how to use these types in your Steps\n\ud83d\udd04 State Management\nDeep dive into the State API\n\ud83d\udce1 Streams\nLearn about real-time streaming\n\ud83d\udca1 Examples\nSee these APIs in action\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#step-configuration-types =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 1)",
    "text": "API Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nAPI Reference\nComplete reference documentation for Motia's TypeScript/JavaScript and Python APIs.\nCore Types\nStep Configuration Types\nConfiguration for API Steps (HTTP endpoints).\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\nConfiguration for Event Steps (background tasks).\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\nConfiguration for Cron Steps (scheduled tasks).\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\nConfiguration for NOOP Steps (visual connectors).\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#step-configuration-types =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 2)",
    "text": "type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\nLogger\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\nStateManager\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\nStreamsManager\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#step-configuration-types =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 3)",
    "text": "Channel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\nHandler Types\nAPI Handler\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\nEvent Handler\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\nCron Handler\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\nMiddleware\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\nRequest & Response Types\nApiRequest\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\nApiResponse\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#step-configuration-types =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 4)",
    "text": "interfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\nEmitEvent\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\nStream Configuration\nStreamConfig\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\nUtility Types\nEmit\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\nQueryParam\ninterfaceQueryParam{name:stringdescription:string}\ninterfaceQueryParam{name:stringdescription:string}\nStreamItem\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\nWhat's Next?\n\ud83d\udcdd Defining Steps\nLearn how to use these types in your Steps\n\ud83d\udd04 State Management\nDeep dive into the State API\n\ud83d\udce1 Streams\nLearn about real-time streaming\n\ud83d\udca1 Examples\nSee these APIs in action\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#apirouteconfig =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 1)",
    "text": "API Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nAPI Reference\nComplete reference documentation for Motia's TypeScript/JavaScript and Python APIs.\nCore Types\nStep Configuration Types\nConfiguration for API Steps (HTTP endpoints).\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\nConfiguration for Event Steps (background tasks).\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\nConfiguration for Cron Steps (scheduled tasks).\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\nConfiguration for NOOP Steps (visual connectors).\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#apirouteconfig =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 2)",
    "text": "type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\nLogger\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\nStateManager\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\nStreamsManager\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#apirouteconfig =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 3)",
    "text": "Channel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\nHandler Types\nAPI Handler\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\nEvent Handler\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\nCron Handler\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\nMiddleware\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\nRequest & Response Types\nApiRequest\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\nApiResponse\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#apirouteconfig =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 4)",
    "text": "interfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\nEmitEvent\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\nStream Configuration\nStreamConfig\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\nUtility Types\nEmit\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\nQueryParam\ninterfaceQueryParam{name:stringdescription:string}\ninterfaceQueryParam{name:stringdescription:string}\nStreamItem\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\nWhat's Next?\n\ud83d\udcdd Defining Steps\nLearn how to use these types in your Steps\n\ud83d\udd04 State Management\nDeep dive into the State API\n\ud83d\udce1 Streams\nLearn about real-time streaming\n\ud83d\udca1 Examples\nSee these APIs in action\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#eventconfig =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 1)",
    "text": "API Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nAPI Reference\nComplete reference documentation for Motia's TypeScript/JavaScript and Python APIs.\nCore Types\nStep Configuration Types\nConfiguration for API Steps (HTTP endpoints).\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\nConfiguration for Event Steps (background tasks).\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\nConfiguration for Cron Steps (scheduled tasks).\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\nConfiguration for NOOP Steps (visual connectors).\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#eventconfig =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 2)",
    "text": "type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\nLogger\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\nStateManager\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\nStreamsManager\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#eventconfig =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 3)",
    "text": "Channel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\nHandler Types\nAPI Handler\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\nEvent Handler\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\nCron Handler\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\nMiddleware\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\nRequest & Response Types\nApiRequest\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\nApiResponse\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#eventconfig =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 4)",
    "text": "interfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\nEmitEvent\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\nStream Configuration\nStreamConfig\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\nUtility Types\nEmit\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\nQueryParam\ninterfaceQueryParam{name:stringdescription:string}\ninterfaceQueryParam{name:stringdescription:string}\nStreamItem\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\nWhat's Next?\n\ud83d\udcdd Defining Steps\nLearn how to use these types in your Steps\n\ud83d\udd04 State Management\nDeep dive into the State API\n\ud83d\udce1 Streams\nLearn about real-time streaming\n\ud83d\udca1 Examples\nSee these APIs in action\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#cronconfig =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 1)",
    "text": "API Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nAPI Reference\nComplete reference documentation for Motia's TypeScript/JavaScript and Python APIs.\nCore Types\nStep Configuration Types\nConfiguration for API Steps (HTTP endpoints).\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\nConfiguration for Event Steps (background tasks).\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\nConfiguration for Cron Steps (scheduled tasks).\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\nConfiguration for NOOP Steps (visual connectors).\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#cronconfig =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 2)",
    "text": "type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\nLogger\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\nStateManager\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\nStreamsManager\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#cronconfig =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 3)",
    "text": "Channel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\nHandler Types\nAPI Handler\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\nEvent Handler\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\nCron Handler\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\nMiddleware\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\nRequest & Response Types\nApiRequest\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\nApiResponse\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#cronconfig =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 4)",
    "text": "interfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\nEmitEvent\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\nStream Configuration\nStreamConfig\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\nUtility Types\nEmit\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\nQueryParam\ninterfaceQueryParam{name:stringdescription:string}\ninterfaceQueryParam{name:stringdescription:string}\nStreamItem\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\nWhat's Next?\n\ud83d\udcdd Defining Steps\nLearn how to use these types in your Steps\n\ud83d\udd04 State Management\nDeep dive into the State API\n\ud83d\udce1 Streams\nLearn about real-time streaming\n\ud83d\udca1 Examples\nSee these APIs in action\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#noopconfig =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 1)",
    "text": "API Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nAPI Reference\nComplete reference documentation for Motia's TypeScript/JavaScript and Python APIs.\nCore Types\nStep Configuration Types\nConfiguration for API Steps (HTTP endpoints).\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\nConfiguration for Event Steps (background tasks).\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\nConfiguration for Cron Steps (scheduled tasks).\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\nConfiguration for NOOP Steps (visual connectors).\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#noopconfig =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 2)",
    "text": "type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\nLogger\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\nStateManager\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\nStreamsManager\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#noopconfig =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 3)",
    "text": "Channel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\nHandler Types\nAPI Handler\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\nEvent Handler\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\nCron Handler\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\nMiddleware\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\nRequest & Response Types\nApiRequest\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\nApiResponse\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#noopconfig =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 4)",
    "text": "interfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\nEmitEvent\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\nStream Configuration\nStreamConfig\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\nUtility Types\nEmit\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\nQueryParam\ninterfaceQueryParam{name:stringdescription:string}\ninterfaceQueryParam{name:stringdescription:string}\nStreamItem\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\nWhat's Next?\n\ud83d\udcdd Defining Steps\nLearn how to use these types in your Steps\n\ud83d\udd04 State Management\nDeep dive into the State API\n\ud83d\udce1 Streams\nLearn about real-time streaming\n\ud83d\udca1 Examples\nSee these APIs in action\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#context-api =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 1)",
    "text": "API Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nAPI Reference\nComplete reference documentation for Motia's TypeScript/JavaScript and Python APIs.\nCore Types\nStep Configuration Types\nConfiguration for API Steps (HTTP endpoints).\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\nConfiguration for Event Steps (background tasks).\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\nConfiguration for Cron Steps (scheduled tasks).\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\nConfiguration for NOOP Steps (visual connectors).\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#context-api =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 2)",
    "text": "type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\nLogger\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\nStateManager\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\nStreamsManager\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#context-api =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 3)",
    "text": "Channel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\nHandler Types\nAPI Handler\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\nEvent Handler\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\nCron Handler\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\nMiddleware\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\nRequest & Response Types\nApiRequest\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\nApiResponse\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#context-api =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 4)",
    "text": "interfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\nEmitEvent\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\nStream Configuration\nStreamConfig\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\nUtility Types\nEmit\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\nQueryParam\ninterfaceQueryParam{name:stringdescription:string}\ninterfaceQueryParam{name:stringdescription:string}\nStreamItem\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\nWhat's Next?\n\ud83d\udcdd Defining Steps\nLearn how to use these types in your Steps\n\ud83d\udd04 State Management\nDeep dive into the State API\n\ud83d\udce1 Streams\nLearn about real-time streaming\n\ud83d\udca1 Examples\nSee these APIs in action\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#flowcontext =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 1)",
    "text": "API Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nAPI Reference\nComplete reference documentation for Motia's TypeScript/JavaScript and Python APIs.\nCore Types\nStep Configuration Types\nConfiguration for API Steps (HTTP endpoints).\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\nConfiguration for Event Steps (background tasks).\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\nConfiguration for Cron Steps (scheduled tasks).\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\nConfiguration for NOOP Steps (visual connectors).\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#flowcontext =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 2)",
    "text": "type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\nLogger\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\nStateManager\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\nStreamsManager\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#flowcontext =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 3)",
    "text": "Channel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\nHandler Types\nAPI Handler\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\nEvent Handler\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\nCron Handler\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\nMiddleware\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\nRequest & Response Types\nApiRequest\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\nApiResponse\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#flowcontext =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 4)",
    "text": "interfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\nEmitEvent\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\nStream Configuration\nStreamConfig\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\nUtility Types\nEmit\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\nQueryParam\ninterfaceQueryParam{name:stringdescription:string}\ninterfaceQueryParam{name:stringdescription:string}\nStreamItem\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\nWhat's Next?\n\ud83d\udcdd Defining Steps\nLearn how to use these types in your Steps\n\ud83d\udd04 State Management\nDeep dive into the State API\n\ud83d\udce1 Streams\nLearn about real-time streaming\n\ud83d\udca1 Examples\nSee these APIs in action\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#logger =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 1)",
    "text": "API Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nAPI Reference\nComplete reference documentation for Motia's TypeScript/JavaScript and Python APIs.\nCore Types\nStep Configuration Types\nConfiguration for API Steps (HTTP endpoints).\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\nConfiguration for Event Steps (background tasks).\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\nConfiguration for Cron Steps (scheduled tasks).\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\nConfiguration for NOOP Steps (visual connectors).\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#logger =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 2)",
    "text": "type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\nLogger\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\nStateManager\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\nStreamsManager\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#logger =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 3)",
    "text": "Channel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\nHandler Types\nAPI Handler\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\nEvent Handler\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\nCron Handler\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\nMiddleware\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\nRequest & Response Types\nApiRequest\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\nApiResponse\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#logger =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 4)",
    "text": "interfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\nEmitEvent\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\nStream Configuration\nStreamConfig\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\nUtility Types\nEmit\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\nQueryParam\ninterfaceQueryParam{name:stringdescription:string}\ninterfaceQueryParam{name:stringdescription:string}\nStreamItem\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\nWhat's Next?\n\ud83d\udcdd Defining Steps\nLearn how to use these types in your Steps\n\ud83d\udd04 State Management\nDeep dive into the State API\n\ud83d\udce1 Streams\nLearn about real-time streaming\n\ud83d\udca1 Examples\nSee these APIs in action\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#statemanager =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 1)",
    "text": "API Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nAPI Reference\nComplete reference documentation for Motia's TypeScript/JavaScript and Python APIs.\nCore Types\nStep Configuration Types\nConfiguration for API Steps (HTTP endpoints).\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\nConfiguration for Event Steps (background tasks).\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\nConfiguration for Cron Steps (scheduled tasks).\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\nConfiguration for NOOP Steps (visual connectors).\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#statemanager =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 2)",
    "text": "type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\nLogger\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\nStateManager\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\nStreamsManager\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#statemanager =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 3)",
    "text": "Channel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\nHandler Types\nAPI Handler\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\nEvent Handler\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\nCron Handler\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\nMiddleware\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\nRequest & Response Types\nApiRequest\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\nApiResponse\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#statemanager =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 4)",
    "text": "interfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\nEmitEvent\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\nStream Configuration\nStreamConfig\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\nUtility Types\nEmit\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\nQueryParam\ninterfaceQueryParam{name:stringdescription:string}\ninterfaceQueryParam{name:stringdescription:string}\nStreamItem\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\nWhat's Next?\n\ud83d\udcdd Defining Steps\nLearn how to use these types in your Steps\n\ud83d\udd04 State Management\nDeep dive into the State API\n\ud83d\udce1 Streams\nLearn about real-time streaming\n\ud83d\udca1 Examples\nSee these APIs in action\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#streamsmanager =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 1)",
    "text": "API Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nAPI Reference\nComplete reference documentation for Motia's TypeScript/JavaScript and Python APIs.\nCore Types\nStep Configuration Types\nConfiguration for API Steps (HTTP endpoints).\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\nConfiguration for Event Steps (background tasks).\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\nConfiguration for Cron Steps (scheduled tasks).\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\nConfiguration for NOOP Steps (visual connectors).\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#streamsmanager =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 2)",
    "text": "type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\nLogger\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\nStateManager\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\nStreamsManager\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#streamsmanager =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 3)",
    "text": "Channel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\nHandler Types\nAPI Handler\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\nEvent Handler\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\nCron Handler\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\nMiddleware\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\nRequest & Response Types\nApiRequest\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\nApiResponse\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#streamsmanager =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 4)",
    "text": "interfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\nEmitEvent\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\nStream Configuration\nStreamConfig\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\nUtility Types\nEmit\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\nQueryParam\ninterfaceQueryParam{name:stringdescription:string}\ninterfaceQueryParam{name:stringdescription:string}\nStreamItem\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\nWhat's Next?\n\ud83d\udcdd Defining Steps\nLearn how to use these types in your Steps\n\ud83d\udd04 State Management\nDeep dive into the State API\n\ud83d\udce1 Streams\nLearn about real-time streaming\n\ud83d\udca1 Examples\nSee these APIs in action\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#handler-types =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 1)",
    "text": "API Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nAPI Reference\nComplete reference documentation for Motia's TypeScript/JavaScript and Python APIs.\nCore Types\nStep Configuration Types\nConfiguration for API Steps (HTTP endpoints).\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\nConfiguration for Event Steps (background tasks).\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\nConfiguration for Cron Steps (scheduled tasks).\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\nConfiguration for NOOP Steps (visual connectors).\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#handler-types =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 2)",
    "text": "type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\nLogger\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\nStateManager\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\nStreamsManager\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#handler-types =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 3)",
    "text": "Channel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\nHandler Types\nAPI Handler\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\nEvent Handler\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\nCron Handler\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\nMiddleware\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\nRequest & Response Types\nApiRequest\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\nApiResponse\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#handler-types =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 4)",
    "text": "interfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\nEmitEvent\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\nStream Configuration\nStreamConfig\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\nUtility Types\nEmit\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\nQueryParam\ninterfaceQueryParam{name:stringdescription:string}\ninterfaceQueryParam{name:stringdescription:string}\nStreamItem\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\nWhat's Next?\n\ud83d\udcdd Defining Steps\nLearn how to use these types in your Steps\n\ud83d\udd04 State Management\nDeep dive into the State API\n\ud83d\udce1 Streams\nLearn about real-time streaming\n\ud83d\udca1 Examples\nSee these APIs in action\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#api-handler =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 1)",
    "text": "API Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nAPI Reference\nComplete reference documentation for Motia's TypeScript/JavaScript and Python APIs.\nCore Types\nStep Configuration Types\nConfiguration for API Steps (HTTP endpoints).\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\nConfiguration for Event Steps (background tasks).\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\nConfiguration for Cron Steps (scheduled tasks).\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\nConfiguration for NOOP Steps (visual connectors).\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#api-handler =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 2)",
    "text": "type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\nLogger\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\nStateManager\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\nStreamsManager\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#api-handler =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 3)",
    "text": "Channel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\nHandler Types\nAPI Handler\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\nEvent Handler\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\nCron Handler\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\nMiddleware\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\nRequest & Response Types\nApiRequest\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\nApiResponse\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#api-handler =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 4)",
    "text": "interfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\nEmitEvent\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\nStream Configuration\nStreamConfig\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\nUtility Types\nEmit\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\nQueryParam\ninterfaceQueryParam{name:stringdescription:string}\ninterfaceQueryParam{name:stringdescription:string}\nStreamItem\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\nWhat's Next?\n\ud83d\udcdd Defining Steps\nLearn how to use these types in your Steps\n\ud83d\udd04 State Management\nDeep dive into the State API\n\ud83d\udce1 Streams\nLearn about real-time streaming\n\ud83d\udca1 Examples\nSee these APIs in action\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#event-handler =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 1)",
    "text": "API Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nAPI Reference\nComplete reference documentation for Motia's TypeScript/JavaScript and Python APIs.\nCore Types\nStep Configuration Types\nConfiguration for API Steps (HTTP endpoints).\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\nConfiguration for Event Steps (background tasks).\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\nConfiguration for Cron Steps (scheduled tasks).\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\nConfiguration for NOOP Steps (visual connectors).\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#event-handler =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 2)",
    "text": "type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\nLogger\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\nStateManager\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\nStreamsManager\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#event-handler =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 3)",
    "text": "Channel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\nHandler Types\nAPI Handler\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\nEvent Handler\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\nCron Handler\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\nMiddleware\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\nRequest & Response Types\nApiRequest\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\nApiResponse\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#event-handler =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 4)",
    "text": "interfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\nEmitEvent\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\nStream Configuration\nStreamConfig\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\nUtility Types\nEmit\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\nQueryParam\ninterfaceQueryParam{name:stringdescription:string}\ninterfaceQueryParam{name:stringdescription:string}\nStreamItem\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\nWhat's Next?\n\ud83d\udcdd Defining Steps\nLearn how to use these types in your Steps\n\ud83d\udd04 State Management\nDeep dive into the State API\n\ud83d\udce1 Streams\nLearn about real-time streaming\n\ud83d\udca1 Examples\nSee these APIs in action\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#cron-handler =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 1)",
    "text": "API Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nAPI Reference\nComplete reference documentation for Motia's TypeScript/JavaScript and Python APIs.\nCore Types\nStep Configuration Types\nConfiguration for API Steps (HTTP endpoints).\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\nConfiguration for Event Steps (background tasks).\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\nConfiguration for Cron Steps (scheduled tasks).\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\nConfiguration for NOOP Steps (visual connectors).\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#cron-handler =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 2)",
    "text": "type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\nLogger\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\nStateManager\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\nStreamsManager\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#cron-handler =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 3)",
    "text": "Channel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\nHandler Types\nAPI Handler\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\nEvent Handler\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\nCron Handler\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\nMiddleware\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\nRequest & Response Types\nApiRequest\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\nApiResponse\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#cron-handler =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 4)",
    "text": "interfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\nEmitEvent\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\nStream Configuration\nStreamConfig\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\nUtility Types\nEmit\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\nQueryParam\ninterfaceQueryParam{name:stringdescription:string}\ninterfaceQueryParam{name:stringdescription:string}\nStreamItem\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\nWhat's Next?\n\ud83d\udcdd Defining Steps\nLearn how to use these types in your Steps\n\ud83d\udd04 State Management\nDeep dive into the State API\n\ud83d\udce1 Streams\nLearn about real-time streaming\n\ud83d\udca1 Examples\nSee these APIs in action\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#middleware =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 1)",
    "text": "API Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nAPI Reference\nComplete reference documentation for Motia's TypeScript/JavaScript and Python APIs.\nCore Types\nStep Configuration Types\nConfiguration for API Steps (HTTP endpoints).\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\nConfiguration for Event Steps (background tasks).\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\nConfiguration for Cron Steps (scheduled tasks).\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\nConfiguration for NOOP Steps (visual connectors).\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#middleware =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 2)",
    "text": "type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\nLogger\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\nStateManager\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\nStreamsManager\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#middleware =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 3)",
    "text": "Channel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\nHandler Types\nAPI Handler\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\nEvent Handler\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\nCron Handler\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\nMiddleware\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\nRequest & Response Types\nApiRequest\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\nApiResponse\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#middleware =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 4)",
    "text": "interfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\nEmitEvent\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\nStream Configuration\nStreamConfig\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\nUtility Types\nEmit\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\nQueryParam\ninterfaceQueryParam{name:stringdescription:string}\ninterfaceQueryParam{name:stringdescription:string}\nStreamItem\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\nWhat's Next?\n\ud83d\udcdd Defining Steps\nLearn how to use these types in your Steps\n\ud83d\udd04 State Management\nDeep dive into the State API\n\ud83d\udce1 Streams\nLearn about real-time streaming\n\ud83d\udca1 Examples\nSee these APIs in action\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#request--response-types =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 1)",
    "text": "API Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nAPI Reference\nComplete reference documentation for Motia's TypeScript/JavaScript and Python APIs.\nCore Types\nStep Configuration Types\nConfiguration for API Steps (HTTP endpoints).\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\nConfiguration for Event Steps (background tasks).\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\nConfiguration for Cron Steps (scheduled tasks).\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\nConfiguration for NOOP Steps (visual connectors).\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#request--response-types =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 2)",
    "text": "type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\nLogger\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\nStateManager\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\nStreamsManager\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#request--response-types =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 3)",
    "text": "Channel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\nHandler Types\nAPI Handler\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\nEvent Handler\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\nCron Handler\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\nMiddleware\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\nRequest & Response Types\nApiRequest\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\nApiResponse\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#request--response-types =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 4)",
    "text": "interfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\nEmitEvent\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\nStream Configuration\nStreamConfig\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\nUtility Types\nEmit\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\nQueryParam\ninterfaceQueryParam{name:stringdescription:string}\ninterfaceQueryParam{name:stringdescription:string}\nStreamItem\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\nWhat's Next?\n\ud83d\udcdd Defining Steps\nLearn how to use these types in your Steps\n\ud83d\udd04 State Management\nDeep dive into the State API\n\ud83d\udce1 Streams\nLearn about real-time streaming\n\ud83d\udca1 Examples\nSee these APIs in action\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#apirequest =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 1)",
    "text": "API Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nAPI Reference\nComplete reference documentation for Motia's TypeScript/JavaScript and Python APIs.\nCore Types\nStep Configuration Types\nConfiguration for API Steps (HTTP endpoints).\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\nConfiguration for Event Steps (background tasks).\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\nConfiguration for Cron Steps (scheduled tasks).\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\nConfiguration for NOOP Steps (visual connectors).\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#apirequest =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 2)",
    "text": "type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\nLogger\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\nStateManager\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\nStreamsManager\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#apirequest =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 3)",
    "text": "Channel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\nHandler Types\nAPI Handler\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\nEvent Handler\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\nCron Handler\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\nMiddleware\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\nRequest & Response Types\nApiRequest\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\nApiResponse\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#apirequest =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 4)",
    "text": "interfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\nEmitEvent\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\nStream Configuration\nStreamConfig\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\nUtility Types\nEmit\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\nQueryParam\ninterfaceQueryParam{name:stringdescription:string}\ninterfaceQueryParam{name:stringdescription:string}\nStreamItem\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\nWhat's Next?\n\ud83d\udcdd Defining Steps\nLearn how to use these types in your Steps\n\ud83d\udd04 State Management\nDeep dive into the State API\n\ud83d\udce1 Streams\nLearn about real-time streaming\n\ud83d\udca1 Examples\nSee these APIs in action\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#apiresponse =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 1)",
    "text": "API Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nAPI Reference\nComplete reference documentation for Motia's TypeScript/JavaScript and Python APIs.\nCore Types\nStep Configuration Types\nConfiguration for API Steps (HTTP endpoints).\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\nConfiguration for Event Steps (background tasks).\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\nConfiguration for Cron Steps (scheduled tasks).\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\nConfiguration for NOOP Steps (visual connectors).\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#apiresponse =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 2)",
    "text": "type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\nLogger\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\nStateManager\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\nStreamsManager\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#apiresponse =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 3)",
    "text": "Channel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\nHandler Types\nAPI Handler\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\nEvent Handler\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\nCron Handler\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\nMiddleware\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\nRequest & Response Types\nApiRequest\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\nApiResponse\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#apiresponse =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 4)",
    "text": "interfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\nEmitEvent\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\nStream Configuration\nStreamConfig\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\nUtility Types\nEmit\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\nQueryParam\ninterfaceQueryParam{name:stringdescription:string}\ninterfaceQueryParam{name:stringdescription:string}\nStreamItem\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\nWhat's Next?\n\ud83d\udcdd Defining Steps\nLearn how to use these types in your Steps\n\ud83d\udd04 State Management\nDeep dive into the State API\n\ud83d\udce1 Streams\nLearn about real-time streaming\n\ud83d\udca1 Examples\nSee these APIs in action\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#emitevent =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 1)",
    "text": "API Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nAPI Reference\nComplete reference documentation for Motia's TypeScript/JavaScript and Python APIs.\nCore Types\nStep Configuration Types\nConfiguration for API Steps (HTTP endpoints).\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\nConfiguration for Event Steps (background tasks).\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\nConfiguration for Cron Steps (scheduled tasks).\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\nConfiguration for NOOP Steps (visual connectors).\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#emitevent =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 2)",
    "text": "type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\nLogger\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\nStateManager\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\nStreamsManager\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#emitevent =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 3)",
    "text": "Channel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\nHandler Types\nAPI Handler\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\nEvent Handler\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\nCron Handler\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\nMiddleware\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\nRequest & Response Types\nApiRequest\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\nApiResponse\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#emitevent =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 4)",
    "text": "interfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\nEmitEvent\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\nStream Configuration\nStreamConfig\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\nUtility Types\nEmit\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\nQueryParam\ninterfaceQueryParam{name:stringdescription:string}\ninterfaceQueryParam{name:stringdescription:string}\nStreamItem\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\nWhat's Next?\n\ud83d\udcdd Defining Steps\nLearn how to use these types in your Steps\n\ud83d\udd04 State Management\nDeep dive into the State API\n\ud83d\udce1 Streams\nLearn about real-time streaming\n\ud83d\udca1 Examples\nSee these APIs in action\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#stream-configuration =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 1)",
    "text": "API Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nAPI Reference\nComplete reference documentation for Motia's TypeScript/JavaScript and Python APIs.\nCore Types\nStep Configuration Types\nConfiguration for API Steps (HTTP endpoints).\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\nConfiguration for Event Steps (background tasks).\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\nConfiguration for Cron Steps (scheduled tasks).\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\nConfiguration for NOOP Steps (visual connectors).\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#stream-configuration =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 2)",
    "text": "type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\nLogger\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\nStateManager\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\nStreamsManager\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#stream-configuration =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 3)",
    "text": "Channel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\nHandler Types\nAPI Handler\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\nEvent Handler\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\nCron Handler\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\nMiddleware\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\nRequest & Response Types\nApiRequest\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\nApiResponse\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#stream-configuration =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 4)",
    "text": "interfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\nEmitEvent\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\nStream Configuration\nStreamConfig\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\nUtility Types\nEmit\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\nQueryParam\ninterfaceQueryParam{name:stringdescription:string}\ninterfaceQueryParam{name:stringdescription:string}\nStreamItem\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\nWhat's Next?\n\ud83d\udcdd Defining Steps\nLearn how to use these types in your Steps\n\ud83d\udd04 State Management\nDeep dive into the State API\n\ud83d\udce1 Streams\nLearn about real-time streaming\n\ud83d\udca1 Examples\nSee these APIs in action\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#streamconfig =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 1)",
    "text": "API Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nAPI Reference\nComplete reference documentation for Motia's TypeScript/JavaScript and Python APIs.\nCore Types\nStep Configuration Types\nConfiguration for API Steps (HTTP endpoints).\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\nConfiguration for Event Steps (background tasks).\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\nConfiguration for Cron Steps (scheduled tasks).\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\nConfiguration for NOOP Steps (visual connectors).\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#streamconfig =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 2)",
    "text": "type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\nLogger\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\nStateManager\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\nStreamsManager\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#streamconfig =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 3)",
    "text": "Channel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\nHandler Types\nAPI Handler\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\nEvent Handler\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\nCron Handler\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\nMiddleware\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\nRequest & Response Types\nApiRequest\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\nApiResponse\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#streamconfig =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 4)",
    "text": "interfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\nEmitEvent\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\nStream Configuration\nStreamConfig\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\nUtility Types\nEmit\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\nQueryParam\ninterfaceQueryParam{name:stringdescription:string}\ninterfaceQueryParam{name:stringdescription:string}\nStreamItem\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\nWhat's Next?\n\ud83d\udcdd Defining Steps\nLearn how to use these types in your Steps\n\ud83d\udd04 State Management\nDeep dive into the State API\n\ud83d\udce1 Streams\nLearn about real-time streaming\n\ud83d\udca1 Examples\nSee these APIs in action\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#utility-types =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 1)",
    "text": "API Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nAPI Reference\nComplete reference documentation for Motia's TypeScript/JavaScript and Python APIs.\nCore Types\nStep Configuration Types\nConfiguration for API Steps (HTTP endpoints).\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\nConfiguration for Event Steps (background tasks).\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\nConfiguration for Cron Steps (scheduled tasks).\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\nConfiguration for NOOP Steps (visual connectors).\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#utility-types =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 2)",
    "text": "type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\nLogger\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\nStateManager\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\nStreamsManager\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#utility-types =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 3)",
    "text": "Channel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\nHandler Types\nAPI Handler\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\nEvent Handler\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\nCron Handler\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\nMiddleware\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\nRequest & Response Types\nApiRequest\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\nApiResponse\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#utility-types =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 4)",
    "text": "interfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\nEmitEvent\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\nStream Configuration\nStreamConfig\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\nUtility Types\nEmit\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\nQueryParam\ninterfaceQueryParam{name:stringdescription:string}\ninterfaceQueryParam{name:stringdescription:string}\nStreamItem\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\nWhat's Next?\n\ud83d\udcdd Defining Steps\nLearn how to use these types in your Steps\n\ud83d\udd04 State Management\nDeep dive into the State API\n\ud83d\udce1 Streams\nLearn about real-time streaming\n\ud83d\udca1 Examples\nSee these APIs in action\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#emit =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 1)",
    "text": "API Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nAPI Reference\nComplete reference documentation for Motia's TypeScript/JavaScript and Python APIs.\nCore Types\nStep Configuration Types\nConfiguration for API Steps (HTTP endpoints).\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\nConfiguration for Event Steps (background tasks).\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\nConfiguration for Cron Steps (scheduled tasks).\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\nConfiguration for NOOP Steps (visual connectors).\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#emit =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 2)",
    "text": "type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\nLogger\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\nStateManager\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\nStreamsManager\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#emit =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 3)",
    "text": "Channel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\nHandler Types\nAPI Handler\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\nEvent Handler\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\nCron Handler\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\nMiddleware\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\nRequest & Response Types\nApiRequest\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\nApiResponse\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#emit =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 4)",
    "text": "interfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\nEmitEvent\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\nStream Configuration\nStreamConfig\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\nUtility Types\nEmit\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\nQueryParam\ninterfaceQueryParam{name:stringdescription:string}\ninterfaceQueryParam{name:stringdescription:string}\nStreamItem\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\nWhat's Next?\n\ud83d\udcdd Defining Steps\nLearn how to use these types in your Steps\n\ud83d\udd04 State Management\nDeep dive into the State API\n\ud83d\udce1 Streams\nLearn about real-time streaming\n\ud83d\udca1 Examples\nSee these APIs in action\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#queryparam =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 1)",
    "text": "API Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nAPI Reference\nComplete reference documentation for Motia's TypeScript/JavaScript and Python APIs.\nCore Types\nStep Configuration Types\nConfiguration for API Steps (HTTP endpoints).\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\nConfiguration for Event Steps (background tasks).\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\nConfiguration for Cron Steps (scheduled tasks).\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\nConfiguration for NOOP Steps (visual connectors).\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#queryparam =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 2)",
    "text": "type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\nLogger\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\nStateManager\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\nStreamsManager\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#queryparam =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 3)",
    "text": "Channel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\nHandler Types\nAPI Handler\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\nEvent Handler\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\nCron Handler\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\nMiddleware\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\nRequest & Response Types\nApiRequest\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\nApiResponse\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#queryparam =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 4)",
    "text": "interfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\nEmitEvent\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\nStream Configuration\nStreamConfig\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\nUtility Types\nEmit\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\nQueryParam\ninterfaceQueryParam{name:stringdescription:string}\ninterfaceQueryParam{name:stringdescription:string}\nStreamItem\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\nWhat's Next?\n\ud83d\udcdd Defining Steps\nLearn how to use these types in your Steps\n\ud83d\udd04 State Management\nDeep dive into the State API\n\ud83d\udce1 Streams\nLearn about real-time streaming\n\ud83d\udca1 Examples\nSee these APIs in action\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#streamitem =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 1)",
    "text": "API Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nAPI Reference\nComplete reference documentation for Motia's TypeScript/JavaScript and Python APIs.\nCore Types\nStep Configuration Types\nConfiguration for API Steps (HTTP endpoints).\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\nConfiguration for Event Steps (background tasks).\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\nConfiguration for Cron Steps (scheduled tasks).\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\nConfiguration for NOOP Steps (visual connectors).\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#streamitem =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 2)",
    "text": "type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\nLogger\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\nStateManager\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\nStreamsManager\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#streamitem =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 3)",
    "text": "Channel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\nHandler Types\nAPI Handler\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\nEvent Handler\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\nCron Handler\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\nMiddleware\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\nRequest & Response Types\nApiRequest\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\nApiResponse\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#streamitem =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 4)",
    "text": "interfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\nEmitEvent\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\nStream Configuration\nStreamConfig\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\nUtility Types\nEmit\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\nQueryParam\ninterfaceQueryParam{name:stringdescription:string}\ninterfaceQueryParam{name:stringdescription:string}\nStreamItem\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\nWhat's Next?\n\ud83d\udcdd Defining Steps\nLearn how to use these types in your Steps\n\ud83d\udd04 State Management\nDeep dive into the State API\n\ud83d\udce1 Streams\nLearn about real-time streaming\n\ud83d\udca1 Examples\nSee these APIs in action\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#whats-next =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 1)",
    "text": "API Reference\nComplete API reference for Motia framework - types, interfaces, and utilities\nAPI Reference\nComplete reference documentation for Motia's TypeScript/JavaScript and Python APIs.\nCore Types\nStep Configuration Types\nConfiguration for API Steps (HTTP endpoints).\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\ninterfaceApiRouteConfig{type:'api'name:stringdescription?:stringpath:stringmethod:'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'|'HEAD'emits:Emit[]virtualEmits?:Emit[]virtualSubscribes?:string[]flows?:string[]middleware?:ApiMiddleware[]bodySchema?:ZodInputresponseSchema?:Record<number,ZodInput>queryParams?:QueryParam[]includeFiles?:string[]}\nConfiguration for Event Steps (background tasks).\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\ninterfaceEventConfig{type:'event'name:stringdescription?:stringsubscribes:string[]emits:Emit[]virtualEmits?:Emit[]input:ZodInputflows?:string[]includeFiles?:string[]}\nConfiguration for Cron Steps (scheduled tasks).\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\ninterfaceCronConfig{type:'cron'name:stringdescription?:stringcron:stringemits:Emit[]virtualEmits?:Emit[]flows?:string[]includeFiles?:string[]}\nConfiguration for NOOP Steps (visual connectors).\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\ninterfaceNoopConfig{type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#whats-next =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 2)",
    "text": "type:'noop'name:stringdescription?:stringvirtualEmits:Emit[]virtualSubscribes:string[]flows?:string[]}\nContext API\nThe context object available in all Step handlers.\nFlowContext\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\ninterfaceFlowContext<TEmitData=never> {// Event emissionemit:(event:EmitEvent<TEmitData>)=>Promise<void>// Structured logginglogger:Logger// State managementstate:StateManager// Real-time streamsstreams:StreamsManager// Request tracingtraceId:string}\nLogger\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\ninterfaceLogger{info(message:string,metadata?:Record<string,any>):voiderror(message:string,metadata?:Record<string,any>):voidwarn(message:string,metadata?:Record<string,any>):voiddebug(message:string,metadata?:Record<string,any>):void}\nStateManager\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\ninterfaceStateManager{get<T>(groupId:string,key:string):Promise<T|null>set<T>(groupId:string,key:string,value:T):Promise<T>delete<T>(groupId:string,key:string):Promise<T|null>getGroup<T>(groupId:string):Promise<T[]>clear(groupId:string):Promise<void>}\nStreamsManager\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#whats-next =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 3)",
    "text": "Channel,event:StateStreamEvent<T>):Promise<void>}\ninterfaceMotiaStream<TData> {get(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>set(groupId:string,id:string,data:TData):Promise<BaseStreamItem<TData>>delete(groupId:string,id:string):Promise<BaseStreamItem<TData>|null>getGroup(groupId:string):Promise<BaseStreamItem<TData>[]>send<T>(channel:StateStreamEventChannel,event:StateStreamEvent<T>):Promise<void>}\nHandler Types\nAPI Handler\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\ntypeApiRouteHandler<TRequestBody=unknown,TResponseBodyextendsApiResponse<number,unknown>=ApiResponse<number,unknown>,TEmitData=never>=(req:ApiRequest<TRequestBody>,ctx:FlowContext<TEmitData>)=>Promise<TResponseBody>\nEvent Handler\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeEventHandler<TInput=unknown,TEmitData=never>=(input:TInput,ctx:FlowContext<TEmitData>)=>Promise<void>\nCron Handler\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\ntypeCronHandler<TEmitData=never>=(ctx:FlowContext<TEmitData>)=>Promise<void>\nMiddleware\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\ntypeApiMiddleware=(req:ApiRequest,ctx:FlowContext,next:()=>Promise<ApiResponse>)=>Promise<ApiResponse>\nRequest & Response Types\nApiRequest\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\ninterfaceApiRequest<TBody=unknown> {pathParams:Record<string,string>queryParams:Record<string,string|string[]>body:TBodyheaders:Record<string,string|string[]>}\nApiResponse\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody"
}
================================================================================
{
    "source_page": "API Reference",
    "source_url": "https://www.motia.dev/docs/api-reference#whats-next =====",
    "chunk_topic": "API Reference",
    "chunk_id": "API Reference (Part 4)",
    "text": "interfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\ninterfaceApiResponse<TStatusextendsnumber=number,TBody=unknown> {status:TStatusbody:TBodyheaders?:Record<string,string|string[]>}\nEmitEvent\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\ninterfaceEmitEvent<TData=unknown> {topic:stringdata:TData}\nStream Configuration\nStreamConfig\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\ninterfaceStreamConfig{name:stringschema:ZodInputbaseConfig:{storageType:'default'}}\nUtility Types\nEmit\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\ntypeEmit=string|{topic:stringlabel?:stringconditional?:boolean}\nQueryParam\ninterfaceQueryParam{name:stringdescription:string}\ninterfaceQueryParam{name:stringdescription:string}\nStreamItem\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\ninterfaceBaseStreamItem<TData> {groupId:stringid:stringdata:TDatacreatedAt:stringupdatedAt:string}\nWhat's Next?\n\ud83d\udcdd Defining Steps\nLearn how to use these types in your Steps\n\ud83d\udd04 State Management\nDeep dive into the State API\n\ud83d\udce1 Streams\nLearn about real-time streaming\n\ud83d\udca1 Examples\nSee these APIs in action\nCommunity Resources\nJoin the Motia community and get help with questions, examples, and discussions.\nOn this page"
}
================================================================================
{
    "source_page": "State Management",
    "source_url": "https://www.motia.dev/docs/development-guide/state-management =====",
    "chunk_topic": "State Management",
    "chunk_id": "State Management (Part 1)",
    "text": "State Management\nLearn how to manage state within your Motia.dev workflows for persistent data and cross-step communication.\nState management is fundamental to building robust and dynamic workflows in Motia.dev. Our system is designed to be powerful yet simple, providing you with everything you need to maintain state across your flows and steps:\n\u2728Zero Configuration (Default):In-memory storage out of the box for quick setup.\ud83d\udd0cFlexible Storage Options:Choose from Memory, File, and Redis adapters to suit your persistence needs.\ud83e\uddf9Automatic State Cleanup:Optional Time-To-Live (TTL) support for automatic state expiration (Redis).\ud83d\udd12Built-in Isolation:Each flow execution can use its own isolated state, ensuring data separation and security.\nCore Concepts: State Manager Methods\nThestateobject, accessible within your step handlers via thectxcontext, provides the following methods for state management:\nstate\nctx\nget\nscope: string, key: string\nPromise<T | null>\nkey\nscope\nnull\nT\nset\nscope: string, key: string, value: T\nPromise<void>\nvalue\nkey\nscope\nT\ndelete\nscope: string, key: string\nPromise<void>\nkey\nscope\nclear\nscope: string\nPromise<void>\nscope\ncleanup\nPromise<void>\nImportant:State manager methods (get,set,delete,clear)require ascopestring as the first parameter.While in most cases, you will use thetraceId(automatically provided inctx.traceId) as the scope to ensure flow-level isolation,you can technically use any string value as the scopeto group and manage state data as needed. UsingtraceIdis the recommended and most common practice for flow-isolated state.\nget\nset\ndelete\nclear\nscope\ntraceId\nctx.traceId\ntraceId\nState Scope and Isolation\nEach flow execution in Motia.dev is assigned a uniquetraceId(a UUID). Using thistraceIdas thescopefor state management provides automatic isolation, ensuring:(Revised to clarifytraceIdas scope)\ntraceId\ntraceId\ntraceId\ntraceId\ntraceId\ntraceId\nstate.clear(traceId)\nState Structure Example\nState data is stored as key-value pairs, namespaced under a scope string. When usingtraceIdas the scope, the internal structure might look like this:\ntraceId\n// Example state structure (internal representation) - using traceId as scope{\"motia:state:{"
}
================================================================================
{
    "source_page": "State Management",
    "source_url": "https://www.motia.dev/docs/development-guide/state-management =====",
    "chunk_topic": "State Management",
    "chunk_id": "State Management (Part 2)",
    "text": " key-value pairs, namespaced under a scope string. When usingtraceIdas the scope, the internal structure might look like this:\ntraceId\n// Example state structure (internal representation) - using traceId as scope{\"motia:state:{traceId-123}\": {// State for flow execution with traceId 'traceId-123' (scope)\"booking\": {// Namespaced key 'booking'\"customer\": {...},\"venue\": {...}},\"payment\": {// Namespaced key 'payment'\"status\":\"pending\",\"amount\":100}},\"motia:state:{traceId-456}\": {// State for another flow execution with traceId 'traceId-456' (different scope)// ... different state data for this flow ...}}\n// Example state structure (internal representation) - using traceId as scope{\"motia:state:{traceId-123}\": {// State for flow execution with traceId 'traceId-123' (scope)\"booking\": {// Namespaced key 'booking'\"customer\": {...},\"venue\": {...}},\"payment\": {// Namespaced key 'payment'\"status\":\"pending\",\"amount\":100}},\"motia:state:{traceId-456}\": {// State for another flow execution with traceId 'traceId-456' (different scope)// ... different state data for this flow ...}}\nInfo:You can access thestatemanager within any step through thectx(context) argument, which is automatically injected into yourstep handler. WhiletraceIdfromctx.traceIdis the recommended scope for flow isolation, remember thatyou can use any string as the scopeparameter instatemethods for more advanced state management scenarios.\nstate\nctx\ntraceId\nctx.traceId\nstate\nUsing State in Steps\nimport{ Handlers }from'motia'interfaceBookingData{customer:{name:string;email:string};venue:{id:string;name:string};}exportconsthandler:Handlers['StepName']=async(input, {state,traceId})=>{// Get traceId from context// Store state (using traceId as scope)awaitstate.set<BookingData>(traceId,'booking', {customer: input.customer,venue: input.venue,});// Retrieve state (using traceId as scope)constbooking=awaitstate.get<BookingData>(traceId,'booking');// Delete specific state (using traceId as scope)awaitstate.delete(traceId,'booking');// Clear all state for this flow (using traceId as scope)awaitstate.clear(traceId);}\n"
}
================================================================================
{
    "source_page": "State Management",
    "source_url": "https://www.motia.dev/docs/development-guide/state-management =====",
    "chunk_topic": "State Management",
    "chunk_id": "State Management (Part 3)",
    "text": "=awaitstate.get<BookingData>(traceId,'booking');// Delete specific state (using traceId as scope)awaitstate.delete(traceId,'booking');// Clear all state for this flow (using traceId as scope)awaitstate.clear(traceId);}\nimport{ Handlers }from'motia'interfaceBookingData{customer:{name:string;email:string};venue:{id:string;name:string};}exportconsthandler:Handlers['StepName']=async(input, {state,traceId})=>{// Get traceId from context// Store state (using traceId as scope)awaitstate.set<BookingData>(traceId,'booking', {customer: input.customer,venue: input.venue,});// Retrieve state (using traceId as scope)constbooking=awaitstate.get<BookingData>(traceId,'booking');// Delete specific state (using traceId as scope)awaitstate.delete(traceId,'booking');// Clear all state for this flow (using traceId as scope)awaitstate.clear(traceId);}\nDebugging\nInspecting State\nState is only available during runtime in the Node.js process memory. You cannot inspect memory state directly outside of a running step execution. Use logging within your steps to output state values for debugging purposes.\nBest Practices\nNamespacing\nUse dot notation to organize related state data hierarchically:\n// Good - Organized hierarchically (using traceId scope)awaitstate.set(traceId,'booking.customer', customerData)awaitstate.set(traceId,'booking.venue', venueData)awaitstate.set(traceId,'payment.status','pending')// Avoid - Flat structure (using traceId scope)awaitstate.set(traceId,'customer', customerData)awaitstate.set(traceId,'venue', venueData)awaitstate.set(traceId,'paymentStatus','pending')\n// Good - Organized hierarchically (using traceId scope)awaitstate.set(traceId,'booking.customer', customerData)awaitstate.set(traceId,'booking.venue', venueData)awaitstate.set(traceId,'payment.status','pending')// Avoid - Flat structure (using traceId scope)awaitstate.set(traceId,'customer', customerData)awaitstate.set(traceId,'venue', venueData)awaitstate.set(traceId,'paymentStatus','pending')\nType Safety\nDefine types for your state data to ensure consistency:\ninterfaceCustomerData{name:string;email:string;}interfaceVenueData{id:string;capacity:number;}typeBookingState={customer:CustomerData;venue:VenueData;status"
}
================================================================================
{
    "source_page": "State Management",
    "source_url": "https://www.motia.dev/docs/development-guide/state-management =====",
    "chunk_topic": "State Management",
    "chunk_id": "State Management (Part 4)",
    "text": "Status','pending')\nType Safety\nDefine types for your state data to ensure consistency:\ninterfaceCustomerData{name:string;email:string;}interfaceVenueData{id:string;capacity:number;}typeBookingState={customer:CustomerData;venue:VenueData;status:'pending'|'confirmed';}constbooking=awaitstate.get<BookingState>(traceId,'booking')\ninterfaceCustomerData{name:string;email:string;}interfaceVenueData{id:string;capacity:number;}typeBookingState={customer:CustomerData;venue:VenueData;status:'pending'|'confirmed';}constbooking=awaitstate.get<BookingState>(traceId,'booking')\nCleanup\nAlways clean up state when you're done with it:\nexportconsthandler:Handlers['StepName']=async(input, {state,traceId})=>{try{awaitprocessBooking(input)// Clean up specific keysawaitstate.delete(traceId,'booking.customer')// Or clean everythingawaitstate.clear(traceId)}catch(error) {// Handle errors}}\nexportconsthandler:Handlers['StepName']=async(input, {state,traceId})=>{try{awaitprocessBooking(input)// Clean up specific keysawaitstate.delete(traceId,'booking.customer')// Or clean everythingawaitstate.clear(traceId)}catch(error) {// Handle errors}}\nPerformance Considerations\nCustom State Adapters\nimport{ StateAdapter }from'motia'classCustomStateAdapterextendsStateAdapter{asyncget<T>(traceId:string,key:string):Promise<T|null> {// Implementationreturnnull}asyncset<T>(traceId:string,key:string,value:T):Promise<void> {// Implementation}asyncdelete(traceId:string,key:string):Promise<void> {// Implementation}asyncclear(traceId:string):Promise<void> {// Implementation}asynccleanup():Promise<void> {// Implementation}}\nimport{ StateAdapter }from'motia'classCustomStateAdapterextendsStateAdapter{asyncget<T>(traceId:string,key:string):Promise<T|null> {// Implementationreturnnull}asyncset<T>(traceId:string,key:string,value:T):Promise<void> {// Implementation}asyncdelete(traceId:string,key:string):Promise<void> {// Implementation}asyncclear(traceId:string):Promise<void> {// Implementation}asynccleanup():Promise<void> {// Implementation}}\nStorage Adapters\nMotia.dev offers three built-in storage adapters:\n\ud83d\udcc1File (Default):Persists state to a JSON file in your project (.motia/motia.state.json). No configuration needed for basic use.\n.motia/m"
}
================================================================================
{
    "source_page": "State Management",
    "source_url": "https://www.motia.dev/docs/development-guide/state-management =====",
    "chunk_topic": "State Management",
    "chunk_id": "State Management (Part 5)",
    "text": " Adapters\nMotia.dev offers three built-in storage adapters:\n\ud83d\udcc1File (Default):Persists state to a JSON file in your project (.motia/motia.state.json). No configuration needed for basic use.\n.motia/motia.state.json\n\ud83d\udcbeMemory:Stores state in-memory. Fastest option, but state is not persistent across server restarts. Useful for development and non-critical data.\n\u26a1Redis:Leverages Redis for persistent and scalable state storage. Ideal for production environments and flows requiring high availability and data durability.\nTo configure a different state adapter, modify theconfig.ymlfile in your project root:\nconfig.yml\nmy-project/\u251c\u2500\u2500 config.yml\u2514\u2500\u2500 steps/\u251c\u2500\u2500 step-1.ts\u2514\u2500\u2500 step-2.ts\nmy-project/\u251c\u2500\u2500 config.yml\u2514\u2500\u2500 steps/\u251c\u2500\u2500 step-1.ts\u2514\u2500\u2500 step-2.ts\nFile Adapter (Default)\nDefault, no configuration required, state is stored into .motia/motia.state.json in your project root\nMemory Adapter\nstate:adapter:memory\nstate:adapter:memory\nWarning: Memory AdapterState is stored in-memory and will be lost when the Motia.dev server restarts. Suitable for development and testing.\nRedis Adapter\nstate:adapter:redishost:localhost# Redis server host (e.g., 'localhost' or IP address)port:6379# Redis server port (default: 6379)password:optional# Redis password (if required)ttl:3600# Optional: State Time-To-Live in seconds (e.g., 3600 seconds = 1 hour)\nstate:adapter:redishost:localhost# Redis server host (e.g., 'localhost' or IP address)port:6379# Redis server port (default: 6379)password:optional# Redis password (if required)ttl:3600# Optional: State Time-To-Live in seconds (e.g., 3600 seconds = 1 hour)\nInfo: Redis AdapterRecommended for production environments. Requires a running Redis server. Thettl(Time-To-Live) option is available to automatically expire state data after a specified number of seconds, helping to manage Redis storage.\nttl\nCommon Issues\ntraceId\nstate.get(traceId, key)\nProject Structure\nLearn about Motia's project structure, file organization, and automatic step discovery system for building scalable workflow applications.\nReal"
}
================================================================================
{
    "source_page": "State Management",
    "source_url": "https://www.motia.dev/docs/development-guide/state-management =====",
    "chunk_topic": "State Management",
    "chunk_id": "State Management (Part 6)",
    "text": " of seconds, helping to manage Redis storage.\nttl\nCommon Issues\ntraceId\nstate.get(traceId, key)\nProject Structure\nLearn about Motia's project structure, file organization, and automatic step discovery system for building scalable workflow applications.\nReal-time Streams\nMotia Streams are a way to quickly push updates from your asynchronous workflows to the client without having to implement any sort of polling processes.\nOn this page"
}
================================================================================
{
    "source_page": "Project Structure",
    "source_url": "https://www.motia.dev/docs/development-guide/project-structure =====",
    "chunk_topic": "Project Structure",
    "chunk_id": "Project Structure (Part 1)",
    "text": "Project Structure\nLearn about Motia's project structure, file organization, and automatic step discovery system for building scalable workflow applications.\nProject Structure\nUnderstanding how to organize your Motia project is crucial for building maintainable and scalable workflow applications. This guide covers the directory structure, file naming conventions, and Motia's automatic step discovery system.\nBasic Project Structure\nHere's what a typical Motia project looks like:\nFile Descriptions\n01-api-gateway.step.ts\n02-data-processor_step.py\n03-send-notification.step.js\nsend-notification.tsx\npackage.json\nrequirements.txt\ntsconfig.json\ntypes.d.ts\nmotia-workbench.json\nconfig.yml\nThesteps/directory is the heart of your Motia application - this is where all your workflow logic lives. Motia automatically discovers and registers any file following the naming pattern.\nsteps/\nThesteps/directory must live at theproject root(e.g.,my-motia-project/steps).\nsteps/\nmy-motia-project/steps\nYou can freely nest steps in subfolders understeps/(e.g.,steps/aaa/a1.step.ts,steps/bbb/ccc/c1_step.py).\nsteps/\nsteps/aaa/a1.step.ts\nsteps/bbb/ccc/c1_step.py\nDiscovery is recursive insidesteps/, so deeper folder structures for large apps are supported.\nsteps/\nAutomatic Step Discovery\nKey Concept: Automatic Discovery\nMotia will automatically discover and registerany filethat follows the.step.naming pattern as a workflow step. You don't need to manually register steps - just create a file with the right naming pattern and Motia will find it.\n.step.\nDiscovery Rules\nMotia scans yoursteps/directory and automatically registers files as steps based on these rules:\nsteps/\nFile must contain.step.or_step.in the filename(e.g.,my-task.step.ts,my_task_step.py)\n.step.\n_step.\nmy-task.step.ts\nmy_task_step.py\nFile must export aconfigobjectdefining the step configuration\nconfig\nFile must export ahandlerfunctioncontaining the step logic\nhandler\nFile extension determines the runtime(.ts= TypeScript,.py= Python,.js= JavaScript)\n.ts\n.py\n.js\nWhen you runmotia dev, Motia will:\nmotia dev\nScan thesteps/directory recursively\nsteps/\nFind all files matching*.step.*\n*.step.*\nParse theirconfigexports to understand step types and connections\nconfig\nRegister them in the workflow engine\nMake them available"
}
================================================================================
{
    "source_page": "Project Structure",
    "source_url": "https://www.motia.dev/docs/development-guide/project-structure =====",
    "chunk_topic": "Project Structure",
    "chunk_id": "Project Structure (Part 2)",
    "text": " Motia will:\nmotia dev\nScan thesteps/directory recursively\nsteps/\nFind all files matching*.step.*\n*.step.*\nParse theirconfigexports to understand step types and connections\nconfig\nRegister them in the workflow engine\nMake them available in the Workbench\nFile Naming Convention\nMotia uses this specific pattern for automatic step discovery:\n[prefix-]descriptive-name.step.[extension]\n[prefix-]descriptive-name.step.[extension]\nThe.step.part in the filename isrequired- this is how Motia identifies which files are workflow steps during automatic discovery.\n.step.\nSupported Languages & Extensions\n.ts\nuser-registration.step.ts\n.py\ndata-analysis_step.py\n.js\nsend-notification.step.js\nNaming Examples by Step Type\n01-auth-api.step.ts\n01-auth-api_step.py\nauth_api_step.py\n01-auth-api.step.js\nprocess-order.step.ts\nprocess-order_step.py\nprocess_order_step.py\nprocess-order.step.js\ndaily-report.step.ts\ndaily-report_step.py\ndaily_report_step.py\ndaily-report.step.js\ntransform-data.step.ts\nml-analysis_step.py\nml_analysis_step.py\ndata-cleanup.step.js\nStep Organization Patterns\nSequential Flow Organization\nPerfect for linear workflows where order matters:\n01-api-start.step.ts\n02-validate-data_step.py\n03-process-payment.step.js\n04-send-confirmation.step.ts\n05-cleanup_step.py\nLanguage-Specific Configuration\nTypeScript/JavaScript Projects\nFor Node.js-based steps, you'll need:\n{\"name\":\"my-motia-app\",\"version\":\"1.0.0\",\"scripts\": {\"dev\":\"motia dev\",\"build\":\"motia build\",\"start\":\"motia start\"},\"dependencies\": {\"motia\":\"^0.5.12-beta.121\",\"zod\":\"^3.24.4\"},\"devDependencies\": {\"typescript\":\"^5.7.3\",\"@types/node\":\"^20.0.0\"}}\n{\"name\":\"my-motia-app\",\"version\":\"1.0.0\",\"scripts\": {\"dev\":\"motia dev\",\"build\":\"motia build\",\"start\":\"motia start\"},\"dependencies\": {\"motia\":\"^0.5.12-beta.121\",\"zod\":\"^3.24.4\"},\"devDependencies\": {\"typescript\":\"^5.7.3\",\"@types/node\":\"^20.0.0\"}}\n{\"compilerOptions\": {\"target\":\"ES2020\",\"module\":\"ESNext\",\"moduleResolution\":\"Node\",\"esModule"
}
================================================================================
{
    "source_page": "Project Structure",
    "source_url": "https://www.motia.dev/docs/development-guide/project-structure =====",
    "chunk_topic": "Project Structure",
    "chunk_id": "Project Structure (Part 3)",
    "text": "24.4\"},\"devDependencies\": {\"typescript\":\"^5.7.3\",\"@types/node\":\"^20.0.0\"}}\n{\"compilerOptions\": {\"target\":\"ES2020\",\"module\":\"ESNext\",\"moduleResolution\":\"Node\",\"esModuleInterop\":true,\"strict\":true,\"skipLibCheck\":true},\"include\": [\"**/*.ts\",\"**/*.tsx\"],\"exclude\": [\"node_modules\",\"dist\"]}\n{\"compilerOptions\": {\"target\":\"ES2020\",\"module\":\"ESNext\",\"moduleResolution\":\"Node\",\"esModuleInterop\":true,\"strict\":true,\"skipLibCheck\":true},\"include\": [\"**/*.ts\",\"**/*.tsx\"],\"exclude\": [\"node_modules\",\"dist\"]}\nPython Projects\nFor Python-based steps:\n# Core Motia dependencymotia>=0.5.12# Common dependenciesrequests>=2.28.0pydantic>=1.10.0# Data processing (if needed)pandas>=1.5.0numpy>=1.21.0\n# Core Motia dependencymotia>=0.5.12# Common dependenciesrequests>=2.28.0pydantic>=1.10.0# Data processing (if needed)pandas>=1.5.0numpy>=1.21.0\nStep Discovery Examples\nLet's see how Motia discovers different step types:\nExample 1: TypeScript API Step\nimport{ ApiRouteConfig, Handlers }from'motia'import{ z }from'zod'// Motia discovers this file because:// 1. Filename contains '.step.'// 2. Exports 'config' object// 3. Has .ts extension -> uses TypeScript runtimeexportconstconfig:ApiRouteConfig={type:'api',name:'user-api',path:'/users',method:'GET',emits: ['users.fetched'],flows: ['user-management']}exportconsthandler:Handlers['user-api']=async(req, {emit})=>{awaitemit({topic:'users.fetched',data: { users: [] }})return{status:200,body: { message:'Users retrieved'}}}\nimport{ ApiRouteConfig, Handlers }from'motia'import{ z }from'zod'// Motia discovers this file because:// 1. Filename contains '.step.'// 2. Exports 'config' object// 3. Has .ts extension -> uses TypeScript runtimeexportconstconfig:ApiRouteConfig={type:'api"
}
================================================================================
{
    "source_page": "Project Structure",
    "source_url": "https://www.motia.dev/docs/development-guide/project-structure =====",
    "chunk_topic": "Project Structure",
    "chunk_id": "Project Structure (Part 4)",
    "text": "'// Motia discovers this file because:// 1. Filename contains '.step.'// 2. Exports 'config' object// 3. Has .ts extension -> uses TypeScript runtimeexportconstconfig:ApiRouteConfig={type:'api',name:'user-api',path:'/users',method:'GET',emits: ['users.fetched'],flows: ['user-management']}exportconsthandler:Handlers['user-api']=async(req, {emit})=>{awaitemit({topic:'users.fetched',data: { users: [] }})return{status:200,body: { message:'Users retrieved'}}}\nExample 2: Python Event Step\n# Motia discovers this file because:# 1. Filename contains '.step.'# 2. Exports 'config' dict# 3. Has .py extension -> uses Python runtimeconfig={\"type\":\"event\",\"name\":\"data-processor\",\"description\":\"Process incoming data with Python\",\"subscribes\": [\"users.fetched\"],\"emits\": [\"data.processed\"],\"flows\": [\"user-management\"]}asyncdefhandler(input_data, ctx):\"\"\"Process the data\"\"\"processed_data={\"original\": input_data,\"processed_at\": ctx.utils.dates.now().isoformat(),\"count\":len(input_data.get(\"users\", []))}awaitctx.emit({\"topic\":\"data.processed\",\"data\": processed_data})\n# Motia discovers this file because:# 1. Filename contains '.step.'# 2. Exports 'config' dict# 3. Has .py extension -> uses Python runtimeconfig={\"type\":\"event\",\"name\":\"data-processor\",\"description\":\"Process incoming data with Python\",\"subscribes\": [\"users.fetched\"],\"emits\": [\"data.processed\"],\"flows\": [\"user-management\"]}asyncdefhandler(input_data, ctx):\"\"\"Process the data\"\"\"processed_data={\"original\": input_data,\"processed_at\": ctx.utils.dates.now().isoformat(),\"count\":len(input_data.get(\"users\", []))}awaitctx.emit({\"topic\":\"data.processed\",\"data\": processed_data})\nExample 3: JavaScript Automation Step\n// Motia discovers this file because:// 1. Filename contains '.step.'// 2. Exports 'config' object// 3. Has .js extension -> uses Node.js runtimeexportconstconfig={type:'event',name:'send-notifications',description:'Send notifications via multiple channels',subscribes: ['data.processed'],emits: ['notifications"
}
================================================================================
{
    "source_page": "Project Structure",
    "source_url": "https://www.motia.dev/docs/development-guide/project-structure =====",
    "chunk_topic": "Project Structure",
    "chunk_id": "Project Structure (Part 5)",
    "text": " object// 3. Has .js extension -> uses Node.js runtimeexportconstconfig={type:'event',name:'send-notifications',description:'Send notifications via multiple channels',subscribes: ['data.processed'],emits: ['notifications.sent'],flows: ['user-management']}exportconsthandler=async(input, {emit,logger})=>{logger.info('Sending notifications', { data: input })// Send email, SMS, push notifications, etc.constresults=awaitPromise.all([sendEmail(input),sendSMS(input),sendPush(input)])awaitemit({topic:'notifications.sent',data: {results,sent_at:newDate().toISOString()}})}asyncfunctionsendEmail(data) {/* implementation */}asyncfunctionsendSMS(data) {/* implementation */}asyncfunctionsendPush(data) {/* implementation */}\n// Motia discovers this file because:// 1. Filename contains '.step.'// 2. Exports 'config' object// 3. Has .js extension -> uses Node.js runtimeexportconstconfig={type:'event',name:'send-notifications',description:'Send notifications via multiple channels',subscribes: ['data.processed'],emits: ['notifications.sent'],flows: ['user-management']}exportconsthandler=async(input, {emit,logger})=>{logger.info('Sending notifications', { data: input })// Send email, SMS, push notifications, etc.constresults=awaitPromise.all([sendEmail(input),sendSMS(input),sendPush(input)])awaitemit({topic:'notifications.sent',data: {results,sent_at:newDate().toISOString()}})}asyncfunctionsendEmail(data) {/* implementation */}asyncfunctionsendSMS(data) {/* implementation */}asyncfunctionsendPush(data) {/* implementation */}\nAuto-Generated Files\nSome files in your Motia project are automatically generated:\ntypes.d.ts- TypeScript generates this for type definitions\ntypes.d.ts\nmotia-workbench.json- Motia manages visual node positions in the Workbench\nmotia-workbench.json\nDiscovery Troubleshooting\nIf Motia isn't discovering your steps:\nCommon Issues\nMissing.step.(or_stepfor Python) in filename\n.step.\n_step\n\u274cWon't be discovered:\n\u2705Will be discovered:\nDiscovery Verification\nCheck if your steps are discovered:\n# Run Motia in development modemotiadev# Look step creation in your console console:\u279c[CREATED] Step (Cron) steps/petstore/state-audit-c"
}
================================================================================
{
    "source_page": "Project Structure",
    "source_url": "https://www.motia.dev/docs/development-guide/project-structure =====",
    "chunk_topic": "Project Structure",
    "chunk_id": "Project Structure (Part 6)",
    "text": " discovered:\nDiscovery Verification\nCheck if your steps are discovered:\n# Run Motia in development modemotiadev# Look step creation in your console console:\u279c[CREATED] Step (Cron) steps/petstore/state-audit-cron.step.ts created\u279c[CREATED] Step (Event) steps/petstore/process-food-order.step.ts created\u279c[CREATED] Step (Event) steps/petstore/notification.step.ts created\u279c[CREATED] Step (API) steps/petstore/api.step.ts created\n# Run Motia in development modemotiadev# Look step creation in your console console:\u279c[CREATED] Step (Cron) steps/petstore/state-audit-cron.step.ts created\u279c[CREATED] Step (Event) steps/petstore/process-food-order.step.ts created\u279c[CREATED] Step (Event) steps/petstore/notification.step.ts created\u279c[CREATED] Step (API) steps/petstore/api.step.ts created\nNext Steps\nNow that you understand how Motia discovers and organizes steps:\nLearn aboutCore Conceptsto understand how steps work together\nExploreDefining Stepsfor detailed step creation\nCheck outTriggersfor API, Event, and Cron steps\nAI Research Agent\nA powerful research assistant that leverages the Motia Framework to perform comprehensive web research on any topic and any question.\nState Management\nLearn how to manage state within your Motia.dev workflows for persistent data and cross-step communication.\nOn this page"
}
================================================================================
{
    "source_page": "Real-time Streams",
    "source_url": "https://www.motia.dev/docs/development-guide/streams =====",
    "chunk_topic": "Real-time Streams",
    "chunk_id": "Real-time Streams (Part 1)",
    "text": "Real-time Streams\nMotia Streams are a way to quickly push updates from your asynchronous workflows to the client without having to implement any sort of polling processes.\nHow it works\nYou first need to define a stream in your project\nDefining a stream\nTo be able to use Motia Sockets, you need to define a stream\nCreate a file calledopen-ai.stream.tsundersteps/folder\nopen-ai.stream.ts\nsteps/\nimport{ StreamConfig }from'motia'import{ z }from'zod'exportconstconfig:StreamConfig={/*** This will be converted in the property on the FlowContext:** context.streams.openai*/name:'openai',/*** Schema is important to define the type of the stream, the API* generated to interact with this stream will have the structure defined here*/schema: z.object({ message: z.string() }),/*** Base config is used to configure the stream*/baseConfig: {/*** There are two storage types: default and custom* Default will use the default storage to store the data.** Custom will use a custom storage, you need to implement* the StateStream class.*/storageType:'default',},}\nimport{ StreamConfig }from'motia'import{ z }from'zod'exportconstconfig:StreamConfig={/*** This will be converted in the property on the FlowContext:** context.streams.openai*/name:'openai',/*** Schema is important to define the type of the stream, the API* generated to interact with this stream will have the structure defined here*/schema: z.object({ message: z.string() }),/*** Base config is used to configure the stream*/baseConfig: {/*** There are two storage types: default and custom* Default will use the default storage to store the data.** Custom will use a custom storage, you need to implement* the StateStream class.*/storageType:'default',},}\nOnce a stream is created, it should be immediately available in FlowContext (make sure to have motia running on the project)\nThen you can simply create records using the streams API in your step\nimport{ ApiRouteConfig, Handlers }from'motia'import{ z }from'zod'exportconstconfig:ApiRouteConfig={type:'api',name:'OpenAiApi',description:'Call OpenAI',path:'/open-ai',method:'POST',emits: ['openai-prompt'],flows: ['"
}
================================================================================
{
    "source_page": "Real-time Streams",
    "source_url": "https://www.motia.dev/docs/development-guide/streams =====",
    "chunk_topic": "Real-time Streams",
    "chunk_id": "Real-time Streams (Part 2)",
    "text": "'zod'exportconstconfig:ApiRouteConfig={type:'api',name:'OpenAiApi',description:'Call OpenAI',path:'/open-ai',method:'POST',emits: ['openai-prompt'],flows: ['open-ai'],bodySchema: z.object({ message: z.string({ description:'The message to send to OpenAI'}) }),responseSchema: {200: z.object({ message: z.string({ description:'The message from OpenAI'}) })},}exportconsthandler:Handlers['OpenAiApi']=async(req, {traceId,logger,emit,streams})=>{logger.info('[Call OpenAI] Received callOpenAi event', { message: req.body.message })/*** This creates a record with empty message string to be populated in the next step*/constresult=awaitstreams.openai.set(traceId,'message', { message:''})awaitemit({topic:'openai-prompt',data: { message: req.body.message },})return{ status:200, body: result }}\nimport{ ApiRouteConfig, Handlers }from'motia'import{ z }from'zod'exportconstconfig:ApiRouteConfig={type:'api',name:'OpenAiApi',description:'Call OpenAI',path:'/open-ai',method:'POST',emits: ['openai-prompt'],flows: ['open-ai'],bodySchema: z.object({ message: z.string({ description:'The message to send to OpenAI'}) }),responseSchema: {200: z.object({ message: z.string({ description:'The message from OpenAI'}) })},}exportconsthandler:Handlers['OpenAiApi']=async(req, {traceId,logger,emit,streams})=>{logger.info('[Call OpenAI] Received callOpenAi event', { message: req.body.message })/*** This creates a record with empty message string to be populated in the next step*/constresult=awaitstreams.openai.set(traceId,'message', { message:''})awaitemit({topic:'openai-prompt',data: { message: req.body.message },})return{ status:200, body: result }}\nThe previous step just prepares a message to be created by Open AI via OpenAI SDK stream, which will be populated in the next step\nimport{ EventConfig, Handlers }from'motia'import{ OpenAI }from'openai'import{ z }from'zod'export"
}
================================================================================
{
    "source_page": "Real-time Streams",
    "source_url": "https://www.motia.dev/docs/development-guide/streams =====",
    "chunk_topic": "Real-time Streams",
    "chunk_id": "Real-time Streams (Part 3)",
    "text": " by Open AI via OpenAI SDK stream, which will be populated in the next step\nimport{ EventConfig, Handlers }from'motia'import{ OpenAI }from'openai'import{ z }from'zod'exportconstconfig:EventConfig={type:'event',name:'CallOpenAi',description:'Call OpenAI',subscribes: ['openai-prompt'],emits: [],input: z.object({message: z.string({ description:'The message to send to OpenAI'}),}),flows: ['open-ai'],}exportconsthandler:Handlers['CallOpenAi']=async(input,context)=>{const{logger,traceId}=contextconstopenai=newOpenAI({ apiKey: process.env.OPENAI_API_KEY})logger.info('[Call OpenAI] Received callOpenAi event', input)constresult=awaitopenai.chat.completions.create({messages: [{ role:'system', content: input.message }],model:'gpt-4o-mini',stream:true,})constmessages:string[]=[]forawait(constchunkofresult) {messages.push(chunk.choices[0].delta.content??'')/*** Now we're populating a previously created message with the streamed data from OpenAI*/awaitcontext.streams.openai.set(traceId,'message', {message: messages.join(''),})}logger.info('[Call OpenAI] OpenAI response', result)}\nimport{ EventConfig, Handlers }from'motia'import{ OpenAI }from'openai'import{ z }from'zod'exportconstconfig:EventConfig={type:'event',name:'CallOpenAi',description:'Call OpenAI',subscribes: ['openai-prompt'],emits: [],input: z.object({message: z.string({ description:'The message to send to OpenAI'}),}),flows: ['open-ai'],}exportconsthandler:Handlers['CallOpenAi']=async(input,context)=>{const{logger,traceId}=contextconstopenai=newOpenAI({ apiKey: process.env.OPENAI_API_KEY})logger.info('[Call OpenAI] Received callOpenAi event', input)constresult=awaitopenai.chat.completions.create({messages: [{ role:'system', content: input.message }],model:'gpt-4o-mini',stream:true,})constmessages:string[]=[]forawait(constchunkofresult) {messages.push(chunk.choices[0].delta.content??'')/*** Now"
}
================================================================================
{
    "source_page": "Real-time Streams",
    "source_url": "https://www.motia.dev/docs/development-guide/streams =====",
    "chunk_topic": "Real-time Streams",
    "chunk_id": "Real-time Streams (Part 4)",
    "text": " role:'system', content: input.message }],model:'gpt-4o-mini',stream:true,})constmessages:string[]=[]forawait(constchunkofresult) {messages.push(chunk.choices[0].delta.content??'')/*** Now we're populating a previously created message with the streamed data from OpenAI*/awaitcontext.streams.openai.set(traceId,'message', {message: messages.join(''),})}logger.info('[Call OpenAI] OpenAI response', result)}\nTesting Streams in Workbench\nWe know testing real time events is not easy as a backend developer, so we've added a way to test streams in the Workbench.\nHere are the steps to test streams in the Workbench:\nThe API Step that provides a stream item should return the object\nexportconsthandler:Handlers['OpenAiApi']=async(req, {traceId,logger,emit,streams})=>{logger.info('[Call OpenAI] Received callOpenAi event', { message: req.body.message })/*** This creates a record with empty message string to be populated in the next step*/constresult=awaitstreams.openai.set(traceId,'message', { message:''})awaitemit({topic:'openai-prompt',data: { message: req.body.message },})/*** Return the entire object received from the create method*/return{ status:200, body: result }}\nexportconsthandler:Handlers['OpenAiApi']=async(req, {traceId,logger,emit,streams})=>{logger.info('[Call OpenAI] Received callOpenAi event', { message: req.body.message })/*** This creates a record with empty message string to be populated in the next step*/constresult=awaitstreams.openai.set(traceId,'message', { message:''})awaitemit({topic:'openai-prompt',data: { message: req.body.message },})/*** Return the entire object received from the create method*/return{ status:200, body: result }}\nNavigate tohttp://localhost:3000/endpointsin your Workbench\nOpen up your endpoint and click on theTestbutton\nTest\nThe result will automatically be streamed from the server to the client streaming it's state real-time.\nConsuming stream on the browser\nnpm install @motiadev/stream-client-react\nnpm install @motiadev/stream-client-react\nThen add the provider to the root of your project\n<MotiaStreamProvideraddress=\"ws://localhost:300"
}
================================================================================
{
    "source_page": "Real-time Streams",
    "source_url": "https://www.motia.dev/docs/development-guide/streams =====",
    "chunk_topic": "Real-time Streams",
    "chunk_id": "Real-time Streams (Part 5)",
    "text": " stream on the browser\nnpm install @motiadev/stream-client-react\nnpm install @motiadev/stream-client-react\nThen add the provider to the root of your project\n<MotiaStreamProvideraddress=\"ws://localhost:3000\">...</MotiaStreamProvider>\n<MotiaStreamProvideraddress=\"ws://localhost:3000\">...</MotiaStreamProvider>\nthen on your component or hook, just use\nconstmessageId=''// get the id back from the API call// data below will be updated whenever it's updated in the serverconst{data}=useStreamItem({streamName:'openai',groupId: messageId,id:'message'})\nconstmessageId=''// get the id back from the API call// data below will be updated whenever it's updated in the serverconst{data}=useStreamItem({streamName:'openai',groupId: messageId,id:'message'})\nState Management\nLearn how to manage state within your Motia.dev workflows for persistent data and cross-step communication.\nObservability\nUnderstanding how to use the logging and debugging system in Motia\nOn this page"
}
================================================================================
{
    "source_page": "Observability",
    "source_url": "https://www.motia.dev/docs/development-guide/observability =====",
    "chunk_topic": "Observability",
    "chunk_id": "Observability (Part 1)",
    "text": "Observability\nUnderstanding how to use the logging and debugging system in Motia\nOverview\nMotia provides an out of the box logging and debugging system that works across different runtime environments. The system offers:\nReal-time log streaming in both terminal and Motia Workbench\nMultiple log levels with contextual information\nLocal development debugging tools\nIntegrated flow monitoring\nLog Levels and Usage\nMotia supports four standard log levels:\nExample Usage\nexportconsthandler:Handlers['StepName']=async(input, {logger})=>{// Basic logginglogger.info('Starting process')// Logging with contextlogger.info('Operation completed', {operationId: input.id,duration:1500})// Error handlingtry{awaitriskyOperation()}catch(error) {logger.error('Operation failed', {error: error.message,stack: error.stack})}// Debug logginglogger.debug('Operation details', {rawInput: input,timestamp: Date.now()})// Warning loggingif(input.amount>1000) {logger.warn('Large operation detected', {amount: input.amount,threshold:1000})}}\nexportconsthandler:Handlers['StepName']=async(input, {logger})=>{// Basic logginglogger.info('Starting process')// Logging with contextlogger.info('Operation completed', {operationId: input.id,duration:1500})// Error handlingtry{awaitriskyOperation()}catch(error) {logger.error('Operation failed', {error: error.message,stack: error.stack})}// Debug logginglogger.debug('Operation details', {rawInput: input,timestamp: Date.now()})// Warning loggingif(input.amount>1000) {logger.warn('Large operation detected', {amount: input.amount,threshold:1000})}}\nRunning and Debugging\nStart the Dev Server\nNavigate to your Motia project root folder\nStart the development server:\nnpm run dev\nYou can monitor logs in two ways:\nOpenMotia Workbench, select your flow, and expand the logs container\nView logs directly in the terminal where you ran the dev command\nTrigger and Monitor Flows\nYou can trigger flows using either the CLI or anAPI step:\nnpxmotiaemit--topic<topic>--message'{}'\nnpxmotiaemit--topic<topic>--message'{}'\nDebug Using Logs\nEach log entry automatically includes:\ntimestamp: When the log was generated\ntimestamp\ntraceId: Unique identifier for the flow execution\ntraceId\nflows: Array of flow names this step belongs to\n"
}
================================================================================
{
    "source_page": "Observability",
    "source_url": "https://www.motia.dev/docs/development-guide/observability =====",
    "chunk_topic": "Observability",
    "chunk_id": "Observability (Part 2)",
    "text": "topic>--message'{}'\nDebug Using Logs\nEach log entry automatically includes:\ntimestamp: When the log was generated\ntimestamp\ntraceId: Unique identifier for the flow execution\ntraceId\nflows: Array of flow names this step belongs to\nflows\nfile: Source file generating the log\nfile\nlevel: Log level\nlevel\nmsg: Log message\nmsg\nStopping the development server\nPressCtrl + C(orCmd + Con macOS) in your terminal. That's it!\nBest Practices\nStructured Logging\n// Good - Structured and searchablelogger.info('Payment processed', {paymentId:'123',amount:100,status:'success',})// Avoid - Harder to parse and searchlogger.info(`Payment ${paymentId} processed: amount=${amount}`)\n// Good - Structured and searchablelogger.info('Payment processed', {paymentId:'123',amount:100,status:'success',})// Avoid - Harder to parse and searchlogger.info(`Payment ${paymentId} processed: amount=${amount}`)\nPerformance Monitoring\nexportconsthandler:Handlers['StepName']=async(input, {logger})=>{conststartTime=performance.now()// Process operationconstresult=awaitprocessOperation(input)logger.info('Operation completed', {duration: performance.now()-startTime,memoryUsage: process.memoryUsage().heapUsed,})}\nexportconsthandler:Handlers['StepName']=async(input, {logger})=>{conststartTime=performance.now()// Process operationconstresult=awaitprocessOperation(input)logger.info('Operation completed', {duration: performance.now()-startTime,memoryUsage: process.memoryUsage().heapUsed,})}\nDebugging Tips\nAdd detailed context to error logs:\nlogger.error('Operation failed', {error: error.message,code: error.code,input:JSON.stringify(input),stack: error.stack,})\nlogger.error('Operation failed', {error: error.message,code: error.code,input:JSON.stringify(input),stack: error.stack,})\nUse debug logs for detailed troubleshooting:\nlogger.debug('Operation details', {rawInput: input,timestamp: Date.now(),state: currentState,})\nlogger.debug('Operation details', {rawInput: input,timestamp: Date.now(),state: currentState,})\nRemember to stop your development server with Ctrl + C (or Cmd + C on macOS) when you're done debugging.\nReal-time Streams\nMotia Streams are a way to quickly push updates from your asynchronous workflows to the client without having to implement any sort of polling processes.\nCustom"
}
================================================================================
{
    "source_page": "Observability",
    "source_url": "https://www.motia.dev/docs/development-guide/observability =====",
    "chunk_topic": "Observability",
    "chunk_id": "Observability (Part 3)",
    "text": " with Ctrl + C (or Cmd + C on macOS) when you're done debugging.\nReal-time Streams\nMotia Streams are a way to quickly push updates from your asynchronous workflows to the client without having to implement any sort of polling processes.\nCustomizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nOn this page"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 1)",
    "text": "Customizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nCustomizing Flows\nMotia Workbench allows you to customize how your Steps appear in the flow visualization tool. This helps you create intuitive, context-aware visual components that clearly communicate your flow's behavior and external dependencies.\nUI Steps\nUI Steps provide a way to create custom visual representations of your workflow Steps in the Workbench flow visualization tool.\nOverview\nTo create a custom UI for a Step, create a.tsxor.jsxfile next to your Step file with the same base name:\n.tsx\n.jsx\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nBasic Usage\nLet's override an EventNode while keeping the same look. We'll add an image and show the description.\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\nAvailable Components\nMotia Workbench provides out-of-the-box components for different Step types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 2)",
    "text": " types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 3)",
    "text": "flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 4)",
    "text": "\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nYou will need to add<BaseHandle>to your node, otherwise it won't show the connectors.\n<BaseHandle>\nIf your node has padding, make sure to add a group inside your node with classgroup relativeso the handles can be correctly positioned.\ngroup relative\nStyling Guidelines\nNOOP Steps\nNOOP (No Operation) Steps are a powerful feature that serve multiple purposes:\nModeling external processes, webhooks and integrations\nRepresenting human-in-the-loop activities\nCreating custom visualizations in the workbench\nTesting flows during development\nFile Structure\nNOOP Steps require two files with the same base name:\nstepName.step.ts- Contains the step configuration\nstepName.step.ts\nstepName.step.tsx- Contains the UI component (optional)\nstepName.step.tsx\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 5)",
    "text": "'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nExample: Webhook Testing\nHere's a complete example of a NOOP Step that simulates webhook events:\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\""
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 6)",
    "text": "-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nRepresenting External Processes\nNOOP Steps represent parts of your workflow that happen outside your system. Common examples include:\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 7)",
    "text": "'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nBest Practices\nUI Steps\nEventNode\nApiNode\nNOOP Steps\n.step.ts\n.step.tsx\nvirtualSubscribes\nComponent Reference\nCore Imports\nBaseHandle\nEventNodeProps\nPosition\nHandle Placement\nObservability\nUnderstanding how to use the logging and debugging system in Motia\nMiddleware\nRun code before and after your API handlers\nOn this page"
}
================================================================================
{
    "source_page": "Middleware",
    "source_url": "https://www.motia.dev/docs/development-guide/middleware =====",
    "chunk_topic": "Middleware",
    "chunk_id": "Middleware (Part 1)",
    "text": "Middleware\nRun code before and after your API handlers\nWhat is Middleware?\nMiddleware runs before your API handler. Use it for authentication, logging, error handling, or any logic that applies to multiple endpoints.\nHow It Works\nA middleware is a function that receives three arguments:\nmiddleware(req, ctx, next)\nmiddleware(req, ctx, next)\nreq- The incoming request (same as handler)\nctx- The context object (same as handler)\nnext()- Call this to continue to the handler\nIf you don't callnext(), the request stops. The handler never runs.\nnext()\nSimple Example\nimport{ ApiMiddleware }from'motia'constauthMiddleware:ApiMiddleware=async(req,ctx,next)=>{if(!req.headers.authorization) {return{ status:401, body: { error:'Unauthorized'} }}returnnext()}exportconstconfig={name:'ProtectedEndpoint',type:'api',path:'/protected',method:'GET',middleware: [authMiddleware]}exportconsthandler=async(req,ctx)=>{return{ status:200, body: { message:'Success'} }}\nimport{ ApiMiddleware }from'motia'constauthMiddleware:ApiMiddleware=async(req,ctx,next)=>{if(!req.headers.authorization) {return{ status:401, body: { error:'Unauthorized'} }}returnnext()}exportconstconfig={name:'ProtectedEndpoint',type:'api',path:'/protected',method:'GET',middleware: [authMiddleware]}exportconsthandler=async(req,ctx)=>{return{ status:200, body: { message:'Success'} }}\nExecution Order\nMiddleware runs in the order you list them:\nexportconstconfig={name:'MyEndpoint',type:'api',path:'/endpoint',method:'POST',middleware: [loggingMiddleware,// Runs firstauthMiddleware,// Runs seconderrorMiddleware// Runs third]}\nexportconstconfig={name:'MyEndpoint',type:'api',path:'/endpoint',method:'POST',middleware: [loggingMiddleware,// Runs firstauthMiddleware,// Runs seconderrorMiddleware// Runs third]}\nModifying Responses\nAwaitnext()to get the response, then modify it:\nnext()\nconstaddHeadersMiddleware=async(req,ctx,next)=>{constresponse=awaitnext()return{...response,headers: {...response.headers,'X-Request-Id': ctx.traceId}}}\nconstaddHeadersMiddleware=async(req,ctx,next)=>{constresponse=awaitnext()return{...response,headers: {...response.headers,'X-Request"
}
================================================================================
{
    "source_page": "Middleware",
    "source_url": "https://www.motia.dev/docs/development-guide/middleware =====",
    "chunk_topic": "Middleware",
    "chunk_id": "Middleware (Part 2)",
    "text": ",headers: {...response.headers,'X-Request-Id': ctx.traceId}}}\nconstaddHeadersMiddleware=async(req,ctx,next)=>{constresponse=awaitnext()return{...response,headers: {...response.headers,'X-Request-Id': ctx.traceId}}}\nError Handling\nCatch errors from handlers:\nimport{ ZodError }from'zod'consterrorMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error:any) {if(errorinstanceofZodError) {ctx.logger.error('Validation error', { errors: error.errors })return{ status:400, body: { error:'Validation failed'} }}ctx.logger.error('Unexpected error', { error: error.message })return{ status:500, body: { error:'Internal server error'} }}}\nimport{ ZodError }from'zod'consterrorMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error:any) {if(errorinstanceofZodError) {ctx.logger.error('Validation error', { errors: error.errors })return{ status:400, body: { error:'Validation failed'} }}ctx.logger.error('Unexpected error', { error: error.message })return{ status:500, body: { error:'Internal server error'} }}}\nReusing Middleware\nCreate middleware files in a shared location:\nexportconstcoreMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error) {ctx.logger.error('Error', { error })return{ status:500, body: { error:'Internal server error'} }}}\nexportconstcoreMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error) {ctx.logger.error('Error', { error })return{ status:500, body: { error:'Internal server error'} }}}\nImport and use across steps:\nimport{ coreMiddleware }from'../middlewares/core.middleware'exportconstconfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET',middleware: [coreMiddleware]}\nimport{ coreMiddleware }from'../middlewares/core.middleware'exportconstconfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET',middleware: [coreMiddleware]}\nWhat's Next?\nTriggers\nLearn more about Triggers\nTesting\nLearn more about testing your Motia Steps\nCustomizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows"
}
================================================================================
{
    "source_page": "Middleware",
    "source_url": "https://www.motia.dev/docs/development-guide/middleware =====",
    "chunk_topic": "Middleware",
    "chunk_id": "Middleware (Part 3)",
    "text": "GET',middleware: [coreMiddleware]}\nWhat's Next?\nTriggers\nLearn more about Triggers\nTesting\nLearn more about testing your Motia Steps\nCustomizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nTesting\nLearn how to write and run tests for your Motia components\nOn this page"
}
================================================================================
{
    "source_page": "Testing",
    "source_url": "https://www.motia.dev/docs/development-guide/testing =====",
    "chunk_topic": "Testing",
    "chunk_id": "Testing (Part 1)",
    "text": "Testing\nLearn how to write and run tests for your Motia components\nTesting\nTesting is an essential part of building reliable and maintainable Motia applications. Motia provides built-in support for writing and running tests to ensure the correctness of your steps, flows, and event handling logic.\nWriting Tests for Motia Components\nMotia usesJestas its testing framework. You can write tests for your Motia components using Jest's syntax and assertions.\nStep Tests\nTo test a step, create a test file with the same name as the step file, but with a.test.tsor.test.jsextension. For example, if your step file is namedmy-step.step.ts, create a test file namedmy-step.step.test.ts.\n.test.ts\n.test.js\nmy-step.step.ts\nmy-step.step.test.ts\nHere's an example of a step test:\n// my-step.step.test.tsimport{ createTestContext }from'@motiadev/testing'import{ handler }from'./my-step.step'describe('MyStep', ()=>{it('should emit an event with the correct data',async()=>{const{emit,done}=createTestContext()awaithandler({ name:'John'}, { emit })expect(emit).toHaveBeenCalledWith({type:'my-event',data: { greeting:'Hello, John!'},})done()})})\n// my-step.step.test.tsimport{ createTestContext }from'@motiadev/testing'import{ handler }from'./my-step.step'describe('MyStep', ()=>{it('should emit an event with the correct data',async()=>{const{emit,done}=createTestContext()awaithandler({ name:'John'}, { emit })expect(emit).toHaveBeenCalledWith({type:'my-event',data: { greeting:'Hello, John!'},})done()})})\nIn this example, we use thecreateTestContextfunction from@motiadev/testingto create a test context with mockedemitanddonefunctions. We then call the step'shandlerfunction with test input and the mocked context. Finally, we assert that theemitfunction was called with the expected event type and data.\ncreateTestContext\n@motiadev/testing\nemit\ndone\nhandler\nemit\nFlow Tests\nTo test a flow, create a test file with the flow name and a.test.tsor.test.jsextension. For example, if your flow is namedmy-flow, create a"
}
================================================================================
{
    "source_page": "Testing",
    "source_url": "https://www.motia.dev/docs/development-guide/testing =====",
    "chunk_topic": "Testing",
    "chunk_id": "Testing (Part 2)",
    "text": "/testing\nemit\ndone\nhandler\nemit\nFlow Tests\nTo test a flow, create a test file with the flow name and a.test.tsor.test.jsextension. For example, if your flow is namedmy-flow, create a test file namedmy-flow.test.ts.\n.test.ts\n.test.js\nmy-flow\nmy-flow.test.ts\nHere's an example of a flow test:\n// my-flow.test.tsimport{ createTestFlow }from'@motiadev/testing'import{ handlerasstepAHandler }from'./step-a.step'import{ handlerasstepBHandler }from'./step-b.step'describe('MyFlow', ()=>{it('should execute steps in the correct order',async()=>{constflow=createTestFlow('my-flow').step('step-a', stepAHandler).step('step-b', stepBHandler)constresult=awaitflow.execute({ name:'Alice'})expect(result).toEqual({greeting:'Hello, Alice!',message:'Welcome to Motia!',})})})\n// my-flow.test.tsimport{ createTestFlow }from'@motiadev/testing'import{ handlerasstepAHandler }from'./step-a.step'import{ handlerasstepBHandler }from'./step-b.step'describe('MyFlow', ()=>{it('should execute steps in the correct order',async()=>{constflow=createTestFlow('my-flow').step('step-a', stepAHandler).step('step-b', stepBHandler)constresult=awaitflow.execute({ name:'Alice'})expect(result).toEqual({greeting:'Hello, Alice!',message:'Welcome to Motia!',})})})\nIn this example, we use thecreateTestFlowfunction from@motiadev/testingto create a test flow with the specified steps. We then execute the flow with test input and assert that the final result matches the expected output.\ncreateTestFlow\n@motiadev/testing\nRunning Tests Locally\nTo run tests locally, use the following command:\npnpmtest\npnpmtest\nThis command will run all the test files in your project and display the test results in the terminal.\nYou can also run tests in watch mode, which automatically re-runs the tests whenever you make changes to your code:\npnpmtest--watch\npnpmtest--watch\nBest Practices\nWrite tests for each step and flow to ensure comprehensive coverage.\nUse meaningful test case descriptions to clarify"
}
================================================================================
{
    "source_page": "Testing",
    "source_url": "https://www.motia.dev/docs/development-guide/testing =====",
    "chunk_topic": "Testing",
    "chunk_id": "Testing (Part 3)",
    "text": ", which automatically re-runs the tests whenever you make changes to your code:\npnpmtest--watch\npnpmtest--watch\nBest Practices\nWrite tests for each step and flow to ensure comprehensive coverage.\nUse meaningful test case descriptions to clarify the purpose of each test.\nTest edge cases and error scenarios to ensure your components handle them gracefully.\nKeep your tests focused and independent to make them easier to maintain.\nUse mocks and stubs to isolate dependencies and improve test reliability.\nBy following these best practices and regularly running tests, you can catch bugs early, maintain code quality, and ensure the reliability of your Motia application.\nMiddleware\nRun code before and after your API handlers\nEnvironment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nOn this page"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 1)",
    "text": "Environment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nEnvironment Variables\nEnvironment variables let you store API keys, database URLs, and other configuration outside your code. This keeps sensitive information secure and makes it easy to use different settings for development and production.\nQuick Setup\n1. Create a.envFile\n.env\nCreate a.envfile in your project root:\n.env\n# API KeysOPENAI_API_KEY=sk-your-api-key-hereDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook# DatabaseDATABASE_URL=postgresql://user:password@localhost:5432/myapp# App SettingsNODE_ENV=developmentPORT=3000\n# API KeysOPENAI_API_KEY=sk-your-api-key-hereDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook# DatabaseDATABASE_URL=postgresql://user:password@localhost:5432/myapp# App SettingsNODE_ENV=developmentPORT=3000\n2. Add to.gitignore\n.gitignore\nMake sure you never commit your.envfile:\n.env\n.env.env.local\n.env.env.local\n3. Create Template for Your Team\n# Copy this to .env and add your actual valuesOPENAI_API_KEY=your-api-key-hereDATABASE_URL=postgresql://user:password@localhost:5432/myapp\n# Copy this to .env and add your actual valuesOPENAI_API_KEY=your-api-key-hereDATABASE_URL=postgresql://user:password@localhost:5432/myapp\nUsing Environment Variables in Steps\nTypeScript/JavaScript\nexportconstconfig={type:'api',name:'chat-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK_URLif(!apiKey) {return{ status:400, body: { error:'Missing API key'} }}logger.info('Using OpenAI API', { hasKey:!!apiKey })// Your logic here...return{ status:200, body: { message:'Success!'} }}\nexportconstconfig={type:'api',name:'chat-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 2)",
    "text": "-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK_URLif(!apiKey) {return{ status:400, body: { error:'Missing API key'} }}logger.info('Using OpenAI API', { hasKey:!!apiKey })// Your logic here...return{ status:200, body: { message:'Success!'} }}\nPython\nimportosconfig={'type':'event','name':'process-data','subscribes': ['data.received']}asyncdefhandler(input_data, ctx):# Use environment variables with os.environapi_key=os.environ.get('OPENAI_API_KEY')database_url=os.environ.get('DATABASE_URL')ifnotapi_key:raiseValueError('Missing OPENAI_API_KEY')ctx.logger.info('Processing with API key', {'has_key':bool(api_key)})# Your logic here...return{'status':'processed'}\nimportosconfig={'type':'event','name':'process-data','subscribes': ['data.received']}asyncdefhandler(input_data, ctx):# Use environment variables with os.environapi_key=os.environ.get('OPENAI_API_KEY')database_url=os.environ.get('DATABASE_URL')ifnotapi_key:raiseValueError('Missing OPENAI_API_KEY')ctx.logger.info('Processing with API key', {'has_key':bool(api_key)})# Your logic here...return{'status':'processed'}\nDeployment\nWhen you deploy your app, set environment variables through your hosting platform:\nMotia Cloud\nmotiaenvsetOPENAI_API_KEY=sk-your-production-keymotiaenvsetNODE_ENV=production\nmotiaenvsetOPENAI_API_KEY=sk-your-production-keymotiaenvsetNODE_ENV=production\nImportant Security Tips\n\ud83d\udd12 Keep Your Keys Safe\nNever commit.envfiles to git\n.env\nUse different API keys for development and production\nDon't share API keys in code or messages\nThat's it! Environment variables are simple - just put them in.envand useprocess.env.VARIABLE_NAMEin your code.\n.env\nprocess.env.VARIABLE_NAME\nTesting\nLearn how to write and run tests for your Motia components\nCommand Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nOn this page\n.env\n.gitignore"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 3)",
    "text": " to write and run tests for your Motia components\nCommand Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nOn this page\n.env\n.gitignore"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 1)",
    "text": "Command Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nCommand Line Interface (CLI)\nMotia provides a powerful Command Line Interface (CLI) to help you manage your projects and workflows. The CLI offers various commands for creating projects, generating steps, managing state, and more.\nInstallation\nThe Motia CLI is automatically installed when you install themotiapackage. You can use it by runningnpx motiafollowed by the desired command.\nmotia\nnpx motia\nCommands\ncreate\ncreate\nCreate a new Motia project.\nnpxmotia@latestcreate[options]\nnpxmotia@latestcreate[options]\nOptions:\n-n, --name <project name>: The name for your project, used to create a directory. Use.or./to create it in the current directory.\n-n, --name <project name>\n.\n./\nbuild\nbuild\nBuild your project, generating zip files for each step and creating a configuration file.\nnpxmotiabuild\nnpxmotiabuild\nThis command:\nCompiles all your steps (both Node.js and Python)\nBundles each step into a zip file\nGenerates amotia.steps.jsonconfiguration file in thedistdirectory\nmotia.steps.json\ndist\nOrganizes the output in thedistdirectory\ndist\ndeploy\ndeploy\nDeploy your built steps to the Motia deployment service.\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nOptions:\n-k, --api-key <key>(required): Your API key for authentication\n-k, --api-key <key>\n-n, --project-name <name>: Project name (used when creating a new project)\n-n, --project-name <name>\n-s, --environment-id <id>: Environment ID (can also be set via MOTIA_ENVIRONMENT_ID env var)\n-s, --environment-id <id>\n--environment-name <name>: Environment name (used when creating a new environment)\n--environment-name <name>\n-v, --version-name <version>(required): The version to deploy\n-v, --version-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmot"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 2)",
    "text": "-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nThe deployment process:\nBuild your project\nUploads each zip file individually with its path information\nStarts the deployment process on the server\ndev\ndev\nStart the development server.\nnpxmotiadev[options]\nnpxmotiadev[options]\nOptions:\n-p, --port <port>: The port to run the server on (default: 3000).\n-p, --port <port>\n-H, --host [host]: The host address for the server (default: localhost).\n-H, --host [host]\n-d, --debug: Enable debug logging.\n-d, --debug\nget-config\nget-config\nGet the generated config for your project.\nnpxmotiaget-config[options]\nnpxmotiaget-config[options]\nOptions:\n-o, --output <path>: Path to write the generated config file.\n-o, --output <path>\nemit\nemit\nEmit an event to the Motia server.\nnpxmotiaemit[options]\nnpxmotiaemit[options]\nOptions:\n--topic <topic>(required): Event topic/type to emit.\n--topic <topic>\n--message <message>(required): Event payload as a JSON string.\n--message <message>\n-p, --port <number>: Port number (default: 3000).\n-p, --port <number>\ngenerate\ngenerate\nGenerate Motia resources.\ngenerate step\nCreate a new step with interactive prompts.\nnpxmotiageneratestep[options]\nnpxmotiageneratestep[options]\nOptions:\n-d, --dir <step file path>: The path relative to the steps directory to create the step file.\n-d, --dir <step file path>\ngenerate openapi\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 3)",
    "text": "api\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document. Defaults to project name from package.json.\n-t, --title <tile of the document>\n-v, --version <version of the document>: Version of the OpenAPI document. Defaults to 1.0.0.\n-v, --version <version of the document>\n-o, --output <output file name / path>: The file name and path relative to root to create the openapi file. Defaults toopenapi.jsonat the root.\n-o, --output <output file name / path>\nopenapi.json\nstate\nstate\nManage application state.\nstate list\nList the current file state.\nnpxmotiastatelist\nnpxmotiastatelist\nDebugging\nYou can enable debug logging by passing the-dor--debugflag to thedevcommand:\n-d\n--debug\ndev\nnpxmotiadev--debug\nnpxmotiadev--debug\nThis will set theLOG_LEVELenvironment variable to'debug', providing more detailed logging output.\nLOG_LEVEL\n'debug'\ndocker\ndocker\nTools to help you setup your Motia project with docker and run it inside a container.\ndocker setup\nSetup your Motia project for Docker\nnpxmotiadockersetup\nnpxmotiadockersetup\ndocker build\nBuild your Motia project Docker image\nnpxmotiadockerbuild\nnpxmotiadockerbuild\nOptions:\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\ndocker run\nRun your Motia project inside a container\nnpxmotiadockerrun\nnpxmotiadockerrun\nOptions:\n--port <number>: Port number (default: 3000).\n--port <number>\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\n--skip-build: Skip building the Docker image and used the last built image.\n--skip-build\nNext Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using ."
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 4)",
    "text": " Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nGetting Started\nLearn how to deploy your Motia project to production\nOn this page\ncreate\nbuild\ndeploy\ndev\nget-config\nemit\ngenerate\ngenerate step\ngenerate openapi\nstate\nstate list\ndocker\ndocker setup\ndocker build\ndocker run"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#command-line-interface-cli =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 1)",
    "text": "Command Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nCommand Line Interface (CLI)\nMotia provides a powerful Command Line Interface (CLI) to help you manage your projects and workflows. The CLI offers various commands for creating projects, generating steps, managing state, and more.\nInstallation\nThe Motia CLI is automatically installed when you install themotiapackage. You can use it by runningnpx motiafollowed by the desired command.\nmotia\nnpx motia\nCommands\ncreate\ncreate\nCreate a new Motia project.\nnpxmotia@latestcreate[options]\nnpxmotia@latestcreate[options]\nOptions:\n-n, --name <project name>: The name for your project, used to create a directory. Use.or./to create it in the current directory.\n-n, --name <project name>\n.\n./\nbuild\nbuild\nBuild your project, generating zip files for each step and creating a configuration file.\nnpxmotiabuild\nnpxmotiabuild\nThis command:\nCompiles all your steps (both Node.js and Python)\nBundles each step into a zip file\nGenerates amotia.steps.jsonconfiguration file in thedistdirectory\nmotia.steps.json\ndist\nOrganizes the output in thedistdirectory\ndist\ndeploy\ndeploy\nDeploy your built steps to the Motia deployment service.\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nOptions:\n-k, --api-key <key>(required): Your API key for authentication\n-k, --api-key <key>\n-n, --project-name <name>: Project name (used when creating a new project)\n-n, --project-name <name>\n-s, --environment-id <id>: Environment ID (can also be set via MOTIA_ENVIRONMENT_ID env var)\n-s, --environment-id <id>\n--environment-name <name>: Environment name (used when creating a new environment)\n--environment-name <name>\n-v, --version-name <version>(required): The version to deploy\n-v, --version-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmot"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#command-line-interface-cli =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 2)",
    "text": "-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nThe deployment process:\nBuild your project\nUploads each zip file individually with its path information\nStarts the deployment process on the server\ndev\ndev\nStart the development server.\nnpxmotiadev[options]\nnpxmotiadev[options]\nOptions:\n-p, --port <port>: The port to run the server on (default: 3000).\n-p, --port <port>\n-H, --host [host]: The host address for the server (default: localhost).\n-H, --host [host]\n-d, --debug: Enable debug logging.\n-d, --debug\nget-config\nget-config\nGet the generated config for your project.\nnpxmotiaget-config[options]\nnpxmotiaget-config[options]\nOptions:\n-o, --output <path>: Path to write the generated config file.\n-o, --output <path>\nemit\nemit\nEmit an event to the Motia server.\nnpxmotiaemit[options]\nnpxmotiaemit[options]\nOptions:\n--topic <topic>(required): Event topic/type to emit.\n--topic <topic>\n--message <message>(required): Event payload as a JSON string.\n--message <message>\n-p, --port <number>: Port number (default: 3000).\n-p, --port <number>\ngenerate\ngenerate\nGenerate Motia resources.\ngenerate step\nCreate a new step with interactive prompts.\nnpxmotiageneratestep[options]\nnpxmotiageneratestep[options]\nOptions:\n-d, --dir <step file path>: The path relative to the steps directory to create the step file.\n-d, --dir <step file path>\ngenerate openapi\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#command-line-interface-cli =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 3)",
    "text": "api\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document. Defaults to project name from package.json.\n-t, --title <tile of the document>\n-v, --version <version of the document>: Version of the OpenAPI document. Defaults to 1.0.0.\n-v, --version <version of the document>\n-o, --output <output file name / path>: The file name and path relative to root to create the openapi file. Defaults toopenapi.jsonat the root.\n-o, --output <output file name / path>\nopenapi.json\nstate\nstate\nManage application state.\nstate list\nList the current file state.\nnpxmotiastatelist\nnpxmotiastatelist\nDebugging\nYou can enable debug logging by passing the-dor--debugflag to thedevcommand:\n-d\n--debug\ndev\nnpxmotiadev--debug\nnpxmotiadev--debug\nThis will set theLOG_LEVELenvironment variable to'debug', providing more detailed logging output.\nLOG_LEVEL\n'debug'\ndocker\ndocker\nTools to help you setup your Motia project with docker and run it inside a container.\ndocker setup\nSetup your Motia project for Docker\nnpxmotiadockersetup\nnpxmotiadockersetup\ndocker build\nBuild your Motia project Docker image\nnpxmotiadockerbuild\nnpxmotiadockerbuild\nOptions:\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\ndocker run\nRun your Motia project inside a container\nnpxmotiadockerrun\nnpxmotiadockerrun\nOptions:\n--port <number>: Port number (default: 3000).\n--port <number>\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\n--skip-build: Skip building the Docker image and used the last built image.\n--skip-build\nNext Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using ."
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#command-line-interface-cli =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 4)",
    "text": " Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nGetting Started\nLearn how to deploy your Motia project to production\nOn this page\ncreate\nbuild\ndeploy\ndev\nget-config\nemit\ngenerate\ngenerate step\ngenerate openapi\nstate\nstate list\ndocker\ndocker setup\ndocker build\ndocker run"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#installation =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 1)",
    "text": "Command Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nCommand Line Interface (CLI)\nMotia provides a powerful Command Line Interface (CLI) to help you manage your projects and workflows. The CLI offers various commands for creating projects, generating steps, managing state, and more.\nInstallation\nThe Motia CLI is automatically installed when you install themotiapackage. You can use it by runningnpx motiafollowed by the desired command.\nmotia\nnpx motia\nCommands\ncreate\ncreate\nCreate a new Motia project.\nnpxmotia@latestcreate[options]\nnpxmotia@latestcreate[options]\nOptions:\n-n, --name <project name>: The name for your project, used to create a directory. Use.or./to create it in the current directory.\n-n, --name <project name>\n.\n./\nbuild\nbuild\nBuild your project, generating zip files for each step and creating a configuration file.\nnpxmotiabuild\nnpxmotiabuild\nThis command:\nCompiles all your steps (both Node.js and Python)\nBundles each step into a zip file\nGenerates amotia.steps.jsonconfiguration file in thedistdirectory\nmotia.steps.json\ndist\nOrganizes the output in thedistdirectory\ndist\ndeploy\ndeploy\nDeploy your built steps to the Motia deployment service.\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nOptions:\n-k, --api-key <key>(required): Your API key for authentication\n-k, --api-key <key>\n-n, --project-name <name>: Project name (used when creating a new project)\n-n, --project-name <name>\n-s, --environment-id <id>: Environment ID (can also be set via MOTIA_ENVIRONMENT_ID env var)\n-s, --environment-id <id>\n--environment-name <name>: Environment name (used when creating a new environment)\n--environment-name <name>\n-v, --version-name <version>(required): The version to deploy\n-v, --version-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmot"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#installation =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 2)",
    "text": "-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nThe deployment process:\nBuild your project\nUploads each zip file individually with its path information\nStarts the deployment process on the server\ndev\ndev\nStart the development server.\nnpxmotiadev[options]\nnpxmotiadev[options]\nOptions:\n-p, --port <port>: The port to run the server on (default: 3000).\n-p, --port <port>\n-H, --host [host]: The host address for the server (default: localhost).\n-H, --host [host]\n-d, --debug: Enable debug logging.\n-d, --debug\nget-config\nget-config\nGet the generated config for your project.\nnpxmotiaget-config[options]\nnpxmotiaget-config[options]\nOptions:\n-o, --output <path>: Path to write the generated config file.\n-o, --output <path>\nemit\nemit\nEmit an event to the Motia server.\nnpxmotiaemit[options]\nnpxmotiaemit[options]\nOptions:\n--topic <topic>(required): Event topic/type to emit.\n--topic <topic>\n--message <message>(required): Event payload as a JSON string.\n--message <message>\n-p, --port <number>: Port number (default: 3000).\n-p, --port <number>\ngenerate\ngenerate\nGenerate Motia resources.\ngenerate step\nCreate a new step with interactive prompts.\nnpxmotiageneratestep[options]\nnpxmotiageneratestep[options]\nOptions:\n-d, --dir <step file path>: The path relative to the steps directory to create the step file.\n-d, --dir <step file path>\ngenerate openapi\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#installation =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 3)",
    "text": "api\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document. Defaults to project name from package.json.\n-t, --title <tile of the document>\n-v, --version <version of the document>: Version of the OpenAPI document. Defaults to 1.0.0.\n-v, --version <version of the document>\n-o, --output <output file name / path>: The file name and path relative to root to create the openapi file. Defaults toopenapi.jsonat the root.\n-o, --output <output file name / path>\nopenapi.json\nstate\nstate\nManage application state.\nstate list\nList the current file state.\nnpxmotiastatelist\nnpxmotiastatelist\nDebugging\nYou can enable debug logging by passing the-dor--debugflag to thedevcommand:\n-d\n--debug\ndev\nnpxmotiadev--debug\nnpxmotiadev--debug\nThis will set theLOG_LEVELenvironment variable to'debug', providing more detailed logging output.\nLOG_LEVEL\n'debug'\ndocker\ndocker\nTools to help you setup your Motia project with docker and run it inside a container.\ndocker setup\nSetup your Motia project for Docker\nnpxmotiadockersetup\nnpxmotiadockersetup\ndocker build\nBuild your Motia project Docker image\nnpxmotiadockerbuild\nnpxmotiadockerbuild\nOptions:\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\ndocker run\nRun your Motia project inside a container\nnpxmotiadockerrun\nnpxmotiadockerrun\nOptions:\n--port <number>: Port number (default: 3000).\n--port <number>\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\n--skip-build: Skip building the Docker image and used the last built image.\n--skip-build\nNext Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using ."
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#installation =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 4)",
    "text": " Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nGetting Started\nLearn how to deploy your Motia project to production\nOn this page\ncreate\nbuild\ndeploy\ndev\nget-config\nemit\ngenerate\ngenerate step\ngenerate openapi\nstate\nstate list\ndocker\ndocker setup\ndocker build\ndocker run"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#commands =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 1)",
    "text": "Command Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nCommand Line Interface (CLI)\nMotia provides a powerful Command Line Interface (CLI) to help you manage your projects and workflows. The CLI offers various commands for creating projects, generating steps, managing state, and more.\nInstallation\nThe Motia CLI is automatically installed when you install themotiapackage. You can use it by runningnpx motiafollowed by the desired command.\nmotia\nnpx motia\nCommands\ncreate\ncreate\nCreate a new Motia project.\nnpxmotia@latestcreate[options]\nnpxmotia@latestcreate[options]\nOptions:\n-n, --name <project name>: The name for your project, used to create a directory. Use.or./to create it in the current directory.\n-n, --name <project name>\n.\n./\nbuild\nbuild\nBuild your project, generating zip files for each step and creating a configuration file.\nnpxmotiabuild\nnpxmotiabuild\nThis command:\nCompiles all your steps (both Node.js and Python)\nBundles each step into a zip file\nGenerates amotia.steps.jsonconfiguration file in thedistdirectory\nmotia.steps.json\ndist\nOrganizes the output in thedistdirectory\ndist\ndeploy\ndeploy\nDeploy your built steps to the Motia deployment service.\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nOptions:\n-k, --api-key <key>(required): Your API key for authentication\n-k, --api-key <key>\n-n, --project-name <name>: Project name (used when creating a new project)\n-n, --project-name <name>\n-s, --environment-id <id>: Environment ID (can also be set via MOTIA_ENVIRONMENT_ID env var)\n-s, --environment-id <id>\n--environment-name <name>: Environment name (used when creating a new environment)\n--environment-name <name>\n-v, --version-name <version>(required): The version to deploy\n-v, --version-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmot"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#commands =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 2)",
    "text": "-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nThe deployment process:\nBuild your project\nUploads each zip file individually with its path information\nStarts the deployment process on the server\ndev\ndev\nStart the development server.\nnpxmotiadev[options]\nnpxmotiadev[options]\nOptions:\n-p, --port <port>: The port to run the server on (default: 3000).\n-p, --port <port>\n-H, --host [host]: The host address for the server (default: localhost).\n-H, --host [host]\n-d, --debug: Enable debug logging.\n-d, --debug\nget-config\nget-config\nGet the generated config for your project.\nnpxmotiaget-config[options]\nnpxmotiaget-config[options]\nOptions:\n-o, --output <path>: Path to write the generated config file.\n-o, --output <path>\nemit\nemit\nEmit an event to the Motia server.\nnpxmotiaemit[options]\nnpxmotiaemit[options]\nOptions:\n--topic <topic>(required): Event topic/type to emit.\n--topic <topic>\n--message <message>(required): Event payload as a JSON string.\n--message <message>\n-p, --port <number>: Port number (default: 3000).\n-p, --port <number>\ngenerate\ngenerate\nGenerate Motia resources.\ngenerate step\nCreate a new step with interactive prompts.\nnpxmotiageneratestep[options]\nnpxmotiageneratestep[options]\nOptions:\n-d, --dir <step file path>: The path relative to the steps directory to create the step file.\n-d, --dir <step file path>\ngenerate openapi\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#commands =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 3)",
    "text": "api\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document. Defaults to project name from package.json.\n-t, --title <tile of the document>\n-v, --version <version of the document>: Version of the OpenAPI document. Defaults to 1.0.0.\n-v, --version <version of the document>\n-o, --output <output file name / path>: The file name and path relative to root to create the openapi file. Defaults toopenapi.jsonat the root.\n-o, --output <output file name / path>\nopenapi.json\nstate\nstate\nManage application state.\nstate list\nList the current file state.\nnpxmotiastatelist\nnpxmotiastatelist\nDebugging\nYou can enable debug logging by passing the-dor--debugflag to thedevcommand:\n-d\n--debug\ndev\nnpxmotiadev--debug\nnpxmotiadev--debug\nThis will set theLOG_LEVELenvironment variable to'debug', providing more detailed logging output.\nLOG_LEVEL\n'debug'\ndocker\ndocker\nTools to help you setup your Motia project with docker and run it inside a container.\ndocker setup\nSetup your Motia project for Docker\nnpxmotiadockersetup\nnpxmotiadockersetup\ndocker build\nBuild your Motia project Docker image\nnpxmotiadockerbuild\nnpxmotiadockerbuild\nOptions:\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\ndocker run\nRun your Motia project inside a container\nnpxmotiadockerrun\nnpxmotiadockerrun\nOptions:\n--port <number>: Port number (default: 3000).\n--port <number>\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\n--skip-build: Skip building the Docker image and used the last built image.\n--skip-build\nNext Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using ."
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#commands =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 4)",
    "text": " Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nGetting Started\nLearn how to deploy your Motia project to production\nOn this page\ncreate\nbuild\ndeploy\ndev\nget-config\nemit\ngenerate\ngenerate step\ngenerate openapi\nstate\nstate list\ndocker\ndocker setup\ndocker build\ndocker run"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#create =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 1)",
    "text": "Command Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nCommand Line Interface (CLI)\nMotia provides a powerful Command Line Interface (CLI) to help you manage your projects and workflows. The CLI offers various commands for creating projects, generating steps, managing state, and more.\nInstallation\nThe Motia CLI is automatically installed when you install themotiapackage. You can use it by runningnpx motiafollowed by the desired command.\nmotia\nnpx motia\nCommands\ncreate\ncreate\nCreate a new Motia project.\nnpxmotia@latestcreate[options]\nnpxmotia@latestcreate[options]\nOptions:\n-n, --name <project name>: The name for your project, used to create a directory. Use.or./to create it in the current directory.\n-n, --name <project name>\n.\n./\nbuild\nbuild\nBuild your project, generating zip files for each step and creating a configuration file.\nnpxmotiabuild\nnpxmotiabuild\nThis command:\nCompiles all your steps (both Node.js and Python)\nBundles each step into a zip file\nGenerates amotia.steps.jsonconfiguration file in thedistdirectory\nmotia.steps.json\ndist\nOrganizes the output in thedistdirectory\ndist\ndeploy\ndeploy\nDeploy your built steps to the Motia deployment service.\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nOptions:\n-k, --api-key <key>(required): Your API key for authentication\n-k, --api-key <key>\n-n, --project-name <name>: Project name (used when creating a new project)\n-n, --project-name <name>\n-s, --environment-id <id>: Environment ID (can also be set via MOTIA_ENVIRONMENT_ID env var)\n-s, --environment-id <id>\n--environment-name <name>: Environment name (used when creating a new environment)\n--environment-name <name>\n-v, --version-name <version>(required): The version to deploy\n-v, --version-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmot"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#create =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 2)",
    "text": "-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nThe deployment process:\nBuild your project\nUploads each zip file individually with its path information\nStarts the deployment process on the server\ndev\ndev\nStart the development server.\nnpxmotiadev[options]\nnpxmotiadev[options]\nOptions:\n-p, --port <port>: The port to run the server on (default: 3000).\n-p, --port <port>\n-H, --host [host]: The host address for the server (default: localhost).\n-H, --host [host]\n-d, --debug: Enable debug logging.\n-d, --debug\nget-config\nget-config\nGet the generated config for your project.\nnpxmotiaget-config[options]\nnpxmotiaget-config[options]\nOptions:\n-o, --output <path>: Path to write the generated config file.\n-o, --output <path>\nemit\nemit\nEmit an event to the Motia server.\nnpxmotiaemit[options]\nnpxmotiaemit[options]\nOptions:\n--topic <topic>(required): Event topic/type to emit.\n--topic <topic>\n--message <message>(required): Event payload as a JSON string.\n--message <message>\n-p, --port <number>: Port number (default: 3000).\n-p, --port <number>\ngenerate\ngenerate\nGenerate Motia resources.\ngenerate step\nCreate a new step with interactive prompts.\nnpxmotiageneratestep[options]\nnpxmotiageneratestep[options]\nOptions:\n-d, --dir <step file path>: The path relative to the steps directory to create the step file.\n-d, --dir <step file path>\ngenerate openapi\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#create =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 3)",
    "text": "api\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document. Defaults to project name from package.json.\n-t, --title <tile of the document>\n-v, --version <version of the document>: Version of the OpenAPI document. Defaults to 1.0.0.\n-v, --version <version of the document>\n-o, --output <output file name / path>: The file name and path relative to root to create the openapi file. Defaults toopenapi.jsonat the root.\n-o, --output <output file name / path>\nopenapi.json\nstate\nstate\nManage application state.\nstate list\nList the current file state.\nnpxmotiastatelist\nnpxmotiastatelist\nDebugging\nYou can enable debug logging by passing the-dor--debugflag to thedevcommand:\n-d\n--debug\ndev\nnpxmotiadev--debug\nnpxmotiadev--debug\nThis will set theLOG_LEVELenvironment variable to'debug', providing more detailed logging output.\nLOG_LEVEL\n'debug'\ndocker\ndocker\nTools to help you setup your Motia project with docker and run it inside a container.\ndocker setup\nSetup your Motia project for Docker\nnpxmotiadockersetup\nnpxmotiadockersetup\ndocker build\nBuild your Motia project Docker image\nnpxmotiadockerbuild\nnpxmotiadockerbuild\nOptions:\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\ndocker run\nRun your Motia project inside a container\nnpxmotiadockerrun\nnpxmotiadockerrun\nOptions:\n--port <number>: Port number (default: 3000).\n--port <number>\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\n--skip-build: Skip building the Docker image and used the last built image.\n--skip-build\nNext Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using ."
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#create =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 4)",
    "text": " Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nGetting Started\nLearn how to deploy your Motia project to production\nOn this page\ncreate\nbuild\ndeploy\ndev\nget-config\nemit\ngenerate\ngenerate step\ngenerate openapi\nstate\nstate list\ndocker\ndocker setup\ndocker build\ndocker run"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#build =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 1)",
    "text": "Command Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nCommand Line Interface (CLI)\nMotia provides a powerful Command Line Interface (CLI) to help you manage your projects and workflows. The CLI offers various commands for creating projects, generating steps, managing state, and more.\nInstallation\nThe Motia CLI is automatically installed when you install themotiapackage. You can use it by runningnpx motiafollowed by the desired command.\nmotia\nnpx motia\nCommands\ncreate\ncreate\nCreate a new Motia project.\nnpxmotia@latestcreate[options]\nnpxmotia@latestcreate[options]\nOptions:\n-n, --name <project name>: The name for your project, used to create a directory. Use.or./to create it in the current directory.\n-n, --name <project name>\n.\n./\nbuild\nbuild\nBuild your project, generating zip files for each step and creating a configuration file.\nnpxmotiabuild\nnpxmotiabuild\nThis command:\nCompiles all your steps (both Node.js and Python)\nBundles each step into a zip file\nGenerates amotia.steps.jsonconfiguration file in thedistdirectory\nmotia.steps.json\ndist\nOrganizes the output in thedistdirectory\ndist\ndeploy\ndeploy\nDeploy your built steps to the Motia deployment service.\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nOptions:\n-k, --api-key <key>(required): Your API key for authentication\n-k, --api-key <key>\n-n, --project-name <name>: Project name (used when creating a new project)\n-n, --project-name <name>\n-s, --environment-id <id>: Environment ID (can also be set via MOTIA_ENVIRONMENT_ID env var)\n-s, --environment-id <id>\n--environment-name <name>: Environment name (used when creating a new environment)\n--environment-name <name>\n-v, --version-name <version>(required): The version to deploy\n-v, --version-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmot"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#build =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 2)",
    "text": "-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nThe deployment process:\nBuild your project\nUploads each zip file individually with its path information\nStarts the deployment process on the server\ndev\ndev\nStart the development server.\nnpxmotiadev[options]\nnpxmotiadev[options]\nOptions:\n-p, --port <port>: The port to run the server on (default: 3000).\n-p, --port <port>\n-H, --host [host]: The host address for the server (default: localhost).\n-H, --host [host]\n-d, --debug: Enable debug logging.\n-d, --debug\nget-config\nget-config\nGet the generated config for your project.\nnpxmotiaget-config[options]\nnpxmotiaget-config[options]\nOptions:\n-o, --output <path>: Path to write the generated config file.\n-o, --output <path>\nemit\nemit\nEmit an event to the Motia server.\nnpxmotiaemit[options]\nnpxmotiaemit[options]\nOptions:\n--topic <topic>(required): Event topic/type to emit.\n--topic <topic>\n--message <message>(required): Event payload as a JSON string.\n--message <message>\n-p, --port <number>: Port number (default: 3000).\n-p, --port <number>\ngenerate\ngenerate\nGenerate Motia resources.\ngenerate step\nCreate a new step with interactive prompts.\nnpxmotiageneratestep[options]\nnpxmotiageneratestep[options]\nOptions:\n-d, --dir <step file path>: The path relative to the steps directory to create the step file.\n-d, --dir <step file path>\ngenerate openapi\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#build =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 3)",
    "text": "api\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document. Defaults to project name from package.json.\n-t, --title <tile of the document>\n-v, --version <version of the document>: Version of the OpenAPI document. Defaults to 1.0.0.\n-v, --version <version of the document>\n-o, --output <output file name / path>: The file name and path relative to root to create the openapi file. Defaults toopenapi.jsonat the root.\n-o, --output <output file name / path>\nopenapi.json\nstate\nstate\nManage application state.\nstate list\nList the current file state.\nnpxmotiastatelist\nnpxmotiastatelist\nDebugging\nYou can enable debug logging by passing the-dor--debugflag to thedevcommand:\n-d\n--debug\ndev\nnpxmotiadev--debug\nnpxmotiadev--debug\nThis will set theLOG_LEVELenvironment variable to'debug', providing more detailed logging output.\nLOG_LEVEL\n'debug'\ndocker\ndocker\nTools to help you setup your Motia project with docker and run it inside a container.\ndocker setup\nSetup your Motia project for Docker\nnpxmotiadockersetup\nnpxmotiadockersetup\ndocker build\nBuild your Motia project Docker image\nnpxmotiadockerbuild\nnpxmotiadockerbuild\nOptions:\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\ndocker run\nRun your Motia project inside a container\nnpxmotiadockerrun\nnpxmotiadockerrun\nOptions:\n--port <number>: Port number (default: 3000).\n--port <number>\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\n--skip-build: Skip building the Docker image and used the last built image.\n--skip-build\nNext Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using ."
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#build =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 4)",
    "text": " Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nGetting Started\nLearn how to deploy your Motia project to production\nOn this page\ncreate\nbuild\ndeploy\ndev\nget-config\nemit\ngenerate\ngenerate step\ngenerate openapi\nstate\nstate list\ndocker\ndocker setup\ndocker build\ndocker run"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#deploy =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 1)",
    "text": "Command Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nCommand Line Interface (CLI)\nMotia provides a powerful Command Line Interface (CLI) to help you manage your projects and workflows. The CLI offers various commands for creating projects, generating steps, managing state, and more.\nInstallation\nThe Motia CLI is automatically installed when you install themotiapackage. You can use it by runningnpx motiafollowed by the desired command.\nmotia\nnpx motia\nCommands\ncreate\ncreate\nCreate a new Motia project.\nnpxmotia@latestcreate[options]\nnpxmotia@latestcreate[options]\nOptions:\n-n, --name <project name>: The name for your project, used to create a directory. Use.or./to create it in the current directory.\n-n, --name <project name>\n.\n./\nbuild\nbuild\nBuild your project, generating zip files for each step and creating a configuration file.\nnpxmotiabuild\nnpxmotiabuild\nThis command:\nCompiles all your steps (both Node.js and Python)\nBundles each step into a zip file\nGenerates amotia.steps.jsonconfiguration file in thedistdirectory\nmotia.steps.json\ndist\nOrganizes the output in thedistdirectory\ndist\ndeploy\ndeploy\nDeploy your built steps to the Motia deployment service.\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nOptions:\n-k, --api-key <key>(required): Your API key for authentication\n-k, --api-key <key>\n-n, --project-name <name>: Project name (used when creating a new project)\n-n, --project-name <name>\n-s, --environment-id <id>: Environment ID (can also be set via MOTIA_ENVIRONMENT_ID env var)\n-s, --environment-id <id>\n--environment-name <name>: Environment name (used when creating a new environment)\n--environment-name <name>\n-v, --version-name <version>(required): The version to deploy\n-v, --version-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmot"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#deploy =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 2)",
    "text": "-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nThe deployment process:\nBuild your project\nUploads each zip file individually with its path information\nStarts the deployment process on the server\ndev\ndev\nStart the development server.\nnpxmotiadev[options]\nnpxmotiadev[options]\nOptions:\n-p, --port <port>: The port to run the server on (default: 3000).\n-p, --port <port>\n-H, --host [host]: The host address for the server (default: localhost).\n-H, --host [host]\n-d, --debug: Enable debug logging.\n-d, --debug\nget-config\nget-config\nGet the generated config for your project.\nnpxmotiaget-config[options]\nnpxmotiaget-config[options]\nOptions:\n-o, --output <path>: Path to write the generated config file.\n-o, --output <path>\nemit\nemit\nEmit an event to the Motia server.\nnpxmotiaemit[options]\nnpxmotiaemit[options]\nOptions:\n--topic <topic>(required): Event topic/type to emit.\n--topic <topic>\n--message <message>(required): Event payload as a JSON string.\n--message <message>\n-p, --port <number>: Port number (default: 3000).\n-p, --port <number>\ngenerate\ngenerate\nGenerate Motia resources.\ngenerate step\nCreate a new step with interactive prompts.\nnpxmotiageneratestep[options]\nnpxmotiageneratestep[options]\nOptions:\n-d, --dir <step file path>: The path relative to the steps directory to create the step file.\n-d, --dir <step file path>\ngenerate openapi\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#deploy =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 3)",
    "text": "api\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document. Defaults to project name from package.json.\n-t, --title <tile of the document>\n-v, --version <version of the document>: Version of the OpenAPI document. Defaults to 1.0.0.\n-v, --version <version of the document>\n-o, --output <output file name / path>: The file name and path relative to root to create the openapi file. Defaults toopenapi.jsonat the root.\n-o, --output <output file name / path>\nopenapi.json\nstate\nstate\nManage application state.\nstate list\nList the current file state.\nnpxmotiastatelist\nnpxmotiastatelist\nDebugging\nYou can enable debug logging by passing the-dor--debugflag to thedevcommand:\n-d\n--debug\ndev\nnpxmotiadev--debug\nnpxmotiadev--debug\nThis will set theLOG_LEVELenvironment variable to'debug', providing more detailed logging output.\nLOG_LEVEL\n'debug'\ndocker\ndocker\nTools to help you setup your Motia project with docker and run it inside a container.\ndocker setup\nSetup your Motia project for Docker\nnpxmotiadockersetup\nnpxmotiadockersetup\ndocker build\nBuild your Motia project Docker image\nnpxmotiadockerbuild\nnpxmotiadockerbuild\nOptions:\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\ndocker run\nRun your Motia project inside a container\nnpxmotiadockerrun\nnpxmotiadockerrun\nOptions:\n--port <number>: Port number (default: 3000).\n--port <number>\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\n--skip-build: Skip building the Docker image and used the last built image.\n--skip-build\nNext Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using ."
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#deploy =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 4)",
    "text": " Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nGetting Started\nLearn how to deploy your Motia project to production\nOn this page\ncreate\nbuild\ndeploy\ndev\nget-config\nemit\ngenerate\ngenerate step\ngenerate openapi\nstate\nstate list\ndocker\ndocker setup\ndocker build\ndocker run"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#dev =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 1)",
    "text": "Command Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nCommand Line Interface (CLI)\nMotia provides a powerful Command Line Interface (CLI) to help you manage your projects and workflows. The CLI offers various commands for creating projects, generating steps, managing state, and more.\nInstallation\nThe Motia CLI is automatically installed when you install themotiapackage. You can use it by runningnpx motiafollowed by the desired command.\nmotia\nnpx motia\nCommands\ncreate\ncreate\nCreate a new Motia project.\nnpxmotia@latestcreate[options]\nnpxmotia@latestcreate[options]\nOptions:\n-n, --name <project name>: The name for your project, used to create a directory. Use.or./to create it in the current directory.\n-n, --name <project name>\n.\n./\nbuild\nbuild\nBuild your project, generating zip files for each step and creating a configuration file.\nnpxmotiabuild\nnpxmotiabuild\nThis command:\nCompiles all your steps (both Node.js and Python)\nBundles each step into a zip file\nGenerates amotia.steps.jsonconfiguration file in thedistdirectory\nmotia.steps.json\ndist\nOrganizes the output in thedistdirectory\ndist\ndeploy\ndeploy\nDeploy your built steps to the Motia deployment service.\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nOptions:\n-k, --api-key <key>(required): Your API key for authentication\n-k, --api-key <key>\n-n, --project-name <name>: Project name (used when creating a new project)\n-n, --project-name <name>\n-s, --environment-id <id>: Environment ID (can also be set via MOTIA_ENVIRONMENT_ID env var)\n-s, --environment-id <id>\n--environment-name <name>: Environment name (used when creating a new environment)\n--environment-name <name>\n-v, --version-name <version>(required): The version to deploy\n-v, --version-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmot"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#dev =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 2)",
    "text": "-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nThe deployment process:\nBuild your project\nUploads each zip file individually with its path information\nStarts the deployment process on the server\ndev\ndev\nStart the development server.\nnpxmotiadev[options]\nnpxmotiadev[options]\nOptions:\n-p, --port <port>: The port to run the server on (default: 3000).\n-p, --port <port>\n-H, --host [host]: The host address for the server (default: localhost).\n-H, --host [host]\n-d, --debug: Enable debug logging.\n-d, --debug\nget-config\nget-config\nGet the generated config for your project.\nnpxmotiaget-config[options]\nnpxmotiaget-config[options]\nOptions:\n-o, --output <path>: Path to write the generated config file.\n-o, --output <path>\nemit\nemit\nEmit an event to the Motia server.\nnpxmotiaemit[options]\nnpxmotiaemit[options]\nOptions:\n--topic <topic>(required): Event topic/type to emit.\n--topic <topic>\n--message <message>(required): Event payload as a JSON string.\n--message <message>\n-p, --port <number>: Port number (default: 3000).\n-p, --port <number>\ngenerate\ngenerate\nGenerate Motia resources.\ngenerate step\nCreate a new step with interactive prompts.\nnpxmotiageneratestep[options]\nnpxmotiageneratestep[options]\nOptions:\n-d, --dir <step file path>: The path relative to the steps directory to create the step file.\n-d, --dir <step file path>\ngenerate openapi\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#dev =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 3)",
    "text": "api\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document. Defaults to project name from package.json.\n-t, --title <tile of the document>\n-v, --version <version of the document>: Version of the OpenAPI document. Defaults to 1.0.0.\n-v, --version <version of the document>\n-o, --output <output file name / path>: The file name and path relative to root to create the openapi file. Defaults toopenapi.jsonat the root.\n-o, --output <output file name / path>\nopenapi.json\nstate\nstate\nManage application state.\nstate list\nList the current file state.\nnpxmotiastatelist\nnpxmotiastatelist\nDebugging\nYou can enable debug logging by passing the-dor--debugflag to thedevcommand:\n-d\n--debug\ndev\nnpxmotiadev--debug\nnpxmotiadev--debug\nThis will set theLOG_LEVELenvironment variable to'debug', providing more detailed logging output.\nLOG_LEVEL\n'debug'\ndocker\ndocker\nTools to help you setup your Motia project with docker and run it inside a container.\ndocker setup\nSetup your Motia project for Docker\nnpxmotiadockersetup\nnpxmotiadockersetup\ndocker build\nBuild your Motia project Docker image\nnpxmotiadockerbuild\nnpxmotiadockerbuild\nOptions:\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\ndocker run\nRun your Motia project inside a container\nnpxmotiadockerrun\nnpxmotiadockerrun\nOptions:\n--port <number>: Port number (default: 3000).\n--port <number>\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\n--skip-build: Skip building the Docker image and used the last built image.\n--skip-build\nNext Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using ."
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#dev =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 4)",
    "text": " Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nGetting Started\nLearn how to deploy your Motia project to production\nOn this page\ncreate\nbuild\ndeploy\ndev\nget-config\nemit\ngenerate\ngenerate step\ngenerate openapi\nstate\nstate list\ndocker\ndocker setup\ndocker build\ndocker run"
}
================================================================================
{
    "source_page": "Welcome to Motia",
    "source_url": "https://www.motia.dev/docs=====",
    "chunk_topic": "Welcome to Motia",
    "chunk_id": "Welcome to Motia (Part 1)",
    "text": "Welcome to Motia\nMotia is a multi-language, event-driven runtime manager built on a core primitive: the Step. It feels like a backend framework, but powers distributed backends for APIs, background jobs, queues, workflows, agents, streaming, state, and observability, all unified in one system.\nWelcome to Motia\nWhy Motia?\nBackend development today is fragmented.\nAPIs live in one framework, background jobs in another, queues and schedulers elsewhere, and now AI agents and streaming systems have their own runtimes. Add observability and state management on top, and you\u2019re stitching together half a dozen tools before writing your first feature.\nMotia unifies all of these concerns around one core primitive: the Step.\nJust as React made frontend development simple by introducing components, Motia redefines backend development with Steps.\nEvery backend pattern, API endpoints, background jobs, queues, workflows, AI agents, streaming, observability, and state, is expressed with the same primitive.\nTo read more about this, check out ourmanifesto.\nThe Core Primitive: the Step\nAt the heart of Motia is a single primitive: theStep.\nA Step is just a file with aconfigand ahandler. Motia auto-discovers these files from/stepsdirectory and connects them automatically.\nconfig\nhandler\n/steps\nHere\u2019s a simple example of two Steps working together: an API Step that emits an event, and an Event Step that processes it.\nexportconstconfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nexportconstconfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nexportconstconfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler=async(input, {logger})=>{logger.info('Processing message', input);};\nexportconstconfig={name:'ProcessMessage',type:'event',sub"
}
================================================================================
{
    "source_page": "Welcome to Motia",
    "source_url": "https://www.motia.dev/docs=====",
    "chunk_topic": "Welcome to Motia",
    "chunk_id": "Welcome to Motia (Part 2)",
    "text": "Message',type:'event',subscribes: ['message.sent']};exportconsthandler=async(input, {logger})=>{logger.info('Processing message', input);};\nexportconstconfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler=async(input, {logger})=>{logger.info('Processing message', input);};\n\ud83d\udc49 With just two files, you\u2019ve built anAPI endpoint, aqueue, and aworker. No extra frameworks required.\nLearn more about Steps here:What is a Step?.\nWorking with multiple Languages\nThe rapid advancement of AI has reshaped the software industry\u2014many cutting-edge AI tools are available only in specific programming languages, this forces companies to decide if they either change their team's skillset to a different language or not leveraging these technologies at all.\nMotia removes this limitation by allowing each Step to be written in any language, while still sharing a common state.\nEach rectangle in the diagram above represents a Step, some of them are in TypeScript and others in Python.\nScalability\nOne of the biggest dilemmas in backend development is choosing between scalability and development velocity. In startup environments, speed often takes priority, resulting in systems that don't scale well and become problematic under increased load.\nMotia addresses scalability by leveraging the core primitive ofSteps: Each step can scale independently avoiding the bottlenecks common in monolithic architectures.\nObservability\nObservability in traditional backends often demands significant engineering effort to implement logging, alerting, and tracing. Typically, these tools are only configured for cloud environments, local development is generally neglected\u2014leading to low productivity and poor dev experience.\nMotia offers a complete observability toolkit available in both cloud and local environments, including:\nLogs visualization\nTracing tool to quickly visualize the flow of requests through the system\nState visualization\nDiagram representation of dependencies between steps and how they are connected\nThe image below shows the Workbench interface available when you runmotia dev. On the top panel you can see a workflow diagram with multiple steps connected.\nOn the bottom panel you can see the trace view of a single request and what happened in each step.\nmotia dev\nFault tolerance\nWith the rise of AI, many backend tasks have become less deterministic and more error-prone. These scenarios require robust error handling and retry mechanisms. In traditional systems, developers often need to set up and maintain queue infrastructures to ensure resilience, especially"
}
================================================================================
{
    "source_page": "Welcome to Motia",
    "source_url": "https://www.motia.dev/docs=====",
    "chunk_topic": "Welcome to Motia",
    "chunk_id": "Welcome to Motia (Part 3)",
    "text": "\nWith the rise of AI, many backend tasks have become less deterministic and more error-prone. These scenarios require robust error handling and retry mechanisms. In traditional systems, developers often need to set up and maintain queue infrastructures to ensure resilience, especially when dealing with unreliable responses from LLMs.\nMotia provides fault tolerance out of the box, eliminating the need to manually spin up queue infrastructure.\nUsing Event Steps, you get retry mechanisms out of the box\nConfiguration of queue infrastructure is abstracted away\nBuilding and Shipping\nBuilding and deploying backends is inherently complex\u2014especially in polyglot environments. Shipping production systems requires tight collaboration between developers and operations, and automation often takes weeks to get right.\nBeyond that, cloud provider lock-in, complicated deployment strategies (e.g., rollbacks, blue/green deployments), and a lack of deployment tooling increase the risk of failure.\nMotia abstracts these concerns by providing:\nTrue cloud-provider agnosticism\nAtomic blue/green deployments and one-click rollbacks via Motia Cloud (canary support coming soon)\nFirst-class polyglot backend support (currently Node.js and Python, with more on the way)\nThe image above shows several Steps being build to a single Motia deployable that are ultimately deployed to a cloud provider of your choice.\nCurrently we're supporting AWS and Kubernetes, more Cloud providers coming soon. Check ourroadmapfor more details.\nRollbacks and deployment strategies\nDeploying cloud-native, fault-tolerant applications often involves modifying queue systems and other infrastructure components.\nThese changes can introduce incompatibilities and lead to runtime failures.\nMotia Cloud solves this withAtomic Deployments, which:\nEach deployment spins up a new isolated service that shares the same data layer\nEnsures safe, rollback-capable deployments without risking service downtime\nInstant rollbacks with one click since each deployment is isolated\nReal-time data streaming\nHandling real-time data is one of the most common\u2014and complex\u2014challenges in backend development. It's necessary when building event-driven applications,\nand it typically requires setting up and maintaining a significant amount of infrastructure.\nMotia provides what we callStreams: Developers define the structure of the data\u2014any changes to these objects are streamed to all subscribed clients in real-time.\nThe image above shows a Stream definition, a Node.js Step mutating the data and a client subscribing to the stream receiving real-time updates.\nQuick Start\nGet up and running with a new Motia project in just a few seconds.\nOn"
}
================================================================================
{
    "source_page": "Welcome to Motia",
    "source_url": "https://www.motia.dev/docs=====",
    "chunk_topic": "Welcome to Motia",
    "chunk_id": "Welcome to Motia (Part 4)",
    "text": " real-time.\nThe image above shows a Stream definition, a Node.js Step mutating the data and a client subscribing to the stream receiving real-time updates.\nQuick Start\nGet up and running with a new Motia project in just a few seconds.\nOn this page"
}
================================================================================
{
    "source_page": "Quick Start",
    "source_url": "https://www.motia.dev/docs/getting-started/quick-start =====",
    "chunk_topic": "Quick Start",
    "chunk_id": "Quick Start",
    "text": "Quick Start\nGet up and running with a new Motia project in just a few seconds.\n1. Create Your Project\nUsenpxto create a new Motia project. This single command will scaffold a new application and install all necessary dependencies.\nnpx\nnpxmotia@latestcreate\nnpxmotia@latestcreate\nThe installer will guide you through a few questions to set up your project. Once it's done, you will have a new project directory ready to go.\n2. Start the Development Server\nNavigate into your new project directory and start the Motia development server.\ncd<your-project-name># If you've created a new folder for the project, navigate into itnpxmotiadev\ncd<your-project-name># If you've created a new folder for the project, navigate into itnpxmotiadev\nThecreatecommand usesnpmby default. If you chose a different package manager during setup, usepnpm dev,yarn dev, orbun dev.\ncreate\nnpm\npnpm dev\nyarn dev\nbun dev\nThis command starts the Motia runtime and the Workbench, a powerful UI for developing and debugging your workflows. By default, it's available athttp://localhost:3000.\nhttp://localhost:3000\n3. Run Your First Flow\nThe starter project comes with a pre-builtbasic-tutorialflow. Let's run it.\nbasic-tutorial\nOpen the Workbenchin your browser athttp://localhost:3000.\nhttp://localhost:3000\nClick theTutorialbutton on the top right of the workbench.\nTutorial\nComplete theTutorialto get an understanding of the basics of Motia and using the Workbench.\nTutorial\nNext Steps\nCongratulations! You've successfully ran, and observed your first Motia workflow.\nBuild your first application from scratch, follow ourBuild Your First Motia Appguide.\nTo learn about Motia, dive into ourCore Concepts.\nWelcome to Motia\nMotia is a multi-language, event-driven runtime manager built on a core primitive: the Step. It feels like a backend framework, but powers distributed backends for APIs, background jobs, queues, workflows, agents, streaming, state, and observability, all unified in one system.\nBuild Your First Motia App\nLearn Motia step-by-step by building a real pet store backend\nOn this page"
}
================================================================================
{
    "source_page": "Welcome to Motia",
    "source_url": "https://www.motia.dev/docs=====",
    "chunk_topic": "Welcome to Motia",
    "chunk_id": "Welcome to Motia (Part 1)",
    "text": "Welcome to Motia\nMotia is a multi-language, event-driven runtime manager built on a core primitive: the Step. It feels like a backend framework, but powers distributed backends for APIs, background jobs, queues, workflows, agents, streaming, state, and observability, all unified in one system.\nWelcome to Motia\nWhy Motia?\nBackend development today is fragmented.\nAPIs live in one framework, background jobs in another, queues and schedulers elsewhere, and now AI agents and streaming systems have their own runtimes. Add observability and state management on top, and you\u2019re stitching together half a dozen tools before writing your first feature.\nMotia unifies all of these concerns around one core primitive: the Step.\nJust as React made frontend development simple by introducing components, Motia redefines backend development with Steps.\nEvery backend pattern, API endpoints, background jobs, queues, workflows, AI agents, streaming, observability, and state, is expressed with the same primitive.\nTo read more about this, check out ourmanifesto.\nThe Core Primitive: the Step\nAt the heart of Motia is a single primitive: theStep.\nA Step is just a file with aconfigand ahandler. Motia auto-discovers these files from/stepsdirectory and connects them automatically.\nconfig\nhandler\n/steps\nHere\u2019s a simple example of two Steps working together: an API Step that emits an event, and an Event Step that processes it.\nexportconstconfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nexportconstconfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nexportconstconfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler=async(input, {logger})=>{logger.info('Processing message', input);};\nexportconstconfig={name:'ProcessMessage',type:'event',sub"
}
================================================================================
{
    "source_page": "Welcome to Motia",
    "source_url": "https://www.motia.dev/docs=====",
    "chunk_topic": "Welcome to Motia",
    "chunk_id": "Welcome to Motia (Part 2)",
    "text": "Message',type:'event',subscribes: ['message.sent']};exportconsthandler=async(input, {logger})=>{logger.info('Processing message', input);};\nexportconstconfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler=async(input, {logger})=>{logger.info('Processing message', input);};\n\ud83d\udc49 With just two files, you\u2019ve built anAPI endpoint, aqueue, and aworker. No extra frameworks required.\nLearn more about Steps here:What is a Step?.\nWorking with multiple Languages\nThe rapid advancement of AI has reshaped the software industry\u2014many cutting-edge AI tools are available only in specific programming languages, this forces companies to decide if they either change their team's skillset to a different language or not leveraging these technologies at all.\nMotia removes this limitation by allowing each Step to be written in any language, while still sharing a common state.\nEach rectangle in the diagram above represents a Step, some of them are in TypeScript and others in Python.\nScalability\nOne of the biggest dilemmas in backend development is choosing between scalability and development velocity. In startup environments, speed often takes priority, resulting in systems that don't scale well and become problematic under increased load.\nMotia addresses scalability by leveraging the core primitive ofSteps: Each step can scale independently avoiding the bottlenecks common in monolithic architectures.\nObservability\nObservability in traditional backends often demands significant engineering effort to implement logging, alerting, and tracing. Typically, these tools are only configured for cloud environments, local development is generally neglected\u2014leading to low productivity and poor dev experience.\nMotia offers a complete observability toolkit available in both cloud and local environments, including:\nLogs visualization\nTracing tool to quickly visualize the flow of requests through the system\nState visualization\nDiagram representation of dependencies between steps and how they are connected\nThe image below shows the Workbench interface available when you runmotia dev. On the top panel you can see a workflow diagram with multiple steps connected.\nOn the bottom panel you can see the trace view of a single request and what happened in each step.\nmotia dev\nFault tolerance\nWith the rise of AI, many backend tasks have become less deterministic and more error-prone. These scenarios require robust error handling and retry mechanisms. In traditional systems, developers often need to set up and maintain queue infrastructures to ensure resilience, especially"
}
================================================================================
{
    "source_page": "Welcome to Motia",
    "source_url": "https://www.motia.dev/docs=====",
    "chunk_topic": "Welcome to Motia",
    "chunk_id": "Welcome to Motia (Part 3)",
    "text": "\nWith the rise of AI, many backend tasks have become less deterministic and more error-prone. These scenarios require robust error handling and retry mechanisms. In traditional systems, developers often need to set up and maintain queue infrastructures to ensure resilience, especially when dealing with unreliable responses from LLMs.\nMotia provides fault tolerance out of the box, eliminating the need to manually spin up queue infrastructure.\nUsing Event Steps, you get retry mechanisms out of the box\nConfiguration of queue infrastructure is abstracted away\nBuilding and Shipping\nBuilding and deploying backends is inherently complex\u2014especially in polyglot environments. Shipping production systems requires tight collaboration between developers and operations, and automation often takes weeks to get right.\nBeyond that, cloud provider lock-in, complicated deployment strategies (e.g., rollbacks, blue/green deployments), and a lack of deployment tooling increase the risk of failure.\nMotia abstracts these concerns by providing:\nTrue cloud-provider agnosticism\nAtomic blue/green deployments and one-click rollbacks via Motia Cloud (canary support coming soon)\nFirst-class polyglot backend support (currently Node.js and Python, with more on the way)\nThe image above shows several Steps being build to a single Motia deployable that are ultimately deployed to a cloud provider of your choice.\nCurrently we're supporting AWS and Kubernetes, more Cloud providers coming soon. Check ourroadmapfor more details.\nRollbacks and deployment strategies\nDeploying cloud-native, fault-tolerant applications often involves modifying queue systems and other infrastructure components.\nThese changes can introduce incompatibilities and lead to runtime failures.\nMotia Cloud solves this withAtomic Deployments, which:\nEach deployment spins up a new isolated service that shares the same data layer\nEnsures safe, rollback-capable deployments without risking service downtime\nInstant rollbacks with one click since each deployment is isolated\nReal-time data streaming\nHandling real-time data is one of the most common\u2014and complex\u2014challenges in backend development. It's necessary when building event-driven applications,\nand it typically requires setting up and maintaining a significant amount of infrastructure.\nMotia provides what we callStreams: Developers define the structure of the data\u2014any changes to these objects are streamed to all subscribed clients in real-time.\nThe image above shows a Stream definition, a Node.js Step mutating the data and a client subscribing to the stream receiving real-time updates.\nQuick Start\nGet up and running with a new Motia project in just a few seconds.\nOn"
}
================================================================================
{
    "source_page": "Welcome to Motia",
    "source_url": "https://www.motia.dev/docs=====",
    "chunk_topic": "Welcome to Motia",
    "chunk_id": "Welcome to Motia (Part 4)",
    "text": " real-time.\nThe image above shows a Stream definition, a Node.js Step mutating the data and a client subscribing to the stream receiving real-time updates.\nQuick Start\nGet up and running with a new Motia project in just a few seconds.\nOn this page"
}
================================================================================
{
    "source_page": "Quick Start",
    "source_url": "https://www.motia.dev/docs/getting-started/quick-start =====",
    "chunk_topic": "Quick Start",
    "chunk_id": "Quick Start",
    "text": "Quick Start\nGet up and running with a new Motia project in just a few seconds.\n1. Create Your Project\nUsenpxto create a new Motia project. This single command will scaffold a new application and install all necessary dependencies.\nnpx\nnpxmotia@latestcreate\nnpxmotia@latestcreate\nThe installer will guide you through a few questions to set up your project. Once it's done, you will have a new project directory ready to go.\n2. Start the Development Server\nNavigate into your new project directory and start the Motia development server.\ncd<your-project-name># If you've created a new folder for the project, navigate into itnpxmotiadev\ncd<your-project-name># If you've created a new folder for the project, navigate into itnpxmotiadev\nThecreatecommand usesnpmby default. If you chose a different package manager during setup, usepnpm dev,yarn dev, orbun dev.\ncreate\nnpm\npnpm dev\nyarn dev\nbun dev\nThis command starts the Motia runtime and the Workbench, a powerful UI for developing and debugging your workflows. By default, it's available athttp://localhost:3000.\nhttp://localhost:3000\n3. Run Your First Flow\nThe starter project comes with a pre-builtbasic-tutorialflow. Let's run it.\nbasic-tutorial\nOpen the Workbenchin your browser athttp://localhost:3000.\nhttp://localhost:3000\nClick theTutorialbutton on the top right of the workbench.\nTutorial\nComplete theTutorialto get an understanding of the basics of Motia and using the Workbench.\nTutorial\nNext Steps\nCongratulations! You've successfully ran, and observed your first Motia workflow.\nBuild your first application from scratch, follow ourBuild Your First Motia Appguide.\nTo learn about Motia, dive into ourCore Concepts.\nWelcome to Motia\nMotia is a multi-language, event-driven runtime manager built on a core primitive: the Step. It feels like a backend framework, but powers distributed backends for APIs, background jobs, queues, workflows, agents, streaming, state, and observability, all unified in one system.\nBuild Your First Motia App\nLearn Motia step-by-step by building a real pet store backend\nOn this page"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#get-config =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 1)",
    "text": "Command Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nCommand Line Interface (CLI)\nMotia provides a powerful Command Line Interface (CLI) to help you manage your projects and workflows. The CLI offers various commands for creating projects, generating steps, managing state, and more.\nInstallation\nThe Motia CLI is automatically installed when you install themotiapackage. You can use it by runningnpx motiafollowed by the desired command.\nmotia\nnpx motia\nCommands\ncreate\ncreate\nCreate a new Motia project.\nnpxmotia@latestcreate[options]\nnpxmotia@latestcreate[options]\nOptions:\n-n, --name <project name>: The name for your project, used to create a directory. Use.or./to create it in the current directory.\n-n, --name <project name>\n.\n./\nbuild\nbuild\nBuild your project, generating zip files for each step and creating a configuration file.\nnpxmotiabuild\nnpxmotiabuild\nThis command:\nCompiles all your steps (both Node.js and Python)\nBundles each step into a zip file\nGenerates amotia.steps.jsonconfiguration file in thedistdirectory\nmotia.steps.json\ndist\nOrganizes the output in thedistdirectory\ndist\ndeploy\ndeploy\nDeploy your built steps to the Motia deployment service.\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nOptions:\n-k, --api-key <key>(required): Your API key for authentication\n-k, --api-key <key>\n-n, --project-name <name>: Project name (used when creating a new project)\n-n, --project-name <name>\n-s, --environment-id <id>: Environment ID (can also be set via MOTIA_ENVIRONMENT_ID env var)\n-s, --environment-id <id>\n--environment-name <name>: Environment name (used when creating a new environment)\n--environment-name <name>\n-v, --version-name <version>(required): The version to deploy\n-v, --version-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmot"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#get-config =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 2)",
    "text": "-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nThe deployment process:\nBuild your project\nUploads each zip file individually with its path information\nStarts the deployment process on the server\ndev\ndev\nStart the development server.\nnpxmotiadev[options]\nnpxmotiadev[options]\nOptions:\n-p, --port <port>: The port to run the server on (default: 3000).\n-p, --port <port>\n-H, --host [host]: The host address for the server (default: localhost).\n-H, --host [host]\n-d, --debug: Enable debug logging.\n-d, --debug\nget-config\nget-config\nGet the generated config for your project.\nnpxmotiaget-config[options]\nnpxmotiaget-config[options]\nOptions:\n-o, --output <path>: Path to write the generated config file.\n-o, --output <path>\nemit\nemit\nEmit an event to the Motia server.\nnpxmotiaemit[options]\nnpxmotiaemit[options]\nOptions:\n--topic <topic>(required): Event topic/type to emit.\n--topic <topic>\n--message <message>(required): Event payload as a JSON string.\n--message <message>\n-p, --port <number>: Port number (default: 3000).\n-p, --port <number>\ngenerate\ngenerate\nGenerate Motia resources.\ngenerate step\nCreate a new step with interactive prompts.\nnpxmotiageneratestep[options]\nnpxmotiageneratestep[options]\nOptions:\n-d, --dir <step file path>: The path relative to the steps directory to create the step file.\n-d, --dir <step file path>\ngenerate openapi\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#get-config =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 3)",
    "text": "api\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document. Defaults to project name from package.json.\n-t, --title <tile of the document>\n-v, --version <version of the document>: Version of the OpenAPI document. Defaults to 1.0.0.\n-v, --version <version of the document>\n-o, --output <output file name / path>: The file name and path relative to root to create the openapi file. Defaults toopenapi.jsonat the root.\n-o, --output <output file name / path>\nopenapi.json\nstate\nstate\nManage application state.\nstate list\nList the current file state.\nnpxmotiastatelist\nnpxmotiastatelist\nDebugging\nYou can enable debug logging by passing the-dor--debugflag to thedevcommand:\n-d\n--debug\ndev\nnpxmotiadev--debug\nnpxmotiadev--debug\nThis will set theLOG_LEVELenvironment variable to'debug', providing more detailed logging output.\nLOG_LEVEL\n'debug'\ndocker\ndocker\nTools to help you setup your Motia project with docker and run it inside a container.\ndocker setup\nSetup your Motia project for Docker\nnpxmotiadockersetup\nnpxmotiadockersetup\ndocker build\nBuild your Motia project Docker image\nnpxmotiadockerbuild\nnpxmotiadockerbuild\nOptions:\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\ndocker run\nRun your Motia project inside a container\nnpxmotiadockerrun\nnpxmotiadockerrun\nOptions:\n--port <number>: Port number (default: 3000).\n--port <number>\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\n--skip-build: Skip building the Docker image and used the last built image.\n--skip-build\nNext Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using ."
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#get-config =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 4)",
    "text": " Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nGetting Started\nLearn how to deploy your Motia project to production\nOn this page\ncreate\nbuild\ndeploy\ndev\nget-config\nemit\ngenerate\ngenerate step\ngenerate openapi\nstate\nstate list\ndocker\ndocker setup\ndocker build\ndocker run"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#emit =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 1)",
    "text": "Command Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nCommand Line Interface (CLI)\nMotia provides a powerful Command Line Interface (CLI) to help you manage your projects and workflows. The CLI offers various commands for creating projects, generating steps, managing state, and more.\nInstallation\nThe Motia CLI is automatically installed when you install themotiapackage. You can use it by runningnpx motiafollowed by the desired command.\nmotia\nnpx motia\nCommands\ncreate\ncreate\nCreate a new Motia project.\nnpxmotia@latestcreate[options]\nnpxmotia@latestcreate[options]\nOptions:\n-n, --name <project name>: The name for your project, used to create a directory. Use.or./to create it in the current directory.\n-n, --name <project name>\n.\n./\nbuild\nbuild\nBuild your project, generating zip files for each step and creating a configuration file.\nnpxmotiabuild\nnpxmotiabuild\nThis command:\nCompiles all your steps (both Node.js and Python)\nBundles each step into a zip file\nGenerates amotia.steps.jsonconfiguration file in thedistdirectory\nmotia.steps.json\ndist\nOrganizes the output in thedistdirectory\ndist\ndeploy\ndeploy\nDeploy your built steps to the Motia deployment service.\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nOptions:\n-k, --api-key <key>(required): Your API key for authentication\n-k, --api-key <key>\n-n, --project-name <name>: Project name (used when creating a new project)\n-n, --project-name <name>\n-s, --environment-id <id>: Environment ID (can also be set via MOTIA_ENVIRONMENT_ID env var)\n-s, --environment-id <id>\n--environment-name <name>: Environment name (used when creating a new environment)\n--environment-name <name>\n-v, --version-name <version>(required): The version to deploy\n-v, --version-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmot"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#emit =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 2)",
    "text": "-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nThe deployment process:\nBuild your project\nUploads each zip file individually with its path information\nStarts the deployment process on the server\ndev\ndev\nStart the development server.\nnpxmotiadev[options]\nnpxmotiadev[options]\nOptions:\n-p, --port <port>: The port to run the server on (default: 3000).\n-p, --port <port>\n-H, --host [host]: The host address for the server (default: localhost).\n-H, --host [host]\n-d, --debug: Enable debug logging.\n-d, --debug\nget-config\nget-config\nGet the generated config for your project.\nnpxmotiaget-config[options]\nnpxmotiaget-config[options]\nOptions:\n-o, --output <path>: Path to write the generated config file.\n-o, --output <path>\nemit\nemit\nEmit an event to the Motia server.\nnpxmotiaemit[options]\nnpxmotiaemit[options]\nOptions:\n--topic <topic>(required): Event topic/type to emit.\n--topic <topic>\n--message <message>(required): Event payload as a JSON string.\n--message <message>\n-p, --port <number>: Port number (default: 3000).\n-p, --port <number>\ngenerate\ngenerate\nGenerate Motia resources.\ngenerate step\nCreate a new step with interactive prompts.\nnpxmotiageneratestep[options]\nnpxmotiageneratestep[options]\nOptions:\n-d, --dir <step file path>: The path relative to the steps directory to create the step file.\n-d, --dir <step file path>\ngenerate openapi\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#emit =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 3)",
    "text": "api\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document. Defaults to project name from package.json.\n-t, --title <tile of the document>\n-v, --version <version of the document>: Version of the OpenAPI document. Defaults to 1.0.0.\n-v, --version <version of the document>\n-o, --output <output file name / path>: The file name and path relative to root to create the openapi file. Defaults toopenapi.jsonat the root.\n-o, --output <output file name / path>\nopenapi.json\nstate\nstate\nManage application state.\nstate list\nList the current file state.\nnpxmotiastatelist\nnpxmotiastatelist\nDebugging\nYou can enable debug logging by passing the-dor--debugflag to thedevcommand:\n-d\n--debug\ndev\nnpxmotiadev--debug\nnpxmotiadev--debug\nThis will set theLOG_LEVELenvironment variable to'debug', providing more detailed logging output.\nLOG_LEVEL\n'debug'\ndocker\ndocker\nTools to help you setup your Motia project with docker and run it inside a container.\ndocker setup\nSetup your Motia project for Docker\nnpxmotiadockersetup\nnpxmotiadockersetup\ndocker build\nBuild your Motia project Docker image\nnpxmotiadockerbuild\nnpxmotiadockerbuild\nOptions:\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\ndocker run\nRun your Motia project inside a container\nnpxmotiadockerrun\nnpxmotiadockerrun\nOptions:\n--port <number>: Port number (default: 3000).\n--port <number>\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\n--skip-build: Skip building the Docker image and used the last built image.\n--skip-build\nNext Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using ."
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#emit =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 4)",
    "text": " Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nGetting Started\nLearn how to deploy your Motia project to production\nOn this page\ncreate\nbuild\ndeploy\ndev\nget-config\nemit\ngenerate\ngenerate step\ngenerate openapi\nstate\nstate list\ndocker\ndocker setup\ndocker build\ndocker run"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#generate =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 1)",
    "text": "Command Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nCommand Line Interface (CLI)\nMotia provides a powerful Command Line Interface (CLI) to help you manage your projects and workflows. The CLI offers various commands for creating projects, generating steps, managing state, and more.\nInstallation\nThe Motia CLI is automatically installed when you install themotiapackage. You can use it by runningnpx motiafollowed by the desired command.\nmotia\nnpx motia\nCommands\ncreate\ncreate\nCreate a new Motia project.\nnpxmotia@latestcreate[options]\nnpxmotia@latestcreate[options]\nOptions:\n-n, --name <project name>: The name for your project, used to create a directory. Use.or./to create it in the current directory.\n-n, --name <project name>\n.\n./\nbuild\nbuild\nBuild your project, generating zip files for each step and creating a configuration file.\nnpxmotiabuild\nnpxmotiabuild\nThis command:\nCompiles all your steps (both Node.js and Python)\nBundles each step into a zip file\nGenerates amotia.steps.jsonconfiguration file in thedistdirectory\nmotia.steps.json\ndist\nOrganizes the output in thedistdirectory\ndist\ndeploy\ndeploy\nDeploy your built steps to the Motia deployment service.\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nOptions:\n-k, --api-key <key>(required): Your API key for authentication\n-k, --api-key <key>\n-n, --project-name <name>: Project name (used when creating a new project)\n-n, --project-name <name>\n-s, --environment-id <id>: Environment ID (can also be set via MOTIA_ENVIRONMENT_ID env var)\n-s, --environment-id <id>\n--environment-name <name>: Environment name (used when creating a new environment)\n--environment-name <name>\n-v, --version-name <version>(required): The version to deploy\n-v, --version-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmot"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#generate =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 2)",
    "text": "-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nThe deployment process:\nBuild your project\nUploads each zip file individually with its path information\nStarts the deployment process on the server\ndev\ndev\nStart the development server.\nnpxmotiadev[options]\nnpxmotiadev[options]\nOptions:\n-p, --port <port>: The port to run the server on (default: 3000).\n-p, --port <port>\n-H, --host [host]: The host address for the server (default: localhost).\n-H, --host [host]\n-d, --debug: Enable debug logging.\n-d, --debug\nget-config\nget-config\nGet the generated config for your project.\nnpxmotiaget-config[options]\nnpxmotiaget-config[options]\nOptions:\n-o, --output <path>: Path to write the generated config file.\n-o, --output <path>\nemit\nemit\nEmit an event to the Motia server.\nnpxmotiaemit[options]\nnpxmotiaemit[options]\nOptions:\n--topic <topic>(required): Event topic/type to emit.\n--topic <topic>\n--message <message>(required): Event payload as a JSON string.\n--message <message>\n-p, --port <number>: Port number (default: 3000).\n-p, --port <number>\ngenerate\ngenerate\nGenerate Motia resources.\ngenerate step\nCreate a new step with interactive prompts.\nnpxmotiageneratestep[options]\nnpxmotiageneratestep[options]\nOptions:\n-d, --dir <step file path>: The path relative to the steps directory to create the step file.\n-d, --dir <step file path>\ngenerate openapi\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#generate =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 3)",
    "text": "api\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document. Defaults to project name from package.json.\n-t, --title <tile of the document>\n-v, --version <version of the document>: Version of the OpenAPI document. Defaults to 1.0.0.\n-v, --version <version of the document>\n-o, --output <output file name / path>: The file name and path relative to root to create the openapi file. Defaults toopenapi.jsonat the root.\n-o, --output <output file name / path>\nopenapi.json\nstate\nstate\nManage application state.\nstate list\nList the current file state.\nnpxmotiastatelist\nnpxmotiastatelist\nDebugging\nYou can enable debug logging by passing the-dor--debugflag to thedevcommand:\n-d\n--debug\ndev\nnpxmotiadev--debug\nnpxmotiadev--debug\nThis will set theLOG_LEVELenvironment variable to'debug', providing more detailed logging output.\nLOG_LEVEL\n'debug'\ndocker\ndocker\nTools to help you setup your Motia project with docker and run it inside a container.\ndocker setup\nSetup your Motia project for Docker\nnpxmotiadockersetup\nnpxmotiadockersetup\ndocker build\nBuild your Motia project Docker image\nnpxmotiadockerbuild\nnpxmotiadockerbuild\nOptions:\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\ndocker run\nRun your Motia project inside a container\nnpxmotiadockerrun\nnpxmotiadockerrun\nOptions:\n--port <number>: Port number (default: 3000).\n--port <number>\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\n--skip-build: Skip building the Docker image and used the last built image.\n--skip-build\nNext Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using ."
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#generate =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 4)",
    "text": " Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nGetting Started\nLearn how to deploy your Motia project to production\nOn this page\ncreate\nbuild\ndeploy\ndev\nget-config\nemit\ngenerate\ngenerate step\ngenerate openapi\nstate\nstate list\ndocker\ndocker setup\ndocker build\ndocker run"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#generate-step =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 1)",
    "text": "Command Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nCommand Line Interface (CLI)\nMotia provides a powerful Command Line Interface (CLI) to help you manage your projects and workflows. The CLI offers various commands for creating projects, generating steps, managing state, and more.\nInstallation\nThe Motia CLI is automatically installed when you install themotiapackage. You can use it by runningnpx motiafollowed by the desired command.\nmotia\nnpx motia\nCommands\ncreate\ncreate\nCreate a new Motia project.\nnpxmotia@latestcreate[options]\nnpxmotia@latestcreate[options]\nOptions:\n-n, --name <project name>: The name for your project, used to create a directory. Use.or./to create it in the current directory.\n-n, --name <project name>\n.\n./\nbuild\nbuild\nBuild your project, generating zip files for each step and creating a configuration file.\nnpxmotiabuild\nnpxmotiabuild\nThis command:\nCompiles all your steps (both Node.js and Python)\nBundles each step into a zip file\nGenerates amotia.steps.jsonconfiguration file in thedistdirectory\nmotia.steps.json\ndist\nOrganizes the output in thedistdirectory\ndist\ndeploy\ndeploy\nDeploy your built steps to the Motia deployment service.\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nOptions:\n-k, --api-key <key>(required): Your API key for authentication\n-k, --api-key <key>\n-n, --project-name <name>: Project name (used when creating a new project)\n-n, --project-name <name>\n-s, --environment-id <id>: Environment ID (can also be set via MOTIA_ENVIRONMENT_ID env var)\n-s, --environment-id <id>\n--environment-name <name>: Environment name (used when creating a new environment)\n--environment-name <name>\n-v, --version-name <version>(required): The version to deploy\n-v, --version-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmot"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#generate-step =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 2)",
    "text": "-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nThe deployment process:\nBuild your project\nUploads each zip file individually with its path information\nStarts the deployment process on the server\ndev\ndev\nStart the development server.\nnpxmotiadev[options]\nnpxmotiadev[options]\nOptions:\n-p, --port <port>: The port to run the server on (default: 3000).\n-p, --port <port>\n-H, --host [host]: The host address for the server (default: localhost).\n-H, --host [host]\n-d, --debug: Enable debug logging.\n-d, --debug\nget-config\nget-config\nGet the generated config for your project.\nnpxmotiaget-config[options]\nnpxmotiaget-config[options]\nOptions:\n-o, --output <path>: Path to write the generated config file.\n-o, --output <path>\nemit\nemit\nEmit an event to the Motia server.\nnpxmotiaemit[options]\nnpxmotiaemit[options]\nOptions:\n--topic <topic>(required): Event topic/type to emit.\n--topic <topic>\n--message <message>(required): Event payload as a JSON string.\n--message <message>\n-p, --port <number>: Port number (default: 3000).\n-p, --port <number>\ngenerate\ngenerate\nGenerate Motia resources.\ngenerate step\nCreate a new step with interactive prompts.\nnpxmotiageneratestep[options]\nnpxmotiageneratestep[options]\nOptions:\n-d, --dir <step file path>: The path relative to the steps directory to create the step file.\n-d, --dir <step file path>\ngenerate openapi\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#generate-step =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 3)",
    "text": "api\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document. Defaults to project name from package.json.\n-t, --title <tile of the document>\n-v, --version <version of the document>: Version of the OpenAPI document. Defaults to 1.0.0.\n-v, --version <version of the document>\n-o, --output <output file name / path>: The file name and path relative to root to create the openapi file. Defaults toopenapi.jsonat the root.\n-o, --output <output file name / path>\nopenapi.json\nstate\nstate\nManage application state.\nstate list\nList the current file state.\nnpxmotiastatelist\nnpxmotiastatelist\nDebugging\nYou can enable debug logging by passing the-dor--debugflag to thedevcommand:\n-d\n--debug\ndev\nnpxmotiadev--debug\nnpxmotiadev--debug\nThis will set theLOG_LEVELenvironment variable to'debug', providing more detailed logging output.\nLOG_LEVEL\n'debug'\ndocker\ndocker\nTools to help you setup your Motia project with docker and run it inside a container.\ndocker setup\nSetup your Motia project for Docker\nnpxmotiadockersetup\nnpxmotiadockersetup\ndocker build\nBuild your Motia project Docker image\nnpxmotiadockerbuild\nnpxmotiadockerbuild\nOptions:\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\ndocker run\nRun your Motia project inside a container\nnpxmotiadockerrun\nnpxmotiadockerrun\nOptions:\n--port <number>: Port number (default: 3000).\n--port <number>\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\n--skip-build: Skip building the Docker image and used the last built image.\n--skip-build\nNext Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using ."
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#generate-step =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 4)",
    "text": " Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nGetting Started\nLearn how to deploy your Motia project to production\nOn this page\ncreate\nbuild\ndeploy\ndev\nget-config\nemit\ngenerate\ngenerate step\ngenerate openapi\nstate\nstate list\ndocker\ndocker setup\ndocker build\ndocker run"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#generate-openapi =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 1)",
    "text": "Command Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nCommand Line Interface (CLI)\nMotia provides a powerful Command Line Interface (CLI) to help you manage your projects and workflows. The CLI offers various commands for creating projects, generating steps, managing state, and more.\nInstallation\nThe Motia CLI is automatically installed when you install themotiapackage. You can use it by runningnpx motiafollowed by the desired command.\nmotia\nnpx motia\nCommands\ncreate\ncreate\nCreate a new Motia project.\nnpxmotia@latestcreate[options]\nnpxmotia@latestcreate[options]\nOptions:\n-n, --name <project name>: The name for your project, used to create a directory. Use.or./to create it in the current directory.\n-n, --name <project name>\n.\n./\nbuild\nbuild\nBuild your project, generating zip files for each step and creating a configuration file.\nnpxmotiabuild\nnpxmotiabuild\nThis command:\nCompiles all your steps (both Node.js and Python)\nBundles each step into a zip file\nGenerates amotia.steps.jsonconfiguration file in thedistdirectory\nmotia.steps.json\ndist\nOrganizes the output in thedistdirectory\ndist\ndeploy\ndeploy\nDeploy your built steps to the Motia deployment service.\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nOptions:\n-k, --api-key <key>(required): Your API key for authentication\n-k, --api-key <key>\n-n, --project-name <name>: Project name (used when creating a new project)\n-n, --project-name <name>\n-s, --environment-id <id>: Environment ID (can also be set via MOTIA_ENVIRONMENT_ID env var)\n-s, --environment-id <id>\n--environment-name <name>: Environment name (used when creating a new environment)\n--environment-name <name>\n-v, --version-name <version>(required): The version to deploy\n-v, --version-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmot"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#generate-openapi =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 2)",
    "text": "-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nThe deployment process:\nBuild your project\nUploads each zip file individually with its path information\nStarts the deployment process on the server\ndev\ndev\nStart the development server.\nnpxmotiadev[options]\nnpxmotiadev[options]\nOptions:\n-p, --port <port>: The port to run the server on (default: 3000).\n-p, --port <port>\n-H, --host [host]: The host address for the server (default: localhost).\n-H, --host [host]\n-d, --debug: Enable debug logging.\n-d, --debug\nget-config\nget-config\nGet the generated config for your project.\nnpxmotiaget-config[options]\nnpxmotiaget-config[options]\nOptions:\n-o, --output <path>: Path to write the generated config file.\n-o, --output <path>\nemit\nemit\nEmit an event to the Motia server.\nnpxmotiaemit[options]\nnpxmotiaemit[options]\nOptions:\n--topic <topic>(required): Event topic/type to emit.\n--topic <topic>\n--message <message>(required): Event payload as a JSON string.\n--message <message>\n-p, --port <number>: Port number (default: 3000).\n-p, --port <number>\ngenerate\ngenerate\nGenerate Motia resources.\ngenerate step\nCreate a new step with interactive prompts.\nnpxmotiageneratestep[options]\nnpxmotiageneratestep[options]\nOptions:\n-d, --dir <step file path>: The path relative to the steps directory to create the step file.\n-d, --dir <step file path>\ngenerate openapi\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#generate-openapi =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 3)",
    "text": "api\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document. Defaults to project name from package.json.\n-t, --title <tile of the document>\n-v, --version <version of the document>: Version of the OpenAPI document. Defaults to 1.0.0.\n-v, --version <version of the document>\n-o, --output <output file name / path>: The file name and path relative to root to create the openapi file. Defaults toopenapi.jsonat the root.\n-o, --output <output file name / path>\nopenapi.json\nstate\nstate\nManage application state.\nstate list\nList the current file state.\nnpxmotiastatelist\nnpxmotiastatelist\nDebugging\nYou can enable debug logging by passing the-dor--debugflag to thedevcommand:\n-d\n--debug\ndev\nnpxmotiadev--debug\nnpxmotiadev--debug\nThis will set theLOG_LEVELenvironment variable to'debug', providing more detailed logging output.\nLOG_LEVEL\n'debug'\ndocker\ndocker\nTools to help you setup your Motia project with docker and run it inside a container.\ndocker setup\nSetup your Motia project for Docker\nnpxmotiadockersetup\nnpxmotiadockersetup\ndocker build\nBuild your Motia project Docker image\nnpxmotiadockerbuild\nnpxmotiadockerbuild\nOptions:\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\ndocker run\nRun your Motia project inside a container\nnpxmotiadockerrun\nnpxmotiadockerrun\nOptions:\n--port <number>: Port number (default: 3000).\n--port <number>\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\n--skip-build: Skip building the Docker image and used the last built image.\n--skip-build\nNext Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using ."
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#generate-openapi =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 4)",
    "text": " Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nGetting Started\nLearn how to deploy your Motia project to production\nOn this page\ncreate\nbuild\ndeploy\ndev\nget-config\nemit\ngenerate\ngenerate step\ngenerate openapi\nstate\nstate list\ndocker\ndocker setup\ndocker build\ndocker run"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#state =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 1)",
    "text": "Command Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nCommand Line Interface (CLI)\nMotia provides a powerful Command Line Interface (CLI) to help you manage your projects and workflows. The CLI offers various commands for creating projects, generating steps, managing state, and more.\nInstallation\nThe Motia CLI is automatically installed when you install themotiapackage. You can use it by runningnpx motiafollowed by the desired command.\nmotia\nnpx motia\nCommands\ncreate\ncreate\nCreate a new Motia project.\nnpxmotia@latestcreate[options]\nnpxmotia@latestcreate[options]\nOptions:\n-n, --name <project name>: The name for your project, used to create a directory. Use.or./to create it in the current directory.\n-n, --name <project name>\n.\n./\nbuild\nbuild\nBuild your project, generating zip files for each step and creating a configuration file.\nnpxmotiabuild\nnpxmotiabuild\nThis command:\nCompiles all your steps (both Node.js and Python)\nBundles each step into a zip file\nGenerates amotia.steps.jsonconfiguration file in thedistdirectory\nmotia.steps.json\ndist\nOrganizes the output in thedistdirectory\ndist\ndeploy\ndeploy\nDeploy your built steps to the Motia deployment service.\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nOptions:\n-k, --api-key <key>(required): Your API key for authentication\n-k, --api-key <key>\n-n, --project-name <name>: Project name (used when creating a new project)\n-n, --project-name <name>\n-s, --environment-id <id>: Environment ID (can also be set via MOTIA_ENVIRONMENT_ID env var)\n-s, --environment-id <id>\n--environment-name <name>: Environment name (used when creating a new environment)\n--environment-name <name>\n-v, --version-name <version>(required): The version to deploy\n-v, --version-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmot"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#state =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 2)",
    "text": "-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nThe deployment process:\nBuild your project\nUploads each zip file individually with its path information\nStarts the deployment process on the server\ndev\ndev\nStart the development server.\nnpxmotiadev[options]\nnpxmotiadev[options]\nOptions:\n-p, --port <port>: The port to run the server on (default: 3000).\n-p, --port <port>\n-H, --host [host]: The host address for the server (default: localhost).\n-H, --host [host]\n-d, --debug: Enable debug logging.\n-d, --debug\nget-config\nget-config\nGet the generated config for your project.\nnpxmotiaget-config[options]\nnpxmotiaget-config[options]\nOptions:\n-o, --output <path>: Path to write the generated config file.\n-o, --output <path>\nemit\nemit\nEmit an event to the Motia server.\nnpxmotiaemit[options]\nnpxmotiaemit[options]\nOptions:\n--topic <topic>(required): Event topic/type to emit.\n--topic <topic>\n--message <message>(required): Event payload as a JSON string.\n--message <message>\n-p, --port <number>: Port number (default: 3000).\n-p, --port <number>\ngenerate\ngenerate\nGenerate Motia resources.\ngenerate step\nCreate a new step with interactive prompts.\nnpxmotiageneratestep[options]\nnpxmotiageneratestep[options]\nOptions:\n-d, --dir <step file path>: The path relative to the steps directory to create the step file.\n-d, --dir <step file path>\ngenerate openapi\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#state =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 3)",
    "text": "api\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document. Defaults to project name from package.json.\n-t, --title <tile of the document>\n-v, --version <version of the document>: Version of the OpenAPI document. Defaults to 1.0.0.\n-v, --version <version of the document>\n-o, --output <output file name / path>: The file name and path relative to root to create the openapi file. Defaults toopenapi.jsonat the root.\n-o, --output <output file name / path>\nopenapi.json\nstate\nstate\nManage application state.\nstate list\nList the current file state.\nnpxmotiastatelist\nnpxmotiastatelist\nDebugging\nYou can enable debug logging by passing the-dor--debugflag to thedevcommand:\n-d\n--debug\ndev\nnpxmotiadev--debug\nnpxmotiadev--debug\nThis will set theLOG_LEVELenvironment variable to'debug', providing more detailed logging output.\nLOG_LEVEL\n'debug'\ndocker\ndocker\nTools to help you setup your Motia project with docker and run it inside a container.\ndocker setup\nSetup your Motia project for Docker\nnpxmotiadockersetup\nnpxmotiadockersetup\ndocker build\nBuild your Motia project Docker image\nnpxmotiadockerbuild\nnpxmotiadockerbuild\nOptions:\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\ndocker run\nRun your Motia project inside a container\nnpxmotiadockerrun\nnpxmotiadockerrun\nOptions:\n--port <number>: Port number (default: 3000).\n--port <number>\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\n--skip-build: Skip building the Docker image and used the last built image.\n--skip-build\nNext Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using ."
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#state =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 4)",
    "text": " Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nGetting Started\nLearn how to deploy your Motia project to production\nOn this page\ncreate\nbuild\ndeploy\ndev\nget-config\nemit\ngenerate\ngenerate step\ngenerate openapi\nstate\nstate list\ndocker\ndocker setup\ndocker build\ndocker run"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#state-list =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 1)",
    "text": "Command Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nCommand Line Interface (CLI)\nMotia provides a powerful Command Line Interface (CLI) to help you manage your projects and workflows. The CLI offers various commands for creating projects, generating steps, managing state, and more.\nInstallation\nThe Motia CLI is automatically installed when you install themotiapackage. You can use it by runningnpx motiafollowed by the desired command.\nmotia\nnpx motia\nCommands\ncreate\ncreate\nCreate a new Motia project.\nnpxmotia@latestcreate[options]\nnpxmotia@latestcreate[options]\nOptions:\n-n, --name <project name>: The name for your project, used to create a directory. Use.or./to create it in the current directory.\n-n, --name <project name>\n.\n./\nbuild\nbuild\nBuild your project, generating zip files for each step and creating a configuration file.\nnpxmotiabuild\nnpxmotiabuild\nThis command:\nCompiles all your steps (both Node.js and Python)\nBundles each step into a zip file\nGenerates amotia.steps.jsonconfiguration file in thedistdirectory\nmotia.steps.json\ndist\nOrganizes the output in thedistdirectory\ndist\ndeploy\ndeploy\nDeploy your built steps to the Motia deployment service.\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nOptions:\n-k, --api-key <key>(required): Your API key for authentication\n-k, --api-key <key>\n-n, --project-name <name>: Project name (used when creating a new project)\n-n, --project-name <name>\n-s, --environment-id <id>: Environment ID (can also be set via MOTIA_ENVIRONMENT_ID env var)\n-s, --environment-id <id>\n--environment-name <name>: Environment name (used when creating a new environment)\n--environment-name <name>\n-v, --version-name <version>(required): The version to deploy\n-v, --version-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmot"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#state-list =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 2)",
    "text": "-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nThe deployment process:\nBuild your project\nUploads each zip file individually with its path information\nStarts the deployment process on the server\ndev\ndev\nStart the development server.\nnpxmotiadev[options]\nnpxmotiadev[options]\nOptions:\n-p, --port <port>: The port to run the server on (default: 3000).\n-p, --port <port>\n-H, --host [host]: The host address for the server (default: localhost).\n-H, --host [host]\n-d, --debug: Enable debug logging.\n-d, --debug\nget-config\nget-config\nGet the generated config for your project.\nnpxmotiaget-config[options]\nnpxmotiaget-config[options]\nOptions:\n-o, --output <path>: Path to write the generated config file.\n-o, --output <path>\nemit\nemit\nEmit an event to the Motia server.\nnpxmotiaemit[options]\nnpxmotiaemit[options]\nOptions:\n--topic <topic>(required): Event topic/type to emit.\n--topic <topic>\n--message <message>(required): Event payload as a JSON string.\n--message <message>\n-p, --port <number>: Port number (default: 3000).\n-p, --port <number>\ngenerate\ngenerate\nGenerate Motia resources.\ngenerate step\nCreate a new step with interactive prompts.\nnpxmotiageneratestep[options]\nnpxmotiageneratestep[options]\nOptions:\n-d, --dir <step file path>: The path relative to the steps directory to create the step file.\n-d, --dir <step file path>\ngenerate openapi\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#state-list =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 3)",
    "text": "api\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document. Defaults to project name from package.json.\n-t, --title <tile of the document>\n-v, --version <version of the document>: Version of the OpenAPI document. Defaults to 1.0.0.\n-v, --version <version of the document>\n-o, --output <output file name / path>: The file name and path relative to root to create the openapi file. Defaults toopenapi.jsonat the root.\n-o, --output <output file name / path>\nopenapi.json\nstate\nstate\nManage application state.\nstate list\nList the current file state.\nnpxmotiastatelist\nnpxmotiastatelist\nDebugging\nYou can enable debug logging by passing the-dor--debugflag to thedevcommand:\n-d\n--debug\ndev\nnpxmotiadev--debug\nnpxmotiadev--debug\nThis will set theLOG_LEVELenvironment variable to'debug', providing more detailed logging output.\nLOG_LEVEL\n'debug'\ndocker\ndocker\nTools to help you setup your Motia project with docker and run it inside a container.\ndocker setup\nSetup your Motia project for Docker\nnpxmotiadockersetup\nnpxmotiadockersetup\ndocker build\nBuild your Motia project Docker image\nnpxmotiadockerbuild\nnpxmotiadockerbuild\nOptions:\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\ndocker run\nRun your Motia project inside a container\nnpxmotiadockerrun\nnpxmotiadockerrun\nOptions:\n--port <number>: Port number (default: 3000).\n--port <number>\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\n--skip-build: Skip building the Docker image and used the last built image.\n--skip-build\nNext Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using ."
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#state-list =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 4)",
    "text": " Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nGetting Started\nLearn how to deploy your Motia project to production\nOn this page\ncreate\nbuild\ndeploy\ndev\nget-config\nemit\ngenerate\ngenerate step\ngenerate openapi\nstate\nstate list\ndocker\ndocker setup\ndocker build\ndocker run"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#debugging =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 1)",
    "text": "Command Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nCommand Line Interface (CLI)\nMotia provides a powerful Command Line Interface (CLI) to help you manage your projects and workflows. The CLI offers various commands for creating projects, generating steps, managing state, and more.\nInstallation\nThe Motia CLI is automatically installed when you install themotiapackage. You can use it by runningnpx motiafollowed by the desired command.\nmotia\nnpx motia\nCommands\ncreate\ncreate\nCreate a new Motia project.\nnpxmotia@latestcreate[options]\nnpxmotia@latestcreate[options]\nOptions:\n-n, --name <project name>: The name for your project, used to create a directory. Use.or./to create it in the current directory.\n-n, --name <project name>\n.\n./\nbuild\nbuild\nBuild your project, generating zip files for each step and creating a configuration file.\nnpxmotiabuild\nnpxmotiabuild\nThis command:\nCompiles all your steps (both Node.js and Python)\nBundles each step into a zip file\nGenerates amotia.steps.jsonconfiguration file in thedistdirectory\nmotia.steps.json\ndist\nOrganizes the output in thedistdirectory\ndist\ndeploy\ndeploy\nDeploy your built steps to the Motia deployment service.\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nOptions:\n-k, --api-key <key>(required): Your API key for authentication\n-k, --api-key <key>\n-n, --project-name <name>: Project name (used when creating a new project)\n-n, --project-name <name>\n-s, --environment-id <id>: Environment ID (can also be set via MOTIA_ENVIRONMENT_ID env var)\n-s, --environment-id <id>\n--environment-name <name>: Environment name (used when creating a new environment)\n--environment-name <name>\n-v, --version-name <version>(required): The version to deploy\n-v, --version-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmot"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#debugging =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 2)",
    "text": "-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nThe deployment process:\nBuild your project\nUploads each zip file individually with its path information\nStarts the deployment process on the server\ndev\ndev\nStart the development server.\nnpxmotiadev[options]\nnpxmotiadev[options]\nOptions:\n-p, --port <port>: The port to run the server on (default: 3000).\n-p, --port <port>\n-H, --host [host]: The host address for the server (default: localhost).\n-H, --host [host]\n-d, --debug: Enable debug logging.\n-d, --debug\nget-config\nget-config\nGet the generated config for your project.\nnpxmotiaget-config[options]\nnpxmotiaget-config[options]\nOptions:\n-o, --output <path>: Path to write the generated config file.\n-o, --output <path>\nemit\nemit\nEmit an event to the Motia server.\nnpxmotiaemit[options]\nnpxmotiaemit[options]\nOptions:\n--topic <topic>(required): Event topic/type to emit.\n--topic <topic>\n--message <message>(required): Event payload as a JSON string.\n--message <message>\n-p, --port <number>: Port number (default: 3000).\n-p, --port <number>\ngenerate\ngenerate\nGenerate Motia resources.\ngenerate step\nCreate a new step with interactive prompts.\nnpxmotiageneratestep[options]\nnpxmotiageneratestep[options]\nOptions:\n-d, --dir <step file path>: The path relative to the steps directory to create the step file.\n-d, --dir <step file path>\ngenerate openapi\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#debugging =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 3)",
    "text": "api\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document. Defaults to project name from package.json.\n-t, --title <tile of the document>\n-v, --version <version of the document>: Version of the OpenAPI document. Defaults to 1.0.0.\n-v, --version <version of the document>\n-o, --output <output file name / path>: The file name and path relative to root to create the openapi file. Defaults toopenapi.jsonat the root.\n-o, --output <output file name / path>\nopenapi.json\nstate\nstate\nManage application state.\nstate list\nList the current file state.\nnpxmotiastatelist\nnpxmotiastatelist\nDebugging\nYou can enable debug logging by passing the-dor--debugflag to thedevcommand:\n-d\n--debug\ndev\nnpxmotiadev--debug\nnpxmotiadev--debug\nThis will set theLOG_LEVELenvironment variable to'debug', providing more detailed logging output.\nLOG_LEVEL\n'debug'\ndocker\ndocker\nTools to help you setup your Motia project with docker and run it inside a container.\ndocker setup\nSetup your Motia project for Docker\nnpxmotiadockersetup\nnpxmotiadockersetup\ndocker build\nBuild your Motia project Docker image\nnpxmotiadockerbuild\nnpxmotiadockerbuild\nOptions:\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\ndocker run\nRun your Motia project inside a container\nnpxmotiadockerrun\nnpxmotiadockerrun\nOptions:\n--port <number>: Port number (default: 3000).\n--port <number>\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\n--skip-build: Skip building the Docker image and used the last built image.\n--skip-build\nNext Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using ."
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#debugging =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 4)",
    "text": " Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nGetting Started\nLearn how to deploy your Motia project to production\nOn this page\ncreate\nbuild\ndeploy\ndev\nget-config\nemit\ngenerate\ngenerate step\ngenerate openapi\nstate\nstate list\ndocker\ndocker setup\ndocker build\ndocker run"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#docker =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 1)",
    "text": "Command Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nCommand Line Interface (CLI)\nMotia provides a powerful Command Line Interface (CLI) to help you manage your projects and workflows. The CLI offers various commands for creating projects, generating steps, managing state, and more.\nInstallation\nThe Motia CLI is automatically installed when you install themotiapackage. You can use it by runningnpx motiafollowed by the desired command.\nmotia\nnpx motia\nCommands\ncreate\ncreate\nCreate a new Motia project.\nnpxmotia@latestcreate[options]\nnpxmotia@latestcreate[options]\nOptions:\n-n, --name <project name>: The name for your project, used to create a directory. Use.or./to create it in the current directory.\n-n, --name <project name>\n.\n./\nbuild\nbuild\nBuild your project, generating zip files for each step and creating a configuration file.\nnpxmotiabuild\nnpxmotiabuild\nThis command:\nCompiles all your steps (both Node.js and Python)\nBundles each step into a zip file\nGenerates amotia.steps.jsonconfiguration file in thedistdirectory\nmotia.steps.json\ndist\nOrganizes the output in thedistdirectory\ndist\ndeploy\ndeploy\nDeploy your built steps to the Motia deployment service.\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nOptions:\n-k, --api-key <key>(required): Your API key for authentication\n-k, --api-key <key>\n-n, --project-name <name>: Project name (used when creating a new project)\n-n, --project-name <name>\n-s, --environment-id <id>: Environment ID (can also be set via MOTIA_ENVIRONMENT_ID env var)\n-s, --environment-id <id>\n--environment-name <name>: Environment name (used when creating a new environment)\n--environment-name <name>\n-v, --version-name <version>(required): The version to deploy\n-v, --version-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmot"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#docker =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 2)",
    "text": "-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nThe deployment process:\nBuild your project\nUploads each zip file individually with its path information\nStarts the deployment process on the server\ndev\ndev\nStart the development server.\nnpxmotiadev[options]\nnpxmotiadev[options]\nOptions:\n-p, --port <port>: The port to run the server on (default: 3000).\n-p, --port <port>\n-H, --host [host]: The host address for the server (default: localhost).\n-H, --host [host]\n-d, --debug: Enable debug logging.\n-d, --debug\nget-config\nget-config\nGet the generated config for your project.\nnpxmotiaget-config[options]\nnpxmotiaget-config[options]\nOptions:\n-o, --output <path>: Path to write the generated config file.\n-o, --output <path>\nemit\nemit\nEmit an event to the Motia server.\nnpxmotiaemit[options]\nnpxmotiaemit[options]\nOptions:\n--topic <topic>(required): Event topic/type to emit.\n--topic <topic>\n--message <message>(required): Event payload as a JSON string.\n--message <message>\n-p, --port <number>: Port number (default: 3000).\n-p, --port <number>\ngenerate\ngenerate\nGenerate Motia resources.\ngenerate step\nCreate a new step with interactive prompts.\nnpxmotiageneratestep[options]\nnpxmotiageneratestep[options]\nOptions:\n-d, --dir <step file path>: The path relative to the steps directory to create the step file.\n-d, --dir <step file path>\ngenerate openapi\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#docker =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 3)",
    "text": "api\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document. Defaults to project name from package.json.\n-t, --title <tile of the document>\n-v, --version <version of the document>: Version of the OpenAPI document. Defaults to 1.0.0.\n-v, --version <version of the document>\n-o, --output <output file name / path>: The file name and path relative to root to create the openapi file. Defaults toopenapi.jsonat the root.\n-o, --output <output file name / path>\nopenapi.json\nstate\nstate\nManage application state.\nstate list\nList the current file state.\nnpxmotiastatelist\nnpxmotiastatelist\nDebugging\nYou can enable debug logging by passing the-dor--debugflag to thedevcommand:\n-d\n--debug\ndev\nnpxmotiadev--debug\nnpxmotiadev--debug\nThis will set theLOG_LEVELenvironment variable to'debug', providing more detailed logging output.\nLOG_LEVEL\n'debug'\ndocker\ndocker\nTools to help you setup your Motia project with docker and run it inside a container.\ndocker setup\nSetup your Motia project for Docker\nnpxmotiadockersetup\nnpxmotiadockersetup\ndocker build\nBuild your Motia project Docker image\nnpxmotiadockerbuild\nnpxmotiadockerbuild\nOptions:\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\ndocker run\nRun your Motia project inside a container\nnpxmotiadockerrun\nnpxmotiadockerrun\nOptions:\n--port <number>: Port number (default: 3000).\n--port <number>\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\n--skip-build: Skip building the Docker image and used the last built image.\n--skip-build\nNext Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using ."
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#docker =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 4)",
    "text": " Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nGetting Started\nLearn how to deploy your Motia project to production\nOn this page\ncreate\nbuild\ndeploy\ndev\nget-config\nemit\ngenerate\ngenerate step\ngenerate openapi\nstate\nstate list\ndocker\ndocker setup\ndocker build\ndocker run"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#docker-setup =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 1)",
    "text": "Command Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nCommand Line Interface (CLI)\nMotia provides a powerful Command Line Interface (CLI) to help you manage your projects and workflows. The CLI offers various commands for creating projects, generating steps, managing state, and more.\nInstallation\nThe Motia CLI is automatically installed when you install themotiapackage. You can use it by runningnpx motiafollowed by the desired command.\nmotia\nnpx motia\nCommands\ncreate\ncreate\nCreate a new Motia project.\nnpxmotia@latestcreate[options]\nnpxmotia@latestcreate[options]\nOptions:\n-n, --name <project name>: The name for your project, used to create a directory. Use.or./to create it in the current directory.\n-n, --name <project name>\n.\n./\nbuild\nbuild\nBuild your project, generating zip files for each step and creating a configuration file.\nnpxmotiabuild\nnpxmotiabuild\nThis command:\nCompiles all your steps (both Node.js and Python)\nBundles each step into a zip file\nGenerates amotia.steps.jsonconfiguration file in thedistdirectory\nmotia.steps.json\ndist\nOrganizes the output in thedistdirectory\ndist\ndeploy\ndeploy\nDeploy your built steps to the Motia deployment service.\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nOptions:\n-k, --api-key <key>(required): Your API key for authentication\n-k, --api-key <key>\n-n, --project-name <name>: Project name (used when creating a new project)\n-n, --project-name <name>\n-s, --environment-id <id>: Environment ID (can also be set via MOTIA_ENVIRONMENT_ID env var)\n-s, --environment-id <id>\n--environment-name <name>: Environment name (used when creating a new environment)\n--environment-name <name>\n-v, --version-name <version>(required): The version to deploy\n-v, --version-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmot"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#docker-setup =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 2)",
    "text": "-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nThe deployment process:\nBuild your project\nUploads each zip file individually with its path information\nStarts the deployment process on the server\ndev\ndev\nStart the development server.\nnpxmotiadev[options]\nnpxmotiadev[options]\nOptions:\n-p, --port <port>: The port to run the server on (default: 3000).\n-p, --port <port>\n-H, --host [host]: The host address for the server (default: localhost).\n-H, --host [host]\n-d, --debug: Enable debug logging.\n-d, --debug\nget-config\nget-config\nGet the generated config for your project.\nnpxmotiaget-config[options]\nnpxmotiaget-config[options]\nOptions:\n-o, --output <path>: Path to write the generated config file.\n-o, --output <path>\nemit\nemit\nEmit an event to the Motia server.\nnpxmotiaemit[options]\nnpxmotiaemit[options]\nOptions:\n--topic <topic>(required): Event topic/type to emit.\n--topic <topic>\n--message <message>(required): Event payload as a JSON string.\n--message <message>\n-p, --port <number>: Port number (default: 3000).\n-p, --port <number>\ngenerate\ngenerate\nGenerate Motia resources.\ngenerate step\nCreate a new step with interactive prompts.\nnpxmotiageneratestep[options]\nnpxmotiageneratestep[options]\nOptions:\n-d, --dir <step file path>: The path relative to the steps directory to create the step file.\n-d, --dir <step file path>\ngenerate openapi\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#docker-setup =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 3)",
    "text": "api\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document. Defaults to project name from package.json.\n-t, --title <tile of the document>\n-v, --version <version of the document>: Version of the OpenAPI document. Defaults to 1.0.0.\n-v, --version <version of the document>\n-o, --output <output file name / path>: The file name and path relative to root to create the openapi file. Defaults toopenapi.jsonat the root.\n-o, --output <output file name / path>\nopenapi.json\nstate\nstate\nManage application state.\nstate list\nList the current file state.\nnpxmotiastatelist\nnpxmotiastatelist\nDebugging\nYou can enable debug logging by passing the-dor--debugflag to thedevcommand:\n-d\n--debug\ndev\nnpxmotiadev--debug\nnpxmotiadev--debug\nThis will set theLOG_LEVELenvironment variable to'debug', providing more detailed logging output.\nLOG_LEVEL\n'debug'\ndocker\ndocker\nTools to help you setup your Motia project with docker and run it inside a container.\ndocker setup\nSetup your Motia project for Docker\nnpxmotiadockersetup\nnpxmotiadockersetup\ndocker build\nBuild your Motia project Docker image\nnpxmotiadockerbuild\nnpxmotiadockerbuild\nOptions:\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\ndocker run\nRun your Motia project inside a container\nnpxmotiadockerrun\nnpxmotiadockerrun\nOptions:\n--port <number>: Port number (default: 3000).\n--port <number>\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\n--skip-build: Skip building the Docker image and used the last built image.\n--skip-build\nNext Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using ."
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#docker-setup =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 4)",
    "text": " Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nGetting Started\nLearn how to deploy your Motia project to production\nOn this page\ncreate\nbuild\ndeploy\ndev\nget-config\nemit\ngenerate\ngenerate step\ngenerate openapi\nstate\nstate list\ndocker\ndocker setup\ndocker build\ndocker run"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#docker-build =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 1)",
    "text": "Command Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nCommand Line Interface (CLI)\nMotia provides a powerful Command Line Interface (CLI) to help you manage your projects and workflows. The CLI offers various commands for creating projects, generating steps, managing state, and more.\nInstallation\nThe Motia CLI is automatically installed when you install themotiapackage. You can use it by runningnpx motiafollowed by the desired command.\nmotia\nnpx motia\nCommands\ncreate\ncreate\nCreate a new Motia project.\nnpxmotia@latestcreate[options]\nnpxmotia@latestcreate[options]\nOptions:\n-n, --name <project name>: The name for your project, used to create a directory. Use.or./to create it in the current directory.\n-n, --name <project name>\n.\n./\nbuild\nbuild\nBuild your project, generating zip files for each step and creating a configuration file.\nnpxmotiabuild\nnpxmotiabuild\nThis command:\nCompiles all your steps (both Node.js and Python)\nBundles each step into a zip file\nGenerates amotia.steps.jsonconfiguration file in thedistdirectory\nmotia.steps.json\ndist\nOrganizes the output in thedistdirectory\ndist\ndeploy\ndeploy\nDeploy your built steps to the Motia deployment service.\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nOptions:\n-k, --api-key <key>(required): Your API key for authentication\n-k, --api-key <key>\n-n, --project-name <name>: Project name (used when creating a new project)\n-n, --project-name <name>\n-s, --environment-id <id>: Environment ID (can also be set via MOTIA_ENVIRONMENT_ID env var)\n-s, --environment-id <id>\n--environment-name <name>: Environment name (used when creating a new environment)\n--environment-name <name>\n-v, --version-name <version>(required): The version to deploy\n-v, --version-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmot"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#docker-build =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 2)",
    "text": "-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nThe deployment process:\nBuild your project\nUploads each zip file individually with its path information\nStarts the deployment process on the server\ndev\ndev\nStart the development server.\nnpxmotiadev[options]\nnpxmotiadev[options]\nOptions:\n-p, --port <port>: The port to run the server on (default: 3000).\n-p, --port <port>\n-H, --host [host]: The host address for the server (default: localhost).\n-H, --host [host]\n-d, --debug: Enable debug logging.\n-d, --debug\nget-config\nget-config\nGet the generated config for your project.\nnpxmotiaget-config[options]\nnpxmotiaget-config[options]\nOptions:\n-o, --output <path>: Path to write the generated config file.\n-o, --output <path>\nemit\nemit\nEmit an event to the Motia server.\nnpxmotiaemit[options]\nnpxmotiaemit[options]\nOptions:\n--topic <topic>(required): Event topic/type to emit.\n--topic <topic>\n--message <message>(required): Event payload as a JSON string.\n--message <message>\n-p, --port <number>: Port number (default: 3000).\n-p, --port <number>\ngenerate\ngenerate\nGenerate Motia resources.\ngenerate step\nCreate a new step with interactive prompts.\nnpxmotiageneratestep[options]\nnpxmotiageneratestep[options]\nOptions:\n-d, --dir <step file path>: The path relative to the steps directory to create the step file.\n-d, --dir <step file path>\ngenerate openapi\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#docker-build =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 3)",
    "text": "api\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document. Defaults to project name from package.json.\n-t, --title <tile of the document>\n-v, --version <version of the document>: Version of the OpenAPI document. Defaults to 1.0.0.\n-v, --version <version of the document>\n-o, --output <output file name / path>: The file name and path relative to root to create the openapi file. Defaults toopenapi.jsonat the root.\n-o, --output <output file name / path>\nopenapi.json\nstate\nstate\nManage application state.\nstate list\nList the current file state.\nnpxmotiastatelist\nnpxmotiastatelist\nDebugging\nYou can enable debug logging by passing the-dor--debugflag to thedevcommand:\n-d\n--debug\ndev\nnpxmotiadev--debug\nnpxmotiadev--debug\nThis will set theLOG_LEVELenvironment variable to'debug', providing more detailed logging output.\nLOG_LEVEL\n'debug'\ndocker\ndocker\nTools to help you setup your Motia project with docker and run it inside a container.\ndocker setup\nSetup your Motia project for Docker\nnpxmotiadockersetup\nnpxmotiadockersetup\ndocker build\nBuild your Motia project Docker image\nnpxmotiadockerbuild\nnpxmotiadockerbuild\nOptions:\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\ndocker run\nRun your Motia project inside a container\nnpxmotiadockerrun\nnpxmotiadockerrun\nOptions:\n--port <number>: Port number (default: 3000).\n--port <number>\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\n--skip-build: Skip building the Docker image and used the last built image.\n--skip-build\nNext Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using ."
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#docker-build =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 4)",
    "text": " Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nGetting Started\nLearn how to deploy your Motia project to production\nOn this page\ncreate\nbuild\ndeploy\ndev\nget-config\nemit\ngenerate\ngenerate step\ngenerate openapi\nstate\nstate list\ndocker\ndocker setup\ndocker build\ndocker run"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#docker-run =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 1)",
    "text": "Command Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nCommand Line Interface (CLI)\nMotia provides a powerful Command Line Interface (CLI) to help you manage your projects and workflows. The CLI offers various commands for creating projects, generating steps, managing state, and more.\nInstallation\nThe Motia CLI is automatically installed when you install themotiapackage. You can use it by runningnpx motiafollowed by the desired command.\nmotia\nnpx motia\nCommands\ncreate\ncreate\nCreate a new Motia project.\nnpxmotia@latestcreate[options]\nnpxmotia@latestcreate[options]\nOptions:\n-n, --name <project name>: The name for your project, used to create a directory. Use.or./to create it in the current directory.\n-n, --name <project name>\n.\n./\nbuild\nbuild\nBuild your project, generating zip files for each step and creating a configuration file.\nnpxmotiabuild\nnpxmotiabuild\nThis command:\nCompiles all your steps (both Node.js and Python)\nBundles each step into a zip file\nGenerates amotia.steps.jsonconfiguration file in thedistdirectory\nmotia.steps.json\ndist\nOrganizes the output in thedistdirectory\ndist\ndeploy\ndeploy\nDeploy your built steps to the Motia deployment service.\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nOptions:\n-k, --api-key <key>(required): Your API key for authentication\n-k, --api-key <key>\n-n, --project-name <name>: Project name (used when creating a new project)\n-n, --project-name <name>\n-s, --environment-id <id>: Environment ID (can also be set via MOTIA_ENVIRONMENT_ID env var)\n-s, --environment-id <id>\n--environment-name <name>: Environment name (used when creating a new environment)\n--environment-name <name>\n-v, --version-name <version>(required): The version to deploy\n-v, --version-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmot"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#docker-run =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 2)",
    "text": "-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nThe deployment process:\nBuild your project\nUploads each zip file individually with its path information\nStarts the deployment process on the server\ndev\ndev\nStart the development server.\nnpxmotiadev[options]\nnpxmotiadev[options]\nOptions:\n-p, --port <port>: The port to run the server on (default: 3000).\n-p, --port <port>\n-H, --host [host]: The host address for the server (default: localhost).\n-H, --host [host]\n-d, --debug: Enable debug logging.\n-d, --debug\nget-config\nget-config\nGet the generated config for your project.\nnpxmotiaget-config[options]\nnpxmotiaget-config[options]\nOptions:\n-o, --output <path>: Path to write the generated config file.\n-o, --output <path>\nemit\nemit\nEmit an event to the Motia server.\nnpxmotiaemit[options]\nnpxmotiaemit[options]\nOptions:\n--topic <topic>(required): Event topic/type to emit.\n--topic <topic>\n--message <message>(required): Event payload as a JSON string.\n--message <message>\n-p, --port <number>: Port number (default: 3000).\n-p, --port <number>\ngenerate\ngenerate\nGenerate Motia resources.\ngenerate step\nCreate a new step with interactive prompts.\nnpxmotiageneratestep[options]\nnpxmotiageneratestep[options]\nOptions:\n-d, --dir <step file path>: The path relative to the steps directory to create the step file.\n-d, --dir <step file path>\ngenerate openapi\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#docker-run =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 3)",
    "text": "api\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document. Defaults to project name from package.json.\n-t, --title <tile of the document>\n-v, --version <version of the document>: Version of the OpenAPI document. Defaults to 1.0.0.\n-v, --version <version of the document>\n-o, --output <output file name / path>: The file name and path relative to root to create the openapi file. Defaults toopenapi.jsonat the root.\n-o, --output <output file name / path>\nopenapi.json\nstate\nstate\nManage application state.\nstate list\nList the current file state.\nnpxmotiastatelist\nnpxmotiastatelist\nDebugging\nYou can enable debug logging by passing the-dor--debugflag to thedevcommand:\n-d\n--debug\ndev\nnpxmotiadev--debug\nnpxmotiadev--debug\nThis will set theLOG_LEVELenvironment variable to'debug', providing more detailed logging output.\nLOG_LEVEL\n'debug'\ndocker\ndocker\nTools to help you setup your Motia project with docker and run it inside a container.\ndocker setup\nSetup your Motia project for Docker\nnpxmotiadockersetup\nnpxmotiadockersetup\ndocker build\nBuild your Motia project Docker image\nnpxmotiadockerbuild\nnpxmotiadockerbuild\nOptions:\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\ndocker run\nRun your Motia project inside a container\nnpxmotiadockerrun\nnpxmotiadockerrun\nOptions:\n--port <number>: Port number (default: 3000).\n--port <number>\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\n--skip-build: Skip building the Docker image and used the last built image.\n--skip-build\nNext Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using ."
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#docker-run =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 4)",
    "text": " Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nGetting Started\nLearn how to deploy your Motia project to production\nOn this page\ncreate\nbuild\ndeploy\ndev\nget-config\nemit\ngenerate\ngenerate step\ngenerate openapi\nstate\nstate list\ndocker\ndocker setup\ndocker build\ndocker run"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#next-steps =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 1)",
    "text": "Command Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nCommand Line Interface (CLI)\nMotia provides a powerful Command Line Interface (CLI) to help you manage your projects and workflows. The CLI offers various commands for creating projects, generating steps, managing state, and more.\nInstallation\nThe Motia CLI is automatically installed when you install themotiapackage. You can use it by runningnpx motiafollowed by the desired command.\nmotia\nnpx motia\nCommands\ncreate\ncreate\nCreate a new Motia project.\nnpxmotia@latestcreate[options]\nnpxmotia@latestcreate[options]\nOptions:\n-n, --name <project name>: The name for your project, used to create a directory. Use.or./to create it in the current directory.\n-n, --name <project name>\n.\n./\nbuild\nbuild\nBuild your project, generating zip files for each step and creating a configuration file.\nnpxmotiabuild\nnpxmotiabuild\nThis command:\nCompiles all your steps (both Node.js and Python)\nBundles each step into a zip file\nGenerates amotia.steps.jsonconfiguration file in thedistdirectory\nmotia.steps.json\ndist\nOrganizes the output in thedistdirectory\ndist\ndeploy\ndeploy\nDeploy your built steps to the Motia deployment service.\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nOptions:\n-k, --api-key <key>(required): Your API key for authentication\n-k, --api-key <key>\n-n, --project-name <name>: Project name (used when creating a new project)\n-n, --project-name <name>\n-s, --environment-id <id>: Environment ID (can also be set via MOTIA_ENVIRONMENT_ID env var)\n-s, --environment-id <id>\n--environment-name <name>: Environment name (used when creating a new environment)\n--environment-name <name>\n-v, --version-name <version>(required): The version to deploy\n-v, --version-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmot"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#next-steps =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 2)",
    "text": "-name <version>\n-d, --version-description <description>: The description of the version\n-d, --version-description <description>\n-e, --env-file <path>: Path to environment file\n-e, --env-file <path>\nExample:\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3--environment-idenv-uuid\nThe deployment process:\nBuild your project\nUploads each zip file individually with its path information\nStarts the deployment process on the server\ndev\ndev\nStart the development server.\nnpxmotiadev[options]\nnpxmotiadev[options]\nOptions:\n-p, --port <port>: The port to run the server on (default: 3000).\n-p, --port <port>\n-H, --host [host]: The host address for the server (default: localhost).\n-H, --host [host]\n-d, --debug: Enable debug logging.\n-d, --debug\nget-config\nget-config\nGet the generated config for your project.\nnpxmotiaget-config[options]\nnpxmotiaget-config[options]\nOptions:\n-o, --output <path>: Path to write the generated config file.\n-o, --output <path>\nemit\nemit\nEmit an event to the Motia server.\nnpxmotiaemit[options]\nnpxmotiaemit[options]\nOptions:\n--topic <topic>(required): Event topic/type to emit.\n--topic <topic>\n--message <message>(required): Event payload as a JSON string.\n--message <message>\n-p, --port <number>: Port number (default: 3000).\n-p, --port <number>\ngenerate\ngenerate\nGenerate Motia resources.\ngenerate step\nCreate a new step with interactive prompts.\nnpxmotiageneratestep[options]\nnpxmotiageneratestep[options]\nOptions:\n-d, --dir <step file path>: The path relative to the steps directory to create the step file.\n-d, --dir <step file path>\ngenerate openapi\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document"
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#next-steps =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 3)",
    "text": "api\nGenerate OpenAPI spec for your project.\nnpxmotiagenerateopenapi[options]\nnpxmotiagenerateopenapi[options]\nOptions:\n-t, --title <tile of the document>: Title for the OpenAPI document. Defaults to project name from package.json.\n-t, --title <tile of the document>\n-v, --version <version of the document>: Version of the OpenAPI document. Defaults to 1.0.0.\n-v, --version <version of the document>\n-o, --output <output file name / path>: The file name and path relative to root to create the openapi file. Defaults toopenapi.jsonat the root.\n-o, --output <output file name / path>\nopenapi.json\nstate\nstate\nManage application state.\nstate list\nList the current file state.\nnpxmotiastatelist\nnpxmotiastatelist\nDebugging\nYou can enable debug logging by passing the-dor--debugflag to thedevcommand:\n-d\n--debug\ndev\nnpxmotiadev--debug\nnpxmotiadev--debug\nThis will set theLOG_LEVELenvironment variable to'debug', providing more detailed logging output.\nLOG_LEVEL\n'debug'\ndocker\ndocker\nTools to help you setup your Motia project with docker and run it inside a container.\ndocker setup\nSetup your Motia project for Docker\nnpxmotiadockersetup\nnpxmotiadockersetup\ndocker build\nBuild your Motia project Docker image\nnpxmotiadockerbuild\nnpxmotiadockerbuild\nOptions:\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\ndocker run\nRun your Motia project inside a container\nnpxmotiadockerrun\nnpxmotiadockerrun\nOptions:\n--port <number>: Port number (default: 3000).\n--port <number>\n--project-name <project name>(required): The name of your project.\n--project-name <project name>\n--skip-build: Skip building the Docker image and used the last built image.\n--skip-build\nNext Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using ."
}
================================================================================
{
    "source_page": "Command Line Interface (CLI)",
    "source_url": "https://www.motia.dev/docs/development-guide/cli#next-steps =====",
    "chunk_topic": "Command Line Interface (CLI)",
    "chunk_id": "Command Line Interface (CLI) (Part 4)",
    "text": " Steps\nExplore theCore Conceptsto learn more about Steps, Flows, Events, and Topics.\nCheck out theExamplesfor common patterns and use cases.\nJoin ourCommunityfor help and discussions.\nEnvironment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nGetting Started\nLearn how to deploy your Motia project to production\nOn this page\ncreate\nbuild\ndeploy\ndev\nget-config\nemit\ngenerate\ngenerate step\ngenerate openapi\nstate\nstate list\ndocker\ndocker setup\ndocker build\ndocker run"
}
================================================================================
{
    "source_page": "Getting Started",
    "source_url": "https://www.motia.dev/docs/deployment-guide/getting-started =====",
    "chunk_topic": "Getting Started",
    "chunk_id": "Getting Started",
    "text": "Getting Started\nLearn how to deploy your Motia project to production\nWhen you're ready to deploy your Motia project to production, there are the two paths you can take:\nDeploy with Motia\nDeploy your Motia project to production using Motia.\nSelf-Hosted\nDeploy your Motia project to production using motia-docker.\nCommand Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nSelf-Hosted Deployment\nLearn how to deploy your Motia project to production using motia-docker"
}
================================================================================
{
    "source_page": "Self-Hosted Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/self-hosted =====",
    "chunk_topic": "Self-Hosted Deployment",
    "chunk_id": "Self-Hosted Deployment (Part 1)",
    "text": "Self-Hosted Deployment\nLearn how to deploy your Motia project to production using motia-docker\nWe provide a docker image that you can use to deploy your Motia project to production. You can use it as a base image and add your own customizations or use it as is.\nQuick setup\nnpxmotia@latestdockersetup\nnpxmotia@latestdockersetup\nnpxmotia@latestdockerrun\nnpxmotia@latestdockerrun\nnpxmotia@latestdockerrun--help\nnpxmotia@latestdockerrun--help\nReference theCLIfor more information on the docker commands.\nUsing the docker image\nYou will need to implement your own Dockerfile where you will use the motia-docker image as a base image. Use the following template as a starting point for your Dockerfile:\n# NOTE: Some cloud providers will require you to specify the platform to match your target architecture# i.e.: AWS Lightsail requires arm64, therefore you update your FROM statement to: FROM --platform=linux/arm64 motiadev/motia:latestFROMmotiadev/motia:latest# Install DependenciesCOPYpackage*.json ./RUNnpm ci --only=production# Move application filesCOPY. .# Enable the following lines if you are using python steps!!!# Setup python steps dependencies# RUN npx motia@latest install# Expose outside access to the motia projectEXPOSE3000# Run your applicationCMD[\"npm\",\"run\",\"start\"]\n# NOTE: Some cloud providers will require you to specify the platform to match your target architecture# i.e.: AWS Lightsail requires arm64, therefore you update your FROM statement to: FROM --platform=linux/arm64 motiadev/motia:latestFROMmotiadev/motia:latest# Install DependenciesCOPYpackage*.json ./RUNnpm ci --only=production# Move application filesCOPY. .# Enable the following lines if you are using python steps!!!# Setup python steps dependencies# RUN npx motia@latest install# Expose outside access to the motia projectEXPOSE3000# Run your applicationCMD[\"npm\",\"run\",\"start\"]\nDepending on the cloud provider you will use to deploy your Motia project, you will need to adjust the exposed ports\nand the command to start your application.\nCreate a .dockerignore file\nCreate"
}
================================================================================
{
    "source_page": "Self-Hosted Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/self-hosted =====",
    "chunk_topic": "Self-Hosted Deployment",
    "chunk_id": "Self-Hosted Deployment (Part 2)",
    "text": " your applicationCMD[\"npm\",\"run\",\"start\"]\nDepending on the cloud provider you will use to deploy your Motia project, you will need to adjust the exposed ports\nand the command to start your application.\nCreate a .dockerignore file\nCreate a .dockerignore file in the root of your project to exclude files that are not needed in the docker image. You can use the following template as a starting point for your .dockerignore file:\n# Git.git.gitignore# Python__pycache__/*.py[cod]*$py.class*.so.Pythonenv/venv/ENV/# Nodenode_modules/npm-debug.logyarn-debug.logyarn-error.log# IDE.vscode/.idea/*.swp*.swo# Local development.env# OS generated files.DS_Store.DS_Store?._*.Spotlight-V100.Trashesehthumbs.dbThumbs.db\n# Git.git.gitignore# Python__pycache__/*.py[cod]*$py.class*.so.Pythonenv/venv/ENV/# Nodenode_modules/npm-debug.logyarn-debug.logyarn-error.log# IDE.vscode/.idea/*.swp*.swo# Local development.env# OS generated files.DS_Store.DS_Store?._*.Spotlight-V100.Trashesehthumbs.dbThumbs.db\nBuild your image\ndockerbuild-t<your-image-name>.\ndockerbuild-t<your-image-name>.\nRun your Motia application\nOnce you've built your image, you can run it using the following command:\ndockerrun-it--rm-p3000:3000<your-image-name>\ndockerrun-it--rm-p3000:3000<your-image-name>\nMotia Docker Resources\nDocker Registry\nGithub Repo\nExample Motia project with deployment boilerplate for AWS LightSail and Railway\nGetting Started\nLearn how to deploy your Motia project to production\nFeatures\nLearn how to deploy your Motia Project to a live environment\nOn this page"
}
================================================================================
{
    "source_page": "Features",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/features =====",
    "chunk_topic": "Features",
    "chunk_id": "Features",
    "text": "Features\nLearn how to deploy your Motia Project to a live environment\nMotia Cloud is the easiest way to deploy your Motia Project to a live environment.\nQuickly deploy your project to a live environment with one click. Then confidently\nroll up updates, roll back to a previous stable version, and scale your project with ease.\nManage multiple environments, visualize logs and traces, and keep your project running smoothly.\nReal-time deployment status updates\nYou can see the deployment status in real-time in the Motia Cloud web interface\nDeployment history\nAll recent deployments on your project are available in Motia Cloud UI. You can browse them\nand promote them to be live in the environment.\nZero downtime deployments\nEvery deployment is an atomic deployment, this means that Motia Cloud creates a new infrastructure\nwith all the Message Queues system isolatedly for each deployment.\nWhy is this important?\nNo downtime deployments\nAvoid backwards compatibility issues on message queues: Example, you can change a topic data structure\nwithout worrying about breaking messages that are flowing during the deployment.\nInstant rollbacks and roll up updates\nWith one button you can rollback to a previous deployment. This allows you to be confident\non deployments, if anything fails, quickly rollback to a previous stable version.\nOne-click deployment\nDeploy your project from workbench to a live environment with one click.\nObservability\nHave the same experience you have with Workbench locally in cloud. Such as:\nLogs visualization\nTracing tool\nLogs visualization\nYou can see the logs of your project in the Motia Cloud web interface.\nTracing tool\nTracing tool to quickly visualize the flow of requests through the system.\nMultiple environments support\nMotia Cloud supports creating multiple environments for your projects.\nScalability\nHorizontal scaling individually for each step\nRetry mechanisms for event steps built-in (3 retries by default)\nLearn how to deploy\nLearn how to deploy your project to Motia Cloud in theDeploymentpage.\nSelf-Hosted Deployment\nLearn how to deploy your Motia project to production using motia-docker\nDeployment\nDeploying your project to Motia Cloud\nOn this page"
}
================================================================================
{
    "source_page": "Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/deployment =====",
    "chunk_topic": "Deployment",
    "chunk_id": "Deployment (Part 1)",
    "text": "Deployment\nDeploying your project to Motia Cloud\nThere are two ways to deploy your project to Motia Cloud:\nUsing the CLI\nUsing the Web interface\nUsing the Motia CLI for Deployment\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\n--api-key\n-k\nMOTIA_API_KEY\n--version-name\n-v\n--environment-id\n-s\nMOTIA_ENVIRONMENT_ID\n--version-description\n-d\n--env-file\n-e\nNote:Command-line options take precedence over environment variables. If both are provided, the command-line value will be used.\nDeploy with a specific version:\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3\nDeploy to a specific environment with environment variables:\nmotiaclouddeploy--api-keyyour-api-key-here\\--version-name1.2.3\\--env-file.env.production\\--environment-idenv-id\nmotiaclouddeploy--api-keyyour-api-key-here\\--version-name1.2.3\\--env-file.env.production\\--environment-idenv-id\nUsing Web interface\nThrough the web interface, you can deploy your project from workbench to a live environment with one click.\nSteps to deploy from web interface:\nHave your local project running (make sure your Motia version is 0.6.4 or higher)\nGo to import from workbench on Motia Cloud\nSelect the port your local project is running on\nChoose the project and environment name\nAdd any environment variables you need (you can upload from .env file or paste the content to auto-fill)\nClick Deploy\nWatch the magic happen\nAdding static files to the bundle\nSometimes we need to use local files when creating our backend logic. For example, creating templates.\nRunning binary files, etc. To do this, we can add them to steps as static files.\nAdding them to Steps as static files, you need to addincludeFilesto the step config. The path\nshould be relative to the step file.\nincludeFiles\nimport{ EventConfig }from'motia'exportconstconfig:EventConfig={name:'Content Outliner',description:'Creates detailed content outline based on the initial idea',type:'event',emits"
}
================================================================================
{
    "source_page": "Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/deployment =====",
    "chunk_topic": "Deployment",
    "chunk_id": "Deployment (Part 2)",
    "text": " be relative to the step file.\nincludeFiles\nimport{ EventConfig }from'motia'exportconstconfig:EventConfig={name:'Content Outliner',description:'Creates detailed content outline based on the initial idea',type:'event',emits: [{ topic:'write-content', label:'Write first content'}],virtualEmits: ['virtual-write-content'],flows: ['Content'],subscribes: ['build-outline'],input,includeFiles: ['./content-outliner.mustache'],// relative to the step file}\nimport{ EventConfig }from'motia'exportconstconfig:EventConfig={name:'Content Outliner',description:'Creates detailed content outline based on the initial idea',type:'event',emits: [{ topic:'write-content', label:'Write first content'}],virtualEmits: ['virtual-write-content'],flows: ['Content'],subscribes: ['build-outline'],input,includeFiles: ['./content-outliner.mustache'],// relative to the step file}\nAdding binary files to the bundle\nBinary files are also supported, but the entire bundle size must not exceed 100MB.\nThe binary architecture should be linux_amd64.\nTroubleshooting Build Outputs\nWhen adding static files, it's important to check the build output to make sure the files are included.\nFor example, inthis project, there are a few steps that\ninclude static files.\nWhen runningnpx motia build, it will generate the following output indistfolder:\nnpx motia build\ndist\ndist/\u2514\u2500\u2500 node/steps/content/\u251c\u2500\u2500 agents\u2502   \u251c\u2500\u2500 content-outliner.step.zip\u2502   \u251c\u2500\u2500 content-writer.step.zip\u2502   \u2514\u2500\u2500 ideator.step.zip\u251c\u2500\u2500 api\u2502   \u251c\u2500\u2500 generate-content-api.step.zip\u2502   \u2514\u2500\u2500 get-content.step.zip\u251c\u2500\u2500 motia.steps.json\u2514\u2500\u2500 router-node.zip\ndist/\u2514\u2500\u2500 node/steps/content/\u251c\u2500\u2500 agents\u2502   \u251c\u2500\u2500 content-outliner.step.zip\u2502   \u251c\u2500\u2500 content-writer.step.zip\u2502   \u2514\u2500\u2500 ideator.step.zip\u251c\u2500\u2500 api\u2502   \u251c\u2500\u2500 generate-content-api.step.zip\u2502   \u2514\u2500\u2500 get-content.step.zip\u251c\u2500\u2500 motia.steps.json\u2514\u2500\u2500 router-node.zip\nIf you check the content ofcontent-outliner.step.zip, it should have this\ncontent-outliner.step.zip\nsteps/\u2514\u2500\u2500 content/\u2514\u2500\u2500 agents/\u251c\u2500\u2500 content-outliner.mustache\u251c\u2500\u2500"
}
================================================================================
{
    "source_page": "Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/deployment =====",
    "chunk_topic": "Deployment",
    "chunk_id": "Deployment (Part 3)",
    "text": " router-node.zip\nIf you check the content ofcontent-outliner.step.zip, it should have this\ncontent-outliner.step.zip\nsteps/\u2514\u2500\u2500 content/\u2514\u2500\u2500 agents/\u251c\u2500\u2500 content-outliner.mustache\u251c\u2500\u2500 content-outliner.step.js\u2514\u2500\u2500 content-outliner.step.js.map\nsteps/\u2514\u2500\u2500 content/\u2514\u2500\u2500 agents/\u251c\u2500\u2500 content-outliner.mustache\u251c\u2500\u2500 content-outliner.step.js\u2514\u2500\u2500 content-outliner.step.js.map\nNow you made sure the static file calledcontent-outliner.mustacheis included in the bundle.\ncontent-outliner.mustache\nFeatures\nLearn how to deploy your Motia Project to a live environment\nArchitecture\nMotia Cloud is a serverless platform. Some stuff that work locally may not work in the cloud.\nOn this page"
}
================================================================================
{
    "source_page": "Architecture",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/architecture =====",
    "chunk_topic": "Architecture",
    "chunk_id": "Architecture",
    "text": "Architecture\nMotia Cloud is a serverless platform. Some stuff that work locally may not work in the cloud.\nBundle sizes\nMotia Cloud currently has limited bundle sizes to 100MB, we're actively working on increasing this limit\nto be higher than 1GB.\nPayload size on events\nWhen sending events to topics, the data should not have more than 4KB.\nMake sure you're not sending files as Base64 in the content of the event.\nMake sure payloads you send are not too large, prefer storing in state and fetch it on the other steps.\nUsing Local Files\nSometimes we need toa use local files when creating our backend logic. For example, creating templates.\nRunning binary files, etc. To do this, we can add them to steps as static files.\nMake sure you follow the instructions inDeployments page.\nRuntime timeouts\nMotia Cloud currently has limited runtime timeouts:\n15 minutes for Event and Cron Steps.\n30 seconds for API Steps.\nReserved environment variables\nMotia Cloud is currently deployed to Amazon Web Services. Which means that there are\nsome environment variables that are reserved for internal use. If you need to use one\nof these variables, make sure to add a different name.\n_HANDLER_X_AMZN_TRACE_IDAWS_DEFAULT_REGIONAWS_REGIONAWS_EXECUTION_ENVAWS_LAMBDA_FUNCTION_NAMEAWS_LAMBDA_FUNCTION_MEMORY_SIZEAWS_LAMBDA_FUNCTION_VERSIONAWS_LAMBDA_INITIALIZATION_TYPEAWS_LAMBDA_LOG_GROUP_NAMEAWS_LAMBDA_LOG_STREAM_NAMEAWS_ACCESS_KEYAWS_ACCESS_KEY_IDAWS_SECRET_ACCESS_KEYAWS_SESSION_TOKENAWS_LAMBDA_RUNTIME_APILAMBDA_TASK_ROOTLAMBDA_RUNTIME_DIR\n_HANDLER_X_AMZN_TRACE_IDAWS_DEFAULT_REGIONAWS_REGIONAWS_EXECUTION_ENVAWS_LAMBDA_FUNCTION_NAMEAWS_LAMBDA_FUNCTION_MEMORY_SIZEAWS_LAMBDA_FUNCTION_VERSIONAWS_LAMBDA_INITIALIZATION_TYPEAWS_LAMBDA_LOG_GROUP_NAMEAWS_LAMBDA_LOG_STREAM_NAMEAWS_ACCESS_KEYAWS_ACCESS_KEY_IDAWS_SECRET_ACCESS_KEYAWS_SESSION_TOKENAWS_LAMBDA_RUNTIME_APILAMBDA_TASK_ROOTLAMBDA_RUNTIME_DIR\nLimitations\n100MB bundle size\n4KB payload size on events\n15 minutes runtime timeout for Event and Cron Steps\n30 seconds runtime timeout for API Steps\nTroubleshooting build outputs\nMake sure you follow the instructions inDeployments page.\nDeployment\nDeploying your project to Motia Cloud\nFAQ\nFrequently asked questions about Motia Cloud\nOn this page"
}
================================================================================
{
    "source_page": "FAQ",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/faq =====",
    "chunk_topic": "FAQ",
    "chunk_id": "FAQ (Part 1)",
    "text": "FAQ\nFrequently asked questions about Motia Cloud\nCan I deploy any Motia app to Motia Cloud?\nNode.JS projects are fully supported. Python projects are supported as well but there are a few external libraries that are not currently supported, such as:\nTensorFlow\nPytorch\nThese are not supported due to the limited bundle size of 100MB.\nBe mindful that static or binary files added to the bundle must not exceed 100MB.\nWhat happens when I deploy my project to Motia Cloud?\nWhen you deploy for the first time, it's immediately available. But when you deploy\nfor the second time and beyond, the deployment is listed but needs to be manually promoted to be live.\nPromoting a deployment is a really simple process and happens immediately after you click.\nCheck thePromotepage for more information.\nI deployed a new version but it didn't update\nIt's because Motia Cloud doesn't automatically promote the new version to be live. You need to promote it manually.\nCheck thePromotepage for more information.\nHow do I deploy my project to Motia Cloud?\nYou can deploy your project to Motia Cloud by using the Motia CLI or through the web interface.\nCheck theDeploymentpage for more information.\nHow do I rollback to a previous deployment?\nYou can rollback to a previous deployment by clicking the rollback button in the Motia Cloud web interface.\nCheck thePromotepage for more information.\nHow do I promote a deployment to be live?\nYou can promote a deployment to be live by clicking the promote button in the Motia Cloud web interface.\nCheck thePromotepage for more information.\nHow do I delete a deployment?\nYou can delete a deployment by clicking the delete button in the Motia Cloud web interface.\nHow do I update environment variables?\nCurrently, the only way to update environment variables is by creating a new deployment.\nThe reason is that every deployment is an atomic deployment and Environment Variables can also be source of\nissues.\nThis was a decision to make sure that deployments are always predictable and consistent. And rollbacks\ncan be done with confidence. If an environment variable updated caused an issue, you can quickly rollback to\na previous deployment.\nHow do I add static or binary files to my project?\nYou can add static files to your project by adding them to theincludeFilesproperty in the step config.\nCheck theDeploymentpage for more information.\nincludeFiles\nIs it possible to deploy using GitHub Actions?\n"
}
================================================================================
{
    "source_page": "FAQ",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/faq =====",
    "chunk_topic": "FAQ",
    "chunk_id": "FAQ (Part 2)",
    "text": " add static or binary files to my project?\nYou can add static files to your project by adding them to theincludeFilesproperty in the step config.\nCheck theDeploymentpage for more information.\nincludeFiles\nIs it possible to deploy using GitHub Actions?\nYes, it's totally possible to deploy your project using GitHub Actions.\nHow much it cost?\nWe're still working on the pricing model, but it's going to be based on usage. You will pay for what you use.\nHow do I get support?\nYou can get support by creating an issue on ourGitHub repository.\nArchitecture\nMotia Cloud is a serverless platform. Some stuff that work locally may not work in the cloud.\nContinuous Deployment\nMove faster with continuous deployment\nOn this page"
}
================================================================================
{
    "source_page": "Continuous Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/continuous-deployment =====",
    "chunk_topic": "Continuous Deployment",
    "chunk_id": "Continuous Deployment (Part 1)",
    "text": "Continuous Deployment\nMove faster with continuous deployment\nThis guide helps creating a continuous deployment pipeline for your Motia project.\nBefore you start\nBefore you create your pipeline, you first need to have deployed your project to Motia Cloud.\nCheck theDeploymentpage for more information.\nAdding the Environment ID\nAfter you have deployed your project to Motia Cloud, you need to add the environment ID to your pipeline.\nYou can find the environment ID in the Motia Cloud web interface by navigating to the Environment page and\nclicking on the Settings tab.\nCreating an API Key\nWhen you open Motia Cloud, you should see API Keys tab. Click on the Create API Key button to create a new API Key.\nCopy the API Key and add it to your projectas a secret.\nDo NOT paste the API Key content to your workflow file.\nPopulating Environment Variables\nAdd all environment variables you need on your project torepository secrets,\nthen make sure to updateCreate Env filesection in the workflow file.\nCreate Env file\nUsing GitHub Actions\nYou can use GitHub Actions to deploy your Motia project to Motia Cloud.\nname:Deployon:push:branches:-mainworkflow_dispatch:inputs:versionName:description:'Version Name to deploy'required:trueversionDescription:description:'Version Description to deploy'required:trueenv:# Add your API Key as a Secret in your Repository (Do NOT add it here)# https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/use-secretsMOTIA_API_KEY:${{ secrets.MOTIA_API_KEY }}# Fill your environment ID hereMOTIA_ENV_ID:__FILL YOUR ENVIRONMENT ID HERE__jobs:deploy:name:Deployruns-on:ubuntu-lateststeps:-name:Checkout codeuses:actions/checkout@v4with:ref:${{ github.event.release.tag_name || github.ref }}-name:Set VERSION_NAME and DESCRIPTIONid:metarun:|if [ \"${{ github.event_name }}\" = \"workflow_dispatch\" ]; thenecho \"VERSION_NAME=${{ github.event.inputs.versionName }}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.inputs.versionDescription }}\" >> $GITHUB_ENVelseecho \"VERSION_NAME=${GITHUB_SHA::7}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.head_commit.message }}\" >> $GITHUB_ENVfi-name:Set up Pythonuses:actions/setup-python@v5with:python-version:'3.13'-name:Setup"
}
================================================================================
{
    "source_page": "Continuous Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/continuous-deployment =====",
    "chunk_topic": "Continuous Deployment",
    "chunk_id": "Continuous Deployment (Part 2)",
    "text": "::7}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.head_commit.message }}\" >> $GITHUB_ENVfi-name:Set up Pythonuses:actions/setup-python@v5with:python-version:'3.13'-name:Setup Node.jsuses:actions/setup-node@v4with:node-version:'22'cache:'npm'cache-dependency-path:'package-lock.json'-name:Install dependenciesrun:npm ci# Replace MY_SECRET with your secret# Add as many as you need# https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/use-secrets-name:Create Env filerun:|echo \"MY_SECRET=${{ secrets.MY_SECRET }}\" > .env-name:Deploy using Motia Cloudrun:|npx motia cloud deploy \\--api-key ${{ env.MOTIA_API_KEY }} \\--environment-id ${{ env.MOTIA_ENV_ID }} \\--version-name \"${{ env.VERSION_NAME }}\" \\--version-description \"${{ env.VERSION_DESCRIPTION }}\" \\--env-file .env\nname:Deployon:push:branches:-mainworkflow_dispatch:inputs:versionName:description:'Version Name to deploy'required:trueversionDescription:description:'Version Description to deploy'required:trueenv:# Add your API Key as a Secret in your Repository (Do NOT add it here)# https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/use-secretsMOTIA_API_KEY:${{ secrets.MOTIA_API_KEY }}# Fill your environment ID hereMOTIA_ENV_ID:__FILL YOUR ENVIRONMENT ID HERE__jobs:deploy:name:Deployruns-on:ubuntu-lateststeps:-name:Checkout codeuses:actions/checkout@v4with:ref:${{ github.event.release.tag_name || github.ref }}-name:Set VERSION_NAME and DESCRIPTIONid:metarun:|if [ \"${{ github.event_name }}\" = \"workflow_dispatch\" ]; thenecho \"VERSION_NAME=${{ github.event.inputs.versionName }}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.inputs.versionDescription }}\" >> $GITHUB_ENVelseecho \"VERSION_NAME=${GITHUB_SHA::7}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.head_commit.message }}\" >> $GITHUB_ENVfi-name:Set up Pythonuses:actions/setup-python@v5with:python-version:'3.13'-name:Setup Node.jsuses:actions/setup"
}
================================================================================
{
    "source_page": "Continuous Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/continuous-deployment =====",
    "chunk_topic": "Continuous Deployment",
    "chunk_id": "Continuous Deployment (Part 3)",
    "text": "ITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.head_commit.message }}\" >> $GITHUB_ENVfi-name:Set up Pythonuses:actions/setup-python@v5with:python-version:'3.13'-name:Setup Node.jsuses:actions/setup-node@v4with:node-version:'22'cache:'npm'cache-dependency-path:'package-lock.json'-name:Install dependenciesrun:npm ci# Replace MY_SECRET with your secret# Add as many as you need# https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/use-secrets-name:Create Env filerun:|echo \"MY_SECRET=${{ secrets.MY_SECRET }}\" > .env-name:Deploy using Motia Cloudrun:|npx motia cloud deploy \\--api-key ${{ env.MOTIA_API_KEY }} \\--environment-id ${{ env.MOTIA_ENV_ID }} \\--version-name \"${{ env.VERSION_NAME }}\" \\--version-description \"${{ env.VERSION_DESCRIPTION }}\" \\--env-file .env\nFAQ\nFrequently asked questions about Motia Cloud\nAI Development Guide\nGuide for building Motia applications with AI coding tools\nOn this page"
}
================================================================================
{
    "source_page": "Continuous Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/continuous-deployment#before-you-start =====",
    "chunk_topic": "Continuous Deployment",
    "chunk_id": "Continuous Deployment (Part 1)",
    "text": "Continuous Deployment\nMove faster with continuous deployment\nThis guide helps creating a continuous deployment pipeline for your Motia project.\nBefore you start\nBefore you create your pipeline, you first need to have deployed your project to Motia Cloud.\nCheck theDeploymentpage for more information.\nAdding the Environment ID\nAfter you have deployed your project to Motia Cloud, you need to add the environment ID to your pipeline.\nYou can find the environment ID in the Motia Cloud web interface by navigating to the Environment page and\nclicking on the Settings tab.\nCreating an API Key\nWhen you open Motia Cloud, you should see API Keys tab. Click on the Create API Key button to create a new API Key.\nCopy the API Key and add it to your projectas a secret.\nDo NOT paste the API Key content to your workflow file.\nPopulating Environment Variables\nAdd all environment variables you need on your project torepository secrets,\nthen make sure to updateCreate Env filesection in the workflow file.\nCreate Env file\nUsing GitHub Actions\nYou can use GitHub Actions to deploy your Motia project to Motia Cloud.\nname:Deployon:push:branches:-mainworkflow_dispatch:inputs:versionName:description:'Version Name to deploy'required:trueversionDescription:description:'Version Description to deploy'required:trueenv:# Add your API Key as a Secret in your Repository (Do NOT add it here)# https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/use-secretsMOTIA_API_KEY:${{ secrets.MOTIA_API_KEY }}# Fill your environment ID hereMOTIA_ENV_ID:__FILL YOUR ENVIRONMENT ID HERE__jobs:deploy:name:Deployruns-on:ubuntu-lateststeps:-name:Checkout codeuses:actions/checkout@v4with:ref:${{ github.event.release.tag_name || github.ref }}-name:Set VERSION_NAME and DESCRIPTIONid:metarun:|if [ \"${{ github.event_name }}\" = \"workflow_dispatch\" ]; thenecho \"VERSION_NAME=${{ github.event.inputs.versionName }}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.inputs.versionDescription }}\" >> $GITHUB_ENVelseecho \"VERSION_NAME=${GITHUB_SHA::7}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.head_commit.message }}\" >> $GITHUB_ENVfi-name:Set up Pythonuses:actions/setup-python@v5with:python-version:'3.13'-name:Setup"
}
================================================================================
{
    "source_page": "Continuous Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/continuous-deployment#before-you-start =====",
    "chunk_topic": "Continuous Deployment",
    "chunk_id": "Continuous Deployment (Part 2)",
    "text": "::7}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.head_commit.message }}\" >> $GITHUB_ENVfi-name:Set up Pythonuses:actions/setup-python@v5with:python-version:'3.13'-name:Setup Node.jsuses:actions/setup-node@v4with:node-version:'22'cache:'npm'cache-dependency-path:'package-lock.json'-name:Install dependenciesrun:npm ci# Replace MY_SECRET with your secret# Add as many as you need# https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/use-secrets-name:Create Env filerun:|echo \"MY_SECRET=${{ secrets.MY_SECRET }}\" > .env-name:Deploy using Motia Cloudrun:|npx motia cloud deploy \\--api-key ${{ env.MOTIA_API_KEY }} \\--environment-id ${{ env.MOTIA_ENV_ID }} \\--version-name \"${{ env.VERSION_NAME }}\" \\--version-description \"${{ env.VERSION_DESCRIPTION }}\" \\--env-file .env\nname:Deployon:push:branches:-mainworkflow_dispatch:inputs:versionName:description:'Version Name to deploy'required:trueversionDescription:description:'Version Description to deploy'required:trueenv:# Add your API Key as a Secret in your Repository (Do NOT add it here)# https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/use-secretsMOTIA_API_KEY:${{ secrets.MOTIA_API_KEY }}# Fill your environment ID hereMOTIA_ENV_ID:__FILL YOUR ENVIRONMENT ID HERE__jobs:deploy:name:Deployruns-on:ubuntu-lateststeps:-name:Checkout codeuses:actions/checkout@v4with:ref:${{ github.event.release.tag_name || github.ref }}-name:Set VERSION_NAME and DESCRIPTIONid:metarun:|if [ \"${{ github.event_name }}\" = \"workflow_dispatch\" ]; thenecho \"VERSION_NAME=${{ github.event.inputs.versionName }}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.inputs.versionDescription }}\" >> $GITHUB_ENVelseecho \"VERSION_NAME=${GITHUB_SHA::7}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.head_commit.message }}\" >> $GITHUB_ENVfi-name:Set up Pythonuses:actions/setup-python@v5with:python-version:'3.13'-name:Setup Node.jsuses:actions/setup"
}
================================================================================
{
    "source_page": "Continuous Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/continuous-deployment#before-you-start =====",
    "chunk_topic": "Continuous Deployment",
    "chunk_id": "Continuous Deployment (Part 3)",
    "text": "ITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.head_commit.message }}\" >> $GITHUB_ENVfi-name:Set up Pythonuses:actions/setup-python@v5with:python-version:'3.13'-name:Setup Node.jsuses:actions/setup-node@v4with:node-version:'22'cache:'npm'cache-dependency-path:'package-lock.json'-name:Install dependenciesrun:npm ci# Replace MY_SECRET with your secret# Add as many as you need# https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/use-secrets-name:Create Env filerun:|echo \"MY_SECRET=${{ secrets.MY_SECRET }}\" > .env-name:Deploy using Motia Cloudrun:|npx motia cloud deploy \\--api-key ${{ env.MOTIA_API_KEY }} \\--environment-id ${{ env.MOTIA_ENV_ID }} \\--version-name \"${{ env.VERSION_NAME }}\" \\--version-description \"${{ env.VERSION_DESCRIPTION }}\" \\--env-file .env\nFAQ\nFrequently asked questions about Motia Cloud\nAI Development Guide\nGuide for building Motia applications with AI coding tools\nOn this page"
}
================================================================================
{
    "source_page": "Continuous Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/continuous-deployment#adding-the-environment-id =====",
    "chunk_topic": "Continuous Deployment",
    "chunk_id": "Continuous Deployment (Part 1)",
    "text": "Continuous Deployment\nMove faster with continuous deployment\nThis guide helps creating a continuous deployment pipeline for your Motia project.\nBefore you start\nBefore you create your pipeline, you first need to have deployed your project to Motia Cloud.\nCheck theDeploymentpage for more information.\nAdding the Environment ID\nAfter you have deployed your project to Motia Cloud, you need to add the environment ID to your pipeline.\nYou can find the environment ID in the Motia Cloud web interface by navigating to the Environment page and\nclicking on the Settings tab.\nCreating an API Key\nWhen you open Motia Cloud, you should see API Keys tab. Click on the Create API Key button to create a new API Key.\nCopy the API Key and add it to your projectas a secret.\nDo NOT paste the API Key content to your workflow file.\nPopulating Environment Variables\nAdd all environment variables you need on your project torepository secrets,\nthen make sure to updateCreate Env filesection in the workflow file.\nCreate Env file\nUsing GitHub Actions\nYou can use GitHub Actions to deploy your Motia project to Motia Cloud.\nname:Deployon:push:branches:-mainworkflow_dispatch:inputs:versionName:description:'Version Name to deploy'required:trueversionDescription:description:'Version Description to deploy'required:trueenv:# Add your API Key as a Secret in your Repository (Do NOT add it here)# https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/use-secretsMOTIA_API_KEY:${{ secrets.MOTIA_API_KEY }}# Fill your environment ID hereMOTIA_ENV_ID:__FILL YOUR ENVIRONMENT ID HERE__jobs:deploy:name:Deployruns-on:ubuntu-lateststeps:-name:Checkout codeuses:actions/checkout@v4with:ref:${{ github.event.release.tag_name || github.ref }}-name:Set VERSION_NAME and DESCRIPTIONid:metarun:|if [ \"${{ github.event_name }}\" = \"workflow_dispatch\" ]; thenecho \"VERSION_NAME=${{ github.event.inputs.versionName }}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.inputs.versionDescription }}\" >> $GITHUB_ENVelseecho \"VERSION_NAME=${GITHUB_SHA::7}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.head_commit.message }}\" >> $GITHUB_ENVfi-name:Set up Pythonuses:actions/setup-python@v5with:python-version:'3.13'-name:Setup"
}
================================================================================
{
    "source_page": "Continuous Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/continuous-deployment#adding-the-environment-id =====",
    "chunk_topic": "Continuous Deployment",
    "chunk_id": "Continuous Deployment (Part 2)",
    "text": "::7}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.head_commit.message }}\" >> $GITHUB_ENVfi-name:Set up Pythonuses:actions/setup-python@v5with:python-version:'3.13'-name:Setup Node.jsuses:actions/setup-node@v4with:node-version:'22'cache:'npm'cache-dependency-path:'package-lock.json'-name:Install dependenciesrun:npm ci# Replace MY_SECRET with your secret# Add as many as you need# https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/use-secrets-name:Create Env filerun:|echo \"MY_SECRET=${{ secrets.MY_SECRET }}\" > .env-name:Deploy using Motia Cloudrun:|npx motia cloud deploy \\--api-key ${{ env.MOTIA_API_KEY }} \\--environment-id ${{ env.MOTIA_ENV_ID }} \\--version-name \"${{ env.VERSION_NAME }}\" \\--version-description \"${{ env.VERSION_DESCRIPTION }}\" \\--env-file .env\nname:Deployon:push:branches:-mainworkflow_dispatch:inputs:versionName:description:'Version Name to deploy'required:trueversionDescription:description:'Version Description to deploy'required:trueenv:# Add your API Key as a Secret in your Repository (Do NOT add it here)# https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/use-secretsMOTIA_API_KEY:${{ secrets.MOTIA_API_KEY }}# Fill your environment ID hereMOTIA_ENV_ID:__FILL YOUR ENVIRONMENT ID HERE__jobs:deploy:name:Deployruns-on:ubuntu-lateststeps:-name:Checkout codeuses:actions/checkout@v4with:ref:${{ github.event.release.tag_name || github.ref }}-name:Set VERSION_NAME and DESCRIPTIONid:metarun:|if [ \"${{ github.event_name }}\" = \"workflow_dispatch\" ]; thenecho \"VERSION_NAME=${{ github.event.inputs.versionName }}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.inputs.versionDescription }}\" >> $GITHUB_ENVelseecho \"VERSION_NAME=${GITHUB_SHA::7}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.head_commit.message }}\" >> $GITHUB_ENVfi-name:Set up Pythonuses:actions/setup-python@v5with:python-version:'3.13'-name:Setup Node.jsuses:actions/setup"
}
================================================================================
{
    "source_page": "Continuous Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/continuous-deployment#adding-the-environment-id =====",
    "chunk_topic": "Continuous Deployment",
    "chunk_id": "Continuous Deployment (Part 3)",
    "text": "ITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.head_commit.message }}\" >> $GITHUB_ENVfi-name:Set up Pythonuses:actions/setup-python@v5with:python-version:'3.13'-name:Setup Node.jsuses:actions/setup-node@v4with:node-version:'22'cache:'npm'cache-dependency-path:'package-lock.json'-name:Install dependenciesrun:npm ci# Replace MY_SECRET with your secret# Add as many as you need# https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/use-secrets-name:Create Env filerun:|echo \"MY_SECRET=${{ secrets.MY_SECRET }}\" > .env-name:Deploy using Motia Cloudrun:|npx motia cloud deploy \\--api-key ${{ env.MOTIA_API_KEY }} \\--environment-id ${{ env.MOTIA_ENV_ID }} \\--version-name \"${{ env.VERSION_NAME }}\" \\--version-description \"${{ env.VERSION_DESCRIPTION }}\" \\--env-file .env\nFAQ\nFrequently asked questions about Motia Cloud\nAI Development Guide\nGuide for building Motia applications with AI coding tools\nOn this page"
}
================================================================================
{
    "source_page": "Continuous Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/continuous-deployment#creating-an-api-key =====",
    "chunk_topic": "Continuous Deployment",
    "chunk_id": "Continuous Deployment (Part 1)",
    "text": "Continuous Deployment\nMove faster with continuous deployment\nThis guide helps creating a continuous deployment pipeline for your Motia project.\nBefore you start\nBefore you create your pipeline, you first need to have deployed your project to Motia Cloud.\nCheck theDeploymentpage for more information.\nAdding the Environment ID\nAfter you have deployed your project to Motia Cloud, you need to add the environment ID to your pipeline.\nYou can find the environment ID in the Motia Cloud web interface by navigating to the Environment page and\nclicking on the Settings tab.\nCreating an API Key\nWhen you open Motia Cloud, you should see API Keys tab. Click on the Create API Key button to create a new API Key.\nCopy the API Key and add it to your projectas a secret.\nDo NOT paste the API Key content to your workflow file.\nPopulating Environment Variables\nAdd all environment variables you need on your project torepository secrets,\nthen make sure to updateCreate Env filesection in the workflow file.\nCreate Env file\nUsing GitHub Actions\nYou can use GitHub Actions to deploy your Motia project to Motia Cloud.\nname:Deployon:push:branches:-mainworkflow_dispatch:inputs:versionName:description:'Version Name to deploy'required:trueversionDescription:description:'Version Description to deploy'required:trueenv:# Add your API Key as a Secret in your Repository (Do NOT add it here)# https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/use-secretsMOTIA_API_KEY:${{ secrets.MOTIA_API_KEY }}# Fill your environment ID hereMOTIA_ENV_ID:__FILL YOUR ENVIRONMENT ID HERE__jobs:deploy:name:Deployruns-on:ubuntu-lateststeps:-name:Checkout codeuses:actions/checkout@v4with:ref:${{ github.event.release.tag_name || github.ref }}-name:Set VERSION_NAME and DESCRIPTIONid:metarun:|if [ \"${{ github.event_name }}\" = \"workflow_dispatch\" ]; thenecho \"VERSION_NAME=${{ github.event.inputs.versionName }}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.inputs.versionDescription }}\" >> $GITHUB_ENVelseecho \"VERSION_NAME=${GITHUB_SHA::7}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.head_commit.message }}\" >> $GITHUB_ENVfi-name:Set up Pythonuses:actions/setup-python@v5with:python-version:'3.13'-name:Setup"
}
================================================================================
{
    "source_page": "Continuous Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/continuous-deployment#creating-an-api-key =====",
    "chunk_topic": "Continuous Deployment",
    "chunk_id": "Continuous Deployment (Part 2)",
    "text": "::7}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.head_commit.message }}\" >> $GITHUB_ENVfi-name:Set up Pythonuses:actions/setup-python@v5with:python-version:'3.13'-name:Setup Node.jsuses:actions/setup-node@v4with:node-version:'22'cache:'npm'cache-dependency-path:'package-lock.json'-name:Install dependenciesrun:npm ci# Replace MY_SECRET with your secret# Add as many as you need# https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/use-secrets-name:Create Env filerun:|echo \"MY_SECRET=${{ secrets.MY_SECRET }}\" > .env-name:Deploy using Motia Cloudrun:|npx motia cloud deploy \\--api-key ${{ env.MOTIA_API_KEY }} \\--environment-id ${{ env.MOTIA_ENV_ID }} \\--version-name \"${{ env.VERSION_NAME }}\" \\--version-description \"${{ env.VERSION_DESCRIPTION }}\" \\--env-file .env\nname:Deployon:push:branches:-mainworkflow_dispatch:inputs:versionName:description:'Version Name to deploy'required:trueversionDescription:description:'Version Description to deploy'required:trueenv:# Add your API Key as a Secret in your Repository (Do NOT add it here)# https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/use-secretsMOTIA_API_KEY:${{ secrets.MOTIA_API_KEY }}# Fill your environment ID hereMOTIA_ENV_ID:__FILL YOUR ENVIRONMENT ID HERE__jobs:deploy:name:Deployruns-on:ubuntu-lateststeps:-name:Checkout codeuses:actions/checkout@v4with:ref:${{ github.event.release.tag_name || github.ref }}-name:Set VERSION_NAME and DESCRIPTIONid:metarun:|if [ \"${{ github.event_name }}\" = \"workflow_dispatch\" ]; thenecho \"VERSION_NAME=${{ github.event.inputs.versionName }}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.inputs.versionDescription }}\" >> $GITHUB_ENVelseecho \"VERSION_NAME=${GITHUB_SHA::7}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.head_commit.message }}\" >> $GITHUB_ENVfi-name:Set up Pythonuses:actions/setup-python@v5with:python-version:'3.13'-name:Setup Node.jsuses:actions/setup"
}
================================================================================
{
    "source_page": "Continuous Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/continuous-deployment#creating-an-api-key =====",
    "chunk_topic": "Continuous Deployment",
    "chunk_id": "Continuous Deployment (Part 3)",
    "text": "ITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.head_commit.message }}\" >> $GITHUB_ENVfi-name:Set up Pythonuses:actions/setup-python@v5with:python-version:'3.13'-name:Setup Node.jsuses:actions/setup-node@v4with:node-version:'22'cache:'npm'cache-dependency-path:'package-lock.json'-name:Install dependenciesrun:npm ci# Replace MY_SECRET with your secret# Add as many as you need# https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/use-secrets-name:Create Env filerun:|echo \"MY_SECRET=${{ secrets.MY_SECRET }}\" > .env-name:Deploy using Motia Cloudrun:|npx motia cloud deploy \\--api-key ${{ env.MOTIA_API_KEY }} \\--environment-id ${{ env.MOTIA_ENV_ID }} \\--version-name \"${{ env.VERSION_NAME }}\" \\--version-description \"${{ env.VERSION_DESCRIPTION }}\" \\--env-file .env\nFAQ\nFrequently asked questions about Motia Cloud\nAI Development Guide\nGuide for building Motia applications with AI coding tools\nOn this page"
}
================================================================================
{
    "source_page": "Continuous Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/continuous-deployment#populating-environment-variables =====",
    "chunk_topic": "Continuous Deployment",
    "chunk_id": "Continuous Deployment (Part 1)",
    "text": "Continuous Deployment\nMove faster with continuous deployment\nThis guide helps creating a continuous deployment pipeline for your Motia project.\nBefore you start\nBefore you create your pipeline, you first need to have deployed your project to Motia Cloud.\nCheck theDeploymentpage for more information.\nAdding the Environment ID\nAfter you have deployed your project to Motia Cloud, you need to add the environment ID to your pipeline.\nYou can find the environment ID in the Motia Cloud web interface by navigating to the Environment page and\nclicking on the Settings tab.\nCreating an API Key\nWhen you open Motia Cloud, you should see API Keys tab. Click on the Create API Key button to create a new API Key.\nCopy the API Key and add it to your projectas a secret.\nDo NOT paste the API Key content to your workflow file.\nPopulating Environment Variables\nAdd all environment variables you need on your project torepository secrets,\nthen make sure to updateCreate Env filesection in the workflow file.\nCreate Env file\nUsing GitHub Actions\nYou can use GitHub Actions to deploy your Motia project to Motia Cloud.\nname:Deployon:push:branches:-mainworkflow_dispatch:inputs:versionName:description:'Version Name to deploy'required:trueversionDescription:description:'Version Description to deploy'required:trueenv:# Add your API Key as a Secret in your Repository (Do NOT add it here)# https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/use-secretsMOTIA_API_KEY:${{ secrets.MOTIA_API_KEY }}# Fill your environment ID hereMOTIA_ENV_ID:__FILL YOUR ENVIRONMENT ID HERE__jobs:deploy:name:Deployruns-on:ubuntu-lateststeps:-name:Checkout codeuses:actions/checkout@v4with:ref:${{ github.event.release.tag_name || github.ref }}-name:Set VERSION_NAME and DESCRIPTIONid:metarun:|if [ \"${{ github.event_name }}\" = \"workflow_dispatch\" ]; thenecho \"VERSION_NAME=${{ github.event.inputs.versionName }}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.inputs.versionDescription }}\" >> $GITHUB_ENVelseecho \"VERSION_NAME=${GITHUB_SHA::7}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.head_commit.message }}\" >> $GITHUB_ENVfi-name:Set up Pythonuses:actions/setup-python@v5with:python-version:'3.13'-name:Setup"
}
================================================================================
{
    "source_page": "Continuous Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/continuous-deployment#populating-environment-variables =====",
    "chunk_topic": "Continuous Deployment",
    "chunk_id": "Continuous Deployment (Part 2)",
    "text": "::7}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.head_commit.message }}\" >> $GITHUB_ENVfi-name:Set up Pythonuses:actions/setup-python@v5with:python-version:'3.13'-name:Setup Node.jsuses:actions/setup-node@v4with:node-version:'22'cache:'npm'cache-dependency-path:'package-lock.json'-name:Install dependenciesrun:npm ci# Replace MY_SECRET with your secret# Add as many as you need# https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/use-secrets-name:Create Env filerun:|echo \"MY_SECRET=${{ secrets.MY_SECRET }}\" > .env-name:Deploy using Motia Cloudrun:|npx motia cloud deploy \\--api-key ${{ env.MOTIA_API_KEY }} \\--environment-id ${{ env.MOTIA_ENV_ID }} \\--version-name \"${{ env.VERSION_NAME }}\" \\--version-description \"${{ env.VERSION_DESCRIPTION }}\" \\--env-file .env\nname:Deployon:push:branches:-mainworkflow_dispatch:inputs:versionName:description:'Version Name to deploy'required:trueversionDescription:description:'Version Description to deploy'required:trueenv:# Add your API Key as a Secret in your Repository (Do NOT add it here)# https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/use-secretsMOTIA_API_KEY:${{ secrets.MOTIA_API_KEY }}# Fill your environment ID hereMOTIA_ENV_ID:__FILL YOUR ENVIRONMENT ID HERE__jobs:deploy:name:Deployruns-on:ubuntu-lateststeps:-name:Checkout codeuses:actions/checkout@v4with:ref:${{ github.event.release.tag_name || github.ref }}-name:Set VERSION_NAME and DESCRIPTIONid:metarun:|if [ \"${{ github.event_name }}\" = \"workflow_dispatch\" ]; thenecho \"VERSION_NAME=${{ github.event.inputs.versionName }}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.inputs.versionDescription }}\" >> $GITHUB_ENVelseecho \"VERSION_NAME=${GITHUB_SHA::7}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.head_commit.message }}\" >> $GITHUB_ENVfi-name:Set up Pythonuses:actions/setup-python@v5with:python-version:'3.13'-name:Setup Node.jsuses:actions/setup"
}
================================================================================
{
    "source_page": "Continuous Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/continuous-deployment#populating-environment-variables =====",
    "chunk_topic": "Continuous Deployment",
    "chunk_id": "Continuous Deployment (Part 3)",
    "text": "ITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.head_commit.message }}\" >> $GITHUB_ENVfi-name:Set up Pythonuses:actions/setup-python@v5with:python-version:'3.13'-name:Setup Node.jsuses:actions/setup-node@v4with:node-version:'22'cache:'npm'cache-dependency-path:'package-lock.json'-name:Install dependenciesrun:npm ci# Replace MY_SECRET with your secret# Add as many as you need# https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/use-secrets-name:Create Env filerun:|echo \"MY_SECRET=${{ secrets.MY_SECRET }}\" > .env-name:Deploy using Motia Cloudrun:|npx motia cloud deploy \\--api-key ${{ env.MOTIA_API_KEY }} \\--environment-id ${{ env.MOTIA_ENV_ID }} \\--version-name \"${{ env.VERSION_NAME }}\" \\--version-description \"${{ env.VERSION_DESCRIPTION }}\" \\--env-file .env\nFAQ\nFrequently asked questions about Motia Cloud\nAI Development Guide\nGuide for building Motia applications with AI coding tools\nOn this page"
}
================================================================================
{
    "source_page": "Continuous Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/continuous-deployment#using-github-actions =====",
    "chunk_topic": "Continuous Deployment",
    "chunk_id": "Continuous Deployment (Part 1)",
    "text": "Continuous Deployment\nMove faster with continuous deployment\nThis guide helps creating a continuous deployment pipeline for your Motia project.\nBefore you start\nBefore you create your pipeline, you first need to have deployed your project to Motia Cloud.\nCheck theDeploymentpage for more information.\nAdding the Environment ID\nAfter you have deployed your project to Motia Cloud, you need to add the environment ID to your pipeline.\nYou can find the environment ID in the Motia Cloud web interface by navigating to the Environment page and\nclicking on the Settings tab.\nCreating an API Key\nWhen you open Motia Cloud, you should see API Keys tab. Click on the Create API Key button to create a new API Key.\nCopy the API Key and add it to your projectas a secret.\nDo NOT paste the API Key content to your workflow file.\nPopulating Environment Variables\nAdd all environment variables you need on your project torepository secrets,\nthen make sure to updateCreate Env filesection in the workflow file.\nCreate Env file\nUsing GitHub Actions\nYou can use GitHub Actions to deploy your Motia project to Motia Cloud.\nname:Deployon:push:branches:-mainworkflow_dispatch:inputs:versionName:description:'Version Name to deploy'required:trueversionDescription:description:'Version Description to deploy'required:trueenv:# Add your API Key as a Secret in your Repository (Do NOT add it here)# https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/use-secretsMOTIA_API_KEY:${{ secrets.MOTIA_API_KEY }}# Fill your environment ID hereMOTIA_ENV_ID:__FILL YOUR ENVIRONMENT ID HERE__jobs:deploy:name:Deployruns-on:ubuntu-lateststeps:-name:Checkout codeuses:actions/checkout@v4with:ref:${{ github.event.release.tag_name || github.ref }}-name:Set VERSION_NAME and DESCRIPTIONid:metarun:|if [ \"${{ github.event_name }}\" = \"workflow_dispatch\" ]; thenecho \"VERSION_NAME=${{ github.event.inputs.versionName }}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.inputs.versionDescription }}\" >> $GITHUB_ENVelseecho \"VERSION_NAME=${GITHUB_SHA::7}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.head_commit.message }}\" >> $GITHUB_ENVfi-name:Set up Pythonuses:actions/setup-python@v5with:python-version:'3.13'-name:Setup"
}
================================================================================
{
    "source_page": "Continuous Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/continuous-deployment#using-github-actions =====",
    "chunk_topic": "Continuous Deployment",
    "chunk_id": "Continuous Deployment (Part 2)",
    "text": "::7}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.head_commit.message }}\" >> $GITHUB_ENVfi-name:Set up Pythonuses:actions/setup-python@v5with:python-version:'3.13'-name:Setup Node.jsuses:actions/setup-node@v4with:node-version:'22'cache:'npm'cache-dependency-path:'package-lock.json'-name:Install dependenciesrun:npm ci# Replace MY_SECRET with your secret# Add as many as you need# https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/use-secrets-name:Create Env filerun:|echo \"MY_SECRET=${{ secrets.MY_SECRET }}\" > .env-name:Deploy using Motia Cloudrun:|npx motia cloud deploy \\--api-key ${{ env.MOTIA_API_KEY }} \\--environment-id ${{ env.MOTIA_ENV_ID }} \\--version-name \"${{ env.VERSION_NAME }}\" \\--version-description \"${{ env.VERSION_DESCRIPTION }}\" \\--env-file .env\nname:Deployon:push:branches:-mainworkflow_dispatch:inputs:versionName:description:'Version Name to deploy'required:trueversionDescription:description:'Version Description to deploy'required:trueenv:# Add your API Key as a Secret in your Repository (Do NOT add it here)# https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/use-secretsMOTIA_API_KEY:${{ secrets.MOTIA_API_KEY }}# Fill your environment ID hereMOTIA_ENV_ID:__FILL YOUR ENVIRONMENT ID HERE__jobs:deploy:name:Deployruns-on:ubuntu-lateststeps:-name:Checkout codeuses:actions/checkout@v4with:ref:${{ github.event.release.tag_name || github.ref }}-name:Set VERSION_NAME and DESCRIPTIONid:metarun:|if [ \"${{ github.event_name }}\" = \"workflow_dispatch\" ]; thenecho \"VERSION_NAME=${{ github.event.inputs.versionName }}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.inputs.versionDescription }}\" >> $GITHUB_ENVelseecho \"VERSION_NAME=${GITHUB_SHA::7}\" >> $GITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.head_commit.message }}\" >> $GITHUB_ENVfi-name:Set up Pythonuses:actions/setup-python@v5with:python-version:'3.13'-name:Setup Node.jsuses:actions/setup"
}
================================================================================
{
    "source_page": "Continuous Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/continuous-deployment#using-github-actions =====",
    "chunk_topic": "Continuous Deployment",
    "chunk_id": "Continuous Deployment (Part 3)",
    "text": "ITHUB_ENVecho \"VERSION_DESCRIPTION=${{ github.event.head_commit.message }}\" >> $GITHUB_ENVfi-name:Set up Pythonuses:actions/setup-python@v5with:python-version:'3.13'-name:Setup Node.jsuses:actions/setup-node@v4with:node-version:'22'cache:'npm'cache-dependency-path:'package-lock.json'-name:Install dependenciesrun:npm ci# Replace MY_SECRET with your secret# Add as many as you need# https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/use-secrets-name:Create Env filerun:|echo \"MY_SECRET=${{ secrets.MY_SECRET }}\" > .env-name:Deploy using Motia Cloudrun:|npx motia cloud deploy \\--api-key ${{ env.MOTIA_API_KEY }} \\--environment-id ${{ env.MOTIA_ENV_ID }} \\--version-name \"${{ env.VERSION_NAME }}\" \\--version-description \"${{ env.VERSION_DESCRIPTION }}\" \\--env-file .env\nFAQ\nFrequently asked questions about Motia Cloud\nAI Development Guide\nGuide for building Motia applications with AI coding tools\nOn this page"
}
================================================================================
{
    "source_page": "FAQ",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/faq#can-i-deploy-any-motia-app-to-motia-cloud =====",
    "chunk_topic": "FAQ",
    "chunk_id": "FAQ (Part 1)",
    "text": "FAQ\nFrequently asked questions about Motia Cloud\nCan I deploy any Motia app to Motia Cloud?\nNode.JS projects are fully supported. Python projects are supported as well but there are a few external libraries that are not currently supported, such as:\nTensorFlow\nPytorch\nThese are not supported due to the limited bundle size of 100MB.\nBe mindful that static or binary files added to the bundle must not exceed 100MB.\nWhat happens when I deploy my project to Motia Cloud?\nWhen you deploy for the first time, it's immediately available. But when you deploy\nfor the second time and beyond, the deployment is listed but needs to be manually promoted to be live.\nPromoting a deployment is a really simple process and happens immediately after you click.\nCheck thePromotepage for more information.\nI deployed a new version but it didn't update\nIt's because Motia Cloud doesn't automatically promote the new version to be live. You need to promote it manually.\nCheck thePromotepage for more information.\nHow do I deploy my project to Motia Cloud?\nYou can deploy your project to Motia Cloud by using the Motia CLI or through the web interface.\nCheck theDeploymentpage for more information.\nHow do I rollback to a previous deployment?\nYou can rollback to a previous deployment by clicking the rollback button in the Motia Cloud web interface.\nCheck thePromotepage for more information.\nHow do I promote a deployment to be live?\nYou can promote a deployment to be live by clicking the promote button in the Motia Cloud web interface.\nCheck thePromotepage for more information.\nHow do I delete a deployment?\nYou can delete a deployment by clicking the delete button in the Motia Cloud web interface.\nHow do I update environment variables?\nCurrently, the only way to update environment variables is by creating a new deployment.\nThe reason is that every deployment is an atomic deployment and Environment Variables can also be source of\nissues.\nThis was a decision to make sure that deployments are always predictable and consistent. And rollbacks\ncan be done with confidence. If an environment variable updated caused an issue, you can quickly rollback to\na previous deployment.\nHow do I add static or binary files to my project?\nYou can add static files to your project by adding them to theincludeFilesproperty in the step config.\nCheck theDeploymentpage for more information.\nincludeFiles\nIs it possible to deploy using GitHub Actions?\n"
}
================================================================================
{
    "source_page": "FAQ",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/faq#can-i-deploy-any-motia-app-to-motia-cloud =====",
    "chunk_topic": "FAQ",
    "chunk_id": "FAQ (Part 2)",
    "text": " add static or binary files to my project?\nYou can add static files to your project by adding them to theincludeFilesproperty in the step config.\nCheck theDeploymentpage for more information.\nincludeFiles\nIs it possible to deploy using GitHub Actions?\nYes, it's totally possible to deploy your project using GitHub Actions.\nHow much it cost?\nWe're still working on the pricing model, but it's going to be based on usage. You will pay for what you use.\nHow do I get support?\nYou can get support by creating an issue on ourGitHub repository.\nArchitecture\nMotia Cloud is a serverless platform. Some stuff that work locally may not work in the cloud.\nContinuous Deployment\nMove faster with continuous deployment\nOn this page"
}
================================================================================
{
    "source_page": "FAQ",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/faq#what-happens-when-i-deploy-my-project-to-motia-cloud =====",
    "chunk_topic": "FAQ",
    "chunk_id": "FAQ (Part 1)",
    "text": "FAQ\nFrequently asked questions about Motia Cloud\nCan I deploy any Motia app to Motia Cloud?\nNode.JS projects are fully supported. Python projects are supported as well but there are a few external libraries that are not currently supported, such as:\nTensorFlow\nPytorch\nThese are not supported due to the limited bundle size of 100MB.\nBe mindful that static or binary files added to the bundle must not exceed 100MB.\nWhat happens when I deploy my project to Motia Cloud?\nWhen you deploy for the first time, it's immediately available. But when you deploy\nfor the second time and beyond, the deployment is listed but needs to be manually promoted to be live.\nPromoting a deployment is a really simple process and happens immediately after you click.\nCheck thePromotepage for more information.\nI deployed a new version but it didn't update\nIt's because Motia Cloud doesn't automatically promote the new version to be live. You need to promote it manually.\nCheck thePromotepage for more information.\nHow do I deploy my project to Motia Cloud?\nYou can deploy your project to Motia Cloud by using the Motia CLI or through the web interface.\nCheck theDeploymentpage for more information.\nHow do I rollback to a previous deployment?\nYou can rollback to a previous deployment by clicking the rollback button in the Motia Cloud web interface.\nCheck thePromotepage for more information.\nHow do I promote a deployment to be live?\nYou can promote a deployment to be live by clicking the promote button in the Motia Cloud web interface.\nCheck thePromotepage for more information.\nHow do I delete a deployment?\nYou can delete a deployment by clicking the delete button in the Motia Cloud web interface.\nHow do I update environment variables?\nCurrently, the only way to update environment variables is by creating a new deployment.\nThe reason is that every deployment is an atomic deployment and Environment Variables can also be source of\nissues.\nThis was a decision to make sure that deployments are always predictable and consistent. And rollbacks\ncan be done with confidence. If an environment variable updated caused an issue, you can quickly rollback to\na previous deployment.\nHow do I add static or binary files to my project?\nYou can add static files to your project by adding them to theincludeFilesproperty in the step config.\nCheck theDeploymentpage for more information.\nincludeFiles\nIs it possible to deploy using GitHub Actions?\n"
}
================================================================================
{
    "source_page": "FAQ",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/faq#what-happens-when-i-deploy-my-project-to-motia-cloud =====",
    "chunk_topic": "FAQ",
    "chunk_id": "FAQ (Part 2)",
    "text": " add static or binary files to my project?\nYou can add static files to your project by adding them to theincludeFilesproperty in the step config.\nCheck theDeploymentpage for more information.\nincludeFiles\nIs it possible to deploy using GitHub Actions?\nYes, it's totally possible to deploy your project using GitHub Actions.\nHow much it cost?\nWe're still working on the pricing model, but it's going to be based on usage. You will pay for what you use.\nHow do I get support?\nYou can get support by creating an issue on ourGitHub repository.\nArchitecture\nMotia Cloud is a serverless platform. Some stuff that work locally may not work in the cloud.\nContinuous Deployment\nMove faster with continuous deployment\nOn this page"
}
================================================================================
{
    "source_page": "FAQ",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/faq#i-deployed-a-new-version-but-it-didnt-update =====",
    "chunk_topic": "FAQ",
    "chunk_id": "FAQ (Part 1)",
    "text": "FAQ\nFrequently asked questions about Motia Cloud\nCan I deploy any Motia app to Motia Cloud?\nNode.JS projects are fully supported. Python projects are supported as well but there are a few external libraries that are not currently supported, such as:\nTensorFlow\nPytorch\nThese are not supported due to the limited bundle size of 100MB.\nBe mindful that static or binary files added to the bundle must not exceed 100MB.\nWhat happens when I deploy my project to Motia Cloud?\nWhen you deploy for the first time, it's immediately available. But when you deploy\nfor the second time and beyond, the deployment is listed but needs to be manually promoted to be live.\nPromoting a deployment is a really simple process and happens immediately after you click.\nCheck thePromotepage for more information.\nI deployed a new version but it didn't update\nIt's because Motia Cloud doesn't automatically promote the new version to be live. You need to promote it manually.\nCheck thePromotepage for more information.\nHow do I deploy my project to Motia Cloud?\nYou can deploy your project to Motia Cloud by using the Motia CLI or through the web interface.\nCheck theDeploymentpage for more information.\nHow do I rollback to a previous deployment?\nYou can rollback to a previous deployment by clicking the rollback button in the Motia Cloud web interface.\nCheck thePromotepage for more information.\nHow do I promote a deployment to be live?\nYou can promote a deployment to be live by clicking the promote button in the Motia Cloud web interface.\nCheck thePromotepage for more information.\nHow do I delete a deployment?\nYou can delete a deployment by clicking the delete button in the Motia Cloud web interface.\nHow do I update environment variables?\nCurrently, the only way to update environment variables is by creating a new deployment.\nThe reason is that every deployment is an atomic deployment and Environment Variables can also be source of\nissues.\nThis was a decision to make sure that deployments are always predictable and consistent. And rollbacks\ncan be done with confidence. If an environment variable updated caused an issue, you can quickly rollback to\na previous deployment.\nHow do I add static or binary files to my project?\nYou can add static files to your project by adding them to theincludeFilesproperty in the step config.\nCheck theDeploymentpage for more information.\nincludeFiles\nIs it possible to deploy using GitHub Actions?\n"
}
================================================================================
{
    "source_page": "FAQ",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/faq#i-deployed-a-new-version-but-it-didnt-update =====",
    "chunk_topic": "FAQ",
    "chunk_id": "FAQ (Part 2)",
    "text": " add static or binary files to my project?\nYou can add static files to your project by adding them to theincludeFilesproperty in the step config.\nCheck theDeploymentpage for more information.\nincludeFiles\nIs it possible to deploy using GitHub Actions?\nYes, it's totally possible to deploy your project using GitHub Actions.\nHow much it cost?\nWe're still working on the pricing model, but it's going to be based on usage. You will pay for what you use.\nHow do I get support?\nYou can get support by creating an issue on ourGitHub repository.\nArchitecture\nMotia Cloud is a serverless platform. Some stuff that work locally may not work in the cloud.\nContinuous Deployment\nMove faster with continuous deployment\nOn this page"
}
================================================================================
{
    "source_page": "FAQ",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/faq#how-do-i-deploy-my-project-to-motia-cloud =====",
    "chunk_topic": "FAQ",
    "chunk_id": "FAQ (Part 1)",
    "text": "FAQ\nFrequently asked questions about Motia Cloud\nCan I deploy any Motia app to Motia Cloud?\nNode.JS projects are fully supported. Python projects are supported as well but there are a few external libraries that are not currently supported, such as:\nTensorFlow\nPytorch\nThese are not supported due to the limited bundle size of 100MB.\nBe mindful that static or binary files added to the bundle must not exceed 100MB.\nWhat happens when I deploy my project to Motia Cloud?\nWhen you deploy for the first time, it's immediately available. But when you deploy\nfor the second time and beyond, the deployment is listed but needs to be manually promoted to be live.\nPromoting a deployment is a really simple process and happens immediately after you click.\nCheck thePromotepage for more information.\nI deployed a new version but it didn't update\nIt's because Motia Cloud doesn't automatically promote the new version to be live. You need to promote it manually.\nCheck thePromotepage for more information.\nHow do I deploy my project to Motia Cloud?\nYou can deploy your project to Motia Cloud by using the Motia CLI or through the web interface.\nCheck theDeploymentpage for more information.\nHow do I rollback to a previous deployment?\nYou can rollback to a previous deployment by clicking the rollback button in the Motia Cloud web interface.\nCheck thePromotepage for more information.\nHow do I promote a deployment to be live?\nYou can promote a deployment to be live by clicking the promote button in the Motia Cloud web interface.\nCheck thePromotepage for more information.\nHow do I delete a deployment?\nYou can delete a deployment by clicking the delete button in the Motia Cloud web interface.\nHow do I update environment variables?\nCurrently, the only way to update environment variables is by creating a new deployment.\nThe reason is that every deployment is an atomic deployment and Environment Variables can also be source of\nissues.\nThis was a decision to make sure that deployments are always predictable and consistent. And rollbacks\ncan be done with confidence. If an environment variable updated caused an issue, you can quickly rollback to\na previous deployment.\nHow do I add static or binary files to my project?\nYou can add static files to your project by adding them to theincludeFilesproperty in the step config.\nCheck theDeploymentpage for more information.\nincludeFiles\nIs it possible to deploy using GitHub Actions?\n"
}
================================================================================
{
    "source_page": "FAQ",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/faq#how-do-i-deploy-my-project-to-motia-cloud =====",
    "chunk_topic": "FAQ",
    "chunk_id": "FAQ (Part 2)",
    "text": " add static or binary files to my project?\nYou can add static files to your project by adding them to theincludeFilesproperty in the step config.\nCheck theDeploymentpage for more information.\nincludeFiles\nIs it possible to deploy using GitHub Actions?\nYes, it's totally possible to deploy your project using GitHub Actions.\nHow much it cost?\nWe're still working on the pricing model, but it's going to be based on usage. You will pay for what you use.\nHow do I get support?\nYou can get support by creating an issue on ourGitHub repository.\nArchitecture\nMotia Cloud is a serverless platform. Some stuff that work locally may not work in the cloud.\nContinuous Deployment\nMove faster with continuous deployment\nOn this page"
}
================================================================================
{
    "source_page": "FAQ",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/faq#how-do-i-rollback-to-a-previous-deployment =====",
    "chunk_topic": "FAQ",
    "chunk_id": "FAQ (Part 1)",
    "text": "FAQ\nFrequently asked questions about Motia Cloud\nCan I deploy any Motia app to Motia Cloud?\nNode.JS projects are fully supported. Python projects are supported as well but there are a few external libraries that are not currently supported, such as:\nTensorFlow\nPytorch\nThese are not supported due to the limited bundle size of 100MB.\nBe mindful that static or binary files added to the bundle must not exceed 100MB.\nWhat happens when I deploy my project to Motia Cloud?\nWhen you deploy for the first time, it's immediately available. But when you deploy\nfor the second time and beyond, the deployment is listed but needs to be manually promoted to be live.\nPromoting a deployment is a really simple process and happens immediately after you click.\nCheck thePromotepage for more information.\nI deployed a new version but it didn't update\nIt's because Motia Cloud doesn't automatically promote the new version to be live. You need to promote it manually.\nCheck thePromotepage for more information.\nHow do I deploy my project to Motia Cloud?\nYou can deploy your project to Motia Cloud by using the Motia CLI or through the web interface.\nCheck theDeploymentpage for more information.\nHow do I rollback to a previous deployment?\nYou can rollback to a previous deployment by clicking the rollback button in the Motia Cloud web interface.\nCheck thePromotepage for more information.\nHow do I promote a deployment to be live?\nYou can promote a deployment to be live by clicking the promote button in the Motia Cloud web interface.\nCheck thePromotepage for more information.\nHow do I delete a deployment?\nYou can delete a deployment by clicking the delete button in the Motia Cloud web interface.\nHow do I update environment variables?\nCurrently, the only way to update environment variables is by creating a new deployment.\nThe reason is that every deployment is an atomic deployment and Environment Variables can also be source of\nissues.\nThis was a decision to make sure that deployments are always predictable and consistent. And rollbacks\ncan be done with confidence. If an environment variable updated caused an issue, you can quickly rollback to\na previous deployment.\nHow do I add static or binary files to my project?\nYou can add static files to your project by adding them to theincludeFilesproperty in the step config.\nCheck theDeploymentpage for more information.\nincludeFiles\nIs it possible to deploy using GitHub Actions?\n"
}
================================================================================
{
    "source_page": "FAQ",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/faq#how-do-i-rollback-to-a-previous-deployment =====",
    "chunk_topic": "FAQ",
    "chunk_id": "FAQ (Part 2)",
    "text": " add static or binary files to my project?\nYou can add static files to your project by adding them to theincludeFilesproperty in the step config.\nCheck theDeploymentpage for more information.\nincludeFiles\nIs it possible to deploy using GitHub Actions?\nYes, it's totally possible to deploy your project using GitHub Actions.\nHow much it cost?\nWe're still working on the pricing model, but it's going to be based on usage. You will pay for what you use.\nHow do I get support?\nYou can get support by creating an issue on ourGitHub repository.\nArchitecture\nMotia Cloud is a serverless platform. Some stuff that work locally may not work in the cloud.\nContinuous Deployment\nMove faster with continuous deployment\nOn this page"
}
================================================================================
{
    "source_page": "FAQ",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/faq#how-do-i-promote-a-deployment-to-be-live =====",
    "chunk_topic": "FAQ",
    "chunk_id": "FAQ (Part 1)",
    "text": "FAQ\nFrequently asked questions about Motia Cloud\nCan I deploy any Motia app to Motia Cloud?\nNode.JS projects are fully supported. Python projects are supported as well but there are a few external libraries that are not currently supported, such as:\nTensorFlow\nPytorch\nThese are not supported due to the limited bundle size of 100MB.\nBe mindful that static or binary files added to the bundle must not exceed 100MB.\nWhat happens when I deploy my project to Motia Cloud?\nWhen you deploy for the first time, it's immediately available. But when you deploy\nfor the second time and beyond, the deployment is listed but needs to be manually promoted to be live.\nPromoting a deployment is a really simple process and happens immediately after you click.\nCheck thePromotepage for more information.\nI deployed a new version but it didn't update\nIt's because Motia Cloud doesn't automatically promote the new version to be live. You need to promote it manually.\nCheck thePromotepage for more information.\nHow do I deploy my project to Motia Cloud?\nYou can deploy your project to Motia Cloud by using the Motia CLI or through the web interface.\nCheck theDeploymentpage for more information.\nHow do I rollback to a previous deployment?\nYou can rollback to a previous deployment by clicking the rollback button in the Motia Cloud web interface.\nCheck thePromotepage for more information.\nHow do I promote a deployment to be live?\nYou can promote a deployment to be live by clicking the promote button in the Motia Cloud web interface.\nCheck thePromotepage for more information.\nHow do I delete a deployment?\nYou can delete a deployment by clicking the delete button in the Motia Cloud web interface.\nHow do I update environment variables?\nCurrently, the only way to update environment variables is by creating a new deployment.\nThe reason is that every deployment is an atomic deployment and Environment Variables can also be source of\nissues.\nThis was a decision to make sure that deployments are always predictable and consistent. And rollbacks\ncan be done with confidence. If an environment variable updated caused an issue, you can quickly rollback to\na previous deployment.\nHow do I add static or binary files to my project?\nYou can add static files to your project by adding them to theincludeFilesproperty in the step config.\nCheck theDeploymentpage for more information.\nincludeFiles\nIs it possible to deploy using GitHub Actions?\n"
}
================================================================================
{
    "source_page": "FAQ",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/faq#how-do-i-promote-a-deployment-to-be-live =====",
    "chunk_topic": "FAQ",
    "chunk_id": "FAQ (Part 2)",
    "text": " add static or binary files to my project?\nYou can add static files to your project by adding them to theincludeFilesproperty in the step config.\nCheck theDeploymentpage for more information.\nincludeFiles\nIs it possible to deploy using GitHub Actions?\nYes, it's totally possible to deploy your project using GitHub Actions.\nHow much it cost?\nWe're still working on the pricing model, but it's going to be based on usage. You will pay for what you use.\nHow do I get support?\nYou can get support by creating an issue on ourGitHub repository.\nArchitecture\nMotia Cloud is a serverless platform. Some stuff that work locally may not work in the cloud.\nContinuous Deployment\nMove faster with continuous deployment\nOn this page"
}
================================================================================
{
    "source_page": "FAQ",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/faq#how-do-i-delete-a-deployment =====",
    "chunk_topic": "FAQ",
    "chunk_id": "FAQ (Part 1)",
    "text": "FAQ\nFrequently asked questions about Motia Cloud\nCan I deploy any Motia app to Motia Cloud?\nNode.JS projects are fully supported. Python projects are supported as well but there are a few external libraries that are not currently supported, such as:\nTensorFlow\nPytorch\nThese are not supported due to the limited bundle size of 100MB.\nBe mindful that static or binary files added to the bundle must not exceed 100MB.\nWhat happens when I deploy my project to Motia Cloud?\nWhen you deploy for the first time, it's immediately available. But when you deploy\nfor the second time and beyond, the deployment is listed but needs to be manually promoted to be live.\nPromoting a deployment is a really simple process and happens immediately after you click.\nCheck thePromotepage for more information.\nI deployed a new version but it didn't update\nIt's because Motia Cloud doesn't automatically promote the new version to be live. You need to promote it manually.\nCheck thePromotepage for more information.\nHow do I deploy my project to Motia Cloud?\nYou can deploy your project to Motia Cloud by using the Motia CLI or through the web interface.\nCheck theDeploymentpage for more information.\nHow do I rollback to a previous deployment?\nYou can rollback to a previous deployment by clicking the rollback button in the Motia Cloud web interface.\nCheck thePromotepage for more information.\nHow do I promote a deployment to be live?\nYou can promote a deployment to be live by clicking the promote button in the Motia Cloud web interface.\nCheck thePromotepage for more information.\nHow do I delete a deployment?\nYou can delete a deployment by clicking the delete button in the Motia Cloud web interface.\nHow do I update environment variables?\nCurrently, the only way to update environment variables is by creating a new deployment.\nThe reason is that every deployment is an atomic deployment and Environment Variables can also be source of\nissues.\nThis was a decision to make sure that deployments are always predictable and consistent. And rollbacks\ncan be done with confidence. If an environment variable updated caused an issue, you can quickly rollback to\na previous deployment.\nHow do I add static or binary files to my project?\nYou can add static files to your project by adding them to theincludeFilesproperty in the step config.\nCheck theDeploymentpage for more information.\nincludeFiles\nIs it possible to deploy using GitHub Actions?\n"
}
================================================================================
{
    "source_page": "FAQ",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/faq#how-do-i-delete-a-deployment =====",
    "chunk_topic": "FAQ",
    "chunk_id": "FAQ (Part 2)",
    "text": " add static or binary files to my project?\nYou can add static files to your project by adding them to theincludeFilesproperty in the step config.\nCheck theDeploymentpage for more information.\nincludeFiles\nIs it possible to deploy using GitHub Actions?\nYes, it's totally possible to deploy your project using GitHub Actions.\nHow much it cost?\nWe're still working on the pricing model, but it's going to be based on usage. You will pay for what you use.\nHow do I get support?\nYou can get support by creating an issue on ourGitHub repository.\nArchitecture\nMotia Cloud is a serverless platform. Some stuff that work locally may not work in the cloud.\nContinuous Deployment\nMove faster with continuous deployment\nOn this page"
}
================================================================================
{
    "source_page": "FAQ",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/faq#how-do-i-update-environment-variables =====",
    "chunk_topic": "FAQ",
    "chunk_id": "FAQ (Part 1)",
    "text": "FAQ\nFrequently asked questions about Motia Cloud\nCan I deploy any Motia app to Motia Cloud?\nNode.JS projects are fully supported. Python projects are supported as well but there are a few external libraries that are not currently supported, such as:\nTensorFlow\nPytorch\nThese are not supported due to the limited bundle size of 100MB.\nBe mindful that static or binary files added to the bundle must not exceed 100MB.\nWhat happens when I deploy my project to Motia Cloud?\nWhen you deploy for the first time, it's immediately available. But when you deploy\nfor the second time and beyond, the deployment is listed but needs to be manually promoted to be live.\nPromoting a deployment is a really simple process and happens immediately after you click.\nCheck thePromotepage for more information.\nI deployed a new version but it didn't update\nIt's because Motia Cloud doesn't automatically promote the new version to be live. You need to promote it manually.\nCheck thePromotepage for more information.\nHow do I deploy my project to Motia Cloud?\nYou can deploy your project to Motia Cloud by using the Motia CLI or through the web interface.\nCheck theDeploymentpage for more information.\nHow do I rollback to a previous deployment?\nYou can rollback to a previous deployment by clicking the rollback button in the Motia Cloud web interface.\nCheck thePromotepage for more information.\nHow do I promote a deployment to be live?\nYou can promote a deployment to be live by clicking the promote button in the Motia Cloud web interface.\nCheck thePromotepage for more information.\nHow do I delete a deployment?\nYou can delete a deployment by clicking the delete button in the Motia Cloud web interface.\nHow do I update environment variables?\nCurrently, the only way to update environment variables is by creating a new deployment.\nThe reason is that every deployment is an atomic deployment and Environment Variables can also be source of\nissues.\nThis was a decision to make sure that deployments are always predictable and consistent. And rollbacks\ncan be done with confidence. If an environment variable updated caused an issue, you can quickly rollback to\na previous deployment.\nHow do I add static or binary files to my project?\nYou can add static files to your project by adding them to theincludeFilesproperty in the step config.\nCheck theDeploymentpage for more information.\nincludeFiles\nIs it possible to deploy using GitHub Actions?\n"
}
================================================================================
{
    "source_page": "FAQ",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/faq#how-do-i-update-environment-variables =====",
    "chunk_topic": "FAQ",
    "chunk_id": "FAQ (Part 2)",
    "text": " add static or binary files to my project?\nYou can add static files to your project by adding them to theincludeFilesproperty in the step config.\nCheck theDeploymentpage for more information.\nincludeFiles\nIs it possible to deploy using GitHub Actions?\nYes, it's totally possible to deploy your project using GitHub Actions.\nHow much it cost?\nWe're still working on the pricing model, but it's going to be based on usage. You will pay for what you use.\nHow do I get support?\nYou can get support by creating an issue on ourGitHub repository.\nArchitecture\nMotia Cloud is a serverless platform. Some stuff that work locally may not work in the cloud.\nContinuous Deployment\nMove faster with continuous deployment\nOn this page"
}
================================================================================
{
    "source_page": "FAQ",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/faq#how-do-i-add-static-or-binary-files-to-my-project =====",
    "chunk_topic": "FAQ",
    "chunk_id": "FAQ (Part 1)",
    "text": "FAQ\nFrequently asked questions about Motia Cloud\nCan I deploy any Motia app to Motia Cloud?\nNode.JS projects are fully supported. Python projects are supported as well but there are a few external libraries that are not currently supported, such as:\nTensorFlow\nPytorch\nThese are not supported due to the limited bundle size of 100MB.\nBe mindful that static or binary files added to the bundle must not exceed 100MB.\nWhat happens when I deploy my project to Motia Cloud?\nWhen you deploy for the first time, it's immediately available. But when you deploy\nfor the second time and beyond, the deployment is listed but needs to be manually promoted to be live.\nPromoting a deployment is a really simple process and happens immediately after you click.\nCheck thePromotepage for more information.\nI deployed a new version but it didn't update\nIt's because Motia Cloud doesn't automatically promote the new version to be live. You need to promote it manually.\nCheck thePromotepage for more information.\nHow do I deploy my project to Motia Cloud?\nYou can deploy your project to Motia Cloud by using the Motia CLI or through the web interface.\nCheck theDeploymentpage for more information.\nHow do I rollback to a previous deployment?\nYou can rollback to a previous deployment by clicking the rollback button in the Motia Cloud web interface.\nCheck thePromotepage for more information.\nHow do I promote a deployment to be live?\nYou can promote a deployment to be live by clicking the promote button in the Motia Cloud web interface.\nCheck thePromotepage for more information.\nHow do I delete a deployment?\nYou can delete a deployment by clicking the delete button in the Motia Cloud web interface.\nHow do I update environment variables?\nCurrently, the only way to update environment variables is by creating a new deployment.\nThe reason is that every deployment is an atomic deployment and Environment Variables can also be source of\nissues.\nThis was a decision to make sure that deployments are always predictable and consistent. And rollbacks\ncan be done with confidence. If an environment variable updated caused an issue, you can quickly rollback to\na previous deployment.\nHow do I add static or binary files to my project?\nYou can add static files to your project by adding them to theincludeFilesproperty in the step config.\nCheck theDeploymentpage for more information.\nincludeFiles\nIs it possible to deploy using GitHub Actions?\n"
}
================================================================================
{
    "source_page": "FAQ",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/faq#how-do-i-add-static-or-binary-files-to-my-project =====",
    "chunk_topic": "FAQ",
    "chunk_id": "FAQ (Part 2)",
    "text": " add static or binary files to my project?\nYou can add static files to your project by adding them to theincludeFilesproperty in the step config.\nCheck theDeploymentpage for more information.\nincludeFiles\nIs it possible to deploy using GitHub Actions?\nYes, it's totally possible to deploy your project using GitHub Actions.\nHow much it cost?\nWe're still working on the pricing model, but it's going to be based on usage. You will pay for what you use.\nHow do I get support?\nYou can get support by creating an issue on ourGitHub repository.\nArchitecture\nMotia Cloud is a serverless platform. Some stuff that work locally may not work in the cloud.\nContinuous Deployment\nMove faster with continuous deployment\nOn this page"
}
================================================================================
{
    "source_page": "FAQ",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/faq#is-it-possible-to-deploy-using-github-actions =====",
    "chunk_topic": "FAQ",
    "chunk_id": "FAQ (Part 1)",
    "text": "FAQ\nFrequently asked questions about Motia Cloud\nCan I deploy any Motia app to Motia Cloud?\nNode.JS projects are fully supported. Python projects are supported as well but there are a few external libraries that are not currently supported, such as:\nTensorFlow\nPytorch\nThese are not supported due to the limited bundle size of 100MB.\nBe mindful that static or binary files added to the bundle must not exceed 100MB.\nWhat happens when I deploy my project to Motia Cloud?\nWhen you deploy for the first time, it's immediately available. But when you deploy\nfor the second time and beyond, the deployment is listed but needs to be manually promoted to be live.\nPromoting a deployment is a really simple process and happens immediately after you click.\nCheck thePromotepage for more information.\nI deployed a new version but it didn't update\nIt's because Motia Cloud doesn't automatically promote the new version to be live. You need to promote it manually.\nCheck thePromotepage for more information.\nHow do I deploy my project to Motia Cloud?\nYou can deploy your project to Motia Cloud by using the Motia CLI or through the web interface.\nCheck theDeploymentpage for more information.\nHow do I rollback to a previous deployment?\nYou can rollback to a previous deployment by clicking the rollback button in the Motia Cloud web interface.\nCheck thePromotepage for more information.\nHow do I promote a deployment to be live?\nYou can promote a deployment to be live by clicking the promote button in the Motia Cloud web interface.\nCheck thePromotepage for more information.\nHow do I delete a deployment?\nYou can delete a deployment by clicking the delete button in the Motia Cloud web interface.\nHow do I update environment variables?\nCurrently, the only way to update environment variables is by creating a new deployment.\nThe reason is that every deployment is an atomic deployment and Environment Variables can also be source of\nissues.\nThis was a decision to make sure that deployments are always predictable and consistent. And rollbacks\ncan be done with confidence. If an environment variable updated caused an issue, you can quickly rollback to\na previous deployment.\nHow do I add static or binary files to my project?\nYou can add static files to your project by adding them to theincludeFilesproperty in the step config.\nCheck theDeploymentpage for more information.\nincludeFiles\nIs it possible to deploy using GitHub Actions?\n"
}
================================================================================
{
    "source_page": "FAQ",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/faq#is-it-possible-to-deploy-using-github-actions =====",
    "chunk_topic": "FAQ",
    "chunk_id": "FAQ (Part 2)",
    "text": " add static or binary files to my project?\nYou can add static files to your project by adding them to theincludeFilesproperty in the step config.\nCheck theDeploymentpage for more information.\nincludeFiles\nIs it possible to deploy using GitHub Actions?\nYes, it's totally possible to deploy your project using GitHub Actions.\nHow much it cost?\nWe're still working on the pricing model, but it's going to be based on usage. You will pay for what you use.\nHow do I get support?\nYou can get support by creating an issue on ourGitHub repository.\nArchitecture\nMotia Cloud is a serverless platform. Some stuff that work locally may not work in the cloud.\nContinuous Deployment\nMove faster with continuous deployment\nOn this page"
}
================================================================================
{
    "source_page": "FAQ",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/faq#how-much-it-cost =====",
    "chunk_topic": "FAQ",
    "chunk_id": "FAQ (Part 1)",
    "text": "FAQ\nFrequently asked questions about Motia Cloud\nCan I deploy any Motia app to Motia Cloud?\nNode.JS projects are fully supported. Python projects are supported as well but there are a few external libraries that are not currently supported, such as:\nTensorFlow\nPytorch\nThese are not supported due to the limited bundle size of 100MB.\nBe mindful that static or binary files added to the bundle must not exceed 100MB.\nWhat happens when I deploy my project to Motia Cloud?\nWhen you deploy for the first time, it's immediately available. But when you deploy\nfor the second time and beyond, the deployment is listed but needs to be manually promoted to be live.\nPromoting a deployment is a really simple process and happens immediately after you click.\nCheck thePromotepage for more information.\nI deployed a new version but it didn't update\nIt's because Motia Cloud doesn't automatically promote the new version to be live. You need to promote it manually.\nCheck thePromotepage for more information.\nHow do I deploy my project to Motia Cloud?\nYou can deploy your project to Motia Cloud by using the Motia CLI or through the web interface.\nCheck theDeploymentpage for more information.\nHow do I rollback to a previous deployment?\nYou can rollback to a previous deployment by clicking the rollback button in the Motia Cloud web interface.\nCheck thePromotepage for more information.\nHow do I promote a deployment to be live?\nYou can promote a deployment to be live by clicking the promote button in the Motia Cloud web interface.\nCheck thePromotepage for more information.\nHow do I delete a deployment?\nYou can delete a deployment by clicking the delete button in the Motia Cloud web interface.\nHow do I update environment variables?\nCurrently, the only way to update environment variables is by creating a new deployment.\nThe reason is that every deployment is an atomic deployment and Environment Variables can also be source of\nissues.\nThis was a decision to make sure that deployments are always predictable and consistent. And rollbacks\ncan be done with confidence. If an environment variable updated caused an issue, you can quickly rollback to\na previous deployment.\nHow do I add static or binary files to my project?\nYou can add static files to your project by adding them to theincludeFilesproperty in the step config.\nCheck theDeploymentpage for more information.\nincludeFiles\nIs it possible to deploy using GitHub Actions?\n"
}
================================================================================
{
    "source_page": "FAQ",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/faq#how-much-it-cost =====",
    "chunk_topic": "FAQ",
    "chunk_id": "FAQ (Part 2)",
    "text": " add static or binary files to my project?\nYou can add static files to your project by adding them to theincludeFilesproperty in the step config.\nCheck theDeploymentpage for more information.\nincludeFiles\nIs it possible to deploy using GitHub Actions?\nYes, it's totally possible to deploy your project using GitHub Actions.\nHow much it cost?\nWe're still working on the pricing model, but it's going to be based on usage. You will pay for what you use.\nHow do I get support?\nYou can get support by creating an issue on ourGitHub repository.\nArchitecture\nMotia Cloud is a serverless platform. Some stuff that work locally may not work in the cloud.\nContinuous Deployment\nMove faster with continuous deployment\nOn this page"
}
================================================================================
{
    "source_page": "FAQ",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/faq#how-do-i-get-support =====",
    "chunk_topic": "FAQ",
    "chunk_id": "FAQ (Part 1)",
    "text": "FAQ\nFrequently asked questions about Motia Cloud\nCan I deploy any Motia app to Motia Cloud?\nNode.JS projects are fully supported. Python projects are supported as well but there are a few external libraries that are not currently supported, such as:\nTensorFlow\nPytorch\nThese are not supported due to the limited bundle size of 100MB.\nBe mindful that static or binary files added to the bundle must not exceed 100MB.\nWhat happens when I deploy my project to Motia Cloud?\nWhen you deploy for the first time, it's immediately available. But when you deploy\nfor the second time and beyond, the deployment is listed but needs to be manually promoted to be live.\nPromoting a deployment is a really simple process and happens immediately after you click.\nCheck thePromotepage for more information.\nI deployed a new version but it didn't update\nIt's because Motia Cloud doesn't automatically promote the new version to be live. You need to promote it manually.\nCheck thePromotepage for more information.\nHow do I deploy my project to Motia Cloud?\nYou can deploy your project to Motia Cloud by using the Motia CLI or through the web interface.\nCheck theDeploymentpage for more information.\nHow do I rollback to a previous deployment?\nYou can rollback to a previous deployment by clicking the rollback button in the Motia Cloud web interface.\nCheck thePromotepage for more information.\nHow do I promote a deployment to be live?\nYou can promote a deployment to be live by clicking the promote button in the Motia Cloud web interface.\nCheck thePromotepage for more information.\nHow do I delete a deployment?\nYou can delete a deployment by clicking the delete button in the Motia Cloud web interface.\nHow do I update environment variables?\nCurrently, the only way to update environment variables is by creating a new deployment.\nThe reason is that every deployment is an atomic deployment and Environment Variables can also be source of\nissues.\nThis was a decision to make sure that deployments are always predictable and consistent. And rollbacks\ncan be done with confidence. If an environment variable updated caused an issue, you can quickly rollback to\na previous deployment.\nHow do I add static or binary files to my project?\nYou can add static files to your project by adding them to theincludeFilesproperty in the step config.\nCheck theDeploymentpage for more information.\nincludeFiles\nIs it possible to deploy using GitHub Actions?\n"
}
================================================================================
{
    "source_page": "FAQ",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/faq#how-do-i-get-support =====",
    "chunk_topic": "FAQ",
    "chunk_id": "FAQ (Part 2)",
    "text": " add static or binary files to my project?\nYou can add static files to your project by adding them to theincludeFilesproperty in the step config.\nCheck theDeploymentpage for more information.\nincludeFiles\nIs it possible to deploy using GitHub Actions?\nYes, it's totally possible to deploy your project using GitHub Actions.\nHow much it cost?\nWe're still working on the pricing model, but it's going to be based on usage. You will pay for what you use.\nHow do I get support?\nYou can get support by creating an issue on ourGitHub repository.\nArchitecture\nMotia Cloud is a serverless platform. Some stuff that work locally may not work in the cloud.\nContinuous Deployment\nMove faster with continuous deployment\nOn this page"
}
================================================================================
{
    "source_page": "Architecture",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/architecture#bundle-sizes =====",
    "chunk_topic": "Architecture",
    "chunk_id": "Architecture",
    "text": "Architecture\nMotia Cloud is a serverless platform. Some stuff that work locally may not work in the cloud.\nBundle sizes\nMotia Cloud currently has limited bundle sizes to 100MB, we're actively working on increasing this limit\nto be higher than 1GB.\nPayload size on events\nWhen sending events to topics, the data should not have more than 4KB.\nMake sure you're not sending files as Base64 in the content of the event.\nMake sure payloads you send are not too large, prefer storing in state and fetch it on the other steps.\nUsing Local Files\nSometimes we need toa use local files when creating our backend logic. For example, creating templates.\nRunning binary files, etc. To do this, we can add them to steps as static files.\nMake sure you follow the instructions inDeployments page.\nRuntime timeouts\nMotia Cloud currently has limited runtime timeouts:\n15 minutes for Event and Cron Steps.\n30 seconds for API Steps.\nReserved environment variables\nMotia Cloud is currently deployed to Amazon Web Services. Which means that there are\nsome environment variables that are reserved for internal use. If you need to use one\nof these variables, make sure to add a different name.\n_HANDLER_X_AMZN_TRACE_IDAWS_DEFAULT_REGIONAWS_REGIONAWS_EXECUTION_ENVAWS_LAMBDA_FUNCTION_NAMEAWS_LAMBDA_FUNCTION_MEMORY_SIZEAWS_LAMBDA_FUNCTION_VERSIONAWS_LAMBDA_INITIALIZATION_TYPEAWS_LAMBDA_LOG_GROUP_NAMEAWS_LAMBDA_LOG_STREAM_NAMEAWS_ACCESS_KEYAWS_ACCESS_KEY_IDAWS_SECRET_ACCESS_KEYAWS_SESSION_TOKENAWS_LAMBDA_RUNTIME_APILAMBDA_TASK_ROOTLAMBDA_RUNTIME_DIR\n_HANDLER_X_AMZN_TRACE_IDAWS_DEFAULT_REGIONAWS_REGIONAWS_EXECUTION_ENVAWS_LAMBDA_FUNCTION_NAMEAWS_LAMBDA_FUNCTION_MEMORY_SIZEAWS_LAMBDA_FUNCTION_VERSIONAWS_LAMBDA_INITIALIZATION_TYPEAWS_LAMBDA_LOG_GROUP_NAMEAWS_LAMBDA_LOG_STREAM_NAMEAWS_ACCESS_KEYAWS_ACCESS_KEY_IDAWS_SECRET_ACCESS_KEYAWS_SESSION_TOKENAWS_LAMBDA_RUNTIME_APILAMBDA_TASK_ROOTLAMBDA_RUNTIME_DIR\nLimitations\n100MB bundle size\n4KB payload size on events\n15 minutes runtime timeout for Event and Cron Steps\n30 seconds runtime timeout for API Steps\nTroubleshooting build outputs\nMake sure you follow the instructions inDeployments page.\nDeployment\nDeploying your project to Motia Cloud\nFAQ\nFrequently asked questions about Motia Cloud\nOn this page"
}
================================================================================
{
    "source_page": "Architecture",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/architecture#payload-size-on-events =====",
    "chunk_topic": "Architecture",
    "chunk_id": "Architecture",
    "text": "Architecture\nMotia Cloud is a serverless platform. Some stuff that work locally may not work in the cloud.\nBundle sizes\nMotia Cloud currently has limited bundle sizes to 100MB, we're actively working on increasing this limit\nto be higher than 1GB.\nPayload size on events\nWhen sending events to topics, the data should not have more than 4KB.\nMake sure you're not sending files as Base64 in the content of the event.\nMake sure payloads you send are not too large, prefer storing in state and fetch it on the other steps.\nUsing Local Files\nSometimes we need toa use local files when creating our backend logic. For example, creating templates.\nRunning binary files, etc. To do this, we can add them to steps as static files.\nMake sure you follow the instructions inDeployments page.\nRuntime timeouts\nMotia Cloud currently has limited runtime timeouts:\n15 minutes for Event and Cron Steps.\n30 seconds for API Steps.\nReserved environment variables\nMotia Cloud is currently deployed to Amazon Web Services. Which means that there are\nsome environment variables that are reserved for internal use. If you need to use one\nof these variables, make sure to add a different name.\n_HANDLER_X_AMZN_TRACE_IDAWS_DEFAULT_REGIONAWS_REGIONAWS_EXECUTION_ENVAWS_LAMBDA_FUNCTION_NAMEAWS_LAMBDA_FUNCTION_MEMORY_SIZEAWS_LAMBDA_FUNCTION_VERSIONAWS_LAMBDA_INITIALIZATION_TYPEAWS_LAMBDA_LOG_GROUP_NAMEAWS_LAMBDA_LOG_STREAM_NAMEAWS_ACCESS_KEYAWS_ACCESS_KEY_IDAWS_SECRET_ACCESS_KEYAWS_SESSION_TOKENAWS_LAMBDA_RUNTIME_APILAMBDA_TASK_ROOTLAMBDA_RUNTIME_DIR\n_HANDLER_X_AMZN_TRACE_IDAWS_DEFAULT_REGIONAWS_REGIONAWS_EXECUTION_ENVAWS_LAMBDA_FUNCTION_NAMEAWS_LAMBDA_FUNCTION_MEMORY_SIZEAWS_LAMBDA_FUNCTION_VERSIONAWS_LAMBDA_INITIALIZATION_TYPEAWS_LAMBDA_LOG_GROUP_NAMEAWS_LAMBDA_LOG_STREAM_NAMEAWS_ACCESS_KEYAWS_ACCESS_KEY_IDAWS_SECRET_ACCESS_KEYAWS_SESSION_TOKENAWS_LAMBDA_RUNTIME_APILAMBDA_TASK_ROOTLAMBDA_RUNTIME_DIR\nLimitations\n100MB bundle size\n4KB payload size on events\n15 minutes runtime timeout for Event and Cron Steps\n30 seconds runtime timeout for API Steps\nTroubleshooting build outputs\nMake sure you follow the instructions inDeployments page.\nDeployment\nDeploying your project to Motia Cloud\nFAQ\nFrequently asked questions about Motia Cloud\nOn this page"
}
================================================================================
{
    "source_page": "Architecture",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/architecture#using-local-files =====",
    "chunk_topic": "Architecture",
    "chunk_id": "Architecture",
    "text": "Architecture\nMotia Cloud is a serverless platform. Some stuff that work locally may not work in the cloud.\nBundle sizes\nMotia Cloud currently has limited bundle sizes to 100MB, we're actively working on increasing this limit\nto be higher than 1GB.\nPayload size on events\nWhen sending events to topics, the data should not have more than 4KB.\nMake sure you're not sending files as Base64 in the content of the event.\nMake sure payloads you send are not too large, prefer storing in state and fetch it on the other steps.\nUsing Local Files\nSometimes we need toa use local files when creating our backend logic. For example, creating templates.\nRunning binary files, etc. To do this, we can add them to steps as static files.\nMake sure you follow the instructions inDeployments page.\nRuntime timeouts\nMotia Cloud currently has limited runtime timeouts:\n15 minutes for Event and Cron Steps.\n30 seconds for API Steps.\nReserved environment variables\nMotia Cloud is currently deployed to Amazon Web Services. Which means that there are\nsome environment variables that are reserved for internal use. If you need to use one\nof these variables, make sure to add a different name.\n_HANDLER_X_AMZN_TRACE_IDAWS_DEFAULT_REGIONAWS_REGIONAWS_EXECUTION_ENVAWS_LAMBDA_FUNCTION_NAMEAWS_LAMBDA_FUNCTION_MEMORY_SIZEAWS_LAMBDA_FUNCTION_VERSIONAWS_LAMBDA_INITIALIZATION_TYPEAWS_LAMBDA_LOG_GROUP_NAMEAWS_LAMBDA_LOG_STREAM_NAMEAWS_ACCESS_KEYAWS_ACCESS_KEY_IDAWS_SECRET_ACCESS_KEYAWS_SESSION_TOKENAWS_LAMBDA_RUNTIME_APILAMBDA_TASK_ROOTLAMBDA_RUNTIME_DIR\n_HANDLER_X_AMZN_TRACE_IDAWS_DEFAULT_REGIONAWS_REGIONAWS_EXECUTION_ENVAWS_LAMBDA_FUNCTION_NAMEAWS_LAMBDA_FUNCTION_MEMORY_SIZEAWS_LAMBDA_FUNCTION_VERSIONAWS_LAMBDA_INITIALIZATION_TYPEAWS_LAMBDA_LOG_GROUP_NAMEAWS_LAMBDA_LOG_STREAM_NAMEAWS_ACCESS_KEYAWS_ACCESS_KEY_IDAWS_SECRET_ACCESS_KEYAWS_SESSION_TOKENAWS_LAMBDA_RUNTIME_APILAMBDA_TASK_ROOTLAMBDA_RUNTIME_DIR\nLimitations\n100MB bundle size\n4KB payload size on events\n15 minutes runtime timeout for Event and Cron Steps\n30 seconds runtime timeout for API Steps\nTroubleshooting build outputs\nMake sure you follow the instructions inDeployments page.\nDeployment\nDeploying your project to Motia Cloud\nFAQ\nFrequently asked questions about Motia Cloud\nOn this page"
}
================================================================================
{
    "source_page": "Architecture",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/architecture#runtime-timeouts =====",
    "chunk_topic": "Architecture",
    "chunk_id": "Architecture",
    "text": "Architecture\nMotia Cloud is a serverless platform. Some stuff that work locally may not work in the cloud.\nBundle sizes\nMotia Cloud currently has limited bundle sizes to 100MB, we're actively working on increasing this limit\nto be higher than 1GB.\nPayload size on events\nWhen sending events to topics, the data should not have more than 4KB.\nMake sure you're not sending files as Base64 in the content of the event.\nMake sure payloads you send are not too large, prefer storing in state and fetch it on the other steps.\nUsing Local Files\nSometimes we need toa use local files when creating our backend logic. For example, creating templates.\nRunning binary files, etc. To do this, we can add them to steps as static files.\nMake sure you follow the instructions inDeployments page.\nRuntime timeouts\nMotia Cloud currently has limited runtime timeouts:\n15 minutes for Event and Cron Steps.\n30 seconds for API Steps.\nReserved environment variables\nMotia Cloud is currently deployed to Amazon Web Services. Which means that there are\nsome environment variables that are reserved for internal use. If you need to use one\nof these variables, make sure to add a different name.\n_HANDLER_X_AMZN_TRACE_IDAWS_DEFAULT_REGIONAWS_REGIONAWS_EXECUTION_ENVAWS_LAMBDA_FUNCTION_NAMEAWS_LAMBDA_FUNCTION_MEMORY_SIZEAWS_LAMBDA_FUNCTION_VERSIONAWS_LAMBDA_INITIALIZATION_TYPEAWS_LAMBDA_LOG_GROUP_NAMEAWS_LAMBDA_LOG_STREAM_NAMEAWS_ACCESS_KEYAWS_ACCESS_KEY_IDAWS_SECRET_ACCESS_KEYAWS_SESSION_TOKENAWS_LAMBDA_RUNTIME_APILAMBDA_TASK_ROOTLAMBDA_RUNTIME_DIR\n_HANDLER_X_AMZN_TRACE_IDAWS_DEFAULT_REGIONAWS_REGIONAWS_EXECUTION_ENVAWS_LAMBDA_FUNCTION_NAMEAWS_LAMBDA_FUNCTION_MEMORY_SIZEAWS_LAMBDA_FUNCTION_VERSIONAWS_LAMBDA_INITIALIZATION_TYPEAWS_LAMBDA_LOG_GROUP_NAMEAWS_LAMBDA_LOG_STREAM_NAMEAWS_ACCESS_KEYAWS_ACCESS_KEY_IDAWS_SECRET_ACCESS_KEYAWS_SESSION_TOKENAWS_LAMBDA_RUNTIME_APILAMBDA_TASK_ROOTLAMBDA_RUNTIME_DIR\nLimitations\n100MB bundle size\n4KB payload size on events\n15 minutes runtime timeout for Event and Cron Steps\n30 seconds runtime timeout for API Steps\nTroubleshooting build outputs\nMake sure you follow the instructions inDeployments page.\nDeployment\nDeploying your project to Motia Cloud\nFAQ\nFrequently asked questions about Motia Cloud\nOn this page"
}
================================================================================
{
    "source_page": "Architecture",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/architecture#reserved-environment-variables =====",
    "chunk_topic": "Architecture",
    "chunk_id": "Architecture",
    "text": "Architecture\nMotia Cloud is a serverless platform. Some stuff that work locally may not work in the cloud.\nBundle sizes\nMotia Cloud currently has limited bundle sizes to 100MB, we're actively working on increasing this limit\nto be higher than 1GB.\nPayload size on events\nWhen sending events to topics, the data should not have more than 4KB.\nMake sure you're not sending files as Base64 in the content of the event.\nMake sure payloads you send are not too large, prefer storing in state and fetch it on the other steps.\nUsing Local Files\nSometimes we need toa use local files when creating our backend logic. For example, creating templates.\nRunning binary files, etc. To do this, we can add them to steps as static files.\nMake sure you follow the instructions inDeployments page.\nRuntime timeouts\nMotia Cloud currently has limited runtime timeouts:\n15 minutes for Event and Cron Steps.\n30 seconds for API Steps.\nReserved environment variables\nMotia Cloud is currently deployed to Amazon Web Services. Which means that there are\nsome environment variables that are reserved for internal use. If you need to use one\nof these variables, make sure to add a different name.\n_HANDLER_X_AMZN_TRACE_IDAWS_DEFAULT_REGIONAWS_REGIONAWS_EXECUTION_ENVAWS_LAMBDA_FUNCTION_NAMEAWS_LAMBDA_FUNCTION_MEMORY_SIZEAWS_LAMBDA_FUNCTION_VERSIONAWS_LAMBDA_INITIALIZATION_TYPEAWS_LAMBDA_LOG_GROUP_NAMEAWS_LAMBDA_LOG_STREAM_NAMEAWS_ACCESS_KEYAWS_ACCESS_KEY_IDAWS_SECRET_ACCESS_KEYAWS_SESSION_TOKENAWS_LAMBDA_RUNTIME_APILAMBDA_TASK_ROOTLAMBDA_RUNTIME_DIR\n_HANDLER_X_AMZN_TRACE_IDAWS_DEFAULT_REGIONAWS_REGIONAWS_EXECUTION_ENVAWS_LAMBDA_FUNCTION_NAMEAWS_LAMBDA_FUNCTION_MEMORY_SIZEAWS_LAMBDA_FUNCTION_VERSIONAWS_LAMBDA_INITIALIZATION_TYPEAWS_LAMBDA_LOG_GROUP_NAMEAWS_LAMBDA_LOG_STREAM_NAMEAWS_ACCESS_KEYAWS_ACCESS_KEY_IDAWS_SECRET_ACCESS_KEYAWS_SESSION_TOKENAWS_LAMBDA_RUNTIME_APILAMBDA_TASK_ROOTLAMBDA_RUNTIME_DIR\nLimitations\n100MB bundle size\n4KB payload size on events\n15 minutes runtime timeout for Event and Cron Steps\n30 seconds runtime timeout for API Steps\nTroubleshooting build outputs\nMake sure you follow the instructions inDeployments page.\nDeployment\nDeploying your project to Motia Cloud\nFAQ\nFrequently asked questions about Motia Cloud\nOn this page"
}
================================================================================
{
    "source_page": "Architecture",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/architecture#limitations =====",
    "chunk_topic": "Architecture",
    "chunk_id": "Architecture",
    "text": "Architecture\nMotia Cloud is a serverless platform. Some stuff that work locally may not work in the cloud.\nBundle sizes\nMotia Cloud currently has limited bundle sizes to 100MB, we're actively working on increasing this limit\nto be higher than 1GB.\nPayload size on events\nWhen sending events to topics, the data should not have more than 4KB.\nMake sure you're not sending files as Base64 in the content of the event.\nMake sure payloads you send are not too large, prefer storing in state and fetch it on the other steps.\nUsing Local Files\nSometimes we need toa use local files when creating our backend logic. For example, creating templates.\nRunning binary files, etc. To do this, we can add them to steps as static files.\nMake sure you follow the instructions inDeployments page.\nRuntime timeouts\nMotia Cloud currently has limited runtime timeouts:\n15 minutes for Event and Cron Steps.\n30 seconds for API Steps.\nReserved environment variables\nMotia Cloud is currently deployed to Amazon Web Services. Which means that there are\nsome environment variables that are reserved for internal use. If you need to use one\nof these variables, make sure to add a different name.\n_HANDLER_X_AMZN_TRACE_IDAWS_DEFAULT_REGIONAWS_REGIONAWS_EXECUTION_ENVAWS_LAMBDA_FUNCTION_NAMEAWS_LAMBDA_FUNCTION_MEMORY_SIZEAWS_LAMBDA_FUNCTION_VERSIONAWS_LAMBDA_INITIALIZATION_TYPEAWS_LAMBDA_LOG_GROUP_NAMEAWS_LAMBDA_LOG_STREAM_NAMEAWS_ACCESS_KEYAWS_ACCESS_KEY_IDAWS_SECRET_ACCESS_KEYAWS_SESSION_TOKENAWS_LAMBDA_RUNTIME_APILAMBDA_TASK_ROOTLAMBDA_RUNTIME_DIR\n_HANDLER_X_AMZN_TRACE_IDAWS_DEFAULT_REGIONAWS_REGIONAWS_EXECUTION_ENVAWS_LAMBDA_FUNCTION_NAMEAWS_LAMBDA_FUNCTION_MEMORY_SIZEAWS_LAMBDA_FUNCTION_VERSIONAWS_LAMBDA_INITIALIZATION_TYPEAWS_LAMBDA_LOG_GROUP_NAMEAWS_LAMBDA_LOG_STREAM_NAMEAWS_ACCESS_KEYAWS_ACCESS_KEY_IDAWS_SECRET_ACCESS_KEYAWS_SESSION_TOKENAWS_LAMBDA_RUNTIME_APILAMBDA_TASK_ROOTLAMBDA_RUNTIME_DIR\nLimitations\n100MB bundle size\n4KB payload size on events\n15 minutes runtime timeout for Event and Cron Steps\n30 seconds runtime timeout for API Steps\nTroubleshooting build outputs\nMake sure you follow the instructions inDeployments page.\nDeployment\nDeploying your project to Motia Cloud\nFAQ\nFrequently asked questions about Motia Cloud\nOn this page"
}
================================================================================
{
    "source_page": "Architecture",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/architecture#troubleshooting-build-outputs =====",
    "chunk_topic": "Architecture",
    "chunk_id": "Architecture",
    "text": "Architecture\nMotia Cloud is a serverless platform. Some stuff that work locally may not work in the cloud.\nBundle sizes\nMotia Cloud currently has limited bundle sizes to 100MB, we're actively working on increasing this limit\nto be higher than 1GB.\nPayload size on events\nWhen sending events to topics, the data should not have more than 4KB.\nMake sure you're not sending files as Base64 in the content of the event.\nMake sure payloads you send are not too large, prefer storing in state and fetch it on the other steps.\nUsing Local Files\nSometimes we need toa use local files when creating our backend logic. For example, creating templates.\nRunning binary files, etc. To do this, we can add them to steps as static files.\nMake sure you follow the instructions inDeployments page.\nRuntime timeouts\nMotia Cloud currently has limited runtime timeouts:\n15 minutes for Event and Cron Steps.\n30 seconds for API Steps.\nReserved environment variables\nMotia Cloud is currently deployed to Amazon Web Services. Which means that there are\nsome environment variables that are reserved for internal use. If you need to use one\nof these variables, make sure to add a different name.\n_HANDLER_X_AMZN_TRACE_IDAWS_DEFAULT_REGIONAWS_REGIONAWS_EXECUTION_ENVAWS_LAMBDA_FUNCTION_NAMEAWS_LAMBDA_FUNCTION_MEMORY_SIZEAWS_LAMBDA_FUNCTION_VERSIONAWS_LAMBDA_INITIALIZATION_TYPEAWS_LAMBDA_LOG_GROUP_NAMEAWS_LAMBDA_LOG_STREAM_NAMEAWS_ACCESS_KEYAWS_ACCESS_KEY_IDAWS_SECRET_ACCESS_KEYAWS_SESSION_TOKENAWS_LAMBDA_RUNTIME_APILAMBDA_TASK_ROOTLAMBDA_RUNTIME_DIR\n_HANDLER_X_AMZN_TRACE_IDAWS_DEFAULT_REGIONAWS_REGIONAWS_EXECUTION_ENVAWS_LAMBDA_FUNCTION_NAMEAWS_LAMBDA_FUNCTION_MEMORY_SIZEAWS_LAMBDA_FUNCTION_VERSIONAWS_LAMBDA_INITIALIZATION_TYPEAWS_LAMBDA_LOG_GROUP_NAMEAWS_LAMBDA_LOG_STREAM_NAMEAWS_ACCESS_KEYAWS_ACCESS_KEY_IDAWS_SECRET_ACCESS_KEYAWS_SESSION_TOKENAWS_LAMBDA_RUNTIME_APILAMBDA_TASK_ROOTLAMBDA_RUNTIME_DIR\nLimitations\n100MB bundle size\n4KB payload size on events\n15 minutes runtime timeout for Event and Cron Steps\n30 seconds runtime timeout for API Steps\nTroubleshooting build outputs\nMake sure you follow the instructions inDeployments page.\nDeployment\nDeploying your project to Motia Cloud\nFAQ\nFrequently asked questions about Motia Cloud\nOn this page"
}
================================================================================
{
    "source_page": "Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/deployment#using-the-motia-cli-for-deployment =====",
    "chunk_topic": "Deployment",
    "chunk_id": "Deployment (Part 1)",
    "text": "Deployment\nDeploying your project to Motia Cloud\nThere are two ways to deploy your project to Motia Cloud:\nUsing the CLI\nUsing the Web interface\nUsing the Motia CLI for Deployment\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\n--api-key\n-k\nMOTIA_API_KEY\n--version-name\n-v\n--environment-id\n-s\nMOTIA_ENVIRONMENT_ID\n--version-description\n-d\n--env-file\n-e\nNote:Command-line options take precedence over environment variables. If both are provided, the command-line value will be used.\nDeploy with a specific version:\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3\nDeploy to a specific environment with environment variables:\nmotiaclouddeploy--api-keyyour-api-key-here\\--version-name1.2.3\\--env-file.env.production\\--environment-idenv-id\nmotiaclouddeploy--api-keyyour-api-key-here\\--version-name1.2.3\\--env-file.env.production\\--environment-idenv-id\nUsing Web interface\nThrough the web interface, you can deploy your project from workbench to a live environment with one click.\nSteps to deploy from web interface:\nHave your local project running (make sure your Motia version is 0.6.4 or higher)\nGo to import from workbench on Motia Cloud\nSelect the port your local project is running on\nChoose the project and environment name\nAdd any environment variables you need (you can upload from .env file or paste the content to auto-fill)\nClick Deploy\nWatch the magic happen\nAdding static files to the bundle\nSometimes we need to use local files when creating our backend logic. For example, creating templates.\nRunning binary files, etc. To do this, we can add them to steps as static files.\nAdding them to Steps as static files, you need to addincludeFilesto the step config. The path\nshould be relative to the step file.\nincludeFiles\nimport{ EventConfig }from'motia'exportconstconfig:EventConfig={name:'Content Outliner',description:'Creates detailed content outline based on the initial idea',type:'event',emits"
}
================================================================================
{
    "source_page": "Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/deployment#using-the-motia-cli-for-deployment =====",
    "chunk_topic": "Deployment",
    "chunk_id": "Deployment (Part 2)",
    "text": " be relative to the step file.\nincludeFiles\nimport{ EventConfig }from'motia'exportconstconfig:EventConfig={name:'Content Outliner',description:'Creates detailed content outline based on the initial idea',type:'event',emits: [{ topic:'write-content', label:'Write first content'}],virtualEmits: ['virtual-write-content'],flows: ['Content'],subscribes: ['build-outline'],input,includeFiles: ['./content-outliner.mustache'],// relative to the step file}\nimport{ EventConfig }from'motia'exportconstconfig:EventConfig={name:'Content Outliner',description:'Creates detailed content outline based on the initial idea',type:'event',emits: [{ topic:'write-content', label:'Write first content'}],virtualEmits: ['virtual-write-content'],flows: ['Content'],subscribes: ['build-outline'],input,includeFiles: ['./content-outliner.mustache'],// relative to the step file}\nAdding binary files to the bundle\nBinary files are also supported, but the entire bundle size must not exceed 100MB.\nThe binary architecture should be linux_amd64.\nTroubleshooting Build Outputs\nWhen adding static files, it's important to check the build output to make sure the files are included.\nFor example, inthis project, there are a few steps that\ninclude static files.\nWhen runningnpx motia build, it will generate the following output indistfolder:\nnpx motia build\ndist\ndist/\u2514\u2500\u2500 node/steps/content/\u251c\u2500\u2500 agents\u2502   \u251c\u2500\u2500 content-outliner.step.zip\u2502   \u251c\u2500\u2500 content-writer.step.zip\u2502   \u2514\u2500\u2500 ideator.step.zip\u251c\u2500\u2500 api\u2502   \u251c\u2500\u2500 generate-content-api.step.zip\u2502   \u2514\u2500\u2500 get-content.step.zip\u251c\u2500\u2500 motia.steps.json\u2514\u2500\u2500 router-node.zip\ndist/\u2514\u2500\u2500 node/steps/content/\u251c\u2500\u2500 agents\u2502   \u251c\u2500\u2500 content-outliner.step.zip\u2502   \u251c\u2500\u2500 content-writer.step.zip\u2502   \u2514\u2500\u2500 ideator.step.zip\u251c\u2500\u2500 api\u2502   \u251c\u2500\u2500 generate-content-api.step.zip\u2502   \u2514\u2500\u2500 get-content.step.zip\u251c\u2500\u2500 motia.steps.json\u2514\u2500\u2500 router-node.zip\nIf you check the content ofcontent-outliner.step.zip, it should have this\ncontent-outliner.step.zip\nsteps/\u2514\u2500\u2500 content/\u2514\u2500\u2500 agents/\u251c\u2500\u2500 content-outliner.mustache\u251c\u2500\u2500"
}
================================================================================
{
    "source_page": "Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/deployment#using-the-motia-cli-for-deployment =====",
    "chunk_topic": "Deployment",
    "chunk_id": "Deployment (Part 3)",
    "text": " router-node.zip\nIf you check the content ofcontent-outliner.step.zip, it should have this\ncontent-outliner.step.zip\nsteps/\u2514\u2500\u2500 content/\u2514\u2500\u2500 agents/\u251c\u2500\u2500 content-outliner.mustache\u251c\u2500\u2500 content-outliner.step.js\u2514\u2500\u2500 content-outliner.step.js.map\nsteps/\u2514\u2500\u2500 content/\u2514\u2500\u2500 agents/\u251c\u2500\u2500 content-outliner.mustache\u251c\u2500\u2500 content-outliner.step.js\u2514\u2500\u2500 content-outliner.step.js.map\nNow you made sure the static file calledcontent-outliner.mustacheis included in the bundle.\ncontent-outliner.mustache\nFeatures\nLearn how to deploy your Motia Project to a live environment\nArchitecture\nMotia Cloud is a serverless platform. Some stuff that work locally may not work in the cloud.\nOn this page"
}
================================================================================
{
    "source_page": "Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/deployment#required-options =====",
    "chunk_topic": "Deployment",
    "chunk_id": "Deployment (Part 1)",
    "text": "Deployment\nDeploying your project to Motia Cloud\nThere are two ways to deploy your project to Motia Cloud:\nUsing the CLI\nUsing the Web interface\nUsing the Motia CLI for Deployment\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\n--api-key\n-k\nMOTIA_API_KEY\n--version-name\n-v\n--environment-id\n-s\nMOTIA_ENVIRONMENT_ID\n--version-description\n-d\n--env-file\n-e\nNote:Command-line options take precedence over environment variables. If both are provided, the command-line value will be used.\nDeploy with a specific version:\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3\nDeploy to a specific environment with environment variables:\nmotiaclouddeploy--api-keyyour-api-key-here\\--version-name1.2.3\\--env-file.env.production\\--environment-idenv-id\nmotiaclouddeploy--api-keyyour-api-key-here\\--version-name1.2.3\\--env-file.env.production\\--environment-idenv-id\nUsing Web interface\nThrough the web interface, you can deploy your project from workbench to a live environment with one click.\nSteps to deploy from web interface:\nHave your local project running (make sure your Motia version is 0.6.4 or higher)\nGo to import from workbench on Motia Cloud\nSelect the port your local project is running on\nChoose the project and environment name\nAdd any environment variables you need (you can upload from .env file or paste the content to auto-fill)\nClick Deploy\nWatch the magic happen\nAdding static files to the bundle\nSometimes we need to use local files when creating our backend logic. For example, creating templates.\nRunning binary files, etc. To do this, we can add them to steps as static files.\nAdding them to Steps as static files, you need to addincludeFilesto the step config. The path\nshould be relative to the step file.\nincludeFiles\nimport{ EventConfig }from'motia'exportconstconfig:EventConfig={name:'Content Outliner',description:'Creates detailed content outline based on the initial idea',type:'event',emits"
}
================================================================================
{
    "source_page": "Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/deployment#required-options =====",
    "chunk_topic": "Deployment",
    "chunk_id": "Deployment (Part 2)",
    "text": " be relative to the step file.\nincludeFiles\nimport{ EventConfig }from'motia'exportconstconfig:EventConfig={name:'Content Outliner',description:'Creates detailed content outline based on the initial idea',type:'event',emits: [{ topic:'write-content', label:'Write first content'}],virtualEmits: ['virtual-write-content'],flows: ['Content'],subscribes: ['build-outline'],input,includeFiles: ['./content-outliner.mustache'],// relative to the step file}\nimport{ EventConfig }from'motia'exportconstconfig:EventConfig={name:'Content Outliner',description:'Creates detailed content outline based on the initial idea',type:'event',emits: [{ topic:'write-content', label:'Write first content'}],virtualEmits: ['virtual-write-content'],flows: ['Content'],subscribes: ['build-outline'],input,includeFiles: ['./content-outliner.mustache'],// relative to the step file}\nAdding binary files to the bundle\nBinary files are also supported, but the entire bundle size must not exceed 100MB.\nThe binary architecture should be linux_amd64.\nTroubleshooting Build Outputs\nWhen adding static files, it's important to check the build output to make sure the files are included.\nFor example, inthis project, there are a few steps that\ninclude static files.\nWhen runningnpx motia build, it will generate the following output indistfolder:\nnpx motia build\ndist\ndist/\u2514\u2500\u2500 node/steps/content/\u251c\u2500\u2500 agents\u2502   \u251c\u2500\u2500 content-outliner.step.zip\u2502   \u251c\u2500\u2500 content-writer.step.zip\u2502   \u2514\u2500\u2500 ideator.step.zip\u251c\u2500\u2500 api\u2502   \u251c\u2500\u2500 generate-content-api.step.zip\u2502   \u2514\u2500\u2500 get-content.step.zip\u251c\u2500\u2500 motia.steps.json\u2514\u2500\u2500 router-node.zip\ndist/\u2514\u2500\u2500 node/steps/content/\u251c\u2500\u2500 agents\u2502   \u251c\u2500\u2500 content-outliner.step.zip\u2502   \u251c\u2500\u2500 content-writer.step.zip\u2502   \u2514\u2500\u2500 ideator.step.zip\u251c\u2500\u2500 api\u2502   \u251c\u2500\u2500 generate-content-api.step.zip\u2502   \u2514\u2500\u2500 get-content.step.zip\u251c\u2500\u2500 motia.steps.json\u2514\u2500\u2500 router-node.zip\nIf you check the content ofcontent-outliner.step.zip, it should have this\ncontent-outliner.step.zip\nsteps/\u2514\u2500\u2500 content/\u2514\u2500\u2500 agents/\u251c\u2500\u2500 content-outliner.mustache\u251c\u2500\u2500"
}
================================================================================
{
    "source_page": "Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/deployment#required-options =====",
    "chunk_topic": "Deployment",
    "chunk_id": "Deployment (Part 3)",
    "text": " router-node.zip\nIf you check the content ofcontent-outliner.step.zip, it should have this\ncontent-outliner.step.zip\nsteps/\u2514\u2500\u2500 content/\u2514\u2500\u2500 agents/\u251c\u2500\u2500 content-outliner.mustache\u251c\u2500\u2500 content-outliner.step.js\u2514\u2500\u2500 content-outliner.step.js.map\nsteps/\u2514\u2500\u2500 content/\u2514\u2500\u2500 agents/\u251c\u2500\u2500 content-outliner.mustache\u251c\u2500\u2500 content-outliner.step.js\u2514\u2500\u2500 content-outliner.step.js.map\nNow you made sure the static file calledcontent-outliner.mustacheis included in the bundle.\ncontent-outliner.mustache\nFeatures\nLearn how to deploy your Motia Project to a live environment\nArchitecture\nMotia Cloud is a serverless platform. Some stuff that work locally may not work in the cloud.\nOn this page"
}
================================================================================
{
    "source_page": "Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/deployment#optional-options =====",
    "chunk_topic": "Deployment",
    "chunk_id": "Deployment (Part 1)",
    "text": "Deployment\nDeploying your project to Motia Cloud\nThere are two ways to deploy your project to Motia Cloud:\nUsing the CLI\nUsing the Web interface\nUsing the Motia CLI for Deployment\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\n--api-key\n-k\nMOTIA_API_KEY\n--version-name\n-v\n--environment-id\n-s\nMOTIA_ENVIRONMENT_ID\n--version-description\n-d\n--env-file\n-e\nNote:Command-line options take precedence over environment variables. If both are provided, the command-line value will be used.\nDeploy with a specific version:\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3\nDeploy to a specific environment with environment variables:\nmotiaclouddeploy--api-keyyour-api-key-here\\--version-name1.2.3\\--env-file.env.production\\--environment-idenv-id\nmotiaclouddeploy--api-keyyour-api-key-here\\--version-name1.2.3\\--env-file.env.production\\--environment-idenv-id\nUsing Web interface\nThrough the web interface, you can deploy your project from workbench to a live environment with one click.\nSteps to deploy from web interface:\nHave your local project running (make sure your Motia version is 0.6.4 or higher)\nGo to import from workbench on Motia Cloud\nSelect the port your local project is running on\nChoose the project and environment name\nAdd any environment variables you need (you can upload from .env file or paste the content to auto-fill)\nClick Deploy\nWatch the magic happen\nAdding static files to the bundle\nSometimes we need to use local files when creating our backend logic. For example, creating templates.\nRunning binary files, etc. To do this, we can add them to steps as static files.\nAdding them to Steps as static files, you need to addincludeFilesto the step config. The path\nshould be relative to the step file.\nincludeFiles\nimport{ EventConfig }from'motia'exportconstconfig:EventConfig={name:'Content Outliner',description:'Creates detailed content outline based on the initial idea',type:'event',emits"
}
================================================================================
{
    "source_page": "Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/deployment#optional-options =====",
    "chunk_topic": "Deployment",
    "chunk_id": "Deployment (Part 2)",
    "text": " be relative to the step file.\nincludeFiles\nimport{ EventConfig }from'motia'exportconstconfig:EventConfig={name:'Content Outliner',description:'Creates detailed content outline based on the initial idea',type:'event',emits: [{ topic:'write-content', label:'Write first content'}],virtualEmits: ['virtual-write-content'],flows: ['Content'],subscribes: ['build-outline'],input,includeFiles: ['./content-outliner.mustache'],// relative to the step file}\nimport{ EventConfig }from'motia'exportconstconfig:EventConfig={name:'Content Outliner',description:'Creates detailed content outline based on the initial idea',type:'event',emits: [{ topic:'write-content', label:'Write first content'}],virtualEmits: ['virtual-write-content'],flows: ['Content'],subscribes: ['build-outline'],input,includeFiles: ['./content-outliner.mustache'],// relative to the step file}\nAdding binary files to the bundle\nBinary files are also supported, but the entire bundle size must not exceed 100MB.\nThe binary architecture should be linux_amd64.\nTroubleshooting Build Outputs\nWhen adding static files, it's important to check the build output to make sure the files are included.\nFor example, inthis project, there are a few steps that\ninclude static files.\nWhen runningnpx motia build, it will generate the following output indistfolder:\nnpx motia build\ndist\ndist/\u2514\u2500\u2500 node/steps/content/\u251c\u2500\u2500 agents\u2502   \u251c\u2500\u2500 content-outliner.step.zip\u2502   \u251c\u2500\u2500 content-writer.step.zip\u2502   \u2514\u2500\u2500 ideator.step.zip\u251c\u2500\u2500 api\u2502   \u251c\u2500\u2500 generate-content-api.step.zip\u2502   \u2514\u2500\u2500 get-content.step.zip\u251c\u2500\u2500 motia.steps.json\u2514\u2500\u2500 router-node.zip\ndist/\u2514\u2500\u2500 node/steps/content/\u251c\u2500\u2500 agents\u2502   \u251c\u2500\u2500 content-outliner.step.zip\u2502   \u251c\u2500\u2500 content-writer.step.zip\u2502   \u2514\u2500\u2500 ideator.step.zip\u251c\u2500\u2500 api\u2502   \u251c\u2500\u2500 generate-content-api.step.zip\u2502   \u2514\u2500\u2500 get-content.step.zip\u251c\u2500\u2500 motia.steps.json\u2514\u2500\u2500 router-node.zip\nIf you check the content ofcontent-outliner.step.zip, it should have this\ncontent-outliner.step.zip\nsteps/\u2514\u2500\u2500 content/\u2514\u2500\u2500 agents/\u251c\u2500\u2500 content-outliner.mustache\u251c\u2500\u2500"
}
================================================================================
{
    "source_page": "Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/deployment#optional-options =====",
    "chunk_topic": "Deployment",
    "chunk_id": "Deployment (Part 3)",
    "text": " router-node.zip\nIf you check the content ofcontent-outliner.step.zip, it should have this\ncontent-outliner.step.zip\nsteps/\u2514\u2500\u2500 content/\u2514\u2500\u2500 agents/\u251c\u2500\u2500 content-outliner.mustache\u251c\u2500\u2500 content-outliner.step.js\u2514\u2500\u2500 content-outliner.step.js.map\nsteps/\u2514\u2500\u2500 content/\u2514\u2500\u2500 agents/\u251c\u2500\u2500 content-outliner.mustache\u251c\u2500\u2500 content-outliner.step.js\u2514\u2500\u2500 content-outliner.step.js.map\nNow you made sure the static file calledcontent-outliner.mustacheis included in the bundle.\ncontent-outliner.mustache\nFeatures\nLearn how to deploy your Motia Project to a live environment\nArchitecture\nMotia Cloud is a serverless platform. Some stuff that work locally may not work in the cloud.\nOn this page"
}
================================================================================
{
    "source_page": "Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/deployment#using-web-interface =====",
    "chunk_topic": "Deployment",
    "chunk_id": "Deployment (Part 1)",
    "text": "Deployment\nDeploying your project to Motia Cloud\nThere are two ways to deploy your project to Motia Cloud:\nUsing the CLI\nUsing the Web interface\nUsing the Motia CLI for Deployment\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\n--api-key\n-k\nMOTIA_API_KEY\n--version-name\n-v\n--environment-id\n-s\nMOTIA_ENVIRONMENT_ID\n--version-description\n-d\n--env-file\n-e\nNote:Command-line options take precedence over environment variables. If both are provided, the command-line value will be used.\nDeploy with a specific version:\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3\nDeploy to a specific environment with environment variables:\nmotiaclouddeploy--api-keyyour-api-key-here\\--version-name1.2.3\\--env-file.env.production\\--environment-idenv-id\nmotiaclouddeploy--api-keyyour-api-key-here\\--version-name1.2.3\\--env-file.env.production\\--environment-idenv-id\nUsing Web interface\nThrough the web interface, you can deploy your project from workbench to a live environment with one click.\nSteps to deploy from web interface:\nHave your local project running (make sure your Motia version is 0.6.4 or higher)\nGo to import from workbench on Motia Cloud\nSelect the port your local project is running on\nChoose the project and environment name\nAdd any environment variables you need (you can upload from .env file or paste the content to auto-fill)\nClick Deploy\nWatch the magic happen\nAdding static files to the bundle\nSometimes we need to use local files when creating our backend logic. For example, creating templates.\nRunning binary files, etc. To do this, we can add them to steps as static files.\nAdding them to Steps as static files, you need to addincludeFilesto the step config. The path\nshould be relative to the step file.\nincludeFiles\nimport{ EventConfig }from'motia'exportconstconfig:EventConfig={name:'Content Outliner',description:'Creates detailed content outline based on the initial idea',type:'event',emits"
}
================================================================================
{
    "source_page": "Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/deployment#using-web-interface =====",
    "chunk_topic": "Deployment",
    "chunk_id": "Deployment (Part 2)",
    "text": " be relative to the step file.\nincludeFiles\nimport{ EventConfig }from'motia'exportconstconfig:EventConfig={name:'Content Outliner',description:'Creates detailed content outline based on the initial idea',type:'event',emits: [{ topic:'write-content', label:'Write first content'}],virtualEmits: ['virtual-write-content'],flows: ['Content'],subscribes: ['build-outline'],input,includeFiles: ['./content-outliner.mustache'],// relative to the step file}\nimport{ EventConfig }from'motia'exportconstconfig:EventConfig={name:'Content Outliner',description:'Creates detailed content outline based on the initial idea',type:'event',emits: [{ topic:'write-content', label:'Write first content'}],virtualEmits: ['virtual-write-content'],flows: ['Content'],subscribes: ['build-outline'],input,includeFiles: ['./content-outliner.mustache'],// relative to the step file}\nAdding binary files to the bundle\nBinary files are also supported, but the entire bundle size must not exceed 100MB.\nThe binary architecture should be linux_amd64.\nTroubleshooting Build Outputs\nWhen adding static files, it's important to check the build output to make sure the files are included.\nFor example, inthis project, there are a few steps that\ninclude static files.\nWhen runningnpx motia build, it will generate the following output indistfolder:\nnpx motia build\ndist\ndist/\u2514\u2500\u2500 node/steps/content/\u251c\u2500\u2500 agents\u2502   \u251c\u2500\u2500 content-outliner.step.zip\u2502   \u251c\u2500\u2500 content-writer.step.zip\u2502   \u2514\u2500\u2500 ideator.step.zip\u251c\u2500\u2500 api\u2502   \u251c\u2500\u2500 generate-content-api.step.zip\u2502   \u2514\u2500\u2500 get-content.step.zip\u251c\u2500\u2500 motia.steps.json\u2514\u2500\u2500 router-node.zip\ndist/\u2514\u2500\u2500 node/steps/content/\u251c\u2500\u2500 agents\u2502   \u251c\u2500\u2500 content-outliner.step.zip\u2502   \u251c\u2500\u2500 content-writer.step.zip\u2502   \u2514\u2500\u2500 ideator.step.zip\u251c\u2500\u2500 api\u2502   \u251c\u2500\u2500 generate-content-api.step.zip\u2502   \u2514\u2500\u2500 get-content.step.zip\u251c\u2500\u2500 motia.steps.json\u2514\u2500\u2500 router-node.zip\nIf you check the content ofcontent-outliner.step.zip, it should have this\ncontent-outliner.step.zip\nsteps/\u2514\u2500\u2500 content/\u2514\u2500\u2500 agents/\u251c\u2500\u2500 content-outliner.mustache\u251c\u2500\u2500"
}
================================================================================
{
    "source_page": "Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/deployment#using-web-interface =====",
    "chunk_topic": "Deployment",
    "chunk_id": "Deployment (Part 3)",
    "text": " router-node.zip\nIf you check the content ofcontent-outliner.step.zip, it should have this\ncontent-outliner.step.zip\nsteps/\u2514\u2500\u2500 content/\u2514\u2500\u2500 agents/\u251c\u2500\u2500 content-outliner.mustache\u251c\u2500\u2500 content-outliner.step.js\u2514\u2500\u2500 content-outliner.step.js.map\nsteps/\u2514\u2500\u2500 content/\u2514\u2500\u2500 agents/\u251c\u2500\u2500 content-outliner.mustache\u251c\u2500\u2500 content-outliner.step.js\u2514\u2500\u2500 content-outliner.step.js.map\nNow you made sure the static file calledcontent-outliner.mustacheis included in the bundle.\ncontent-outliner.mustache\nFeatures\nLearn how to deploy your Motia Project to a live environment\nArchitecture\nMotia Cloud is a serverless platform. Some stuff that work locally may not work in the cloud.\nOn this page"
}
================================================================================
{
    "source_page": "Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/deployment#adding-static-files-to-the-bundle =====",
    "chunk_topic": "Deployment",
    "chunk_id": "Deployment (Part 1)",
    "text": "Deployment\nDeploying your project to Motia Cloud\nThere are two ways to deploy your project to Motia Cloud:\nUsing the CLI\nUsing the Web interface\nUsing the Motia CLI for Deployment\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\n--api-key\n-k\nMOTIA_API_KEY\n--version-name\n-v\n--environment-id\n-s\nMOTIA_ENVIRONMENT_ID\n--version-description\n-d\n--env-file\n-e\nNote:Command-line options take precedence over environment variables. If both are provided, the command-line value will be used.\nDeploy with a specific version:\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3\nDeploy to a specific environment with environment variables:\nmotiaclouddeploy--api-keyyour-api-key-here\\--version-name1.2.3\\--env-file.env.production\\--environment-idenv-id\nmotiaclouddeploy--api-keyyour-api-key-here\\--version-name1.2.3\\--env-file.env.production\\--environment-idenv-id\nUsing Web interface\nThrough the web interface, you can deploy your project from workbench to a live environment with one click.\nSteps to deploy from web interface:\nHave your local project running (make sure your Motia version is 0.6.4 or higher)\nGo to import from workbench on Motia Cloud\nSelect the port your local project is running on\nChoose the project and environment name\nAdd any environment variables you need (you can upload from .env file or paste the content to auto-fill)\nClick Deploy\nWatch the magic happen\nAdding static files to the bundle\nSometimes we need to use local files when creating our backend logic. For example, creating templates.\nRunning binary files, etc. To do this, we can add them to steps as static files.\nAdding them to Steps as static files, you need to addincludeFilesto the step config. The path\nshould be relative to the step file.\nincludeFiles\nimport{ EventConfig }from'motia'exportconstconfig:EventConfig={name:'Content Outliner',description:'Creates detailed content outline based on the initial idea',type:'event',emits"
}
================================================================================
{
    "source_page": "Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/deployment#adding-static-files-to-the-bundle =====",
    "chunk_topic": "Deployment",
    "chunk_id": "Deployment (Part 2)",
    "text": " be relative to the step file.\nincludeFiles\nimport{ EventConfig }from'motia'exportconstconfig:EventConfig={name:'Content Outliner',description:'Creates detailed content outline based on the initial idea',type:'event',emits: [{ topic:'write-content', label:'Write first content'}],virtualEmits: ['virtual-write-content'],flows: ['Content'],subscribes: ['build-outline'],input,includeFiles: ['./content-outliner.mustache'],// relative to the step file}\nimport{ EventConfig }from'motia'exportconstconfig:EventConfig={name:'Content Outliner',description:'Creates detailed content outline based on the initial idea',type:'event',emits: [{ topic:'write-content', label:'Write first content'}],virtualEmits: ['virtual-write-content'],flows: ['Content'],subscribes: ['build-outline'],input,includeFiles: ['./content-outliner.mustache'],// relative to the step file}\nAdding binary files to the bundle\nBinary files are also supported, but the entire bundle size must not exceed 100MB.\nThe binary architecture should be linux_amd64.\nTroubleshooting Build Outputs\nWhen adding static files, it's important to check the build output to make sure the files are included.\nFor example, inthis project, there are a few steps that\ninclude static files.\nWhen runningnpx motia build, it will generate the following output indistfolder:\nnpx motia build\ndist\ndist/\u2514\u2500\u2500 node/steps/content/\u251c\u2500\u2500 agents\u2502   \u251c\u2500\u2500 content-outliner.step.zip\u2502   \u251c\u2500\u2500 content-writer.step.zip\u2502   \u2514\u2500\u2500 ideator.step.zip\u251c\u2500\u2500 api\u2502   \u251c\u2500\u2500 generate-content-api.step.zip\u2502   \u2514\u2500\u2500 get-content.step.zip\u251c\u2500\u2500 motia.steps.json\u2514\u2500\u2500 router-node.zip\ndist/\u2514\u2500\u2500 node/steps/content/\u251c\u2500\u2500 agents\u2502   \u251c\u2500\u2500 content-outliner.step.zip\u2502   \u251c\u2500\u2500 content-writer.step.zip\u2502   \u2514\u2500\u2500 ideator.step.zip\u251c\u2500\u2500 api\u2502   \u251c\u2500\u2500 generate-content-api.step.zip\u2502   \u2514\u2500\u2500 get-content.step.zip\u251c\u2500\u2500 motia.steps.json\u2514\u2500\u2500 router-node.zip\nIf you check the content ofcontent-outliner.step.zip, it should have this\ncontent-outliner.step.zip\nsteps/\u2514\u2500\u2500 content/\u2514\u2500\u2500 agents/\u251c\u2500\u2500 content-outliner.mustache\u251c\u2500\u2500"
}
================================================================================
{
    "source_page": "Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/deployment#adding-static-files-to-the-bundle =====",
    "chunk_topic": "Deployment",
    "chunk_id": "Deployment (Part 3)",
    "text": " router-node.zip\nIf you check the content ofcontent-outliner.step.zip, it should have this\ncontent-outliner.step.zip\nsteps/\u2514\u2500\u2500 content/\u2514\u2500\u2500 agents/\u251c\u2500\u2500 content-outliner.mustache\u251c\u2500\u2500 content-outliner.step.js\u2514\u2500\u2500 content-outliner.step.js.map\nsteps/\u2514\u2500\u2500 content/\u2514\u2500\u2500 agents/\u251c\u2500\u2500 content-outliner.mustache\u251c\u2500\u2500 content-outliner.step.js\u2514\u2500\u2500 content-outliner.step.js.map\nNow you made sure the static file calledcontent-outliner.mustacheis included in the bundle.\ncontent-outliner.mustache\nFeatures\nLearn how to deploy your Motia Project to a live environment\nArchitecture\nMotia Cloud is a serverless platform. Some stuff that work locally may not work in the cloud.\nOn this page"
}
================================================================================
{
    "source_page": "Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/deployment#adding-binary-files-to-the-bundle =====",
    "chunk_topic": "Deployment",
    "chunk_id": "Deployment (Part 1)",
    "text": "Deployment\nDeploying your project to Motia Cloud\nThere are two ways to deploy your project to Motia Cloud:\nUsing the CLI\nUsing the Web interface\nUsing the Motia CLI for Deployment\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\n--api-key\n-k\nMOTIA_API_KEY\n--version-name\n-v\n--environment-id\n-s\nMOTIA_ENVIRONMENT_ID\n--version-description\n-d\n--env-file\n-e\nNote:Command-line options take precedence over environment variables. If both are provided, the command-line value will be used.\nDeploy with a specific version:\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3\nDeploy to a specific environment with environment variables:\nmotiaclouddeploy--api-keyyour-api-key-here\\--version-name1.2.3\\--env-file.env.production\\--environment-idenv-id\nmotiaclouddeploy--api-keyyour-api-key-here\\--version-name1.2.3\\--env-file.env.production\\--environment-idenv-id\nUsing Web interface\nThrough the web interface, you can deploy your project from workbench to a live environment with one click.\nSteps to deploy from web interface:\nHave your local project running (make sure your Motia version is 0.6.4 or higher)\nGo to import from workbench on Motia Cloud\nSelect the port your local project is running on\nChoose the project and environment name\nAdd any environment variables you need (you can upload from .env file or paste the content to auto-fill)\nClick Deploy\nWatch the magic happen\nAdding static files to the bundle\nSometimes we need to use local files when creating our backend logic. For example, creating templates.\nRunning binary files, etc. To do this, we can add them to steps as static files.\nAdding them to Steps as static files, you need to addincludeFilesto the step config. The path\nshould be relative to the step file.\nincludeFiles\nimport{ EventConfig }from'motia'exportconstconfig:EventConfig={name:'Content Outliner',description:'Creates detailed content outline based on the initial idea',type:'event',emits"
}
================================================================================
{
    "source_page": "Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/deployment#adding-binary-files-to-the-bundle =====",
    "chunk_topic": "Deployment",
    "chunk_id": "Deployment (Part 2)",
    "text": " be relative to the step file.\nincludeFiles\nimport{ EventConfig }from'motia'exportconstconfig:EventConfig={name:'Content Outliner',description:'Creates detailed content outline based on the initial idea',type:'event',emits: [{ topic:'write-content', label:'Write first content'}],virtualEmits: ['virtual-write-content'],flows: ['Content'],subscribes: ['build-outline'],input,includeFiles: ['./content-outliner.mustache'],// relative to the step file}\nimport{ EventConfig }from'motia'exportconstconfig:EventConfig={name:'Content Outliner',description:'Creates detailed content outline based on the initial idea',type:'event',emits: [{ topic:'write-content', label:'Write first content'}],virtualEmits: ['virtual-write-content'],flows: ['Content'],subscribes: ['build-outline'],input,includeFiles: ['./content-outliner.mustache'],// relative to the step file}\nAdding binary files to the bundle\nBinary files are also supported, but the entire bundle size must not exceed 100MB.\nThe binary architecture should be linux_amd64.\nTroubleshooting Build Outputs\nWhen adding static files, it's important to check the build output to make sure the files are included.\nFor example, inthis project, there are a few steps that\ninclude static files.\nWhen runningnpx motia build, it will generate the following output indistfolder:\nnpx motia build\ndist\ndist/\u2514\u2500\u2500 node/steps/content/\u251c\u2500\u2500 agents\u2502   \u251c\u2500\u2500 content-outliner.step.zip\u2502   \u251c\u2500\u2500 content-writer.step.zip\u2502   \u2514\u2500\u2500 ideator.step.zip\u251c\u2500\u2500 api\u2502   \u251c\u2500\u2500 generate-content-api.step.zip\u2502   \u2514\u2500\u2500 get-content.step.zip\u251c\u2500\u2500 motia.steps.json\u2514\u2500\u2500 router-node.zip\ndist/\u2514\u2500\u2500 node/steps/content/\u251c\u2500\u2500 agents\u2502   \u251c\u2500\u2500 content-outliner.step.zip\u2502   \u251c\u2500\u2500 content-writer.step.zip\u2502   \u2514\u2500\u2500 ideator.step.zip\u251c\u2500\u2500 api\u2502   \u251c\u2500\u2500 generate-content-api.step.zip\u2502   \u2514\u2500\u2500 get-content.step.zip\u251c\u2500\u2500 motia.steps.json\u2514\u2500\u2500 router-node.zip\nIf you check the content ofcontent-outliner.step.zip, it should have this\ncontent-outliner.step.zip\nsteps/\u2514\u2500\u2500 content/\u2514\u2500\u2500 agents/\u251c\u2500\u2500 content-outliner.mustache\u251c\u2500\u2500"
}
================================================================================
{
    "source_page": "Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/deployment#adding-binary-files-to-the-bundle =====",
    "chunk_topic": "Deployment",
    "chunk_id": "Deployment (Part 3)",
    "text": " router-node.zip\nIf you check the content ofcontent-outliner.step.zip, it should have this\ncontent-outliner.step.zip\nsteps/\u2514\u2500\u2500 content/\u2514\u2500\u2500 agents/\u251c\u2500\u2500 content-outliner.mustache\u251c\u2500\u2500 content-outliner.step.js\u2514\u2500\u2500 content-outliner.step.js.map\nsteps/\u2514\u2500\u2500 content/\u2514\u2500\u2500 agents/\u251c\u2500\u2500 content-outliner.mustache\u251c\u2500\u2500 content-outliner.step.js\u2514\u2500\u2500 content-outliner.step.js.map\nNow you made sure the static file calledcontent-outliner.mustacheis included in the bundle.\ncontent-outliner.mustache\nFeatures\nLearn how to deploy your Motia Project to a live environment\nArchitecture\nMotia Cloud is a serverless platform. Some stuff that work locally may not work in the cloud.\nOn this page"
}
================================================================================
{
    "source_page": "Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/deployment#troubleshooting-build-outputs =====",
    "chunk_topic": "Deployment",
    "chunk_id": "Deployment (Part 1)",
    "text": "Deployment\nDeploying your project to Motia Cloud\nThere are two ways to deploy your project to Motia Cloud:\nUsing the CLI\nUsing the Web interface\nUsing the Motia CLI for Deployment\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\nmotiaclouddeploy--api-key<api-key>--version-name<version>[options]\n--api-key\n-k\nMOTIA_API_KEY\n--version-name\n-v\n--environment-id\n-s\nMOTIA_ENVIRONMENT_ID\n--version-description\n-d\n--env-file\n-e\nNote:Command-line options take precedence over environment variables. If both are provided, the command-line value will be used.\nDeploy with a specific version:\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3\nmotiaclouddeploy--api-keyyour-api-key-here--version-name1.2.3\nDeploy to a specific environment with environment variables:\nmotiaclouddeploy--api-keyyour-api-key-here\\--version-name1.2.3\\--env-file.env.production\\--environment-idenv-id\nmotiaclouddeploy--api-keyyour-api-key-here\\--version-name1.2.3\\--env-file.env.production\\--environment-idenv-id\nUsing Web interface\nThrough the web interface, you can deploy your project from workbench to a live environment with one click.\nSteps to deploy from web interface:\nHave your local project running (make sure your Motia version is 0.6.4 or higher)\nGo to import from workbench on Motia Cloud\nSelect the port your local project is running on\nChoose the project and environment name\nAdd any environment variables you need (you can upload from .env file or paste the content to auto-fill)\nClick Deploy\nWatch the magic happen\nAdding static files to the bundle\nSometimes we need to use local files when creating our backend logic. For example, creating templates.\nRunning binary files, etc. To do this, we can add them to steps as static files.\nAdding them to Steps as static files, you need to addincludeFilesto the step config. The path\nshould be relative to the step file.\nincludeFiles\nimport{ EventConfig }from'motia'exportconstconfig:EventConfig={name:'Content Outliner',description:'Creates detailed content outline based on the initial idea',type:'event',emits"
}
================================================================================
{
    "source_page": "Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/deployment#troubleshooting-build-outputs =====",
    "chunk_topic": "Deployment",
    "chunk_id": "Deployment (Part 2)",
    "text": " be relative to the step file.\nincludeFiles\nimport{ EventConfig }from'motia'exportconstconfig:EventConfig={name:'Content Outliner',description:'Creates detailed content outline based on the initial idea',type:'event',emits: [{ topic:'write-content', label:'Write first content'}],virtualEmits: ['virtual-write-content'],flows: ['Content'],subscribes: ['build-outline'],input,includeFiles: ['./content-outliner.mustache'],// relative to the step file}\nimport{ EventConfig }from'motia'exportconstconfig:EventConfig={name:'Content Outliner',description:'Creates detailed content outline based on the initial idea',type:'event',emits: [{ topic:'write-content', label:'Write first content'}],virtualEmits: ['virtual-write-content'],flows: ['Content'],subscribes: ['build-outline'],input,includeFiles: ['./content-outliner.mustache'],// relative to the step file}\nAdding binary files to the bundle\nBinary files are also supported, but the entire bundle size must not exceed 100MB.\nThe binary architecture should be linux_amd64.\nTroubleshooting Build Outputs\nWhen adding static files, it's important to check the build output to make sure the files are included.\nFor example, inthis project, there are a few steps that\ninclude static files.\nWhen runningnpx motia build, it will generate the following output indistfolder:\nnpx motia build\ndist\ndist/\u2514\u2500\u2500 node/steps/content/\u251c\u2500\u2500 agents\u2502   \u251c\u2500\u2500 content-outliner.step.zip\u2502   \u251c\u2500\u2500 content-writer.step.zip\u2502   \u2514\u2500\u2500 ideator.step.zip\u251c\u2500\u2500 api\u2502   \u251c\u2500\u2500 generate-content-api.step.zip\u2502   \u2514\u2500\u2500 get-content.step.zip\u251c\u2500\u2500 motia.steps.json\u2514\u2500\u2500 router-node.zip\ndist/\u2514\u2500\u2500 node/steps/content/\u251c\u2500\u2500 agents\u2502   \u251c\u2500\u2500 content-outliner.step.zip\u2502   \u251c\u2500\u2500 content-writer.step.zip\u2502   \u2514\u2500\u2500 ideator.step.zip\u251c\u2500\u2500 api\u2502   \u251c\u2500\u2500 generate-content-api.step.zip\u2502   \u2514\u2500\u2500 get-content.step.zip\u251c\u2500\u2500 motia.steps.json\u2514\u2500\u2500 router-node.zip\nIf you check the content ofcontent-outliner.step.zip, it should have this\ncontent-outliner.step.zip\nsteps/\u2514\u2500\u2500 content/\u2514\u2500\u2500 agents/\u251c\u2500\u2500 content-outliner.mustache\u251c\u2500\u2500"
}
================================================================================
{
    "source_page": "Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/deployment#troubleshooting-build-outputs =====",
    "chunk_topic": "Deployment",
    "chunk_id": "Deployment (Part 3)",
    "text": " router-node.zip\nIf you check the content ofcontent-outliner.step.zip, it should have this\ncontent-outliner.step.zip\nsteps/\u2514\u2500\u2500 content/\u2514\u2500\u2500 agents/\u251c\u2500\u2500 content-outliner.mustache\u251c\u2500\u2500 content-outliner.step.js\u2514\u2500\u2500 content-outliner.step.js.map\nsteps/\u2514\u2500\u2500 content/\u2514\u2500\u2500 agents/\u251c\u2500\u2500 content-outliner.mustache\u251c\u2500\u2500 content-outliner.step.js\u2514\u2500\u2500 content-outliner.step.js.map\nNow you made sure the static file calledcontent-outliner.mustacheis included in the bundle.\ncontent-outliner.mustache\nFeatures\nLearn how to deploy your Motia Project to a live environment\nArchitecture\nMotia Cloud is a serverless platform. Some stuff that work locally may not work in the cloud.\nOn this page"
}
================================================================================
{
    "source_page": "Features",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/features#real-time-deployment-status-updates =====",
    "chunk_topic": "Features",
    "chunk_id": "Features",
    "text": "Features\nLearn how to deploy your Motia Project to a live environment\nMotia Cloud is the easiest way to deploy your Motia Project to a live environment.\nQuickly deploy your project to a live environment with one click. Then confidently\nroll up updates, roll back to a previous stable version, and scale your project with ease.\nManage multiple environments, visualize logs and traces, and keep your project running smoothly.\nReal-time deployment status updates\nYou can see the deployment status in real-time in the Motia Cloud web interface\nDeployment history\nAll recent deployments on your project are available in Motia Cloud UI. You can browse them\nand promote them to be live in the environment.\nZero downtime deployments\nEvery deployment is an atomic deployment, this means that Motia Cloud creates a new infrastructure\nwith all the Message Queues system isolatedly for each deployment.\nWhy is this important?\nNo downtime deployments\nAvoid backwards compatibility issues on message queues: Example, you can change a topic data structure\nwithout worrying about breaking messages that are flowing during the deployment.\nInstant rollbacks and roll up updates\nWith one button you can rollback to a previous deployment. This allows you to be confident\non deployments, if anything fails, quickly rollback to a previous stable version.\nOne-click deployment\nDeploy your project from workbench to a live environment with one click.\nObservability\nHave the same experience you have with Workbench locally in cloud. Such as:\nLogs visualization\nTracing tool\nLogs visualization\nYou can see the logs of your project in the Motia Cloud web interface.\nTracing tool\nTracing tool to quickly visualize the flow of requests through the system.\nMultiple environments support\nMotia Cloud supports creating multiple environments for your projects.\nScalability\nHorizontal scaling individually for each step\nRetry mechanisms for event steps built-in (3 retries by default)\nLearn how to deploy\nLearn how to deploy your project to Motia Cloud in theDeploymentpage.\nSelf-Hosted Deployment\nLearn how to deploy your Motia project to production using motia-docker\nDeployment\nDeploying your project to Motia Cloud\nOn this page"
}
================================================================================
{
    "source_page": "Features",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/features#deployment-history =====",
    "chunk_topic": "Features",
    "chunk_id": "Features",
    "text": "Features\nLearn how to deploy your Motia Project to a live environment\nMotia Cloud is the easiest way to deploy your Motia Project to a live environment.\nQuickly deploy your project to a live environment with one click. Then confidently\nroll up updates, roll back to a previous stable version, and scale your project with ease.\nManage multiple environments, visualize logs and traces, and keep your project running smoothly.\nReal-time deployment status updates\nYou can see the deployment status in real-time in the Motia Cloud web interface\nDeployment history\nAll recent deployments on your project are available in Motia Cloud UI. You can browse them\nand promote them to be live in the environment.\nZero downtime deployments\nEvery deployment is an atomic deployment, this means that Motia Cloud creates a new infrastructure\nwith all the Message Queues system isolatedly for each deployment.\nWhy is this important?\nNo downtime deployments\nAvoid backwards compatibility issues on message queues: Example, you can change a topic data structure\nwithout worrying about breaking messages that are flowing during the deployment.\nInstant rollbacks and roll up updates\nWith one button you can rollback to a previous deployment. This allows you to be confident\non deployments, if anything fails, quickly rollback to a previous stable version.\nOne-click deployment\nDeploy your project from workbench to a live environment with one click.\nObservability\nHave the same experience you have with Workbench locally in cloud. Such as:\nLogs visualization\nTracing tool\nLogs visualization\nYou can see the logs of your project in the Motia Cloud web interface.\nTracing tool\nTracing tool to quickly visualize the flow of requests through the system.\nMultiple environments support\nMotia Cloud supports creating multiple environments for your projects.\nScalability\nHorizontal scaling individually for each step\nRetry mechanisms for event steps built-in (3 retries by default)\nLearn how to deploy\nLearn how to deploy your project to Motia Cloud in theDeploymentpage.\nSelf-Hosted Deployment\nLearn how to deploy your Motia project to production using motia-docker\nDeployment\nDeploying your project to Motia Cloud\nOn this page"
}
================================================================================
{
    "source_page": "Features",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/features#zero-downtime-deployments =====",
    "chunk_topic": "Features",
    "chunk_id": "Features",
    "text": "Features\nLearn how to deploy your Motia Project to a live environment\nMotia Cloud is the easiest way to deploy your Motia Project to a live environment.\nQuickly deploy your project to a live environment with one click. Then confidently\nroll up updates, roll back to a previous stable version, and scale your project with ease.\nManage multiple environments, visualize logs and traces, and keep your project running smoothly.\nReal-time deployment status updates\nYou can see the deployment status in real-time in the Motia Cloud web interface\nDeployment history\nAll recent deployments on your project are available in Motia Cloud UI. You can browse them\nand promote them to be live in the environment.\nZero downtime deployments\nEvery deployment is an atomic deployment, this means that Motia Cloud creates a new infrastructure\nwith all the Message Queues system isolatedly for each deployment.\nWhy is this important?\nNo downtime deployments\nAvoid backwards compatibility issues on message queues: Example, you can change a topic data structure\nwithout worrying about breaking messages that are flowing during the deployment.\nInstant rollbacks and roll up updates\nWith one button you can rollback to a previous deployment. This allows you to be confident\non deployments, if anything fails, quickly rollback to a previous stable version.\nOne-click deployment\nDeploy your project from workbench to a live environment with one click.\nObservability\nHave the same experience you have with Workbench locally in cloud. Such as:\nLogs visualization\nTracing tool\nLogs visualization\nYou can see the logs of your project in the Motia Cloud web interface.\nTracing tool\nTracing tool to quickly visualize the flow of requests through the system.\nMultiple environments support\nMotia Cloud supports creating multiple environments for your projects.\nScalability\nHorizontal scaling individually for each step\nRetry mechanisms for event steps built-in (3 retries by default)\nLearn how to deploy\nLearn how to deploy your project to Motia Cloud in theDeploymentpage.\nSelf-Hosted Deployment\nLearn how to deploy your Motia project to production using motia-docker\nDeployment\nDeploying your project to Motia Cloud\nOn this page"
}
================================================================================
{
    "source_page": "Features",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/features#why-is-this-important =====",
    "chunk_topic": "Features",
    "chunk_id": "Features",
    "text": "Features\nLearn how to deploy your Motia Project to a live environment\nMotia Cloud is the easiest way to deploy your Motia Project to a live environment.\nQuickly deploy your project to a live environment with one click. Then confidently\nroll up updates, roll back to a previous stable version, and scale your project with ease.\nManage multiple environments, visualize logs and traces, and keep your project running smoothly.\nReal-time deployment status updates\nYou can see the deployment status in real-time in the Motia Cloud web interface\nDeployment history\nAll recent deployments on your project are available in Motia Cloud UI. You can browse them\nand promote them to be live in the environment.\nZero downtime deployments\nEvery deployment is an atomic deployment, this means that Motia Cloud creates a new infrastructure\nwith all the Message Queues system isolatedly for each deployment.\nWhy is this important?\nNo downtime deployments\nAvoid backwards compatibility issues on message queues: Example, you can change a topic data structure\nwithout worrying about breaking messages that are flowing during the deployment.\nInstant rollbacks and roll up updates\nWith one button you can rollback to a previous deployment. This allows you to be confident\non deployments, if anything fails, quickly rollback to a previous stable version.\nOne-click deployment\nDeploy your project from workbench to a live environment with one click.\nObservability\nHave the same experience you have with Workbench locally in cloud. Such as:\nLogs visualization\nTracing tool\nLogs visualization\nYou can see the logs of your project in the Motia Cloud web interface.\nTracing tool\nTracing tool to quickly visualize the flow of requests through the system.\nMultiple environments support\nMotia Cloud supports creating multiple environments for your projects.\nScalability\nHorizontal scaling individually for each step\nRetry mechanisms for event steps built-in (3 retries by default)\nLearn how to deploy\nLearn how to deploy your project to Motia Cloud in theDeploymentpage.\nSelf-Hosted Deployment\nLearn how to deploy your Motia project to production using motia-docker\nDeployment\nDeploying your project to Motia Cloud\nOn this page"
}
================================================================================
{
    "source_page": "Features",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/features#instant-rollbacks-and-roll-up-updates =====",
    "chunk_topic": "Features",
    "chunk_id": "Features",
    "text": "Features\nLearn how to deploy your Motia Project to a live environment\nMotia Cloud is the easiest way to deploy your Motia Project to a live environment.\nQuickly deploy your project to a live environment with one click. Then confidently\nroll up updates, roll back to a previous stable version, and scale your project with ease.\nManage multiple environments, visualize logs and traces, and keep your project running smoothly.\nReal-time deployment status updates\nYou can see the deployment status in real-time in the Motia Cloud web interface\nDeployment history\nAll recent deployments on your project are available in Motia Cloud UI. You can browse them\nand promote them to be live in the environment.\nZero downtime deployments\nEvery deployment is an atomic deployment, this means that Motia Cloud creates a new infrastructure\nwith all the Message Queues system isolatedly for each deployment.\nWhy is this important?\nNo downtime deployments\nAvoid backwards compatibility issues on message queues: Example, you can change a topic data structure\nwithout worrying about breaking messages that are flowing during the deployment.\nInstant rollbacks and roll up updates\nWith one button you can rollback to a previous deployment. This allows you to be confident\non deployments, if anything fails, quickly rollback to a previous stable version.\nOne-click deployment\nDeploy your project from workbench to a live environment with one click.\nObservability\nHave the same experience you have with Workbench locally in cloud. Such as:\nLogs visualization\nTracing tool\nLogs visualization\nYou can see the logs of your project in the Motia Cloud web interface.\nTracing tool\nTracing tool to quickly visualize the flow of requests through the system.\nMultiple environments support\nMotia Cloud supports creating multiple environments for your projects.\nScalability\nHorizontal scaling individually for each step\nRetry mechanisms for event steps built-in (3 retries by default)\nLearn how to deploy\nLearn how to deploy your project to Motia Cloud in theDeploymentpage.\nSelf-Hosted Deployment\nLearn how to deploy your Motia project to production using motia-docker\nDeployment\nDeploying your project to Motia Cloud\nOn this page"
}
================================================================================
{
    "source_page": "Features",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/features#one-click-deployment =====",
    "chunk_topic": "Features",
    "chunk_id": "Features",
    "text": "Features\nLearn how to deploy your Motia Project to a live environment\nMotia Cloud is the easiest way to deploy your Motia Project to a live environment.\nQuickly deploy your project to a live environment with one click. Then confidently\nroll up updates, roll back to a previous stable version, and scale your project with ease.\nManage multiple environments, visualize logs and traces, and keep your project running smoothly.\nReal-time deployment status updates\nYou can see the deployment status in real-time in the Motia Cloud web interface\nDeployment history\nAll recent deployments on your project are available in Motia Cloud UI. You can browse them\nand promote them to be live in the environment.\nZero downtime deployments\nEvery deployment is an atomic deployment, this means that Motia Cloud creates a new infrastructure\nwith all the Message Queues system isolatedly for each deployment.\nWhy is this important?\nNo downtime deployments\nAvoid backwards compatibility issues on message queues: Example, you can change a topic data structure\nwithout worrying about breaking messages that are flowing during the deployment.\nInstant rollbacks and roll up updates\nWith one button you can rollback to a previous deployment. This allows you to be confident\non deployments, if anything fails, quickly rollback to a previous stable version.\nOne-click deployment\nDeploy your project from workbench to a live environment with one click.\nObservability\nHave the same experience you have with Workbench locally in cloud. Such as:\nLogs visualization\nTracing tool\nLogs visualization\nYou can see the logs of your project in the Motia Cloud web interface.\nTracing tool\nTracing tool to quickly visualize the flow of requests through the system.\nMultiple environments support\nMotia Cloud supports creating multiple environments for your projects.\nScalability\nHorizontal scaling individually for each step\nRetry mechanisms for event steps built-in (3 retries by default)\nLearn how to deploy\nLearn how to deploy your project to Motia Cloud in theDeploymentpage.\nSelf-Hosted Deployment\nLearn how to deploy your Motia project to production using motia-docker\nDeployment\nDeploying your project to Motia Cloud\nOn this page"
}
================================================================================
{
    "source_page": "Features",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/features#observability =====",
    "chunk_topic": "Features",
    "chunk_id": "Features",
    "text": "Features\nLearn how to deploy your Motia Project to a live environment\nMotia Cloud is the easiest way to deploy your Motia Project to a live environment.\nQuickly deploy your project to a live environment with one click. Then confidently\nroll up updates, roll back to a previous stable version, and scale your project with ease.\nManage multiple environments, visualize logs and traces, and keep your project running smoothly.\nReal-time deployment status updates\nYou can see the deployment status in real-time in the Motia Cloud web interface\nDeployment history\nAll recent deployments on your project are available in Motia Cloud UI. You can browse them\nand promote them to be live in the environment.\nZero downtime deployments\nEvery deployment is an atomic deployment, this means that Motia Cloud creates a new infrastructure\nwith all the Message Queues system isolatedly for each deployment.\nWhy is this important?\nNo downtime deployments\nAvoid backwards compatibility issues on message queues: Example, you can change a topic data structure\nwithout worrying about breaking messages that are flowing during the deployment.\nInstant rollbacks and roll up updates\nWith one button you can rollback to a previous deployment. This allows you to be confident\non deployments, if anything fails, quickly rollback to a previous stable version.\nOne-click deployment\nDeploy your project from workbench to a live environment with one click.\nObservability\nHave the same experience you have with Workbench locally in cloud. Such as:\nLogs visualization\nTracing tool\nLogs visualization\nYou can see the logs of your project in the Motia Cloud web interface.\nTracing tool\nTracing tool to quickly visualize the flow of requests through the system.\nMultiple environments support\nMotia Cloud supports creating multiple environments for your projects.\nScalability\nHorizontal scaling individually for each step\nRetry mechanisms for event steps built-in (3 retries by default)\nLearn how to deploy\nLearn how to deploy your project to Motia Cloud in theDeploymentpage.\nSelf-Hosted Deployment\nLearn how to deploy your Motia project to production using motia-docker\nDeployment\nDeploying your project to Motia Cloud\nOn this page"
}
================================================================================
{
    "source_page": "Features",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/features#logs-visualization =====",
    "chunk_topic": "Features",
    "chunk_id": "Features",
    "text": "Features\nLearn how to deploy your Motia Project to a live environment\nMotia Cloud is the easiest way to deploy your Motia Project to a live environment.\nQuickly deploy your project to a live environment with one click. Then confidently\nroll up updates, roll back to a previous stable version, and scale your project with ease.\nManage multiple environments, visualize logs and traces, and keep your project running smoothly.\nReal-time deployment status updates\nYou can see the deployment status in real-time in the Motia Cloud web interface\nDeployment history\nAll recent deployments on your project are available in Motia Cloud UI. You can browse them\nand promote them to be live in the environment.\nZero downtime deployments\nEvery deployment is an atomic deployment, this means that Motia Cloud creates a new infrastructure\nwith all the Message Queues system isolatedly for each deployment.\nWhy is this important?\nNo downtime deployments\nAvoid backwards compatibility issues on message queues: Example, you can change a topic data structure\nwithout worrying about breaking messages that are flowing during the deployment.\nInstant rollbacks and roll up updates\nWith one button you can rollback to a previous deployment. This allows you to be confident\non deployments, if anything fails, quickly rollback to a previous stable version.\nOne-click deployment\nDeploy your project from workbench to a live environment with one click.\nObservability\nHave the same experience you have with Workbench locally in cloud. Such as:\nLogs visualization\nTracing tool\nLogs visualization\nYou can see the logs of your project in the Motia Cloud web interface.\nTracing tool\nTracing tool to quickly visualize the flow of requests through the system.\nMultiple environments support\nMotia Cloud supports creating multiple environments for your projects.\nScalability\nHorizontal scaling individually for each step\nRetry mechanisms for event steps built-in (3 retries by default)\nLearn how to deploy\nLearn how to deploy your project to Motia Cloud in theDeploymentpage.\nSelf-Hosted Deployment\nLearn how to deploy your Motia project to production using motia-docker\nDeployment\nDeploying your project to Motia Cloud\nOn this page"
}
================================================================================
{
    "source_page": "Features",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/features#tracing-tool =====",
    "chunk_topic": "Features",
    "chunk_id": "Features",
    "text": "Features\nLearn how to deploy your Motia Project to a live environment\nMotia Cloud is the easiest way to deploy your Motia Project to a live environment.\nQuickly deploy your project to a live environment with one click. Then confidently\nroll up updates, roll back to a previous stable version, and scale your project with ease.\nManage multiple environments, visualize logs and traces, and keep your project running smoothly.\nReal-time deployment status updates\nYou can see the deployment status in real-time in the Motia Cloud web interface\nDeployment history\nAll recent deployments on your project are available in Motia Cloud UI. You can browse them\nand promote them to be live in the environment.\nZero downtime deployments\nEvery deployment is an atomic deployment, this means that Motia Cloud creates a new infrastructure\nwith all the Message Queues system isolatedly for each deployment.\nWhy is this important?\nNo downtime deployments\nAvoid backwards compatibility issues on message queues: Example, you can change a topic data structure\nwithout worrying about breaking messages that are flowing during the deployment.\nInstant rollbacks and roll up updates\nWith one button you can rollback to a previous deployment. This allows you to be confident\non deployments, if anything fails, quickly rollback to a previous stable version.\nOne-click deployment\nDeploy your project from workbench to a live environment with one click.\nObservability\nHave the same experience you have with Workbench locally in cloud. Such as:\nLogs visualization\nTracing tool\nLogs visualization\nYou can see the logs of your project in the Motia Cloud web interface.\nTracing tool\nTracing tool to quickly visualize the flow of requests through the system.\nMultiple environments support\nMotia Cloud supports creating multiple environments for your projects.\nScalability\nHorizontal scaling individually for each step\nRetry mechanisms for event steps built-in (3 retries by default)\nLearn how to deploy\nLearn how to deploy your project to Motia Cloud in theDeploymentpage.\nSelf-Hosted Deployment\nLearn how to deploy your Motia project to production using motia-docker\nDeployment\nDeploying your project to Motia Cloud\nOn this page"
}
================================================================================
{
    "source_page": "Features",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/features#multiple-environments-support =====",
    "chunk_topic": "Features",
    "chunk_id": "Features",
    "text": "Features\nLearn how to deploy your Motia Project to a live environment\nMotia Cloud is the easiest way to deploy your Motia Project to a live environment.\nQuickly deploy your project to a live environment with one click. Then confidently\nroll up updates, roll back to a previous stable version, and scale your project with ease.\nManage multiple environments, visualize logs and traces, and keep your project running smoothly.\nReal-time deployment status updates\nYou can see the deployment status in real-time in the Motia Cloud web interface\nDeployment history\nAll recent deployments on your project are available in Motia Cloud UI. You can browse them\nand promote them to be live in the environment.\nZero downtime deployments\nEvery deployment is an atomic deployment, this means that Motia Cloud creates a new infrastructure\nwith all the Message Queues system isolatedly for each deployment.\nWhy is this important?\nNo downtime deployments\nAvoid backwards compatibility issues on message queues: Example, you can change a topic data structure\nwithout worrying about breaking messages that are flowing during the deployment.\nInstant rollbacks and roll up updates\nWith one button you can rollback to a previous deployment. This allows you to be confident\non deployments, if anything fails, quickly rollback to a previous stable version.\nOne-click deployment\nDeploy your project from workbench to a live environment with one click.\nObservability\nHave the same experience you have with Workbench locally in cloud. Such as:\nLogs visualization\nTracing tool\nLogs visualization\nYou can see the logs of your project in the Motia Cloud web interface.\nTracing tool\nTracing tool to quickly visualize the flow of requests through the system.\nMultiple environments support\nMotia Cloud supports creating multiple environments for your projects.\nScalability\nHorizontal scaling individually for each step\nRetry mechanisms for event steps built-in (3 retries by default)\nLearn how to deploy\nLearn how to deploy your project to Motia Cloud in theDeploymentpage.\nSelf-Hosted Deployment\nLearn how to deploy your Motia project to production using motia-docker\nDeployment\nDeploying your project to Motia Cloud\nOn this page"
}
================================================================================
{
    "source_page": "Features",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/features#scalability =====",
    "chunk_topic": "Features",
    "chunk_id": "Features",
    "text": "Features\nLearn how to deploy your Motia Project to a live environment\nMotia Cloud is the easiest way to deploy your Motia Project to a live environment.\nQuickly deploy your project to a live environment with one click. Then confidently\nroll up updates, roll back to a previous stable version, and scale your project with ease.\nManage multiple environments, visualize logs and traces, and keep your project running smoothly.\nReal-time deployment status updates\nYou can see the deployment status in real-time in the Motia Cloud web interface\nDeployment history\nAll recent deployments on your project are available in Motia Cloud UI. You can browse them\nand promote them to be live in the environment.\nZero downtime deployments\nEvery deployment is an atomic deployment, this means that Motia Cloud creates a new infrastructure\nwith all the Message Queues system isolatedly for each deployment.\nWhy is this important?\nNo downtime deployments\nAvoid backwards compatibility issues on message queues: Example, you can change a topic data structure\nwithout worrying about breaking messages that are flowing during the deployment.\nInstant rollbacks and roll up updates\nWith one button you can rollback to a previous deployment. This allows you to be confident\non deployments, if anything fails, quickly rollback to a previous stable version.\nOne-click deployment\nDeploy your project from workbench to a live environment with one click.\nObservability\nHave the same experience you have with Workbench locally in cloud. Such as:\nLogs visualization\nTracing tool\nLogs visualization\nYou can see the logs of your project in the Motia Cloud web interface.\nTracing tool\nTracing tool to quickly visualize the flow of requests through the system.\nMultiple environments support\nMotia Cloud supports creating multiple environments for your projects.\nScalability\nHorizontal scaling individually for each step\nRetry mechanisms for event steps built-in (3 retries by default)\nLearn how to deploy\nLearn how to deploy your project to Motia Cloud in theDeploymentpage.\nSelf-Hosted Deployment\nLearn how to deploy your Motia project to production using motia-docker\nDeployment\nDeploying your project to Motia Cloud\nOn this page"
}
================================================================================
{
    "source_page": "Features",
    "source_url": "https://www.motia.dev/docs/deployment-guide/motia-cloud/features#learn-how-to-deploy =====",
    "chunk_topic": "Features",
    "chunk_id": "Features",
    "text": "Features\nLearn how to deploy your Motia Project to a live environment\nMotia Cloud is the easiest way to deploy your Motia Project to a live environment.\nQuickly deploy your project to a live environment with one click. Then confidently\nroll up updates, roll back to a previous stable version, and scale your project with ease.\nManage multiple environments, visualize logs and traces, and keep your project running smoothly.\nReal-time deployment status updates\nYou can see the deployment status in real-time in the Motia Cloud web interface\nDeployment history\nAll recent deployments on your project are available in Motia Cloud UI. You can browse them\nand promote them to be live in the environment.\nZero downtime deployments\nEvery deployment is an atomic deployment, this means that Motia Cloud creates a new infrastructure\nwith all the Message Queues system isolatedly for each deployment.\nWhy is this important?\nNo downtime deployments\nAvoid backwards compatibility issues on message queues: Example, you can change a topic data structure\nwithout worrying about breaking messages that are flowing during the deployment.\nInstant rollbacks and roll up updates\nWith one button you can rollback to a previous deployment. This allows you to be confident\non deployments, if anything fails, quickly rollback to a previous stable version.\nOne-click deployment\nDeploy your project from workbench to a live environment with one click.\nObservability\nHave the same experience you have with Workbench locally in cloud. Such as:\nLogs visualization\nTracing tool\nLogs visualization\nYou can see the logs of your project in the Motia Cloud web interface.\nTracing tool\nTracing tool to quickly visualize the flow of requests through the system.\nMultiple environments support\nMotia Cloud supports creating multiple environments for your projects.\nScalability\nHorizontal scaling individually for each step\nRetry mechanisms for event steps built-in (3 retries by default)\nLearn how to deploy\nLearn how to deploy your project to Motia Cloud in theDeploymentpage.\nSelf-Hosted Deployment\nLearn how to deploy your Motia project to production using motia-docker\nDeployment\nDeploying your project to Motia Cloud\nOn this page"
}
================================================================================
{
    "source_page": "Self-Hosted Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/self-hosted#quick-setup =====",
    "chunk_topic": "Self-Hosted Deployment",
    "chunk_id": "Self-Hosted Deployment (Part 1)",
    "text": "Self-Hosted Deployment\nLearn how to deploy your Motia project to production using motia-docker\nWe provide a docker image that you can use to deploy your Motia project to production. You can use it as a base image and add your own customizations or use it as is.\nQuick setup\nnpxmotia@latestdockersetup\nnpxmotia@latestdockersetup\nnpxmotia@latestdockerrun\nnpxmotia@latestdockerrun\nnpxmotia@latestdockerrun--help\nnpxmotia@latestdockerrun--help\nReference theCLIfor more information on the docker commands.\nUsing the docker image\nYou will need to implement your own Dockerfile where you will use the motia-docker image as a base image. Use the following template as a starting point for your Dockerfile:\n# NOTE: Some cloud providers will require you to specify the platform to match your target architecture# i.e.: AWS Lightsail requires arm64, therefore you update your FROM statement to: FROM --platform=linux/arm64 motiadev/motia:latestFROMmotiadev/motia:latest# Install DependenciesCOPYpackage*.json ./RUNnpm ci --only=production# Move application filesCOPY. .# Enable the following lines if you are using python steps!!!# Setup python steps dependencies# RUN npx motia@latest install# Expose outside access to the motia projectEXPOSE3000# Run your applicationCMD[\"npm\",\"run\",\"start\"]\n# NOTE: Some cloud providers will require you to specify the platform to match your target architecture# i.e.: AWS Lightsail requires arm64, therefore you update your FROM statement to: FROM --platform=linux/arm64 motiadev/motia:latestFROMmotiadev/motia:latest# Install DependenciesCOPYpackage*.json ./RUNnpm ci --only=production# Move application filesCOPY. .# Enable the following lines if you are using python steps!!!# Setup python steps dependencies# RUN npx motia@latest install# Expose outside access to the motia projectEXPOSE3000# Run your applicationCMD[\"npm\",\"run\",\"start\"]\nDepending on the cloud provider you will use to deploy your Motia project, you will need to adjust the exposed ports\nand the command to start your application.\nCreate a .dockerignore file\nCreate"
}
================================================================================
{
    "source_page": "Self-Hosted Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/self-hosted#quick-setup =====",
    "chunk_topic": "Self-Hosted Deployment",
    "chunk_id": "Self-Hosted Deployment (Part 2)",
    "text": " your applicationCMD[\"npm\",\"run\",\"start\"]\nDepending on the cloud provider you will use to deploy your Motia project, you will need to adjust the exposed ports\nand the command to start your application.\nCreate a .dockerignore file\nCreate a .dockerignore file in the root of your project to exclude files that are not needed in the docker image. You can use the following template as a starting point for your .dockerignore file:\n# Git.git.gitignore# Python__pycache__/*.py[cod]*$py.class*.so.Pythonenv/venv/ENV/# Nodenode_modules/npm-debug.logyarn-debug.logyarn-error.log# IDE.vscode/.idea/*.swp*.swo# Local development.env# OS generated files.DS_Store.DS_Store?._*.Spotlight-V100.Trashesehthumbs.dbThumbs.db\n# Git.git.gitignore# Python__pycache__/*.py[cod]*$py.class*.so.Pythonenv/venv/ENV/# Nodenode_modules/npm-debug.logyarn-debug.logyarn-error.log# IDE.vscode/.idea/*.swp*.swo# Local development.env# OS generated files.DS_Store.DS_Store?._*.Spotlight-V100.Trashesehthumbs.dbThumbs.db\nBuild your image\ndockerbuild-t<your-image-name>.\ndockerbuild-t<your-image-name>.\nRun your Motia application\nOnce you've built your image, you can run it using the following command:\ndockerrun-it--rm-p3000:3000<your-image-name>\ndockerrun-it--rm-p3000:3000<your-image-name>\nMotia Docker Resources\nDocker Registry\nGithub Repo\nExample Motia project with deployment boilerplate for AWS LightSail and Railway\nGetting Started\nLearn how to deploy your Motia project to production\nFeatures\nLearn how to deploy your Motia Project to a live environment\nOn this page"
}
================================================================================
{
    "source_page": "Self-Hosted Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/self-hosted#setup-your-motia-project =====",
    "chunk_topic": "Self-Hosted Deployment",
    "chunk_id": "Self-Hosted Deployment (Part 1)",
    "text": "Self-Hosted Deployment\nLearn how to deploy your Motia project to production using motia-docker\nWe provide a docker image that you can use to deploy your Motia project to production. You can use it as a base image and add your own customizations or use it as is.\nQuick setup\nnpxmotia@latestdockersetup\nnpxmotia@latestdockersetup\nnpxmotia@latestdockerrun\nnpxmotia@latestdockerrun\nnpxmotia@latestdockerrun--help\nnpxmotia@latestdockerrun--help\nReference theCLIfor more information on the docker commands.\nUsing the docker image\nYou will need to implement your own Dockerfile where you will use the motia-docker image as a base image. Use the following template as a starting point for your Dockerfile:\n# NOTE: Some cloud providers will require you to specify the platform to match your target architecture# i.e.: AWS Lightsail requires arm64, therefore you update your FROM statement to: FROM --platform=linux/arm64 motiadev/motia:latestFROMmotiadev/motia:latest# Install DependenciesCOPYpackage*.json ./RUNnpm ci --only=production# Move application filesCOPY. .# Enable the following lines if you are using python steps!!!# Setup python steps dependencies# RUN npx motia@latest install# Expose outside access to the motia projectEXPOSE3000# Run your applicationCMD[\"npm\",\"run\",\"start\"]\n# NOTE: Some cloud providers will require you to specify the platform to match your target architecture# i.e.: AWS Lightsail requires arm64, therefore you update your FROM statement to: FROM --platform=linux/arm64 motiadev/motia:latestFROMmotiadev/motia:latest# Install DependenciesCOPYpackage*.json ./RUNnpm ci --only=production# Move application filesCOPY. .# Enable the following lines if you are using python steps!!!# Setup python steps dependencies# RUN npx motia@latest install# Expose outside access to the motia projectEXPOSE3000# Run your applicationCMD[\"npm\",\"run\",\"start\"]\nDepending on the cloud provider you will use to deploy your Motia project, you will need to adjust the exposed ports\nand the command to start your application.\nCreate a .dockerignore file\nCreate"
}
================================================================================
{
    "source_page": "Self-Hosted Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/self-hosted#setup-your-motia-project =====",
    "chunk_topic": "Self-Hosted Deployment",
    "chunk_id": "Self-Hosted Deployment (Part 2)",
    "text": " your applicationCMD[\"npm\",\"run\",\"start\"]\nDepending on the cloud provider you will use to deploy your Motia project, you will need to adjust the exposed ports\nand the command to start your application.\nCreate a .dockerignore file\nCreate a .dockerignore file in the root of your project to exclude files that are not needed in the docker image. You can use the following template as a starting point for your .dockerignore file:\n# Git.git.gitignore# Python__pycache__/*.py[cod]*$py.class*.so.Pythonenv/venv/ENV/# Nodenode_modules/npm-debug.logyarn-debug.logyarn-error.log# IDE.vscode/.idea/*.swp*.swo# Local development.env# OS generated files.DS_Store.DS_Store?._*.Spotlight-V100.Trashesehthumbs.dbThumbs.db\n# Git.git.gitignore# Python__pycache__/*.py[cod]*$py.class*.so.Pythonenv/venv/ENV/# Nodenode_modules/npm-debug.logyarn-debug.logyarn-error.log# IDE.vscode/.idea/*.swp*.swo# Local development.env# OS generated files.DS_Store.DS_Store?._*.Spotlight-V100.Trashesehthumbs.dbThumbs.db\nBuild your image\ndockerbuild-t<your-image-name>.\ndockerbuild-t<your-image-name>.\nRun your Motia application\nOnce you've built your image, you can run it using the following command:\ndockerrun-it--rm-p3000:3000<your-image-name>\ndockerrun-it--rm-p3000:3000<your-image-name>\nMotia Docker Resources\nDocker Registry\nGithub Repo\nExample Motia project with deployment boilerplate for AWS LightSail and Railway\nGetting Started\nLearn how to deploy your Motia project to production\nFeatures\nLearn how to deploy your Motia Project to a live environment\nOn this page"
}
================================================================================
{
    "source_page": "Self-Hosted Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/self-hosted#run-your-motia-project-inside-a-container =====",
    "chunk_topic": "Self-Hosted Deployment",
    "chunk_id": "Self-Hosted Deployment (Part 1)",
    "text": "Self-Hosted Deployment\nLearn how to deploy your Motia project to production using motia-docker\nWe provide a docker image that you can use to deploy your Motia project to production. You can use it as a base image and add your own customizations or use it as is.\nQuick setup\nnpxmotia@latestdockersetup\nnpxmotia@latestdockersetup\nnpxmotia@latestdockerrun\nnpxmotia@latestdockerrun\nnpxmotia@latestdockerrun--help\nnpxmotia@latestdockerrun--help\nReference theCLIfor more information on the docker commands.\nUsing the docker image\nYou will need to implement your own Dockerfile where you will use the motia-docker image as a base image. Use the following template as a starting point for your Dockerfile:\n# NOTE: Some cloud providers will require you to specify the platform to match your target architecture# i.e.: AWS Lightsail requires arm64, therefore you update your FROM statement to: FROM --platform=linux/arm64 motiadev/motia:latestFROMmotiadev/motia:latest# Install DependenciesCOPYpackage*.json ./RUNnpm ci --only=production# Move application filesCOPY. .# Enable the following lines if you are using python steps!!!# Setup python steps dependencies# RUN npx motia@latest install# Expose outside access to the motia projectEXPOSE3000# Run your applicationCMD[\"npm\",\"run\",\"start\"]\n# NOTE: Some cloud providers will require you to specify the platform to match your target architecture# i.e.: AWS Lightsail requires arm64, therefore you update your FROM statement to: FROM --platform=linux/arm64 motiadev/motia:latestFROMmotiadev/motia:latest# Install DependenciesCOPYpackage*.json ./RUNnpm ci --only=production# Move application filesCOPY. .# Enable the following lines if you are using python steps!!!# Setup python steps dependencies# RUN npx motia@latest install# Expose outside access to the motia projectEXPOSE3000# Run your applicationCMD[\"npm\",\"run\",\"start\"]\nDepending on the cloud provider you will use to deploy your Motia project, you will need to adjust the exposed ports\nand the command to start your application.\nCreate a .dockerignore file\nCreate"
}
================================================================================
{
    "source_page": "Self-Hosted Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/self-hosted#run-your-motia-project-inside-a-container =====",
    "chunk_topic": "Self-Hosted Deployment",
    "chunk_id": "Self-Hosted Deployment (Part 2)",
    "text": " your applicationCMD[\"npm\",\"run\",\"start\"]\nDepending on the cloud provider you will use to deploy your Motia project, you will need to adjust the exposed ports\nand the command to start your application.\nCreate a .dockerignore file\nCreate a .dockerignore file in the root of your project to exclude files that are not needed in the docker image. You can use the following template as a starting point for your .dockerignore file:\n# Git.git.gitignore# Python__pycache__/*.py[cod]*$py.class*.so.Pythonenv/venv/ENV/# Nodenode_modules/npm-debug.logyarn-debug.logyarn-error.log# IDE.vscode/.idea/*.swp*.swo# Local development.env# OS generated files.DS_Store.DS_Store?._*.Spotlight-V100.Trashesehthumbs.dbThumbs.db\n# Git.git.gitignore# Python__pycache__/*.py[cod]*$py.class*.so.Pythonenv/venv/ENV/# Nodenode_modules/npm-debug.logyarn-debug.logyarn-error.log# IDE.vscode/.idea/*.swp*.swo# Local development.env# OS generated files.DS_Store.DS_Store?._*.Spotlight-V100.Trashesehthumbs.dbThumbs.db\nBuild your image\ndockerbuild-t<your-image-name>.\ndockerbuild-t<your-image-name>.\nRun your Motia application\nOnce you've built your image, you can run it using the following command:\ndockerrun-it--rm-p3000:3000<your-image-name>\ndockerrun-it--rm-p3000:3000<your-image-name>\nMotia Docker Resources\nDocker Registry\nGithub Repo\nExample Motia project with deployment boilerplate for AWS LightSail and Railway\nGetting Started\nLearn how to deploy your Motia project to production\nFeatures\nLearn how to deploy your Motia Project to a live environment\nOn this page"
}
================================================================================
{
    "source_page": "Self-Hosted Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/self-hosted#you-are-good-to-go-your-project-should-be-running-on-localhost-under-port-3000-for-additional-options-and-configuration-run =====",
    "chunk_topic": "Self-Hosted Deployment",
    "chunk_id": "Self-Hosted Deployment (Part 1)",
    "text": "Self-Hosted Deployment\nLearn how to deploy your Motia project to production using motia-docker\nWe provide a docker image that you can use to deploy your Motia project to production. You can use it as a base image and add your own customizations or use it as is.\nQuick setup\nnpxmotia@latestdockersetup\nnpxmotia@latestdockersetup\nnpxmotia@latestdockerrun\nnpxmotia@latestdockerrun\nnpxmotia@latestdockerrun--help\nnpxmotia@latestdockerrun--help\nReference theCLIfor more information on the docker commands.\nUsing the docker image\nYou will need to implement your own Dockerfile where you will use the motia-docker image as a base image. Use the following template as a starting point for your Dockerfile:\n# NOTE: Some cloud providers will require you to specify the platform to match your target architecture# i.e.: AWS Lightsail requires arm64, therefore you update your FROM statement to: FROM --platform=linux/arm64 motiadev/motia:latestFROMmotiadev/motia:latest# Install DependenciesCOPYpackage*.json ./RUNnpm ci --only=production# Move application filesCOPY. .# Enable the following lines if you are using python steps!!!# Setup python steps dependencies# RUN npx motia@latest install# Expose outside access to the motia projectEXPOSE3000# Run your applicationCMD[\"npm\",\"run\",\"start\"]\n# NOTE: Some cloud providers will require you to specify the platform to match your target architecture# i.e.: AWS Lightsail requires arm64, therefore you update your FROM statement to: FROM --platform=linux/arm64 motiadev/motia:latestFROMmotiadev/motia:latest# Install DependenciesCOPYpackage*.json ./RUNnpm ci --only=production# Move application filesCOPY. .# Enable the following lines if you are using python steps!!!# Setup python steps dependencies# RUN npx motia@latest install# Expose outside access to the motia projectEXPOSE3000# Run your applicationCMD[\"npm\",\"run\",\"start\"]\nDepending on the cloud provider you will use to deploy your Motia project, you will need to adjust the exposed ports\nand the command to start your application.\nCreate a .dockerignore file\nCreate"
}
================================================================================
{
    "source_page": "Self-Hosted Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/self-hosted#you-are-good-to-go-your-project-should-be-running-on-localhost-under-port-3000-for-additional-options-and-configuration-run =====",
    "chunk_topic": "Self-Hosted Deployment",
    "chunk_id": "Self-Hosted Deployment (Part 2)",
    "text": " your applicationCMD[\"npm\",\"run\",\"start\"]\nDepending on the cloud provider you will use to deploy your Motia project, you will need to adjust the exposed ports\nand the command to start your application.\nCreate a .dockerignore file\nCreate a .dockerignore file in the root of your project to exclude files that are not needed in the docker image. You can use the following template as a starting point for your .dockerignore file:\n# Git.git.gitignore# Python__pycache__/*.py[cod]*$py.class*.so.Pythonenv/venv/ENV/# Nodenode_modules/npm-debug.logyarn-debug.logyarn-error.log# IDE.vscode/.idea/*.swp*.swo# Local development.env# OS generated files.DS_Store.DS_Store?._*.Spotlight-V100.Trashesehthumbs.dbThumbs.db\n# Git.git.gitignore# Python__pycache__/*.py[cod]*$py.class*.so.Pythonenv/venv/ENV/# Nodenode_modules/npm-debug.logyarn-debug.logyarn-error.log# IDE.vscode/.idea/*.swp*.swo# Local development.env# OS generated files.DS_Store.DS_Store?._*.Spotlight-V100.Trashesehthumbs.dbThumbs.db\nBuild your image\ndockerbuild-t<your-image-name>.\ndockerbuild-t<your-image-name>.\nRun your Motia application\nOnce you've built your image, you can run it using the following command:\ndockerrun-it--rm-p3000:3000<your-image-name>\ndockerrun-it--rm-p3000:3000<your-image-name>\nMotia Docker Resources\nDocker Registry\nGithub Repo\nExample Motia project with deployment boilerplate for AWS LightSail and Railway\nGetting Started\nLearn how to deploy your Motia project to production\nFeatures\nLearn how to deploy your Motia Project to a live environment\nOn this page"
}
================================================================================
{
    "source_page": "Self-Hosted Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/self-hosted#using-the-docker-image =====",
    "chunk_topic": "Self-Hosted Deployment",
    "chunk_id": "Self-Hosted Deployment (Part 1)",
    "text": "Self-Hosted Deployment\nLearn how to deploy your Motia project to production using motia-docker\nWe provide a docker image that you can use to deploy your Motia project to production. You can use it as a base image and add your own customizations or use it as is.\nQuick setup\nnpxmotia@latestdockersetup\nnpxmotia@latestdockersetup\nnpxmotia@latestdockerrun\nnpxmotia@latestdockerrun\nnpxmotia@latestdockerrun--help\nnpxmotia@latestdockerrun--help\nReference theCLIfor more information on the docker commands.\nUsing the docker image\nYou will need to implement your own Dockerfile where you will use the motia-docker image as a base image. Use the following template as a starting point for your Dockerfile:\n# NOTE: Some cloud providers will require you to specify the platform to match your target architecture# i.e.: AWS Lightsail requires arm64, therefore you update your FROM statement to: FROM --platform=linux/arm64 motiadev/motia:latestFROMmotiadev/motia:latest# Install DependenciesCOPYpackage*.json ./RUNnpm ci --only=production# Move application filesCOPY. .# Enable the following lines if you are using python steps!!!# Setup python steps dependencies# RUN npx motia@latest install# Expose outside access to the motia projectEXPOSE3000# Run your applicationCMD[\"npm\",\"run\",\"start\"]\n# NOTE: Some cloud providers will require you to specify the platform to match your target architecture# i.e.: AWS Lightsail requires arm64, therefore you update your FROM statement to: FROM --platform=linux/arm64 motiadev/motia:latestFROMmotiadev/motia:latest# Install DependenciesCOPYpackage*.json ./RUNnpm ci --only=production# Move application filesCOPY. .# Enable the following lines if you are using python steps!!!# Setup python steps dependencies# RUN npx motia@latest install# Expose outside access to the motia projectEXPOSE3000# Run your applicationCMD[\"npm\",\"run\",\"start\"]\nDepending on the cloud provider you will use to deploy your Motia project, you will need to adjust the exposed ports\nand the command to start your application.\nCreate a .dockerignore file\nCreate"
}
================================================================================
{
    "source_page": "Self-Hosted Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/self-hosted#using-the-docker-image =====",
    "chunk_topic": "Self-Hosted Deployment",
    "chunk_id": "Self-Hosted Deployment (Part 2)",
    "text": " your applicationCMD[\"npm\",\"run\",\"start\"]\nDepending on the cloud provider you will use to deploy your Motia project, you will need to adjust the exposed ports\nand the command to start your application.\nCreate a .dockerignore file\nCreate a .dockerignore file in the root of your project to exclude files that are not needed in the docker image. You can use the following template as a starting point for your .dockerignore file:\n# Git.git.gitignore# Python__pycache__/*.py[cod]*$py.class*.so.Pythonenv/venv/ENV/# Nodenode_modules/npm-debug.logyarn-debug.logyarn-error.log# IDE.vscode/.idea/*.swp*.swo# Local development.env# OS generated files.DS_Store.DS_Store?._*.Spotlight-V100.Trashesehthumbs.dbThumbs.db\n# Git.git.gitignore# Python__pycache__/*.py[cod]*$py.class*.so.Pythonenv/venv/ENV/# Nodenode_modules/npm-debug.logyarn-debug.logyarn-error.log# IDE.vscode/.idea/*.swp*.swo# Local development.env# OS generated files.DS_Store.DS_Store?._*.Spotlight-V100.Trashesehthumbs.dbThumbs.db\nBuild your image\ndockerbuild-t<your-image-name>.\ndockerbuild-t<your-image-name>.\nRun your Motia application\nOnce you've built your image, you can run it using the following command:\ndockerrun-it--rm-p3000:3000<your-image-name>\ndockerrun-it--rm-p3000:3000<your-image-name>\nMotia Docker Resources\nDocker Registry\nGithub Repo\nExample Motia project with deployment boilerplate for AWS LightSail and Railway\nGetting Started\nLearn how to deploy your Motia project to production\nFeatures\nLearn how to deploy your Motia Project to a live environment\nOn this page"
}
================================================================================
{
    "source_page": "Self-Hosted Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/self-hosted#create-a-dockerignore-file =====",
    "chunk_topic": "Self-Hosted Deployment",
    "chunk_id": "Self-Hosted Deployment (Part 1)",
    "text": "Self-Hosted Deployment\nLearn how to deploy your Motia project to production using motia-docker\nWe provide a docker image that you can use to deploy your Motia project to production. You can use it as a base image and add your own customizations or use it as is.\nQuick setup\nnpxmotia@latestdockersetup\nnpxmotia@latestdockersetup\nnpxmotia@latestdockerrun\nnpxmotia@latestdockerrun\nnpxmotia@latestdockerrun--help\nnpxmotia@latestdockerrun--help\nReference theCLIfor more information on the docker commands.\nUsing the docker image\nYou will need to implement your own Dockerfile where you will use the motia-docker image as a base image. Use the following template as a starting point for your Dockerfile:\n# NOTE: Some cloud providers will require you to specify the platform to match your target architecture# i.e.: AWS Lightsail requires arm64, therefore you update your FROM statement to: FROM --platform=linux/arm64 motiadev/motia:latestFROMmotiadev/motia:latest# Install DependenciesCOPYpackage*.json ./RUNnpm ci --only=production# Move application filesCOPY. .# Enable the following lines if you are using python steps!!!# Setup python steps dependencies# RUN npx motia@latest install# Expose outside access to the motia projectEXPOSE3000# Run your applicationCMD[\"npm\",\"run\",\"start\"]\n# NOTE: Some cloud providers will require you to specify the platform to match your target architecture# i.e.: AWS Lightsail requires arm64, therefore you update your FROM statement to: FROM --platform=linux/arm64 motiadev/motia:latestFROMmotiadev/motia:latest# Install DependenciesCOPYpackage*.json ./RUNnpm ci --only=production# Move application filesCOPY. .# Enable the following lines if you are using python steps!!!# Setup python steps dependencies# RUN npx motia@latest install# Expose outside access to the motia projectEXPOSE3000# Run your applicationCMD[\"npm\",\"run\",\"start\"]\nDepending on the cloud provider you will use to deploy your Motia project, you will need to adjust the exposed ports\nand the command to start your application.\nCreate a .dockerignore file\nCreate"
}
================================================================================
{
    "source_page": "Self-Hosted Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/self-hosted#create-a-dockerignore-file =====",
    "chunk_topic": "Self-Hosted Deployment",
    "chunk_id": "Self-Hosted Deployment (Part 2)",
    "text": " your applicationCMD[\"npm\",\"run\",\"start\"]\nDepending on the cloud provider you will use to deploy your Motia project, you will need to adjust the exposed ports\nand the command to start your application.\nCreate a .dockerignore file\nCreate a .dockerignore file in the root of your project to exclude files that are not needed in the docker image. You can use the following template as a starting point for your .dockerignore file:\n# Git.git.gitignore# Python__pycache__/*.py[cod]*$py.class*.so.Pythonenv/venv/ENV/# Nodenode_modules/npm-debug.logyarn-debug.logyarn-error.log# IDE.vscode/.idea/*.swp*.swo# Local development.env# OS generated files.DS_Store.DS_Store?._*.Spotlight-V100.Trashesehthumbs.dbThumbs.db\n# Git.git.gitignore# Python__pycache__/*.py[cod]*$py.class*.so.Pythonenv/venv/ENV/# Nodenode_modules/npm-debug.logyarn-debug.logyarn-error.log# IDE.vscode/.idea/*.swp*.swo# Local development.env# OS generated files.DS_Store.DS_Store?._*.Spotlight-V100.Trashesehthumbs.dbThumbs.db\nBuild your image\ndockerbuild-t<your-image-name>.\ndockerbuild-t<your-image-name>.\nRun your Motia application\nOnce you've built your image, you can run it using the following command:\ndockerrun-it--rm-p3000:3000<your-image-name>\ndockerrun-it--rm-p3000:3000<your-image-name>\nMotia Docker Resources\nDocker Registry\nGithub Repo\nExample Motia project with deployment boilerplate for AWS LightSail and Railway\nGetting Started\nLearn how to deploy your Motia project to production\nFeatures\nLearn how to deploy your Motia Project to a live environment\nOn this page"
}
================================================================================
{
    "source_page": "Self-Hosted Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/self-hosted#build-your-image =====",
    "chunk_topic": "Self-Hosted Deployment",
    "chunk_id": "Self-Hosted Deployment (Part 1)",
    "text": "Self-Hosted Deployment\nLearn how to deploy your Motia project to production using motia-docker\nWe provide a docker image that you can use to deploy your Motia project to production. You can use it as a base image and add your own customizations or use it as is.\nQuick setup\nnpxmotia@latestdockersetup\nnpxmotia@latestdockersetup\nnpxmotia@latestdockerrun\nnpxmotia@latestdockerrun\nnpxmotia@latestdockerrun--help\nnpxmotia@latestdockerrun--help\nReference theCLIfor more information on the docker commands.\nUsing the docker image\nYou will need to implement your own Dockerfile where you will use the motia-docker image as a base image. Use the following template as a starting point for your Dockerfile:\n# NOTE: Some cloud providers will require you to specify the platform to match your target architecture# i.e.: AWS Lightsail requires arm64, therefore you update your FROM statement to: FROM --platform=linux/arm64 motiadev/motia:latestFROMmotiadev/motia:latest# Install DependenciesCOPYpackage*.json ./RUNnpm ci --only=production# Move application filesCOPY. .# Enable the following lines if you are using python steps!!!# Setup python steps dependencies# RUN npx motia@latest install# Expose outside access to the motia projectEXPOSE3000# Run your applicationCMD[\"npm\",\"run\",\"start\"]\n# NOTE: Some cloud providers will require you to specify the platform to match your target architecture# i.e.: AWS Lightsail requires arm64, therefore you update your FROM statement to: FROM --platform=linux/arm64 motiadev/motia:latestFROMmotiadev/motia:latest# Install DependenciesCOPYpackage*.json ./RUNnpm ci --only=production# Move application filesCOPY. .# Enable the following lines if you are using python steps!!!# Setup python steps dependencies# RUN npx motia@latest install# Expose outside access to the motia projectEXPOSE3000# Run your applicationCMD[\"npm\",\"run\",\"start\"]\nDepending on the cloud provider you will use to deploy your Motia project, you will need to adjust the exposed ports\nand the command to start your application.\nCreate a .dockerignore file\nCreate"
}
================================================================================
{
    "source_page": "Self-Hosted Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/self-hosted#build-your-image =====",
    "chunk_topic": "Self-Hosted Deployment",
    "chunk_id": "Self-Hosted Deployment (Part 2)",
    "text": " your applicationCMD[\"npm\",\"run\",\"start\"]\nDepending on the cloud provider you will use to deploy your Motia project, you will need to adjust the exposed ports\nand the command to start your application.\nCreate a .dockerignore file\nCreate a .dockerignore file in the root of your project to exclude files that are not needed in the docker image. You can use the following template as a starting point for your .dockerignore file:\n# Git.git.gitignore# Python__pycache__/*.py[cod]*$py.class*.so.Pythonenv/venv/ENV/# Nodenode_modules/npm-debug.logyarn-debug.logyarn-error.log# IDE.vscode/.idea/*.swp*.swo# Local development.env# OS generated files.DS_Store.DS_Store?._*.Spotlight-V100.Trashesehthumbs.dbThumbs.db\n# Git.git.gitignore# Python__pycache__/*.py[cod]*$py.class*.so.Pythonenv/venv/ENV/# Nodenode_modules/npm-debug.logyarn-debug.logyarn-error.log# IDE.vscode/.idea/*.swp*.swo# Local development.env# OS generated files.DS_Store.DS_Store?._*.Spotlight-V100.Trashesehthumbs.dbThumbs.db\nBuild your image\ndockerbuild-t<your-image-name>.\ndockerbuild-t<your-image-name>.\nRun your Motia application\nOnce you've built your image, you can run it using the following command:\ndockerrun-it--rm-p3000:3000<your-image-name>\ndockerrun-it--rm-p3000:3000<your-image-name>\nMotia Docker Resources\nDocker Registry\nGithub Repo\nExample Motia project with deployment boilerplate for AWS LightSail and Railway\nGetting Started\nLearn how to deploy your Motia project to production\nFeatures\nLearn how to deploy your Motia Project to a live environment\nOn this page"
}
================================================================================
{
    "source_page": "Self-Hosted Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/self-hosted#run-your-motia-application =====",
    "chunk_topic": "Self-Hosted Deployment",
    "chunk_id": "Self-Hosted Deployment (Part 1)",
    "text": "Self-Hosted Deployment\nLearn how to deploy your Motia project to production using motia-docker\nWe provide a docker image that you can use to deploy your Motia project to production. You can use it as a base image and add your own customizations or use it as is.\nQuick setup\nnpxmotia@latestdockersetup\nnpxmotia@latestdockersetup\nnpxmotia@latestdockerrun\nnpxmotia@latestdockerrun\nnpxmotia@latestdockerrun--help\nnpxmotia@latestdockerrun--help\nReference theCLIfor more information on the docker commands.\nUsing the docker image\nYou will need to implement your own Dockerfile where you will use the motia-docker image as a base image. Use the following template as a starting point for your Dockerfile:\n# NOTE: Some cloud providers will require you to specify the platform to match your target architecture# i.e.: AWS Lightsail requires arm64, therefore you update your FROM statement to: FROM --platform=linux/arm64 motiadev/motia:latestFROMmotiadev/motia:latest# Install DependenciesCOPYpackage*.json ./RUNnpm ci --only=production# Move application filesCOPY. .# Enable the following lines if you are using python steps!!!# Setup python steps dependencies# RUN npx motia@latest install# Expose outside access to the motia projectEXPOSE3000# Run your applicationCMD[\"npm\",\"run\",\"start\"]\n# NOTE: Some cloud providers will require you to specify the platform to match your target architecture# i.e.: AWS Lightsail requires arm64, therefore you update your FROM statement to: FROM --platform=linux/arm64 motiadev/motia:latestFROMmotiadev/motia:latest# Install DependenciesCOPYpackage*.json ./RUNnpm ci --only=production# Move application filesCOPY. .# Enable the following lines if you are using python steps!!!# Setup python steps dependencies# RUN npx motia@latest install# Expose outside access to the motia projectEXPOSE3000# Run your applicationCMD[\"npm\",\"run\",\"start\"]\nDepending on the cloud provider you will use to deploy your Motia project, you will need to adjust the exposed ports\nand the command to start your application.\nCreate a .dockerignore file\nCreate"
}
================================================================================
{
    "source_page": "Self-Hosted Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/self-hosted#run-your-motia-application =====",
    "chunk_topic": "Self-Hosted Deployment",
    "chunk_id": "Self-Hosted Deployment (Part 2)",
    "text": " your applicationCMD[\"npm\",\"run\",\"start\"]\nDepending on the cloud provider you will use to deploy your Motia project, you will need to adjust the exposed ports\nand the command to start your application.\nCreate a .dockerignore file\nCreate a .dockerignore file in the root of your project to exclude files that are not needed in the docker image. You can use the following template as a starting point for your .dockerignore file:\n# Git.git.gitignore# Python__pycache__/*.py[cod]*$py.class*.so.Pythonenv/venv/ENV/# Nodenode_modules/npm-debug.logyarn-debug.logyarn-error.log# IDE.vscode/.idea/*.swp*.swo# Local development.env# OS generated files.DS_Store.DS_Store?._*.Spotlight-V100.Trashesehthumbs.dbThumbs.db\n# Git.git.gitignore# Python__pycache__/*.py[cod]*$py.class*.so.Pythonenv/venv/ENV/# Nodenode_modules/npm-debug.logyarn-debug.logyarn-error.log# IDE.vscode/.idea/*.swp*.swo# Local development.env# OS generated files.DS_Store.DS_Store?._*.Spotlight-V100.Trashesehthumbs.dbThumbs.db\nBuild your image\ndockerbuild-t<your-image-name>.\ndockerbuild-t<your-image-name>.\nRun your Motia application\nOnce you've built your image, you can run it using the following command:\ndockerrun-it--rm-p3000:3000<your-image-name>\ndockerrun-it--rm-p3000:3000<your-image-name>\nMotia Docker Resources\nDocker Registry\nGithub Repo\nExample Motia project with deployment boilerplate for AWS LightSail and Railway\nGetting Started\nLearn how to deploy your Motia project to production\nFeatures\nLearn how to deploy your Motia Project to a live environment\nOn this page"
}
================================================================================
{
    "source_page": "Self-Hosted Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/self-hosted#motia-docker-resources =====",
    "chunk_topic": "Self-Hosted Deployment",
    "chunk_id": "Self-Hosted Deployment (Part 1)",
    "text": "Self-Hosted Deployment\nLearn how to deploy your Motia project to production using motia-docker\nWe provide a docker image that you can use to deploy your Motia project to production. You can use it as a base image and add your own customizations or use it as is.\nQuick setup\nnpxmotia@latestdockersetup\nnpxmotia@latestdockersetup\nnpxmotia@latestdockerrun\nnpxmotia@latestdockerrun\nnpxmotia@latestdockerrun--help\nnpxmotia@latestdockerrun--help\nReference theCLIfor more information on the docker commands.\nUsing the docker image\nYou will need to implement your own Dockerfile where you will use the motia-docker image as a base image. Use the following template as a starting point for your Dockerfile:\n# NOTE: Some cloud providers will require you to specify the platform to match your target architecture# i.e.: AWS Lightsail requires arm64, therefore you update your FROM statement to: FROM --platform=linux/arm64 motiadev/motia:latestFROMmotiadev/motia:latest# Install DependenciesCOPYpackage*.json ./RUNnpm ci --only=production# Move application filesCOPY. .# Enable the following lines if you are using python steps!!!# Setup python steps dependencies# RUN npx motia@latest install# Expose outside access to the motia projectEXPOSE3000# Run your applicationCMD[\"npm\",\"run\",\"start\"]\n# NOTE: Some cloud providers will require you to specify the platform to match your target architecture# i.e.: AWS Lightsail requires arm64, therefore you update your FROM statement to: FROM --platform=linux/arm64 motiadev/motia:latestFROMmotiadev/motia:latest# Install DependenciesCOPYpackage*.json ./RUNnpm ci --only=production# Move application filesCOPY. .# Enable the following lines if you are using python steps!!!# Setup python steps dependencies# RUN npx motia@latest install# Expose outside access to the motia projectEXPOSE3000# Run your applicationCMD[\"npm\",\"run\",\"start\"]\nDepending on the cloud provider you will use to deploy your Motia project, you will need to adjust the exposed ports\nand the command to start your application.\nCreate a .dockerignore file\nCreate"
}
================================================================================
{
    "source_page": "Self-Hosted Deployment",
    "source_url": "https://www.motia.dev/docs/deployment-guide/self-hosted#motia-docker-resources =====",
    "chunk_topic": "Self-Hosted Deployment",
    "chunk_id": "Self-Hosted Deployment (Part 2)",
    "text": " your applicationCMD[\"npm\",\"run\",\"start\"]\nDepending on the cloud provider you will use to deploy your Motia project, you will need to adjust the exposed ports\nand the command to start your application.\nCreate a .dockerignore file\nCreate a .dockerignore file in the root of your project to exclude files that are not needed in the docker image. You can use the following template as a starting point for your .dockerignore file:\n# Git.git.gitignore# Python__pycache__/*.py[cod]*$py.class*.so.Pythonenv/venv/ENV/# Nodenode_modules/npm-debug.logyarn-debug.logyarn-error.log# IDE.vscode/.idea/*.swp*.swo# Local development.env# OS generated files.DS_Store.DS_Store?._*.Spotlight-V100.Trashesehthumbs.dbThumbs.db\n# Git.git.gitignore# Python__pycache__/*.py[cod]*$py.class*.so.Pythonenv/venv/ENV/# Nodenode_modules/npm-debug.logyarn-debug.logyarn-error.log# IDE.vscode/.idea/*.swp*.swo# Local development.env# OS generated files.DS_Store.DS_Store?._*.Spotlight-V100.Trashesehthumbs.dbThumbs.db\nBuild your image\ndockerbuild-t<your-image-name>.\ndockerbuild-t<your-image-name>.\nRun your Motia application\nOnce you've built your image, you can run it using the following command:\ndockerrun-it--rm-p3000:3000<your-image-name>\ndockerrun-it--rm-p3000:3000<your-image-name>\nMotia Docker Resources\nDocker Registry\nGithub Repo\nExample Motia project with deployment boilerplate for AWS LightSail and Railway\nGetting Started\nLearn how to deploy your Motia project to production\nFeatures\nLearn how to deploy your Motia Project to a live environment\nOn this page"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#environment-variables =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 1)",
    "text": "Environment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nEnvironment Variables\nEnvironment variables let you store API keys, database URLs, and other configuration outside your code. This keeps sensitive information secure and makes it easy to use different settings for development and production.\nQuick Setup\n1. Create a.envFile\n.env\nCreate a.envfile in your project root:\n.env\n# API KeysOPENAI_API_KEY=sk-your-api-key-hereDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook# DatabaseDATABASE_URL=postgresql://user:password@localhost:5432/myapp# App SettingsNODE_ENV=developmentPORT=3000\n# API KeysOPENAI_API_KEY=sk-your-api-key-hereDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook# DatabaseDATABASE_URL=postgresql://user:password@localhost:5432/myapp# App SettingsNODE_ENV=developmentPORT=3000\n2. Add to.gitignore\n.gitignore\nMake sure you never commit your.envfile:\n.env\n.env.env.local\n.env.env.local\n3. Create Template for Your Team\n# Copy this to .env and add your actual valuesOPENAI_API_KEY=your-api-key-hereDATABASE_URL=postgresql://user:password@localhost:5432/myapp\n# Copy this to .env and add your actual valuesOPENAI_API_KEY=your-api-key-hereDATABASE_URL=postgresql://user:password@localhost:5432/myapp\nUsing Environment Variables in Steps\nTypeScript/JavaScript\nexportconstconfig={type:'api',name:'chat-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK_URLif(!apiKey) {return{ status:400, body: { error:'Missing API key'} }}logger.info('Using OpenAI API', { hasKey:!!apiKey })// Your logic here...return{ status:200, body: { message:'Success!'} }}\nexportconstconfig={type:'api',name:'chat-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#environment-variables =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 2)",
    "text": "-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK_URLif(!apiKey) {return{ status:400, body: { error:'Missing API key'} }}logger.info('Using OpenAI API', { hasKey:!!apiKey })// Your logic here...return{ status:200, body: { message:'Success!'} }}\nPython\nimportosconfig={'type':'event','name':'process-data','subscribes': ['data.received']}asyncdefhandler(input_data, ctx):# Use environment variables with os.environapi_key=os.environ.get('OPENAI_API_KEY')database_url=os.environ.get('DATABASE_URL')ifnotapi_key:raiseValueError('Missing OPENAI_API_KEY')ctx.logger.info('Processing with API key', {'has_key':bool(api_key)})# Your logic here...return{'status':'processed'}\nimportosconfig={'type':'event','name':'process-data','subscribes': ['data.received']}asyncdefhandler(input_data, ctx):# Use environment variables with os.environapi_key=os.environ.get('OPENAI_API_KEY')database_url=os.environ.get('DATABASE_URL')ifnotapi_key:raiseValueError('Missing OPENAI_API_KEY')ctx.logger.info('Processing with API key', {'has_key':bool(api_key)})# Your logic here...return{'status':'processed'}\nDeployment\nWhen you deploy your app, set environment variables through your hosting platform:\nMotia Cloud\nmotiaenvsetOPENAI_API_KEY=sk-your-production-keymotiaenvsetNODE_ENV=production\nmotiaenvsetOPENAI_API_KEY=sk-your-production-keymotiaenvsetNODE_ENV=production\nImportant Security Tips\n\ud83d\udd12 Keep Your Keys Safe\nNever commit.envfiles to git\n.env\nUse different API keys for development and production\nDon't share API keys in code or messages\nThat's it! Environment variables are simple - just put them in.envand useprocess.env.VARIABLE_NAMEin your code.\n.env\nprocess.env.VARIABLE_NAME\nTesting\nLearn how to write and run tests for your Motia components\nCommand Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nOn this page\n.env\n.gitignore"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#environment-variables =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 3)",
    "text": " to write and run tests for your Motia components\nCommand Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nOn this page\n.env\n.gitignore"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#quick-setup =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 1)",
    "text": "Environment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nEnvironment Variables\nEnvironment variables let you store API keys, database URLs, and other configuration outside your code. This keeps sensitive information secure and makes it easy to use different settings for development and production.\nQuick Setup\n1. Create a.envFile\n.env\nCreate a.envfile in your project root:\n.env\n# API KeysOPENAI_API_KEY=sk-your-api-key-hereDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook# DatabaseDATABASE_URL=postgresql://user:password@localhost:5432/myapp# App SettingsNODE_ENV=developmentPORT=3000\n# API KeysOPENAI_API_KEY=sk-your-api-key-hereDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook# DatabaseDATABASE_URL=postgresql://user:password@localhost:5432/myapp# App SettingsNODE_ENV=developmentPORT=3000\n2. Add to.gitignore\n.gitignore\nMake sure you never commit your.envfile:\n.env\n.env.env.local\n.env.env.local\n3. Create Template for Your Team\n# Copy this to .env and add your actual valuesOPENAI_API_KEY=your-api-key-hereDATABASE_URL=postgresql://user:password@localhost:5432/myapp\n# Copy this to .env and add your actual valuesOPENAI_API_KEY=your-api-key-hereDATABASE_URL=postgresql://user:password@localhost:5432/myapp\nUsing Environment Variables in Steps\nTypeScript/JavaScript\nexportconstconfig={type:'api',name:'chat-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK_URLif(!apiKey) {return{ status:400, body: { error:'Missing API key'} }}logger.info('Using OpenAI API', { hasKey:!!apiKey })// Your logic here...return{ status:200, body: { message:'Success!'} }}\nexportconstconfig={type:'api',name:'chat-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#quick-setup =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 2)",
    "text": "-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK_URLif(!apiKey) {return{ status:400, body: { error:'Missing API key'} }}logger.info('Using OpenAI API', { hasKey:!!apiKey })// Your logic here...return{ status:200, body: { message:'Success!'} }}\nPython\nimportosconfig={'type':'event','name':'process-data','subscribes': ['data.received']}asyncdefhandler(input_data, ctx):# Use environment variables with os.environapi_key=os.environ.get('OPENAI_API_KEY')database_url=os.environ.get('DATABASE_URL')ifnotapi_key:raiseValueError('Missing OPENAI_API_KEY')ctx.logger.info('Processing with API key', {'has_key':bool(api_key)})# Your logic here...return{'status':'processed'}\nimportosconfig={'type':'event','name':'process-data','subscribes': ['data.received']}asyncdefhandler(input_data, ctx):# Use environment variables with os.environapi_key=os.environ.get('OPENAI_API_KEY')database_url=os.environ.get('DATABASE_URL')ifnotapi_key:raiseValueError('Missing OPENAI_API_KEY')ctx.logger.info('Processing with API key', {'has_key':bool(api_key)})# Your logic here...return{'status':'processed'}\nDeployment\nWhen you deploy your app, set environment variables through your hosting platform:\nMotia Cloud\nmotiaenvsetOPENAI_API_KEY=sk-your-production-keymotiaenvsetNODE_ENV=production\nmotiaenvsetOPENAI_API_KEY=sk-your-production-keymotiaenvsetNODE_ENV=production\nImportant Security Tips\n\ud83d\udd12 Keep Your Keys Safe\nNever commit.envfiles to git\n.env\nUse different API keys for development and production\nDon't share API keys in code or messages\nThat's it! Environment variables are simple - just put them in.envand useprocess.env.VARIABLE_NAMEin your code.\n.env\nprocess.env.VARIABLE_NAME\nTesting\nLearn how to write and run tests for your Motia components\nCommand Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nOn this page\n.env\n.gitignore"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#quick-setup =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 3)",
    "text": " to write and run tests for your Motia components\nCommand Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nOn this page\n.env\n.gitignore"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#1-create-a-env-file =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 1)",
    "text": "Environment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nEnvironment Variables\nEnvironment variables let you store API keys, database URLs, and other configuration outside your code. This keeps sensitive information secure and makes it easy to use different settings for development and production.\nQuick Setup\n1. Create a.envFile\n.env\nCreate a.envfile in your project root:\n.env\n# API KeysOPENAI_API_KEY=sk-your-api-key-hereDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook# DatabaseDATABASE_URL=postgresql://user:password@localhost:5432/myapp# App SettingsNODE_ENV=developmentPORT=3000\n# API KeysOPENAI_API_KEY=sk-your-api-key-hereDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook# DatabaseDATABASE_URL=postgresql://user:password@localhost:5432/myapp# App SettingsNODE_ENV=developmentPORT=3000\n2. Add to.gitignore\n.gitignore\nMake sure you never commit your.envfile:\n.env\n.env.env.local\n.env.env.local\n3. Create Template for Your Team\n# Copy this to .env and add your actual valuesOPENAI_API_KEY=your-api-key-hereDATABASE_URL=postgresql://user:password@localhost:5432/myapp\n# Copy this to .env and add your actual valuesOPENAI_API_KEY=your-api-key-hereDATABASE_URL=postgresql://user:password@localhost:5432/myapp\nUsing Environment Variables in Steps\nTypeScript/JavaScript\nexportconstconfig={type:'api',name:'chat-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK_URLif(!apiKey) {return{ status:400, body: { error:'Missing API key'} }}logger.info('Using OpenAI API', { hasKey:!!apiKey })// Your logic here...return{ status:200, body: { message:'Success!'} }}\nexportconstconfig={type:'api',name:'chat-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#1-create-a-env-file =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 2)",
    "text": "-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK_URLif(!apiKey) {return{ status:400, body: { error:'Missing API key'} }}logger.info('Using OpenAI API', { hasKey:!!apiKey })// Your logic here...return{ status:200, body: { message:'Success!'} }}\nPython\nimportosconfig={'type':'event','name':'process-data','subscribes': ['data.received']}asyncdefhandler(input_data, ctx):# Use environment variables with os.environapi_key=os.environ.get('OPENAI_API_KEY')database_url=os.environ.get('DATABASE_URL')ifnotapi_key:raiseValueError('Missing OPENAI_API_KEY')ctx.logger.info('Processing with API key', {'has_key':bool(api_key)})# Your logic here...return{'status':'processed'}\nimportosconfig={'type':'event','name':'process-data','subscribes': ['data.received']}asyncdefhandler(input_data, ctx):# Use environment variables with os.environapi_key=os.environ.get('OPENAI_API_KEY')database_url=os.environ.get('DATABASE_URL')ifnotapi_key:raiseValueError('Missing OPENAI_API_KEY')ctx.logger.info('Processing with API key', {'has_key':bool(api_key)})# Your logic here...return{'status':'processed'}\nDeployment\nWhen you deploy your app, set environment variables through your hosting platform:\nMotia Cloud\nmotiaenvsetOPENAI_API_KEY=sk-your-production-keymotiaenvsetNODE_ENV=production\nmotiaenvsetOPENAI_API_KEY=sk-your-production-keymotiaenvsetNODE_ENV=production\nImportant Security Tips\n\ud83d\udd12 Keep Your Keys Safe\nNever commit.envfiles to git\n.env\nUse different API keys for development and production\nDon't share API keys in code or messages\nThat's it! Environment variables are simple - just put them in.envand useprocess.env.VARIABLE_NAMEin your code.\n.env\nprocess.env.VARIABLE_NAME\nTesting\nLearn how to write and run tests for your Motia components\nCommand Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nOn this page\n.env\n.gitignore"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#1-create-a-env-file =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 3)",
    "text": " to write and run tests for your Motia components\nCommand Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nOn this page\n.env\n.gitignore"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#2-add-to-gitignore =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 1)",
    "text": "Environment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nEnvironment Variables\nEnvironment variables let you store API keys, database URLs, and other configuration outside your code. This keeps sensitive information secure and makes it easy to use different settings for development and production.\nQuick Setup\n1. Create a.envFile\n.env\nCreate a.envfile in your project root:\n.env\n# API KeysOPENAI_API_KEY=sk-your-api-key-hereDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook# DatabaseDATABASE_URL=postgresql://user:password@localhost:5432/myapp# App SettingsNODE_ENV=developmentPORT=3000\n# API KeysOPENAI_API_KEY=sk-your-api-key-hereDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook# DatabaseDATABASE_URL=postgresql://user:password@localhost:5432/myapp# App SettingsNODE_ENV=developmentPORT=3000\n2. Add to.gitignore\n.gitignore\nMake sure you never commit your.envfile:\n.env\n.env.env.local\n.env.env.local\n3. Create Template for Your Team\n# Copy this to .env and add your actual valuesOPENAI_API_KEY=your-api-key-hereDATABASE_URL=postgresql://user:password@localhost:5432/myapp\n# Copy this to .env and add your actual valuesOPENAI_API_KEY=your-api-key-hereDATABASE_URL=postgresql://user:password@localhost:5432/myapp\nUsing Environment Variables in Steps\nTypeScript/JavaScript\nexportconstconfig={type:'api',name:'chat-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK_URLif(!apiKey) {return{ status:400, body: { error:'Missing API key'} }}logger.info('Using OpenAI API', { hasKey:!!apiKey })// Your logic here...return{ status:200, body: { message:'Success!'} }}\nexportconstconfig={type:'api',name:'chat-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#2-add-to-gitignore =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 2)",
    "text": "-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK_URLif(!apiKey) {return{ status:400, body: { error:'Missing API key'} }}logger.info('Using OpenAI API', { hasKey:!!apiKey })// Your logic here...return{ status:200, body: { message:'Success!'} }}\nPython\nimportosconfig={'type':'event','name':'process-data','subscribes': ['data.received']}asyncdefhandler(input_data, ctx):# Use environment variables with os.environapi_key=os.environ.get('OPENAI_API_KEY')database_url=os.environ.get('DATABASE_URL')ifnotapi_key:raiseValueError('Missing OPENAI_API_KEY')ctx.logger.info('Processing with API key', {'has_key':bool(api_key)})# Your logic here...return{'status':'processed'}\nimportosconfig={'type':'event','name':'process-data','subscribes': ['data.received']}asyncdefhandler(input_data, ctx):# Use environment variables with os.environapi_key=os.environ.get('OPENAI_API_KEY')database_url=os.environ.get('DATABASE_URL')ifnotapi_key:raiseValueError('Missing OPENAI_API_KEY')ctx.logger.info('Processing with API key', {'has_key':bool(api_key)})# Your logic here...return{'status':'processed'}\nDeployment\nWhen you deploy your app, set environment variables through your hosting platform:\nMotia Cloud\nmotiaenvsetOPENAI_API_KEY=sk-your-production-keymotiaenvsetNODE_ENV=production\nmotiaenvsetOPENAI_API_KEY=sk-your-production-keymotiaenvsetNODE_ENV=production\nImportant Security Tips\n\ud83d\udd12 Keep Your Keys Safe\nNever commit.envfiles to git\n.env\nUse different API keys for development and production\nDon't share API keys in code or messages\nThat's it! Environment variables are simple - just put them in.envand useprocess.env.VARIABLE_NAMEin your code.\n.env\nprocess.env.VARIABLE_NAME\nTesting\nLearn how to write and run tests for your Motia components\nCommand Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nOn this page\n.env\n.gitignore"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#2-add-to-gitignore =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 3)",
    "text": " to write and run tests for your Motia components\nCommand Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nOn this page\n.env\n.gitignore"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#3-create-template-for-your-team =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 1)",
    "text": "Environment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nEnvironment Variables\nEnvironment variables let you store API keys, database URLs, and other configuration outside your code. This keeps sensitive information secure and makes it easy to use different settings for development and production.\nQuick Setup\n1. Create a.envFile\n.env\nCreate a.envfile in your project root:\n.env\n# API KeysOPENAI_API_KEY=sk-your-api-key-hereDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook# DatabaseDATABASE_URL=postgresql://user:password@localhost:5432/myapp# App SettingsNODE_ENV=developmentPORT=3000\n# API KeysOPENAI_API_KEY=sk-your-api-key-hereDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook# DatabaseDATABASE_URL=postgresql://user:password@localhost:5432/myapp# App SettingsNODE_ENV=developmentPORT=3000\n2. Add to.gitignore\n.gitignore\nMake sure you never commit your.envfile:\n.env\n.env.env.local\n.env.env.local\n3. Create Template for Your Team\n# Copy this to .env and add your actual valuesOPENAI_API_KEY=your-api-key-hereDATABASE_URL=postgresql://user:password@localhost:5432/myapp\n# Copy this to .env and add your actual valuesOPENAI_API_KEY=your-api-key-hereDATABASE_URL=postgresql://user:password@localhost:5432/myapp\nUsing Environment Variables in Steps\nTypeScript/JavaScript\nexportconstconfig={type:'api',name:'chat-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK_URLif(!apiKey) {return{ status:400, body: { error:'Missing API key'} }}logger.info('Using OpenAI API', { hasKey:!!apiKey })// Your logic here...return{ status:200, body: { message:'Success!'} }}\nexportconstconfig={type:'api',name:'chat-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#3-create-template-for-your-team =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 2)",
    "text": "-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK_URLif(!apiKey) {return{ status:400, body: { error:'Missing API key'} }}logger.info('Using OpenAI API', { hasKey:!!apiKey })// Your logic here...return{ status:200, body: { message:'Success!'} }}\nPython\nimportosconfig={'type':'event','name':'process-data','subscribes': ['data.received']}asyncdefhandler(input_data, ctx):# Use environment variables with os.environapi_key=os.environ.get('OPENAI_API_KEY')database_url=os.environ.get('DATABASE_URL')ifnotapi_key:raiseValueError('Missing OPENAI_API_KEY')ctx.logger.info('Processing with API key', {'has_key':bool(api_key)})# Your logic here...return{'status':'processed'}\nimportosconfig={'type':'event','name':'process-data','subscribes': ['data.received']}asyncdefhandler(input_data, ctx):# Use environment variables with os.environapi_key=os.environ.get('OPENAI_API_KEY')database_url=os.environ.get('DATABASE_URL')ifnotapi_key:raiseValueError('Missing OPENAI_API_KEY')ctx.logger.info('Processing with API key', {'has_key':bool(api_key)})# Your logic here...return{'status':'processed'}\nDeployment\nWhen you deploy your app, set environment variables through your hosting platform:\nMotia Cloud\nmotiaenvsetOPENAI_API_KEY=sk-your-production-keymotiaenvsetNODE_ENV=production\nmotiaenvsetOPENAI_API_KEY=sk-your-production-keymotiaenvsetNODE_ENV=production\nImportant Security Tips\n\ud83d\udd12 Keep Your Keys Safe\nNever commit.envfiles to git\n.env\nUse different API keys for development and production\nDon't share API keys in code or messages\nThat's it! Environment variables are simple - just put them in.envand useprocess.env.VARIABLE_NAMEin your code.\n.env\nprocess.env.VARIABLE_NAME\nTesting\nLearn how to write and run tests for your Motia components\nCommand Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nOn this page\n.env\n.gitignore"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#3-create-template-for-your-team =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 3)",
    "text": " to write and run tests for your Motia components\nCommand Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nOn this page\n.env\n.gitignore"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#using-environment-variables-in-steps =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 1)",
    "text": "Environment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nEnvironment Variables\nEnvironment variables let you store API keys, database URLs, and other configuration outside your code. This keeps sensitive information secure and makes it easy to use different settings for development and production.\nQuick Setup\n1. Create a.envFile\n.env\nCreate a.envfile in your project root:\n.env\n# API KeysOPENAI_API_KEY=sk-your-api-key-hereDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook# DatabaseDATABASE_URL=postgresql://user:password@localhost:5432/myapp# App SettingsNODE_ENV=developmentPORT=3000\n# API KeysOPENAI_API_KEY=sk-your-api-key-hereDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook# DatabaseDATABASE_URL=postgresql://user:password@localhost:5432/myapp# App SettingsNODE_ENV=developmentPORT=3000\n2. Add to.gitignore\n.gitignore\nMake sure you never commit your.envfile:\n.env\n.env.env.local\n.env.env.local\n3. Create Template for Your Team\n# Copy this to .env and add your actual valuesOPENAI_API_KEY=your-api-key-hereDATABASE_URL=postgresql://user:password@localhost:5432/myapp\n# Copy this to .env and add your actual valuesOPENAI_API_KEY=your-api-key-hereDATABASE_URL=postgresql://user:password@localhost:5432/myapp\nUsing Environment Variables in Steps\nTypeScript/JavaScript\nexportconstconfig={type:'api',name:'chat-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK_URLif(!apiKey) {return{ status:400, body: { error:'Missing API key'} }}logger.info('Using OpenAI API', { hasKey:!!apiKey })// Your logic here...return{ status:200, body: { message:'Success!'} }}\nexportconstconfig={type:'api',name:'chat-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#using-environment-variables-in-steps =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 2)",
    "text": "-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK_URLif(!apiKey) {return{ status:400, body: { error:'Missing API key'} }}logger.info('Using OpenAI API', { hasKey:!!apiKey })// Your logic here...return{ status:200, body: { message:'Success!'} }}\nPython\nimportosconfig={'type':'event','name':'process-data','subscribes': ['data.received']}asyncdefhandler(input_data, ctx):# Use environment variables with os.environapi_key=os.environ.get('OPENAI_API_KEY')database_url=os.environ.get('DATABASE_URL')ifnotapi_key:raiseValueError('Missing OPENAI_API_KEY')ctx.logger.info('Processing with API key', {'has_key':bool(api_key)})# Your logic here...return{'status':'processed'}\nimportosconfig={'type':'event','name':'process-data','subscribes': ['data.received']}asyncdefhandler(input_data, ctx):# Use environment variables with os.environapi_key=os.environ.get('OPENAI_API_KEY')database_url=os.environ.get('DATABASE_URL')ifnotapi_key:raiseValueError('Missing OPENAI_API_KEY')ctx.logger.info('Processing with API key', {'has_key':bool(api_key)})# Your logic here...return{'status':'processed'}\nDeployment\nWhen you deploy your app, set environment variables through your hosting platform:\nMotia Cloud\nmotiaenvsetOPENAI_API_KEY=sk-your-production-keymotiaenvsetNODE_ENV=production\nmotiaenvsetOPENAI_API_KEY=sk-your-production-keymotiaenvsetNODE_ENV=production\nImportant Security Tips\n\ud83d\udd12 Keep Your Keys Safe\nNever commit.envfiles to git\n.env\nUse different API keys for development and production\nDon't share API keys in code or messages\nThat's it! Environment variables are simple - just put them in.envand useprocess.env.VARIABLE_NAMEin your code.\n.env\nprocess.env.VARIABLE_NAME\nTesting\nLearn how to write and run tests for your Motia components\nCommand Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nOn this page\n.env\n.gitignore"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#using-environment-variables-in-steps =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 3)",
    "text": " to write and run tests for your Motia components\nCommand Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nOn this page\n.env\n.gitignore"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#typescriptjavascript =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 1)",
    "text": "Environment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nEnvironment Variables\nEnvironment variables let you store API keys, database URLs, and other configuration outside your code. This keeps sensitive information secure and makes it easy to use different settings for development and production.\nQuick Setup\n1. Create a.envFile\n.env\nCreate a.envfile in your project root:\n.env\n# API KeysOPENAI_API_KEY=sk-your-api-key-hereDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook# DatabaseDATABASE_URL=postgresql://user:password@localhost:5432/myapp# App SettingsNODE_ENV=developmentPORT=3000\n# API KeysOPENAI_API_KEY=sk-your-api-key-hereDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook# DatabaseDATABASE_URL=postgresql://user:password@localhost:5432/myapp# App SettingsNODE_ENV=developmentPORT=3000\n2. Add to.gitignore\n.gitignore\nMake sure you never commit your.envfile:\n.env\n.env.env.local\n.env.env.local\n3. Create Template for Your Team\n# Copy this to .env and add your actual valuesOPENAI_API_KEY=your-api-key-hereDATABASE_URL=postgresql://user:password@localhost:5432/myapp\n# Copy this to .env and add your actual valuesOPENAI_API_KEY=your-api-key-hereDATABASE_URL=postgresql://user:password@localhost:5432/myapp\nUsing Environment Variables in Steps\nTypeScript/JavaScript\nexportconstconfig={type:'api',name:'chat-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK_URLif(!apiKey) {return{ status:400, body: { error:'Missing API key'} }}logger.info('Using OpenAI API', { hasKey:!!apiKey })// Your logic here...return{ status:200, body: { message:'Success!'} }}\nexportconstconfig={type:'api',name:'chat-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#typescriptjavascript =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 2)",
    "text": "-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK_URLif(!apiKey) {return{ status:400, body: { error:'Missing API key'} }}logger.info('Using OpenAI API', { hasKey:!!apiKey })// Your logic here...return{ status:200, body: { message:'Success!'} }}\nPython\nimportosconfig={'type':'event','name':'process-data','subscribes': ['data.received']}asyncdefhandler(input_data, ctx):# Use environment variables with os.environapi_key=os.environ.get('OPENAI_API_KEY')database_url=os.environ.get('DATABASE_URL')ifnotapi_key:raiseValueError('Missing OPENAI_API_KEY')ctx.logger.info('Processing with API key', {'has_key':bool(api_key)})# Your logic here...return{'status':'processed'}\nimportosconfig={'type':'event','name':'process-data','subscribes': ['data.received']}asyncdefhandler(input_data, ctx):# Use environment variables with os.environapi_key=os.environ.get('OPENAI_API_KEY')database_url=os.environ.get('DATABASE_URL')ifnotapi_key:raiseValueError('Missing OPENAI_API_KEY')ctx.logger.info('Processing with API key', {'has_key':bool(api_key)})# Your logic here...return{'status':'processed'}\nDeployment\nWhen you deploy your app, set environment variables through your hosting platform:\nMotia Cloud\nmotiaenvsetOPENAI_API_KEY=sk-your-production-keymotiaenvsetNODE_ENV=production\nmotiaenvsetOPENAI_API_KEY=sk-your-production-keymotiaenvsetNODE_ENV=production\nImportant Security Tips\n\ud83d\udd12 Keep Your Keys Safe\nNever commit.envfiles to git\n.env\nUse different API keys for development and production\nDon't share API keys in code or messages\nThat's it! Environment variables are simple - just put them in.envand useprocess.env.VARIABLE_NAMEin your code.\n.env\nprocess.env.VARIABLE_NAME\nTesting\nLearn how to write and run tests for your Motia components\nCommand Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nOn this page\n.env\n.gitignore"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#typescriptjavascript =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 3)",
    "text": " to write and run tests for your Motia components\nCommand Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nOn this page\n.env\n.gitignore"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#python =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 1)",
    "text": "Environment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nEnvironment Variables\nEnvironment variables let you store API keys, database URLs, and other configuration outside your code. This keeps sensitive information secure and makes it easy to use different settings for development and production.\nQuick Setup\n1. Create a.envFile\n.env\nCreate a.envfile in your project root:\n.env\n# API KeysOPENAI_API_KEY=sk-your-api-key-hereDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook# DatabaseDATABASE_URL=postgresql://user:password@localhost:5432/myapp# App SettingsNODE_ENV=developmentPORT=3000\n# API KeysOPENAI_API_KEY=sk-your-api-key-hereDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook# DatabaseDATABASE_URL=postgresql://user:password@localhost:5432/myapp# App SettingsNODE_ENV=developmentPORT=3000\n2. Add to.gitignore\n.gitignore\nMake sure you never commit your.envfile:\n.env\n.env.env.local\n.env.env.local\n3. Create Template for Your Team\n# Copy this to .env and add your actual valuesOPENAI_API_KEY=your-api-key-hereDATABASE_URL=postgresql://user:password@localhost:5432/myapp\n# Copy this to .env and add your actual valuesOPENAI_API_KEY=your-api-key-hereDATABASE_URL=postgresql://user:password@localhost:5432/myapp\nUsing Environment Variables in Steps\nTypeScript/JavaScript\nexportconstconfig={type:'api',name:'chat-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK_URLif(!apiKey) {return{ status:400, body: { error:'Missing API key'} }}logger.info('Using OpenAI API', { hasKey:!!apiKey })// Your logic here...return{ status:200, body: { message:'Success!'} }}\nexportconstconfig={type:'api',name:'chat-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#python =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 2)",
    "text": "-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK_URLif(!apiKey) {return{ status:400, body: { error:'Missing API key'} }}logger.info('Using OpenAI API', { hasKey:!!apiKey })// Your logic here...return{ status:200, body: { message:'Success!'} }}\nPython\nimportosconfig={'type':'event','name':'process-data','subscribes': ['data.received']}asyncdefhandler(input_data, ctx):# Use environment variables with os.environapi_key=os.environ.get('OPENAI_API_KEY')database_url=os.environ.get('DATABASE_URL')ifnotapi_key:raiseValueError('Missing OPENAI_API_KEY')ctx.logger.info('Processing with API key', {'has_key':bool(api_key)})# Your logic here...return{'status':'processed'}\nimportosconfig={'type':'event','name':'process-data','subscribes': ['data.received']}asyncdefhandler(input_data, ctx):# Use environment variables with os.environapi_key=os.environ.get('OPENAI_API_KEY')database_url=os.environ.get('DATABASE_URL')ifnotapi_key:raiseValueError('Missing OPENAI_API_KEY')ctx.logger.info('Processing with API key', {'has_key':bool(api_key)})# Your logic here...return{'status':'processed'}\nDeployment\nWhen you deploy your app, set environment variables through your hosting platform:\nMotia Cloud\nmotiaenvsetOPENAI_API_KEY=sk-your-production-keymotiaenvsetNODE_ENV=production\nmotiaenvsetOPENAI_API_KEY=sk-your-production-keymotiaenvsetNODE_ENV=production\nImportant Security Tips\n\ud83d\udd12 Keep Your Keys Safe\nNever commit.envfiles to git\n.env\nUse different API keys for development and production\nDon't share API keys in code or messages\nThat's it! Environment variables are simple - just put them in.envand useprocess.env.VARIABLE_NAMEin your code.\n.env\nprocess.env.VARIABLE_NAME\nTesting\nLearn how to write and run tests for your Motia components\nCommand Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nOn this page\n.env\n.gitignore"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#python =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 3)",
    "text": " to write and run tests for your Motia components\nCommand Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nOn this page\n.env\n.gitignore"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#deployment =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 1)",
    "text": "Environment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nEnvironment Variables\nEnvironment variables let you store API keys, database URLs, and other configuration outside your code. This keeps sensitive information secure and makes it easy to use different settings for development and production.\nQuick Setup\n1. Create a.envFile\n.env\nCreate a.envfile in your project root:\n.env\n# API KeysOPENAI_API_KEY=sk-your-api-key-hereDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook# DatabaseDATABASE_URL=postgresql://user:password@localhost:5432/myapp# App SettingsNODE_ENV=developmentPORT=3000\n# API KeysOPENAI_API_KEY=sk-your-api-key-hereDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook# DatabaseDATABASE_URL=postgresql://user:password@localhost:5432/myapp# App SettingsNODE_ENV=developmentPORT=3000\n2. Add to.gitignore\n.gitignore\nMake sure you never commit your.envfile:\n.env\n.env.env.local\n.env.env.local\n3. Create Template for Your Team\n# Copy this to .env and add your actual valuesOPENAI_API_KEY=your-api-key-hereDATABASE_URL=postgresql://user:password@localhost:5432/myapp\n# Copy this to .env and add your actual valuesOPENAI_API_KEY=your-api-key-hereDATABASE_URL=postgresql://user:password@localhost:5432/myapp\nUsing Environment Variables in Steps\nTypeScript/JavaScript\nexportconstconfig={type:'api',name:'chat-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK_URLif(!apiKey) {return{ status:400, body: { error:'Missing API key'} }}logger.info('Using OpenAI API', { hasKey:!!apiKey })// Your logic here...return{ status:200, body: { message:'Success!'} }}\nexportconstconfig={type:'api',name:'chat-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#deployment =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 2)",
    "text": "-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK_URLif(!apiKey) {return{ status:400, body: { error:'Missing API key'} }}logger.info('Using OpenAI API', { hasKey:!!apiKey })// Your logic here...return{ status:200, body: { message:'Success!'} }}\nPython\nimportosconfig={'type':'event','name':'process-data','subscribes': ['data.received']}asyncdefhandler(input_data, ctx):# Use environment variables with os.environapi_key=os.environ.get('OPENAI_API_KEY')database_url=os.environ.get('DATABASE_URL')ifnotapi_key:raiseValueError('Missing OPENAI_API_KEY')ctx.logger.info('Processing with API key', {'has_key':bool(api_key)})# Your logic here...return{'status':'processed'}\nimportosconfig={'type':'event','name':'process-data','subscribes': ['data.received']}asyncdefhandler(input_data, ctx):# Use environment variables with os.environapi_key=os.environ.get('OPENAI_API_KEY')database_url=os.environ.get('DATABASE_URL')ifnotapi_key:raiseValueError('Missing OPENAI_API_KEY')ctx.logger.info('Processing with API key', {'has_key':bool(api_key)})# Your logic here...return{'status':'processed'}\nDeployment\nWhen you deploy your app, set environment variables through your hosting platform:\nMotia Cloud\nmotiaenvsetOPENAI_API_KEY=sk-your-production-keymotiaenvsetNODE_ENV=production\nmotiaenvsetOPENAI_API_KEY=sk-your-production-keymotiaenvsetNODE_ENV=production\nImportant Security Tips\n\ud83d\udd12 Keep Your Keys Safe\nNever commit.envfiles to git\n.env\nUse different API keys for development and production\nDon't share API keys in code or messages\nThat's it! Environment variables are simple - just put them in.envand useprocess.env.VARIABLE_NAMEin your code.\n.env\nprocess.env.VARIABLE_NAME\nTesting\nLearn how to write and run tests for your Motia components\nCommand Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nOn this page\n.env\n.gitignore"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#deployment =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 3)",
    "text": " to write and run tests for your Motia components\nCommand Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nOn this page\n.env\n.gitignore"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#motia-cloud =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 1)",
    "text": "Environment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nEnvironment Variables\nEnvironment variables let you store API keys, database URLs, and other configuration outside your code. This keeps sensitive information secure and makes it easy to use different settings for development and production.\nQuick Setup\n1. Create a.envFile\n.env\nCreate a.envfile in your project root:\n.env\n# API KeysOPENAI_API_KEY=sk-your-api-key-hereDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook# DatabaseDATABASE_URL=postgresql://user:password@localhost:5432/myapp# App SettingsNODE_ENV=developmentPORT=3000\n# API KeysOPENAI_API_KEY=sk-your-api-key-hereDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook# DatabaseDATABASE_URL=postgresql://user:password@localhost:5432/myapp# App SettingsNODE_ENV=developmentPORT=3000\n2. Add to.gitignore\n.gitignore\nMake sure you never commit your.envfile:\n.env\n.env.env.local\n.env.env.local\n3. Create Template for Your Team\n# Copy this to .env and add your actual valuesOPENAI_API_KEY=your-api-key-hereDATABASE_URL=postgresql://user:password@localhost:5432/myapp\n# Copy this to .env and add your actual valuesOPENAI_API_KEY=your-api-key-hereDATABASE_URL=postgresql://user:password@localhost:5432/myapp\nUsing Environment Variables in Steps\nTypeScript/JavaScript\nexportconstconfig={type:'api',name:'chat-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK_URLif(!apiKey) {return{ status:400, body: { error:'Missing API key'} }}logger.info('Using OpenAI API', { hasKey:!!apiKey })// Your logic here...return{ status:200, body: { message:'Success!'} }}\nexportconstconfig={type:'api',name:'chat-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#motia-cloud =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 2)",
    "text": "-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK_URLif(!apiKey) {return{ status:400, body: { error:'Missing API key'} }}logger.info('Using OpenAI API', { hasKey:!!apiKey })// Your logic here...return{ status:200, body: { message:'Success!'} }}\nPython\nimportosconfig={'type':'event','name':'process-data','subscribes': ['data.received']}asyncdefhandler(input_data, ctx):# Use environment variables with os.environapi_key=os.environ.get('OPENAI_API_KEY')database_url=os.environ.get('DATABASE_URL')ifnotapi_key:raiseValueError('Missing OPENAI_API_KEY')ctx.logger.info('Processing with API key', {'has_key':bool(api_key)})# Your logic here...return{'status':'processed'}\nimportosconfig={'type':'event','name':'process-data','subscribes': ['data.received']}asyncdefhandler(input_data, ctx):# Use environment variables with os.environapi_key=os.environ.get('OPENAI_API_KEY')database_url=os.environ.get('DATABASE_URL')ifnotapi_key:raiseValueError('Missing OPENAI_API_KEY')ctx.logger.info('Processing with API key', {'has_key':bool(api_key)})# Your logic here...return{'status':'processed'}\nDeployment\nWhen you deploy your app, set environment variables through your hosting platform:\nMotia Cloud\nmotiaenvsetOPENAI_API_KEY=sk-your-production-keymotiaenvsetNODE_ENV=production\nmotiaenvsetOPENAI_API_KEY=sk-your-production-keymotiaenvsetNODE_ENV=production\nImportant Security Tips\n\ud83d\udd12 Keep Your Keys Safe\nNever commit.envfiles to git\n.env\nUse different API keys for development and production\nDon't share API keys in code or messages\nThat's it! Environment variables are simple - just put them in.envand useprocess.env.VARIABLE_NAMEin your code.\n.env\nprocess.env.VARIABLE_NAME\nTesting\nLearn how to write and run tests for your Motia components\nCommand Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nOn this page\n.env\n.gitignore"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#motia-cloud =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 3)",
    "text": " to write and run tests for your Motia components\nCommand Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nOn this page\n.env\n.gitignore"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#important-security-tips =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 1)",
    "text": "Environment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nEnvironment Variables\nEnvironment variables let you store API keys, database URLs, and other configuration outside your code. This keeps sensitive information secure and makes it easy to use different settings for development and production.\nQuick Setup\n1. Create a.envFile\n.env\nCreate a.envfile in your project root:\n.env\n# API KeysOPENAI_API_KEY=sk-your-api-key-hereDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook# DatabaseDATABASE_URL=postgresql://user:password@localhost:5432/myapp# App SettingsNODE_ENV=developmentPORT=3000\n# API KeysOPENAI_API_KEY=sk-your-api-key-hereDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/your-webhook# DatabaseDATABASE_URL=postgresql://user:password@localhost:5432/myapp# App SettingsNODE_ENV=developmentPORT=3000\n2. Add to.gitignore\n.gitignore\nMake sure you never commit your.envfile:\n.env\n.env.env.local\n.env.env.local\n3. Create Template for Your Team\n# Copy this to .env and add your actual valuesOPENAI_API_KEY=your-api-key-hereDATABASE_URL=postgresql://user:password@localhost:5432/myapp\n# Copy this to .env and add your actual valuesOPENAI_API_KEY=your-api-key-hereDATABASE_URL=postgresql://user:password@localhost:5432/myapp\nUsing Environment Variables in Steps\nTypeScript/JavaScript\nexportconstconfig={type:'api',name:'chat-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK_URLif(!apiKey) {return{ status:400, body: { error:'Missing API key'} }}logger.info('Using OpenAI API', { hasKey:!!apiKey })// Your logic here...return{ status:200, body: { message:'Success!'} }}\nexportconstconfig={type:'api',name:'chat-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#important-security-tips =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 2)",
    "text": "-with-ai',path:'/chat',method:'POST'}exportconsthandler=async(req, {logger})=>{// Use environment variables with process.envconstapiKey=process.env.OPENAI_API_KEYconstwebhookUrl=process.env.DISCORD_WEBHOOK_URLif(!apiKey) {return{ status:400, body: { error:'Missing API key'} }}logger.info('Using OpenAI API', { hasKey:!!apiKey })// Your logic here...return{ status:200, body: { message:'Success!'} }}\nPython\nimportosconfig={'type':'event','name':'process-data','subscribes': ['data.received']}asyncdefhandler(input_data, ctx):# Use environment variables with os.environapi_key=os.environ.get('OPENAI_API_KEY')database_url=os.environ.get('DATABASE_URL')ifnotapi_key:raiseValueError('Missing OPENAI_API_KEY')ctx.logger.info('Processing with API key', {'has_key':bool(api_key)})# Your logic here...return{'status':'processed'}\nimportosconfig={'type':'event','name':'process-data','subscribes': ['data.received']}asyncdefhandler(input_data, ctx):# Use environment variables with os.environapi_key=os.environ.get('OPENAI_API_KEY')database_url=os.environ.get('DATABASE_URL')ifnotapi_key:raiseValueError('Missing OPENAI_API_KEY')ctx.logger.info('Processing with API key', {'has_key':bool(api_key)})# Your logic here...return{'status':'processed'}\nDeployment\nWhen you deploy your app, set environment variables through your hosting platform:\nMotia Cloud\nmotiaenvsetOPENAI_API_KEY=sk-your-production-keymotiaenvsetNODE_ENV=production\nmotiaenvsetOPENAI_API_KEY=sk-your-production-keymotiaenvsetNODE_ENV=production\nImportant Security Tips\n\ud83d\udd12 Keep Your Keys Safe\nNever commit.envfiles to git\n.env\nUse different API keys for development and production\nDon't share API keys in code or messages\nThat's it! Environment variables are simple - just put them in.envand useprocess.env.VARIABLE_NAMEin your code.\n.env\nprocess.env.VARIABLE_NAME\nTesting\nLearn how to write and run tests for your Motia components\nCommand Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nOn this page\n.env\n.gitignore"
}
================================================================================
{
    "source_page": "Environment Variables",
    "source_url": "https://www.motia.dev/docs/development-guide/environment-variables#important-security-tips =====",
    "chunk_topic": "Environment Variables",
    "chunk_id": "Environment Variables (Part 3)",
    "text": " to write and run tests for your Motia components\nCommand Line Interface (CLI)\nLearn how to use the Motia CLI to manage your projects and workflows\nOn this page\n.env\n.gitignore"
}
================================================================================
{
    "source_page": "Testing",
    "source_url": "https://www.motia.dev/docs/development-guide/testing#testing =====",
    "chunk_topic": "Testing",
    "chunk_id": "Testing (Part 1)",
    "text": "Testing\nLearn how to write and run tests for your Motia components\nTesting\nTesting is an essential part of building reliable and maintainable Motia applications. Motia provides built-in support for writing and running tests to ensure the correctness of your steps, flows, and event handling logic.\nWriting Tests for Motia Components\nMotia usesJestas its testing framework. You can write tests for your Motia components using Jest's syntax and assertions.\nStep Tests\nTo test a step, create a test file with the same name as the step file, but with a.test.tsor.test.jsextension. For example, if your step file is namedmy-step.step.ts, create a test file namedmy-step.step.test.ts.\n.test.ts\n.test.js\nmy-step.step.ts\nmy-step.step.test.ts\nHere's an example of a step test:\n// my-step.step.test.tsimport{ createTestContext }from'@motiadev/testing'import{ handler }from'./my-step.step'describe('MyStep', ()=>{it('should emit an event with the correct data',async()=>{const{emit,done}=createTestContext()awaithandler({ name:'John'}, { emit })expect(emit).toHaveBeenCalledWith({type:'my-event',data: { greeting:'Hello, John!'},})done()})})\n// my-step.step.test.tsimport{ createTestContext }from'@motiadev/testing'import{ handler }from'./my-step.step'describe('MyStep', ()=>{it('should emit an event with the correct data',async()=>{const{emit,done}=createTestContext()awaithandler({ name:'John'}, { emit })expect(emit).toHaveBeenCalledWith({type:'my-event',data: { greeting:'Hello, John!'},})done()})})\nIn this example, we use thecreateTestContextfunction from@motiadev/testingto create a test context with mockedemitanddonefunctions. We then call the step'shandlerfunction with test input and the mocked context. Finally, we assert that theemitfunction was called with the expected event type and data.\ncreateTestContext\n@motiadev/testing\nemit\ndone\nhandler\nemit\nFlow Tests\nTo test a flow, create a test file with the flow name and a.test.tsor.test.jsextension. For example, if your flow is namedmy-flow, create a"
}
================================================================================
{
    "source_page": "Testing",
    "source_url": "https://www.motia.dev/docs/development-guide/testing#testing =====",
    "chunk_topic": "Testing",
    "chunk_id": "Testing (Part 2)",
    "text": "/testing\nemit\ndone\nhandler\nemit\nFlow Tests\nTo test a flow, create a test file with the flow name and a.test.tsor.test.jsextension. For example, if your flow is namedmy-flow, create a test file namedmy-flow.test.ts.\n.test.ts\n.test.js\nmy-flow\nmy-flow.test.ts\nHere's an example of a flow test:\n// my-flow.test.tsimport{ createTestFlow }from'@motiadev/testing'import{ handlerasstepAHandler }from'./step-a.step'import{ handlerasstepBHandler }from'./step-b.step'describe('MyFlow', ()=>{it('should execute steps in the correct order',async()=>{constflow=createTestFlow('my-flow').step('step-a', stepAHandler).step('step-b', stepBHandler)constresult=awaitflow.execute({ name:'Alice'})expect(result).toEqual({greeting:'Hello, Alice!',message:'Welcome to Motia!',})})})\n// my-flow.test.tsimport{ createTestFlow }from'@motiadev/testing'import{ handlerasstepAHandler }from'./step-a.step'import{ handlerasstepBHandler }from'./step-b.step'describe('MyFlow', ()=>{it('should execute steps in the correct order',async()=>{constflow=createTestFlow('my-flow').step('step-a', stepAHandler).step('step-b', stepBHandler)constresult=awaitflow.execute({ name:'Alice'})expect(result).toEqual({greeting:'Hello, Alice!',message:'Welcome to Motia!',})})})\nIn this example, we use thecreateTestFlowfunction from@motiadev/testingto create a test flow with the specified steps. We then execute the flow with test input and assert that the final result matches the expected output.\ncreateTestFlow\n@motiadev/testing\nRunning Tests Locally\nTo run tests locally, use the following command:\npnpmtest\npnpmtest\nThis command will run all the test files in your project and display the test results in the terminal.\nYou can also run tests in watch mode, which automatically re-runs the tests whenever you make changes to your code:\npnpmtest--watch\npnpmtest--watch\nBest Practices\nWrite tests for each step and flow to ensure comprehensive coverage.\nUse meaningful test case descriptions to clarify"
}
================================================================================
{
    "source_page": "Testing",
    "source_url": "https://www.motia.dev/docs/development-guide/testing#testing =====",
    "chunk_topic": "Testing",
    "chunk_id": "Testing (Part 3)",
    "text": ", which automatically re-runs the tests whenever you make changes to your code:\npnpmtest--watch\npnpmtest--watch\nBest Practices\nWrite tests for each step and flow to ensure comprehensive coverage.\nUse meaningful test case descriptions to clarify the purpose of each test.\nTest edge cases and error scenarios to ensure your components handle them gracefully.\nKeep your tests focused and independent to make them easier to maintain.\nUse mocks and stubs to isolate dependencies and improve test reliability.\nBy following these best practices and regularly running tests, you can catch bugs early, maintain code quality, and ensure the reliability of your Motia application.\nMiddleware\nRun code before and after your API handlers\nEnvironment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nOn this page"
}
================================================================================
{
    "source_page": "Testing",
    "source_url": "https://www.motia.dev/docs/development-guide/testing#writing-tests-for-motia-components =====",
    "chunk_topic": "Testing",
    "chunk_id": "Testing (Part 1)",
    "text": "Testing\nLearn how to write and run tests for your Motia components\nTesting\nTesting is an essential part of building reliable and maintainable Motia applications. Motia provides built-in support for writing and running tests to ensure the correctness of your steps, flows, and event handling logic.\nWriting Tests for Motia Components\nMotia usesJestas its testing framework. You can write tests for your Motia components using Jest's syntax and assertions.\nStep Tests\nTo test a step, create a test file with the same name as the step file, but with a.test.tsor.test.jsextension. For example, if your step file is namedmy-step.step.ts, create a test file namedmy-step.step.test.ts.\n.test.ts\n.test.js\nmy-step.step.ts\nmy-step.step.test.ts\nHere's an example of a step test:\n// my-step.step.test.tsimport{ createTestContext }from'@motiadev/testing'import{ handler }from'./my-step.step'describe('MyStep', ()=>{it('should emit an event with the correct data',async()=>{const{emit,done}=createTestContext()awaithandler({ name:'John'}, { emit })expect(emit).toHaveBeenCalledWith({type:'my-event',data: { greeting:'Hello, John!'},})done()})})\n// my-step.step.test.tsimport{ createTestContext }from'@motiadev/testing'import{ handler }from'./my-step.step'describe('MyStep', ()=>{it('should emit an event with the correct data',async()=>{const{emit,done}=createTestContext()awaithandler({ name:'John'}, { emit })expect(emit).toHaveBeenCalledWith({type:'my-event',data: { greeting:'Hello, John!'},})done()})})\nIn this example, we use thecreateTestContextfunction from@motiadev/testingto create a test context with mockedemitanddonefunctions. We then call the step'shandlerfunction with test input and the mocked context. Finally, we assert that theemitfunction was called with the expected event type and data.\ncreateTestContext\n@motiadev/testing\nemit\ndone\nhandler\nemit\nFlow Tests\nTo test a flow, create a test file with the flow name and a.test.tsor.test.jsextension. For example, if your flow is namedmy-flow, create a"
}
================================================================================
{
    "source_page": "Testing",
    "source_url": "https://www.motia.dev/docs/development-guide/testing#writing-tests-for-motia-components =====",
    "chunk_topic": "Testing",
    "chunk_id": "Testing (Part 2)",
    "text": "/testing\nemit\ndone\nhandler\nemit\nFlow Tests\nTo test a flow, create a test file with the flow name and a.test.tsor.test.jsextension. For example, if your flow is namedmy-flow, create a test file namedmy-flow.test.ts.\n.test.ts\n.test.js\nmy-flow\nmy-flow.test.ts\nHere's an example of a flow test:\n// my-flow.test.tsimport{ createTestFlow }from'@motiadev/testing'import{ handlerasstepAHandler }from'./step-a.step'import{ handlerasstepBHandler }from'./step-b.step'describe('MyFlow', ()=>{it('should execute steps in the correct order',async()=>{constflow=createTestFlow('my-flow').step('step-a', stepAHandler).step('step-b', stepBHandler)constresult=awaitflow.execute({ name:'Alice'})expect(result).toEqual({greeting:'Hello, Alice!',message:'Welcome to Motia!',})})})\n// my-flow.test.tsimport{ createTestFlow }from'@motiadev/testing'import{ handlerasstepAHandler }from'./step-a.step'import{ handlerasstepBHandler }from'./step-b.step'describe('MyFlow', ()=>{it('should execute steps in the correct order',async()=>{constflow=createTestFlow('my-flow').step('step-a', stepAHandler).step('step-b', stepBHandler)constresult=awaitflow.execute({ name:'Alice'})expect(result).toEqual({greeting:'Hello, Alice!',message:'Welcome to Motia!',})})})\nIn this example, we use thecreateTestFlowfunction from@motiadev/testingto create a test flow with the specified steps. We then execute the flow with test input and assert that the final result matches the expected output.\ncreateTestFlow\n@motiadev/testing\nRunning Tests Locally\nTo run tests locally, use the following command:\npnpmtest\npnpmtest\nThis command will run all the test files in your project and display the test results in the terminal.\nYou can also run tests in watch mode, which automatically re-runs the tests whenever you make changes to your code:\npnpmtest--watch\npnpmtest--watch\nBest Practices\nWrite tests for each step and flow to ensure comprehensive coverage.\nUse meaningful test case descriptions to clarify"
}
================================================================================
{
    "source_page": "Testing",
    "source_url": "https://www.motia.dev/docs/development-guide/testing#writing-tests-for-motia-components =====",
    "chunk_topic": "Testing",
    "chunk_id": "Testing (Part 3)",
    "text": ", which automatically re-runs the tests whenever you make changes to your code:\npnpmtest--watch\npnpmtest--watch\nBest Practices\nWrite tests for each step and flow to ensure comprehensive coverage.\nUse meaningful test case descriptions to clarify the purpose of each test.\nTest edge cases and error scenarios to ensure your components handle them gracefully.\nKeep your tests focused and independent to make them easier to maintain.\nUse mocks and stubs to isolate dependencies and improve test reliability.\nBy following these best practices and regularly running tests, you can catch bugs early, maintain code quality, and ensure the reliability of your Motia application.\nMiddleware\nRun code before and after your API handlers\nEnvironment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nOn this page"
}
================================================================================
{
    "source_page": "Testing",
    "source_url": "https://www.motia.dev/docs/development-guide/testing#step-tests =====",
    "chunk_topic": "Testing",
    "chunk_id": "Testing (Part 1)",
    "text": "Testing\nLearn how to write and run tests for your Motia components\nTesting\nTesting is an essential part of building reliable and maintainable Motia applications. Motia provides built-in support for writing and running tests to ensure the correctness of your steps, flows, and event handling logic.\nWriting Tests for Motia Components\nMotia usesJestas its testing framework. You can write tests for your Motia components using Jest's syntax and assertions.\nStep Tests\nTo test a step, create a test file with the same name as the step file, but with a.test.tsor.test.jsextension. For example, if your step file is namedmy-step.step.ts, create a test file namedmy-step.step.test.ts.\n.test.ts\n.test.js\nmy-step.step.ts\nmy-step.step.test.ts\nHere's an example of a step test:\n// my-step.step.test.tsimport{ createTestContext }from'@motiadev/testing'import{ handler }from'./my-step.step'describe('MyStep', ()=>{it('should emit an event with the correct data',async()=>{const{emit,done}=createTestContext()awaithandler({ name:'John'}, { emit })expect(emit).toHaveBeenCalledWith({type:'my-event',data: { greeting:'Hello, John!'},})done()})})\n// my-step.step.test.tsimport{ createTestContext }from'@motiadev/testing'import{ handler }from'./my-step.step'describe('MyStep', ()=>{it('should emit an event with the correct data',async()=>{const{emit,done}=createTestContext()awaithandler({ name:'John'}, { emit })expect(emit).toHaveBeenCalledWith({type:'my-event',data: { greeting:'Hello, John!'},})done()})})\nIn this example, we use thecreateTestContextfunction from@motiadev/testingto create a test context with mockedemitanddonefunctions. We then call the step'shandlerfunction with test input and the mocked context. Finally, we assert that theemitfunction was called with the expected event type and data.\ncreateTestContext\n@motiadev/testing\nemit\ndone\nhandler\nemit\nFlow Tests\nTo test a flow, create a test file with the flow name and a.test.tsor.test.jsextension. For example, if your flow is namedmy-flow, create a"
}
================================================================================
{
    "source_page": "Testing",
    "source_url": "https://www.motia.dev/docs/development-guide/testing#step-tests =====",
    "chunk_topic": "Testing",
    "chunk_id": "Testing (Part 2)",
    "text": "/testing\nemit\ndone\nhandler\nemit\nFlow Tests\nTo test a flow, create a test file with the flow name and a.test.tsor.test.jsextension. For example, if your flow is namedmy-flow, create a test file namedmy-flow.test.ts.\n.test.ts\n.test.js\nmy-flow\nmy-flow.test.ts\nHere's an example of a flow test:\n// my-flow.test.tsimport{ createTestFlow }from'@motiadev/testing'import{ handlerasstepAHandler }from'./step-a.step'import{ handlerasstepBHandler }from'./step-b.step'describe('MyFlow', ()=>{it('should execute steps in the correct order',async()=>{constflow=createTestFlow('my-flow').step('step-a', stepAHandler).step('step-b', stepBHandler)constresult=awaitflow.execute({ name:'Alice'})expect(result).toEqual({greeting:'Hello, Alice!',message:'Welcome to Motia!',})})})\n// my-flow.test.tsimport{ createTestFlow }from'@motiadev/testing'import{ handlerasstepAHandler }from'./step-a.step'import{ handlerasstepBHandler }from'./step-b.step'describe('MyFlow', ()=>{it('should execute steps in the correct order',async()=>{constflow=createTestFlow('my-flow').step('step-a', stepAHandler).step('step-b', stepBHandler)constresult=awaitflow.execute({ name:'Alice'})expect(result).toEqual({greeting:'Hello, Alice!',message:'Welcome to Motia!',})})})\nIn this example, we use thecreateTestFlowfunction from@motiadev/testingto create a test flow with the specified steps. We then execute the flow with test input and assert that the final result matches the expected output.\ncreateTestFlow\n@motiadev/testing\nRunning Tests Locally\nTo run tests locally, use the following command:\npnpmtest\npnpmtest\nThis command will run all the test files in your project and display the test results in the terminal.\nYou can also run tests in watch mode, which automatically re-runs the tests whenever you make changes to your code:\npnpmtest--watch\npnpmtest--watch\nBest Practices\nWrite tests for each step and flow to ensure comprehensive coverage.\nUse meaningful test case descriptions to clarify"
}
================================================================================
{
    "source_page": "Testing",
    "source_url": "https://www.motia.dev/docs/development-guide/testing#step-tests =====",
    "chunk_topic": "Testing",
    "chunk_id": "Testing (Part 3)",
    "text": ", which automatically re-runs the tests whenever you make changes to your code:\npnpmtest--watch\npnpmtest--watch\nBest Practices\nWrite tests for each step and flow to ensure comprehensive coverage.\nUse meaningful test case descriptions to clarify the purpose of each test.\nTest edge cases and error scenarios to ensure your components handle them gracefully.\nKeep your tests focused and independent to make them easier to maintain.\nUse mocks and stubs to isolate dependencies and improve test reliability.\nBy following these best practices and regularly running tests, you can catch bugs early, maintain code quality, and ensure the reliability of your Motia application.\nMiddleware\nRun code before and after your API handlers\nEnvironment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nOn this page"
}
================================================================================
{
    "source_page": "Testing",
    "source_url": "https://www.motia.dev/docs/development-guide/testing#flow-tests =====",
    "chunk_topic": "Testing",
    "chunk_id": "Testing (Part 1)",
    "text": "Testing\nLearn how to write and run tests for your Motia components\nTesting\nTesting is an essential part of building reliable and maintainable Motia applications. Motia provides built-in support for writing and running tests to ensure the correctness of your steps, flows, and event handling logic.\nWriting Tests for Motia Components\nMotia usesJestas its testing framework. You can write tests for your Motia components using Jest's syntax and assertions.\nStep Tests\nTo test a step, create a test file with the same name as the step file, but with a.test.tsor.test.jsextension. For example, if your step file is namedmy-step.step.ts, create a test file namedmy-step.step.test.ts.\n.test.ts\n.test.js\nmy-step.step.ts\nmy-step.step.test.ts\nHere's an example of a step test:\n// my-step.step.test.tsimport{ createTestContext }from'@motiadev/testing'import{ handler }from'./my-step.step'describe('MyStep', ()=>{it('should emit an event with the correct data',async()=>{const{emit,done}=createTestContext()awaithandler({ name:'John'}, { emit })expect(emit).toHaveBeenCalledWith({type:'my-event',data: { greeting:'Hello, John!'},})done()})})\n// my-step.step.test.tsimport{ createTestContext }from'@motiadev/testing'import{ handler }from'./my-step.step'describe('MyStep', ()=>{it('should emit an event with the correct data',async()=>{const{emit,done}=createTestContext()awaithandler({ name:'John'}, { emit })expect(emit).toHaveBeenCalledWith({type:'my-event',data: { greeting:'Hello, John!'},})done()})})\nIn this example, we use thecreateTestContextfunction from@motiadev/testingto create a test context with mockedemitanddonefunctions. We then call the step'shandlerfunction with test input and the mocked context. Finally, we assert that theemitfunction was called with the expected event type and data.\ncreateTestContext\n@motiadev/testing\nemit\ndone\nhandler\nemit\nFlow Tests\nTo test a flow, create a test file with the flow name and a.test.tsor.test.jsextension. For example, if your flow is namedmy-flow, create a"
}
================================================================================
{
    "source_page": "Testing",
    "source_url": "https://www.motia.dev/docs/development-guide/testing#flow-tests =====",
    "chunk_topic": "Testing",
    "chunk_id": "Testing (Part 2)",
    "text": "/testing\nemit\ndone\nhandler\nemit\nFlow Tests\nTo test a flow, create a test file with the flow name and a.test.tsor.test.jsextension. For example, if your flow is namedmy-flow, create a test file namedmy-flow.test.ts.\n.test.ts\n.test.js\nmy-flow\nmy-flow.test.ts\nHere's an example of a flow test:\n// my-flow.test.tsimport{ createTestFlow }from'@motiadev/testing'import{ handlerasstepAHandler }from'./step-a.step'import{ handlerasstepBHandler }from'./step-b.step'describe('MyFlow', ()=>{it('should execute steps in the correct order',async()=>{constflow=createTestFlow('my-flow').step('step-a', stepAHandler).step('step-b', stepBHandler)constresult=awaitflow.execute({ name:'Alice'})expect(result).toEqual({greeting:'Hello, Alice!',message:'Welcome to Motia!',})})})\n// my-flow.test.tsimport{ createTestFlow }from'@motiadev/testing'import{ handlerasstepAHandler }from'./step-a.step'import{ handlerasstepBHandler }from'./step-b.step'describe('MyFlow', ()=>{it('should execute steps in the correct order',async()=>{constflow=createTestFlow('my-flow').step('step-a', stepAHandler).step('step-b', stepBHandler)constresult=awaitflow.execute({ name:'Alice'})expect(result).toEqual({greeting:'Hello, Alice!',message:'Welcome to Motia!',})})})\nIn this example, we use thecreateTestFlowfunction from@motiadev/testingto create a test flow with the specified steps. We then execute the flow with test input and assert that the final result matches the expected output.\ncreateTestFlow\n@motiadev/testing\nRunning Tests Locally\nTo run tests locally, use the following command:\npnpmtest\npnpmtest\nThis command will run all the test files in your project and display the test results in the terminal.\nYou can also run tests in watch mode, which automatically re-runs the tests whenever you make changes to your code:\npnpmtest--watch\npnpmtest--watch\nBest Practices\nWrite tests for each step and flow to ensure comprehensive coverage.\nUse meaningful test case descriptions to clarify"
}
================================================================================
{
    "source_page": "Testing",
    "source_url": "https://www.motia.dev/docs/development-guide/testing#flow-tests =====",
    "chunk_topic": "Testing",
    "chunk_id": "Testing (Part 3)",
    "text": ", which automatically re-runs the tests whenever you make changes to your code:\npnpmtest--watch\npnpmtest--watch\nBest Practices\nWrite tests for each step and flow to ensure comprehensive coverage.\nUse meaningful test case descriptions to clarify the purpose of each test.\nTest edge cases and error scenarios to ensure your components handle them gracefully.\nKeep your tests focused and independent to make them easier to maintain.\nUse mocks and stubs to isolate dependencies and improve test reliability.\nBy following these best practices and regularly running tests, you can catch bugs early, maintain code quality, and ensure the reliability of your Motia application.\nMiddleware\nRun code before and after your API handlers\nEnvironment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nOn this page"
}
================================================================================
{
    "source_page": "Testing",
    "source_url": "https://www.motia.dev/docs/development-guide/testing#running-tests-locally =====",
    "chunk_topic": "Testing",
    "chunk_id": "Testing (Part 1)",
    "text": "Testing\nLearn how to write and run tests for your Motia components\nTesting\nTesting is an essential part of building reliable and maintainable Motia applications. Motia provides built-in support for writing and running tests to ensure the correctness of your steps, flows, and event handling logic.\nWriting Tests for Motia Components\nMotia usesJestas its testing framework. You can write tests for your Motia components using Jest's syntax and assertions.\nStep Tests\nTo test a step, create a test file with the same name as the step file, but with a.test.tsor.test.jsextension. For example, if your step file is namedmy-step.step.ts, create a test file namedmy-step.step.test.ts.\n.test.ts\n.test.js\nmy-step.step.ts\nmy-step.step.test.ts\nHere's an example of a step test:\n// my-step.step.test.tsimport{ createTestContext }from'@motiadev/testing'import{ handler }from'./my-step.step'describe('MyStep', ()=>{it('should emit an event with the correct data',async()=>{const{emit,done}=createTestContext()awaithandler({ name:'John'}, { emit })expect(emit).toHaveBeenCalledWith({type:'my-event',data: { greeting:'Hello, John!'},})done()})})\n// my-step.step.test.tsimport{ createTestContext }from'@motiadev/testing'import{ handler }from'./my-step.step'describe('MyStep', ()=>{it('should emit an event with the correct data',async()=>{const{emit,done}=createTestContext()awaithandler({ name:'John'}, { emit })expect(emit).toHaveBeenCalledWith({type:'my-event',data: { greeting:'Hello, John!'},})done()})})\nIn this example, we use thecreateTestContextfunction from@motiadev/testingto create a test context with mockedemitanddonefunctions. We then call the step'shandlerfunction with test input and the mocked context. Finally, we assert that theemitfunction was called with the expected event type and data.\ncreateTestContext\n@motiadev/testing\nemit\ndone\nhandler\nemit\nFlow Tests\nTo test a flow, create a test file with the flow name and a.test.tsor.test.jsextension. For example, if your flow is namedmy-flow, create a"
}
================================================================================
{
    "source_page": "Testing",
    "source_url": "https://www.motia.dev/docs/development-guide/testing#running-tests-locally =====",
    "chunk_topic": "Testing",
    "chunk_id": "Testing (Part 2)",
    "text": "/testing\nemit\ndone\nhandler\nemit\nFlow Tests\nTo test a flow, create a test file with the flow name and a.test.tsor.test.jsextension. For example, if your flow is namedmy-flow, create a test file namedmy-flow.test.ts.\n.test.ts\n.test.js\nmy-flow\nmy-flow.test.ts\nHere's an example of a flow test:\n// my-flow.test.tsimport{ createTestFlow }from'@motiadev/testing'import{ handlerasstepAHandler }from'./step-a.step'import{ handlerasstepBHandler }from'./step-b.step'describe('MyFlow', ()=>{it('should execute steps in the correct order',async()=>{constflow=createTestFlow('my-flow').step('step-a', stepAHandler).step('step-b', stepBHandler)constresult=awaitflow.execute({ name:'Alice'})expect(result).toEqual({greeting:'Hello, Alice!',message:'Welcome to Motia!',})})})\n// my-flow.test.tsimport{ createTestFlow }from'@motiadev/testing'import{ handlerasstepAHandler }from'./step-a.step'import{ handlerasstepBHandler }from'./step-b.step'describe('MyFlow', ()=>{it('should execute steps in the correct order',async()=>{constflow=createTestFlow('my-flow').step('step-a', stepAHandler).step('step-b', stepBHandler)constresult=awaitflow.execute({ name:'Alice'})expect(result).toEqual({greeting:'Hello, Alice!',message:'Welcome to Motia!',})})})\nIn this example, we use thecreateTestFlowfunction from@motiadev/testingto create a test flow with the specified steps. We then execute the flow with test input and assert that the final result matches the expected output.\ncreateTestFlow\n@motiadev/testing\nRunning Tests Locally\nTo run tests locally, use the following command:\npnpmtest\npnpmtest\nThis command will run all the test files in your project and display the test results in the terminal.\nYou can also run tests in watch mode, which automatically re-runs the tests whenever you make changes to your code:\npnpmtest--watch\npnpmtest--watch\nBest Practices\nWrite tests for each step and flow to ensure comprehensive coverage.\nUse meaningful test case descriptions to clarify"
}
================================================================================
{
    "source_page": "Testing",
    "source_url": "https://www.motia.dev/docs/development-guide/testing#running-tests-locally =====",
    "chunk_topic": "Testing",
    "chunk_id": "Testing (Part 3)",
    "text": ", which automatically re-runs the tests whenever you make changes to your code:\npnpmtest--watch\npnpmtest--watch\nBest Practices\nWrite tests for each step and flow to ensure comprehensive coverage.\nUse meaningful test case descriptions to clarify the purpose of each test.\nTest edge cases and error scenarios to ensure your components handle them gracefully.\nKeep your tests focused and independent to make them easier to maintain.\nUse mocks and stubs to isolate dependencies and improve test reliability.\nBy following these best practices and regularly running tests, you can catch bugs early, maintain code quality, and ensure the reliability of your Motia application.\nMiddleware\nRun code before and after your API handlers\nEnvironment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nOn this page"
}
================================================================================
{
    "source_page": "Testing",
    "source_url": "https://www.motia.dev/docs/development-guide/testing#best-practices =====",
    "chunk_topic": "Testing",
    "chunk_id": "Testing (Part 1)",
    "text": "Testing\nLearn how to write and run tests for your Motia components\nTesting\nTesting is an essential part of building reliable and maintainable Motia applications. Motia provides built-in support for writing and running tests to ensure the correctness of your steps, flows, and event handling logic.\nWriting Tests for Motia Components\nMotia usesJestas its testing framework. You can write tests for your Motia components using Jest's syntax and assertions.\nStep Tests\nTo test a step, create a test file with the same name as the step file, but with a.test.tsor.test.jsextension. For example, if your step file is namedmy-step.step.ts, create a test file namedmy-step.step.test.ts.\n.test.ts\n.test.js\nmy-step.step.ts\nmy-step.step.test.ts\nHere's an example of a step test:\n// my-step.step.test.tsimport{ createTestContext }from'@motiadev/testing'import{ handler }from'./my-step.step'describe('MyStep', ()=>{it('should emit an event with the correct data',async()=>{const{emit,done}=createTestContext()awaithandler({ name:'John'}, { emit })expect(emit).toHaveBeenCalledWith({type:'my-event',data: { greeting:'Hello, John!'},})done()})})\n// my-step.step.test.tsimport{ createTestContext }from'@motiadev/testing'import{ handler }from'./my-step.step'describe('MyStep', ()=>{it('should emit an event with the correct data',async()=>{const{emit,done}=createTestContext()awaithandler({ name:'John'}, { emit })expect(emit).toHaveBeenCalledWith({type:'my-event',data: { greeting:'Hello, John!'},})done()})})\nIn this example, we use thecreateTestContextfunction from@motiadev/testingto create a test context with mockedemitanddonefunctions. We then call the step'shandlerfunction with test input and the mocked context. Finally, we assert that theemitfunction was called with the expected event type and data.\ncreateTestContext\n@motiadev/testing\nemit\ndone\nhandler\nemit\nFlow Tests\nTo test a flow, create a test file with the flow name and a.test.tsor.test.jsextension. For example, if your flow is namedmy-flow, create a"
}
================================================================================
{
    "source_page": "Testing",
    "source_url": "https://www.motia.dev/docs/development-guide/testing#best-practices =====",
    "chunk_topic": "Testing",
    "chunk_id": "Testing (Part 2)",
    "text": "/testing\nemit\ndone\nhandler\nemit\nFlow Tests\nTo test a flow, create a test file with the flow name and a.test.tsor.test.jsextension. For example, if your flow is namedmy-flow, create a test file namedmy-flow.test.ts.\n.test.ts\n.test.js\nmy-flow\nmy-flow.test.ts\nHere's an example of a flow test:\n// my-flow.test.tsimport{ createTestFlow }from'@motiadev/testing'import{ handlerasstepAHandler }from'./step-a.step'import{ handlerasstepBHandler }from'./step-b.step'describe('MyFlow', ()=>{it('should execute steps in the correct order',async()=>{constflow=createTestFlow('my-flow').step('step-a', stepAHandler).step('step-b', stepBHandler)constresult=awaitflow.execute({ name:'Alice'})expect(result).toEqual({greeting:'Hello, Alice!',message:'Welcome to Motia!',})})})\n// my-flow.test.tsimport{ createTestFlow }from'@motiadev/testing'import{ handlerasstepAHandler }from'./step-a.step'import{ handlerasstepBHandler }from'./step-b.step'describe('MyFlow', ()=>{it('should execute steps in the correct order',async()=>{constflow=createTestFlow('my-flow').step('step-a', stepAHandler).step('step-b', stepBHandler)constresult=awaitflow.execute({ name:'Alice'})expect(result).toEqual({greeting:'Hello, Alice!',message:'Welcome to Motia!',})})})\nIn this example, we use thecreateTestFlowfunction from@motiadev/testingto create a test flow with the specified steps. We then execute the flow with test input and assert that the final result matches the expected output.\ncreateTestFlow\n@motiadev/testing\nRunning Tests Locally\nTo run tests locally, use the following command:\npnpmtest\npnpmtest\nThis command will run all the test files in your project and display the test results in the terminal.\nYou can also run tests in watch mode, which automatically re-runs the tests whenever you make changes to your code:\npnpmtest--watch\npnpmtest--watch\nBest Practices\nWrite tests for each step and flow to ensure comprehensive coverage.\nUse meaningful test case descriptions to clarify"
}
================================================================================
{
    "source_page": "Testing",
    "source_url": "https://www.motia.dev/docs/development-guide/testing#best-practices =====",
    "chunk_topic": "Testing",
    "chunk_id": "Testing (Part 3)",
    "text": ", which automatically re-runs the tests whenever you make changes to your code:\npnpmtest--watch\npnpmtest--watch\nBest Practices\nWrite tests for each step and flow to ensure comprehensive coverage.\nUse meaningful test case descriptions to clarify the purpose of each test.\nTest edge cases and error scenarios to ensure your components handle them gracefully.\nKeep your tests focused and independent to make them easier to maintain.\nUse mocks and stubs to isolate dependencies and improve test reliability.\nBy following these best practices and regularly running tests, you can catch bugs early, maintain code quality, and ensure the reliability of your Motia application.\nMiddleware\nRun code before and after your API handlers\nEnvironment Variables\nStore API keys and configuration safely using .env files in your Motia apps.\nOn this page"
}
================================================================================
{
    "source_page": "Middleware",
    "source_url": "https://www.motia.dev/docs/development-guide/middleware#what-is-middleware =====",
    "chunk_topic": "Middleware",
    "chunk_id": "Middleware (Part 1)",
    "text": "Middleware\nRun code before and after your API handlers\nWhat is Middleware?\nMiddleware runs before your API handler. Use it for authentication, logging, error handling, or any logic that applies to multiple endpoints.\nHow It Works\nA middleware is a function that receives three arguments:\nmiddleware(req, ctx, next)\nmiddleware(req, ctx, next)\nreq- The incoming request (same as handler)\nctx- The context object (same as handler)\nnext()- Call this to continue to the handler\nIf you don't callnext(), the request stops. The handler never runs.\nnext()\nSimple Example\nimport{ ApiMiddleware }from'motia'constauthMiddleware:ApiMiddleware=async(req,ctx,next)=>{if(!req.headers.authorization) {return{ status:401, body: { error:'Unauthorized'} }}returnnext()}exportconstconfig={name:'ProtectedEndpoint',type:'api',path:'/protected',method:'GET',middleware: [authMiddleware]}exportconsthandler=async(req,ctx)=>{return{ status:200, body: { message:'Success'} }}\nimport{ ApiMiddleware }from'motia'constauthMiddleware:ApiMiddleware=async(req,ctx,next)=>{if(!req.headers.authorization) {return{ status:401, body: { error:'Unauthorized'} }}returnnext()}exportconstconfig={name:'ProtectedEndpoint',type:'api',path:'/protected',method:'GET',middleware: [authMiddleware]}exportconsthandler=async(req,ctx)=>{return{ status:200, body: { message:'Success'} }}\nExecution Order\nMiddleware runs in the order you list them:\nexportconstconfig={name:'MyEndpoint',type:'api',path:'/endpoint',method:'POST',middleware: [loggingMiddleware,// Runs firstauthMiddleware,// Runs seconderrorMiddleware// Runs third]}\nexportconstconfig={name:'MyEndpoint',type:'api',path:'/endpoint',method:'POST',middleware: [loggingMiddleware,// Runs firstauthMiddleware,// Runs seconderrorMiddleware// Runs third]}\nModifying Responses\nAwaitnext()to get the response, then modify it:\nnext()\nconstaddHeadersMiddleware=async(req,ctx,next)=>{constresponse=awaitnext()return{...response,headers: {...response.headers,'X-Request-Id': ctx.traceId}}}\nconstaddHeadersMiddleware=async(req,ctx,next)=>{constresponse=awaitnext()return{...response,headers: {...response.headers,'X-Request"
}
================================================================================
{
    "source_page": "Middleware",
    "source_url": "https://www.motia.dev/docs/development-guide/middleware#what-is-middleware =====",
    "chunk_topic": "Middleware",
    "chunk_id": "Middleware (Part 2)",
    "text": ",headers: {...response.headers,'X-Request-Id': ctx.traceId}}}\nconstaddHeadersMiddleware=async(req,ctx,next)=>{constresponse=awaitnext()return{...response,headers: {...response.headers,'X-Request-Id': ctx.traceId}}}\nError Handling\nCatch errors from handlers:\nimport{ ZodError }from'zod'consterrorMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error:any) {if(errorinstanceofZodError) {ctx.logger.error('Validation error', { errors: error.errors })return{ status:400, body: { error:'Validation failed'} }}ctx.logger.error('Unexpected error', { error: error.message })return{ status:500, body: { error:'Internal server error'} }}}\nimport{ ZodError }from'zod'consterrorMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error:any) {if(errorinstanceofZodError) {ctx.logger.error('Validation error', { errors: error.errors })return{ status:400, body: { error:'Validation failed'} }}ctx.logger.error('Unexpected error', { error: error.message })return{ status:500, body: { error:'Internal server error'} }}}\nReusing Middleware\nCreate middleware files in a shared location:\nexportconstcoreMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error) {ctx.logger.error('Error', { error })return{ status:500, body: { error:'Internal server error'} }}}\nexportconstcoreMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error) {ctx.logger.error('Error', { error })return{ status:500, body: { error:'Internal server error'} }}}\nImport and use across steps:\nimport{ coreMiddleware }from'../middlewares/core.middleware'exportconstconfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET',middleware: [coreMiddleware]}\nimport{ coreMiddleware }from'../middlewares/core.middleware'exportconstconfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET',middleware: [coreMiddleware]}\nWhat's Next?\nTriggers\nLearn more about Triggers\nTesting\nLearn more about testing your Motia Steps\nCustomizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows"
}
================================================================================
{
    "source_page": "Middleware",
    "source_url": "https://www.motia.dev/docs/development-guide/middleware#what-is-middleware =====",
    "chunk_topic": "Middleware",
    "chunk_id": "Middleware (Part 3)",
    "text": "GET',middleware: [coreMiddleware]}\nWhat's Next?\nTriggers\nLearn more about Triggers\nTesting\nLearn more about testing your Motia Steps\nCustomizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nTesting\nLearn how to write and run tests for your Motia components\nOn this page"
}
================================================================================
{
    "source_page": "Middleware",
    "source_url": "https://www.motia.dev/docs/development-guide/middleware#how-it-works =====",
    "chunk_topic": "Middleware",
    "chunk_id": "Middleware (Part 1)",
    "text": "Middleware\nRun code before and after your API handlers\nWhat is Middleware?\nMiddleware runs before your API handler. Use it for authentication, logging, error handling, or any logic that applies to multiple endpoints.\nHow It Works\nA middleware is a function that receives three arguments:\nmiddleware(req, ctx, next)\nmiddleware(req, ctx, next)\nreq- The incoming request (same as handler)\nctx- The context object (same as handler)\nnext()- Call this to continue to the handler\nIf you don't callnext(), the request stops. The handler never runs.\nnext()\nSimple Example\nimport{ ApiMiddleware }from'motia'constauthMiddleware:ApiMiddleware=async(req,ctx,next)=>{if(!req.headers.authorization) {return{ status:401, body: { error:'Unauthorized'} }}returnnext()}exportconstconfig={name:'ProtectedEndpoint',type:'api',path:'/protected',method:'GET',middleware: [authMiddleware]}exportconsthandler=async(req,ctx)=>{return{ status:200, body: { message:'Success'} }}\nimport{ ApiMiddleware }from'motia'constauthMiddleware:ApiMiddleware=async(req,ctx,next)=>{if(!req.headers.authorization) {return{ status:401, body: { error:'Unauthorized'} }}returnnext()}exportconstconfig={name:'ProtectedEndpoint',type:'api',path:'/protected',method:'GET',middleware: [authMiddleware]}exportconsthandler=async(req,ctx)=>{return{ status:200, body: { message:'Success'} }}\nExecution Order\nMiddleware runs in the order you list them:\nexportconstconfig={name:'MyEndpoint',type:'api',path:'/endpoint',method:'POST',middleware: [loggingMiddleware,// Runs firstauthMiddleware,// Runs seconderrorMiddleware// Runs third]}\nexportconstconfig={name:'MyEndpoint',type:'api',path:'/endpoint',method:'POST',middleware: [loggingMiddleware,// Runs firstauthMiddleware,// Runs seconderrorMiddleware// Runs third]}\nModifying Responses\nAwaitnext()to get the response, then modify it:\nnext()\nconstaddHeadersMiddleware=async(req,ctx,next)=>{constresponse=awaitnext()return{...response,headers: {...response.headers,'X-Request-Id': ctx.traceId}}}\nconstaddHeadersMiddleware=async(req,ctx,next)=>{constresponse=awaitnext()return{...response,headers: {...response.headers,'X-Request"
}
================================================================================
{
    "source_page": "Middleware",
    "source_url": "https://www.motia.dev/docs/development-guide/middleware#how-it-works =====",
    "chunk_topic": "Middleware",
    "chunk_id": "Middleware (Part 2)",
    "text": ",headers: {...response.headers,'X-Request-Id': ctx.traceId}}}\nconstaddHeadersMiddleware=async(req,ctx,next)=>{constresponse=awaitnext()return{...response,headers: {...response.headers,'X-Request-Id': ctx.traceId}}}\nError Handling\nCatch errors from handlers:\nimport{ ZodError }from'zod'consterrorMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error:any) {if(errorinstanceofZodError) {ctx.logger.error('Validation error', { errors: error.errors })return{ status:400, body: { error:'Validation failed'} }}ctx.logger.error('Unexpected error', { error: error.message })return{ status:500, body: { error:'Internal server error'} }}}\nimport{ ZodError }from'zod'consterrorMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error:any) {if(errorinstanceofZodError) {ctx.logger.error('Validation error', { errors: error.errors })return{ status:400, body: { error:'Validation failed'} }}ctx.logger.error('Unexpected error', { error: error.message })return{ status:500, body: { error:'Internal server error'} }}}\nReusing Middleware\nCreate middleware files in a shared location:\nexportconstcoreMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error) {ctx.logger.error('Error', { error })return{ status:500, body: { error:'Internal server error'} }}}\nexportconstcoreMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error) {ctx.logger.error('Error', { error })return{ status:500, body: { error:'Internal server error'} }}}\nImport and use across steps:\nimport{ coreMiddleware }from'../middlewares/core.middleware'exportconstconfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET',middleware: [coreMiddleware]}\nimport{ coreMiddleware }from'../middlewares/core.middleware'exportconstconfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET',middleware: [coreMiddleware]}\nWhat's Next?\nTriggers\nLearn more about Triggers\nTesting\nLearn more about testing your Motia Steps\nCustomizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows"
}
================================================================================
{
    "source_page": "Middleware",
    "source_url": "https://www.motia.dev/docs/development-guide/middleware#how-it-works =====",
    "chunk_topic": "Middleware",
    "chunk_id": "Middleware (Part 3)",
    "text": "GET',middleware: [coreMiddleware]}\nWhat's Next?\nTriggers\nLearn more about Triggers\nTesting\nLearn more about testing your Motia Steps\nCustomizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nTesting\nLearn how to write and run tests for your Motia components\nOn this page"
}
================================================================================
{
    "source_page": "Middleware",
    "source_url": "https://www.motia.dev/docs/development-guide/middleware#simple-example =====",
    "chunk_topic": "Middleware",
    "chunk_id": "Middleware (Part 1)",
    "text": "Middleware\nRun code before and after your API handlers\nWhat is Middleware?\nMiddleware runs before your API handler. Use it for authentication, logging, error handling, or any logic that applies to multiple endpoints.\nHow It Works\nA middleware is a function that receives three arguments:\nmiddleware(req, ctx, next)\nmiddleware(req, ctx, next)\nreq- The incoming request (same as handler)\nctx- The context object (same as handler)\nnext()- Call this to continue to the handler\nIf you don't callnext(), the request stops. The handler never runs.\nnext()\nSimple Example\nimport{ ApiMiddleware }from'motia'constauthMiddleware:ApiMiddleware=async(req,ctx,next)=>{if(!req.headers.authorization) {return{ status:401, body: { error:'Unauthorized'} }}returnnext()}exportconstconfig={name:'ProtectedEndpoint',type:'api',path:'/protected',method:'GET',middleware: [authMiddleware]}exportconsthandler=async(req,ctx)=>{return{ status:200, body: { message:'Success'} }}\nimport{ ApiMiddleware }from'motia'constauthMiddleware:ApiMiddleware=async(req,ctx,next)=>{if(!req.headers.authorization) {return{ status:401, body: { error:'Unauthorized'} }}returnnext()}exportconstconfig={name:'ProtectedEndpoint',type:'api',path:'/protected',method:'GET',middleware: [authMiddleware]}exportconsthandler=async(req,ctx)=>{return{ status:200, body: { message:'Success'} }}\nExecution Order\nMiddleware runs in the order you list them:\nexportconstconfig={name:'MyEndpoint',type:'api',path:'/endpoint',method:'POST',middleware: [loggingMiddleware,// Runs firstauthMiddleware,// Runs seconderrorMiddleware// Runs third]}\nexportconstconfig={name:'MyEndpoint',type:'api',path:'/endpoint',method:'POST',middleware: [loggingMiddleware,// Runs firstauthMiddleware,// Runs seconderrorMiddleware// Runs third]}\nModifying Responses\nAwaitnext()to get the response, then modify it:\nnext()\nconstaddHeadersMiddleware=async(req,ctx,next)=>{constresponse=awaitnext()return{...response,headers: {...response.headers,'X-Request-Id': ctx.traceId}}}\nconstaddHeadersMiddleware=async(req,ctx,next)=>{constresponse=awaitnext()return{...response,headers: {...response.headers,'X-Request"
}
================================================================================
{
    "source_page": "Middleware",
    "source_url": "https://www.motia.dev/docs/development-guide/middleware#simple-example =====",
    "chunk_topic": "Middleware",
    "chunk_id": "Middleware (Part 2)",
    "text": ",headers: {...response.headers,'X-Request-Id': ctx.traceId}}}\nconstaddHeadersMiddleware=async(req,ctx,next)=>{constresponse=awaitnext()return{...response,headers: {...response.headers,'X-Request-Id': ctx.traceId}}}\nError Handling\nCatch errors from handlers:\nimport{ ZodError }from'zod'consterrorMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error:any) {if(errorinstanceofZodError) {ctx.logger.error('Validation error', { errors: error.errors })return{ status:400, body: { error:'Validation failed'} }}ctx.logger.error('Unexpected error', { error: error.message })return{ status:500, body: { error:'Internal server error'} }}}\nimport{ ZodError }from'zod'consterrorMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error:any) {if(errorinstanceofZodError) {ctx.logger.error('Validation error', { errors: error.errors })return{ status:400, body: { error:'Validation failed'} }}ctx.logger.error('Unexpected error', { error: error.message })return{ status:500, body: { error:'Internal server error'} }}}\nReusing Middleware\nCreate middleware files in a shared location:\nexportconstcoreMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error) {ctx.logger.error('Error', { error })return{ status:500, body: { error:'Internal server error'} }}}\nexportconstcoreMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error) {ctx.logger.error('Error', { error })return{ status:500, body: { error:'Internal server error'} }}}\nImport and use across steps:\nimport{ coreMiddleware }from'../middlewares/core.middleware'exportconstconfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET',middleware: [coreMiddleware]}\nimport{ coreMiddleware }from'../middlewares/core.middleware'exportconstconfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET',middleware: [coreMiddleware]}\nWhat's Next?\nTriggers\nLearn more about Triggers\nTesting\nLearn more about testing your Motia Steps\nCustomizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows"
}
================================================================================
{
    "source_page": "Middleware",
    "source_url": "https://www.motia.dev/docs/development-guide/middleware#simple-example =====",
    "chunk_topic": "Middleware",
    "chunk_id": "Middleware (Part 3)",
    "text": "GET',middleware: [coreMiddleware]}\nWhat's Next?\nTriggers\nLearn more about Triggers\nTesting\nLearn more about testing your Motia Steps\nCustomizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nTesting\nLearn how to write and run tests for your Motia components\nOn this page"
}
================================================================================
{
    "source_page": "Middleware",
    "source_url": "https://www.motia.dev/docs/development-guide/middleware#execution-order =====",
    "chunk_topic": "Middleware",
    "chunk_id": "Middleware (Part 1)",
    "text": "Middleware\nRun code before and after your API handlers\nWhat is Middleware?\nMiddleware runs before your API handler. Use it for authentication, logging, error handling, or any logic that applies to multiple endpoints.\nHow It Works\nA middleware is a function that receives three arguments:\nmiddleware(req, ctx, next)\nmiddleware(req, ctx, next)\nreq- The incoming request (same as handler)\nctx- The context object (same as handler)\nnext()- Call this to continue to the handler\nIf you don't callnext(), the request stops. The handler never runs.\nnext()\nSimple Example\nimport{ ApiMiddleware }from'motia'constauthMiddleware:ApiMiddleware=async(req,ctx,next)=>{if(!req.headers.authorization) {return{ status:401, body: { error:'Unauthorized'} }}returnnext()}exportconstconfig={name:'ProtectedEndpoint',type:'api',path:'/protected',method:'GET',middleware: [authMiddleware]}exportconsthandler=async(req,ctx)=>{return{ status:200, body: { message:'Success'} }}\nimport{ ApiMiddleware }from'motia'constauthMiddleware:ApiMiddleware=async(req,ctx,next)=>{if(!req.headers.authorization) {return{ status:401, body: { error:'Unauthorized'} }}returnnext()}exportconstconfig={name:'ProtectedEndpoint',type:'api',path:'/protected',method:'GET',middleware: [authMiddleware]}exportconsthandler=async(req,ctx)=>{return{ status:200, body: { message:'Success'} }}\nExecution Order\nMiddleware runs in the order you list them:\nexportconstconfig={name:'MyEndpoint',type:'api',path:'/endpoint',method:'POST',middleware: [loggingMiddleware,// Runs firstauthMiddleware,// Runs seconderrorMiddleware// Runs third]}\nexportconstconfig={name:'MyEndpoint',type:'api',path:'/endpoint',method:'POST',middleware: [loggingMiddleware,// Runs firstauthMiddleware,// Runs seconderrorMiddleware// Runs third]}\nModifying Responses\nAwaitnext()to get the response, then modify it:\nnext()\nconstaddHeadersMiddleware=async(req,ctx,next)=>{constresponse=awaitnext()return{...response,headers: {...response.headers,'X-Request-Id': ctx.traceId}}}\nconstaddHeadersMiddleware=async(req,ctx,next)=>{constresponse=awaitnext()return{...response,headers: {...response.headers,'X-Request"
}
================================================================================
{
    "source_page": "Middleware",
    "source_url": "https://www.motia.dev/docs/development-guide/middleware#execution-order =====",
    "chunk_topic": "Middleware",
    "chunk_id": "Middleware (Part 2)",
    "text": ",headers: {...response.headers,'X-Request-Id': ctx.traceId}}}\nconstaddHeadersMiddleware=async(req,ctx,next)=>{constresponse=awaitnext()return{...response,headers: {...response.headers,'X-Request-Id': ctx.traceId}}}\nError Handling\nCatch errors from handlers:\nimport{ ZodError }from'zod'consterrorMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error:any) {if(errorinstanceofZodError) {ctx.logger.error('Validation error', { errors: error.errors })return{ status:400, body: { error:'Validation failed'} }}ctx.logger.error('Unexpected error', { error: error.message })return{ status:500, body: { error:'Internal server error'} }}}\nimport{ ZodError }from'zod'consterrorMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error:any) {if(errorinstanceofZodError) {ctx.logger.error('Validation error', { errors: error.errors })return{ status:400, body: { error:'Validation failed'} }}ctx.logger.error('Unexpected error', { error: error.message })return{ status:500, body: { error:'Internal server error'} }}}\nReusing Middleware\nCreate middleware files in a shared location:\nexportconstcoreMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error) {ctx.logger.error('Error', { error })return{ status:500, body: { error:'Internal server error'} }}}\nexportconstcoreMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error) {ctx.logger.error('Error', { error })return{ status:500, body: { error:'Internal server error'} }}}\nImport and use across steps:\nimport{ coreMiddleware }from'../middlewares/core.middleware'exportconstconfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET',middleware: [coreMiddleware]}\nimport{ coreMiddleware }from'../middlewares/core.middleware'exportconstconfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET',middleware: [coreMiddleware]}\nWhat's Next?\nTriggers\nLearn more about Triggers\nTesting\nLearn more about testing your Motia Steps\nCustomizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows"
}
================================================================================
{
    "source_page": "Middleware",
    "source_url": "https://www.motia.dev/docs/development-guide/middleware#execution-order =====",
    "chunk_topic": "Middleware",
    "chunk_id": "Middleware (Part 3)",
    "text": "GET',middleware: [coreMiddleware]}\nWhat's Next?\nTriggers\nLearn more about Triggers\nTesting\nLearn more about testing your Motia Steps\nCustomizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nTesting\nLearn how to write and run tests for your Motia components\nOn this page"
}
================================================================================
{
    "source_page": "Middleware",
    "source_url": "https://www.motia.dev/docs/development-guide/middleware#modifying-responses =====",
    "chunk_topic": "Middleware",
    "chunk_id": "Middleware (Part 1)",
    "text": "Middleware\nRun code before and after your API handlers\nWhat is Middleware?\nMiddleware runs before your API handler. Use it for authentication, logging, error handling, or any logic that applies to multiple endpoints.\nHow It Works\nA middleware is a function that receives three arguments:\nmiddleware(req, ctx, next)\nmiddleware(req, ctx, next)\nreq- The incoming request (same as handler)\nctx- The context object (same as handler)\nnext()- Call this to continue to the handler\nIf you don't callnext(), the request stops. The handler never runs.\nnext()\nSimple Example\nimport{ ApiMiddleware }from'motia'constauthMiddleware:ApiMiddleware=async(req,ctx,next)=>{if(!req.headers.authorization) {return{ status:401, body: { error:'Unauthorized'} }}returnnext()}exportconstconfig={name:'ProtectedEndpoint',type:'api',path:'/protected',method:'GET',middleware: [authMiddleware]}exportconsthandler=async(req,ctx)=>{return{ status:200, body: { message:'Success'} }}\nimport{ ApiMiddleware }from'motia'constauthMiddleware:ApiMiddleware=async(req,ctx,next)=>{if(!req.headers.authorization) {return{ status:401, body: { error:'Unauthorized'} }}returnnext()}exportconstconfig={name:'ProtectedEndpoint',type:'api',path:'/protected',method:'GET',middleware: [authMiddleware]}exportconsthandler=async(req,ctx)=>{return{ status:200, body: { message:'Success'} }}\nExecution Order\nMiddleware runs in the order you list them:\nexportconstconfig={name:'MyEndpoint',type:'api',path:'/endpoint',method:'POST',middleware: [loggingMiddleware,// Runs firstauthMiddleware,// Runs seconderrorMiddleware// Runs third]}\nexportconstconfig={name:'MyEndpoint',type:'api',path:'/endpoint',method:'POST',middleware: [loggingMiddleware,// Runs firstauthMiddleware,// Runs seconderrorMiddleware// Runs third]}\nModifying Responses\nAwaitnext()to get the response, then modify it:\nnext()\nconstaddHeadersMiddleware=async(req,ctx,next)=>{constresponse=awaitnext()return{...response,headers: {...response.headers,'X-Request-Id': ctx.traceId}}}\nconstaddHeadersMiddleware=async(req,ctx,next)=>{constresponse=awaitnext()return{...response,headers: {...response.headers,'X-Request"
}
================================================================================
{
    "source_page": "Middleware",
    "source_url": "https://www.motia.dev/docs/development-guide/middleware#modifying-responses =====",
    "chunk_topic": "Middleware",
    "chunk_id": "Middleware (Part 2)",
    "text": ",headers: {...response.headers,'X-Request-Id': ctx.traceId}}}\nconstaddHeadersMiddleware=async(req,ctx,next)=>{constresponse=awaitnext()return{...response,headers: {...response.headers,'X-Request-Id': ctx.traceId}}}\nError Handling\nCatch errors from handlers:\nimport{ ZodError }from'zod'consterrorMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error:any) {if(errorinstanceofZodError) {ctx.logger.error('Validation error', { errors: error.errors })return{ status:400, body: { error:'Validation failed'} }}ctx.logger.error('Unexpected error', { error: error.message })return{ status:500, body: { error:'Internal server error'} }}}\nimport{ ZodError }from'zod'consterrorMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error:any) {if(errorinstanceofZodError) {ctx.logger.error('Validation error', { errors: error.errors })return{ status:400, body: { error:'Validation failed'} }}ctx.logger.error('Unexpected error', { error: error.message })return{ status:500, body: { error:'Internal server error'} }}}\nReusing Middleware\nCreate middleware files in a shared location:\nexportconstcoreMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error) {ctx.logger.error('Error', { error })return{ status:500, body: { error:'Internal server error'} }}}\nexportconstcoreMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error) {ctx.logger.error('Error', { error })return{ status:500, body: { error:'Internal server error'} }}}\nImport and use across steps:\nimport{ coreMiddleware }from'../middlewares/core.middleware'exportconstconfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET',middleware: [coreMiddleware]}\nimport{ coreMiddleware }from'../middlewares/core.middleware'exportconstconfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET',middleware: [coreMiddleware]}\nWhat's Next?\nTriggers\nLearn more about Triggers\nTesting\nLearn more about testing your Motia Steps\nCustomizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows"
}
================================================================================
{
    "source_page": "Middleware",
    "source_url": "https://www.motia.dev/docs/development-guide/middleware#modifying-responses =====",
    "chunk_topic": "Middleware",
    "chunk_id": "Middleware (Part 3)",
    "text": "GET',middleware: [coreMiddleware]}\nWhat's Next?\nTriggers\nLearn more about Triggers\nTesting\nLearn more about testing your Motia Steps\nCustomizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nTesting\nLearn how to write and run tests for your Motia components\nOn this page"
}
================================================================================
{
    "source_page": "Middleware",
    "source_url": "https://www.motia.dev/docs/development-guide/middleware#error-handling =====",
    "chunk_topic": "Middleware",
    "chunk_id": "Middleware (Part 1)",
    "text": "Middleware\nRun code before and after your API handlers\nWhat is Middleware?\nMiddleware runs before your API handler. Use it for authentication, logging, error handling, or any logic that applies to multiple endpoints.\nHow It Works\nA middleware is a function that receives three arguments:\nmiddleware(req, ctx, next)\nmiddleware(req, ctx, next)\nreq- The incoming request (same as handler)\nctx- The context object (same as handler)\nnext()- Call this to continue to the handler\nIf you don't callnext(), the request stops. The handler never runs.\nnext()\nSimple Example\nimport{ ApiMiddleware }from'motia'constauthMiddleware:ApiMiddleware=async(req,ctx,next)=>{if(!req.headers.authorization) {return{ status:401, body: { error:'Unauthorized'} }}returnnext()}exportconstconfig={name:'ProtectedEndpoint',type:'api',path:'/protected',method:'GET',middleware: [authMiddleware]}exportconsthandler=async(req,ctx)=>{return{ status:200, body: { message:'Success'} }}\nimport{ ApiMiddleware }from'motia'constauthMiddleware:ApiMiddleware=async(req,ctx,next)=>{if(!req.headers.authorization) {return{ status:401, body: { error:'Unauthorized'} }}returnnext()}exportconstconfig={name:'ProtectedEndpoint',type:'api',path:'/protected',method:'GET',middleware: [authMiddleware]}exportconsthandler=async(req,ctx)=>{return{ status:200, body: { message:'Success'} }}\nExecution Order\nMiddleware runs in the order you list them:\nexportconstconfig={name:'MyEndpoint',type:'api',path:'/endpoint',method:'POST',middleware: [loggingMiddleware,// Runs firstauthMiddleware,// Runs seconderrorMiddleware// Runs third]}\nexportconstconfig={name:'MyEndpoint',type:'api',path:'/endpoint',method:'POST',middleware: [loggingMiddleware,// Runs firstauthMiddleware,// Runs seconderrorMiddleware// Runs third]}\nModifying Responses\nAwaitnext()to get the response, then modify it:\nnext()\nconstaddHeadersMiddleware=async(req,ctx,next)=>{constresponse=awaitnext()return{...response,headers: {...response.headers,'X-Request-Id': ctx.traceId}}}\nconstaddHeadersMiddleware=async(req,ctx,next)=>{constresponse=awaitnext()return{...response,headers: {...response.headers,'X-Request"
}
================================================================================
{
    "source_page": "Middleware",
    "source_url": "https://www.motia.dev/docs/development-guide/middleware#error-handling =====",
    "chunk_topic": "Middleware",
    "chunk_id": "Middleware (Part 2)",
    "text": ",headers: {...response.headers,'X-Request-Id': ctx.traceId}}}\nconstaddHeadersMiddleware=async(req,ctx,next)=>{constresponse=awaitnext()return{...response,headers: {...response.headers,'X-Request-Id': ctx.traceId}}}\nError Handling\nCatch errors from handlers:\nimport{ ZodError }from'zod'consterrorMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error:any) {if(errorinstanceofZodError) {ctx.logger.error('Validation error', { errors: error.errors })return{ status:400, body: { error:'Validation failed'} }}ctx.logger.error('Unexpected error', { error: error.message })return{ status:500, body: { error:'Internal server error'} }}}\nimport{ ZodError }from'zod'consterrorMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error:any) {if(errorinstanceofZodError) {ctx.logger.error('Validation error', { errors: error.errors })return{ status:400, body: { error:'Validation failed'} }}ctx.logger.error('Unexpected error', { error: error.message })return{ status:500, body: { error:'Internal server error'} }}}\nReusing Middleware\nCreate middleware files in a shared location:\nexportconstcoreMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error) {ctx.logger.error('Error', { error })return{ status:500, body: { error:'Internal server error'} }}}\nexportconstcoreMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error) {ctx.logger.error('Error', { error })return{ status:500, body: { error:'Internal server error'} }}}\nImport and use across steps:\nimport{ coreMiddleware }from'../middlewares/core.middleware'exportconstconfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET',middleware: [coreMiddleware]}\nimport{ coreMiddleware }from'../middlewares/core.middleware'exportconstconfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET',middleware: [coreMiddleware]}\nWhat's Next?\nTriggers\nLearn more about Triggers\nTesting\nLearn more about testing your Motia Steps\nCustomizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows"
}
================================================================================
{
    "source_page": "Middleware",
    "source_url": "https://www.motia.dev/docs/development-guide/middleware#error-handling =====",
    "chunk_topic": "Middleware",
    "chunk_id": "Middleware (Part 3)",
    "text": "GET',middleware: [coreMiddleware]}\nWhat's Next?\nTriggers\nLearn more about Triggers\nTesting\nLearn more about testing your Motia Steps\nCustomizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nTesting\nLearn how to write and run tests for your Motia components\nOn this page"
}
================================================================================
{
    "source_page": "Middleware",
    "source_url": "https://www.motia.dev/docs/development-guide/middleware#reusing-middleware =====",
    "chunk_topic": "Middleware",
    "chunk_id": "Middleware (Part 1)",
    "text": "Middleware\nRun code before and after your API handlers\nWhat is Middleware?\nMiddleware runs before your API handler. Use it for authentication, logging, error handling, or any logic that applies to multiple endpoints.\nHow It Works\nA middleware is a function that receives three arguments:\nmiddleware(req, ctx, next)\nmiddleware(req, ctx, next)\nreq- The incoming request (same as handler)\nctx- The context object (same as handler)\nnext()- Call this to continue to the handler\nIf you don't callnext(), the request stops. The handler never runs.\nnext()\nSimple Example\nimport{ ApiMiddleware }from'motia'constauthMiddleware:ApiMiddleware=async(req,ctx,next)=>{if(!req.headers.authorization) {return{ status:401, body: { error:'Unauthorized'} }}returnnext()}exportconstconfig={name:'ProtectedEndpoint',type:'api',path:'/protected',method:'GET',middleware: [authMiddleware]}exportconsthandler=async(req,ctx)=>{return{ status:200, body: { message:'Success'} }}\nimport{ ApiMiddleware }from'motia'constauthMiddleware:ApiMiddleware=async(req,ctx,next)=>{if(!req.headers.authorization) {return{ status:401, body: { error:'Unauthorized'} }}returnnext()}exportconstconfig={name:'ProtectedEndpoint',type:'api',path:'/protected',method:'GET',middleware: [authMiddleware]}exportconsthandler=async(req,ctx)=>{return{ status:200, body: { message:'Success'} }}\nExecution Order\nMiddleware runs in the order you list them:\nexportconstconfig={name:'MyEndpoint',type:'api',path:'/endpoint',method:'POST',middleware: [loggingMiddleware,// Runs firstauthMiddleware,// Runs seconderrorMiddleware// Runs third]}\nexportconstconfig={name:'MyEndpoint',type:'api',path:'/endpoint',method:'POST',middleware: [loggingMiddleware,// Runs firstauthMiddleware,// Runs seconderrorMiddleware// Runs third]}\nModifying Responses\nAwaitnext()to get the response, then modify it:\nnext()\nconstaddHeadersMiddleware=async(req,ctx,next)=>{constresponse=awaitnext()return{...response,headers: {...response.headers,'X-Request-Id': ctx.traceId}}}\nconstaddHeadersMiddleware=async(req,ctx,next)=>{constresponse=awaitnext()return{...response,headers: {...response.headers,'X-Request"
}
================================================================================
{
    "source_page": "Middleware",
    "source_url": "https://www.motia.dev/docs/development-guide/middleware#reusing-middleware =====",
    "chunk_topic": "Middleware",
    "chunk_id": "Middleware (Part 2)",
    "text": ",headers: {...response.headers,'X-Request-Id': ctx.traceId}}}\nconstaddHeadersMiddleware=async(req,ctx,next)=>{constresponse=awaitnext()return{...response,headers: {...response.headers,'X-Request-Id': ctx.traceId}}}\nError Handling\nCatch errors from handlers:\nimport{ ZodError }from'zod'consterrorMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error:any) {if(errorinstanceofZodError) {ctx.logger.error('Validation error', { errors: error.errors })return{ status:400, body: { error:'Validation failed'} }}ctx.logger.error('Unexpected error', { error: error.message })return{ status:500, body: { error:'Internal server error'} }}}\nimport{ ZodError }from'zod'consterrorMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error:any) {if(errorinstanceofZodError) {ctx.logger.error('Validation error', { errors: error.errors })return{ status:400, body: { error:'Validation failed'} }}ctx.logger.error('Unexpected error', { error: error.message })return{ status:500, body: { error:'Internal server error'} }}}\nReusing Middleware\nCreate middleware files in a shared location:\nexportconstcoreMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error) {ctx.logger.error('Error', { error })return{ status:500, body: { error:'Internal server error'} }}}\nexportconstcoreMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error) {ctx.logger.error('Error', { error })return{ status:500, body: { error:'Internal server error'} }}}\nImport and use across steps:\nimport{ coreMiddleware }from'../middlewares/core.middleware'exportconstconfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET',middleware: [coreMiddleware]}\nimport{ coreMiddleware }from'../middlewares/core.middleware'exportconstconfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET',middleware: [coreMiddleware]}\nWhat's Next?\nTriggers\nLearn more about Triggers\nTesting\nLearn more about testing your Motia Steps\nCustomizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows"
}
================================================================================
{
    "source_page": "Middleware",
    "source_url": "https://www.motia.dev/docs/development-guide/middleware#reusing-middleware =====",
    "chunk_topic": "Middleware",
    "chunk_id": "Middleware (Part 3)",
    "text": "GET',middleware: [coreMiddleware]}\nWhat's Next?\nTriggers\nLearn more about Triggers\nTesting\nLearn more about testing your Motia Steps\nCustomizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nTesting\nLearn how to write and run tests for your Motia components\nOn this page"
}
================================================================================
{
    "source_page": "Middleware",
    "source_url": "https://www.motia.dev/docs/development-guide/middleware#whats-next =====",
    "chunk_topic": "Middleware",
    "chunk_id": "Middleware (Part 1)",
    "text": "Middleware\nRun code before and after your API handlers\nWhat is Middleware?\nMiddleware runs before your API handler. Use it for authentication, logging, error handling, or any logic that applies to multiple endpoints.\nHow It Works\nA middleware is a function that receives three arguments:\nmiddleware(req, ctx, next)\nmiddleware(req, ctx, next)\nreq- The incoming request (same as handler)\nctx- The context object (same as handler)\nnext()- Call this to continue to the handler\nIf you don't callnext(), the request stops. The handler never runs.\nnext()\nSimple Example\nimport{ ApiMiddleware }from'motia'constauthMiddleware:ApiMiddleware=async(req,ctx,next)=>{if(!req.headers.authorization) {return{ status:401, body: { error:'Unauthorized'} }}returnnext()}exportconstconfig={name:'ProtectedEndpoint',type:'api',path:'/protected',method:'GET',middleware: [authMiddleware]}exportconsthandler=async(req,ctx)=>{return{ status:200, body: { message:'Success'} }}\nimport{ ApiMiddleware }from'motia'constauthMiddleware:ApiMiddleware=async(req,ctx,next)=>{if(!req.headers.authorization) {return{ status:401, body: { error:'Unauthorized'} }}returnnext()}exportconstconfig={name:'ProtectedEndpoint',type:'api',path:'/protected',method:'GET',middleware: [authMiddleware]}exportconsthandler=async(req,ctx)=>{return{ status:200, body: { message:'Success'} }}\nExecution Order\nMiddleware runs in the order you list them:\nexportconstconfig={name:'MyEndpoint',type:'api',path:'/endpoint',method:'POST',middleware: [loggingMiddleware,// Runs firstauthMiddleware,// Runs seconderrorMiddleware// Runs third]}\nexportconstconfig={name:'MyEndpoint',type:'api',path:'/endpoint',method:'POST',middleware: [loggingMiddleware,// Runs firstauthMiddleware,// Runs seconderrorMiddleware// Runs third]}\nModifying Responses\nAwaitnext()to get the response, then modify it:\nnext()\nconstaddHeadersMiddleware=async(req,ctx,next)=>{constresponse=awaitnext()return{...response,headers: {...response.headers,'X-Request-Id': ctx.traceId}}}\nconstaddHeadersMiddleware=async(req,ctx,next)=>{constresponse=awaitnext()return{...response,headers: {...response.headers,'X-Request"
}
================================================================================
{
    "source_page": "Middleware",
    "source_url": "https://www.motia.dev/docs/development-guide/middleware#whats-next =====",
    "chunk_topic": "Middleware",
    "chunk_id": "Middleware (Part 2)",
    "text": ",headers: {...response.headers,'X-Request-Id': ctx.traceId}}}\nconstaddHeadersMiddleware=async(req,ctx,next)=>{constresponse=awaitnext()return{...response,headers: {...response.headers,'X-Request-Id': ctx.traceId}}}\nError Handling\nCatch errors from handlers:\nimport{ ZodError }from'zod'consterrorMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error:any) {if(errorinstanceofZodError) {ctx.logger.error('Validation error', { errors: error.errors })return{ status:400, body: { error:'Validation failed'} }}ctx.logger.error('Unexpected error', { error: error.message })return{ status:500, body: { error:'Internal server error'} }}}\nimport{ ZodError }from'zod'consterrorMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error:any) {if(errorinstanceofZodError) {ctx.logger.error('Validation error', { errors: error.errors })return{ status:400, body: { error:'Validation failed'} }}ctx.logger.error('Unexpected error', { error: error.message })return{ status:500, body: { error:'Internal server error'} }}}\nReusing Middleware\nCreate middleware files in a shared location:\nexportconstcoreMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error) {ctx.logger.error('Error', { error })return{ status:500, body: { error:'Internal server error'} }}}\nexportconstcoreMiddleware=async(req,ctx,next)=>{try{returnawaitnext()}catch(error) {ctx.logger.error('Error', { error })return{ status:500, body: { error:'Internal server error'} }}}\nImport and use across steps:\nimport{ coreMiddleware }from'../middlewares/core.middleware'exportconstconfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET',middleware: [coreMiddleware]}\nimport{ coreMiddleware }from'../middlewares/core.middleware'exportconstconfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET',middleware: [coreMiddleware]}\nWhat's Next?\nTriggers\nLearn more about Triggers\nTesting\nLearn more about testing your Motia Steps\nCustomizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows"
}
================================================================================
{
    "source_page": "Middleware",
    "source_url": "https://www.motia.dev/docs/development-guide/middleware#whats-next =====",
    "chunk_topic": "Middleware",
    "chunk_id": "Middleware (Part 3)",
    "text": "GET',middleware: [coreMiddleware]}\nWhat's Next?\nTriggers\nLearn more about Triggers\nTesting\nLearn more about testing your Motia Steps\nCustomizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nTesting\nLearn how to write and run tests for your Motia components\nOn this page"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#triggers =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 1)",
    "text": "Steps\nOne primitive to build any backend. Simple, composable, and multi-language.\nOne Primitive for Any Backend\nAStepis the core primitive in Motia. Instead of juggling separate frameworks for APIs, background jobs, queues, or workflows, you define everything in one place:how it runs, when it runs, where it runs, and what it does.\nEvery Step file contains two parts:\nConfig\u2192 defines when and how the Step runs, and gives it a uniquename\nname\nHandler\u2192 the function that executes your business logic\nMotia automatically discovers any file ending in.step.ts,.step.js, or_step.py.The filename tells Motia to load it, and thenamein theconfiguniquely identifies the Step inside your system.\n.step.ts\n.step.js\n_step.py\nname\nconfig\nThe Simplest Example\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\n\ud83d\udc49 That\u2019s all you need to make a running API endpoint.Motia will auto-discover this file and wire it into your backend.\nSteps Work Together: Emit + Subscribe\nSteps aren\u2019t isolated. They communicate byemittingandsubscribingto events.This is the core of how you build backends with Motia.\nExample Flow: API Step \u2192 Event Step\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true}"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#triggers =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 2)",
    "text": ".sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\n\ud83d\udc49 With just two files, you have anAPI endpointthat triggers anevent-driven workflow.\nTriggers\nEvery Step has atypethat defineshow it triggers:\ntype\napi\nevent\ncron\nAPI Trigger\nRuns when an HTTP request hits the path.\nExample:\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id:"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#triggers =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 3)",
    "text": "/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nConfig:\nname\ntype\n'api'\npath\n:params\nmethod\nbodySchema\nHandler:handler(req, ctx)\nhandler(req, ctx)\nreq- Request withbody,headers,pathParams,queryParams\nreq\nbody\nheaders\npathParams\nqueryParams\nctx- Context withlogger,emit,state,streams,traceId\nctx\nlogger\nemit\nstate\nstreams\ntraceId\nReturns{ status, body, headers? }\n{ status, body, headers? }\nContext Object\nEvery handler receives actxobject with these tools:\nctx\nlogger\ninfo\nwarn\nerror\nemit\nstate\nstreams\ntraceId\nCore Functionality\nState \u2013 Persistent Data\nKey-value storage shared across Steps and workflows.\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nLogging \u2013 Structured & Contextual\nFor debugging, monitoring, and observability.\nlogger.info('Processing user', { userId:'123'});\nlogger.info('Processing user', { userId:'123'});\nStreams \u2013 Real-Time Data\nPush updates directly to connected clients.\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nRemember\nSteps are just files.Export aconfigandhandler.\nconfig\nhandler\nMotia auto-discovers and connects them.\nCombine Steps withemit + subscribeto build APIs, workflows, background jobs, or entire systems.\nWhat\u2019s Next?\n\ud83d\udc49Build your first app \u2192\nOverview\nOne primitive, any language, event-driven by default - that's Motia\nWorkbench\nVisualize, test, and debug your Motia flows with the built-in development platform\nOn this page"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#one-primitive-for-any-backend =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 1)",
    "text": "Steps\nOne primitive to build any backend. Simple, composable, and multi-language.\nOne Primitive for Any Backend\nAStepis the core primitive in Motia. Instead of juggling separate frameworks for APIs, background jobs, queues, or workflows, you define everything in one place:how it runs, when it runs, where it runs, and what it does.\nEvery Step file contains two parts:\nConfig\u2192 defines when and how the Step runs, and gives it a uniquename\nname\nHandler\u2192 the function that executes your business logic\nMotia automatically discovers any file ending in.step.ts,.step.js, or_step.py.The filename tells Motia to load it, and thenamein theconfiguniquely identifies the Step inside your system.\n.step.ts\n.step.js\n_step.py\nname\nconfig\nThe Simplest Example\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\n\ud83d\udc49 That\u2019s all you need to make a running API endpoint.Motia will auto-discover this file and wire it into your backend.\nSteps Work Together: Emit + Subscribe\nSteps aren\u2019t isolated. They communicate byemittingandsubscribingto events.This is the core of how you build backends with Motia.\nExample Flow: API Step \u2192 Event Step\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true}"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#one-primitive-for-any-backend =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 2)",
    "text": ".sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\n\ud83d\udc49 With just two files, you have anAPI endpointthat triggers anevent-driven workflow.\nTriggers\nEvery Step has atypethat defineshow it triggers:\ntype\napi\nevent\ncron\nAPI Trigger\nRuns when an HTTP request hits the path.\nExample:\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id:"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#one-primitive-for-any-backend =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 3)",
    "text": "/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nConfig:\nname\ntype\n'api'\npath\n:params\nmethod\nbodySchema\nHandler:handler(req, ctx)\nhandler(req, ctx)\nreq- Request withbody,headers,pathParams,queryParams\nreq\nbody\nheaders\npathParams\nqueryParams\nctx- Context withlogger,emit,state,streams,traceId\nctx\nlogger\nemit\nstate\nstreams\ntraceId\nReturns{ status, body, headers? }\n{ status, body, headers? }\nContext Object\nEvery handler receives actxobject with these tools:\nctx\nlogger\ninfo\nwarn\nerror\nemit\nstate\nstreams\ntraceId\nCore Functionality\nState \u2013 Persistent Data\nKey-value storage shared across Steps and workflows.\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nLogging \u2013 Structured & Contextual\nFor debugging, monitoring, and observability.\nlogger.info('Processing user', { userId:'123'});\nlogger.info('Processing user', { userId:'123'});\nStreams \u2013 Real-Time Data\nPush updates directly to connected clients.\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nRemember\nSteps are just files.Export aconfigandhandler.\nconfig\nhandler\nMotia auto-discovers and connects them.\nCombine Steps withemit + subscribeto build APIs, workflows, background jobs, or entire systems.\nWhat\u2019s Next?\n\ud83d\udc49Build your first app \u2192\nOverview\nOne primitive, any language, event-driven by default - that's Motia\nWorkbench\nVisualize, test, and debug your Motia flows with the built-in development platform\nOn this page"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#the-simplest-example =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 1)",
    "text": "Steps\nOne primitive to build any backend. Simple, composable, and multi-language.\nOne Primitive for Any Backend\nAStepis the core primitive in Motia. Instead of juggling separate frameworks for APIs, background jobs, queues, or workflows, you define everything in one place:how it runs, when it runs, where it runs, and what it does.\nEvery Step file contains two parts:\nConfig\u2192 defines when and how the Step runs, and gives it a uniquename\nname\nHandler\u2192 the function that executes your business logic\nMotia automatically discovers any file ending in.step.ts,.step.js, or_step.py.The filename tells Motia to load it, and thenamein theconfiguniquely identifies the Step inside your system.\n.step.ts\n.step.js\n_step.py\nname\nconfig\nThe Simplest Example\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\n\ud83d\udc49 That\u2019s all you need to make a running API endpoint.Motia will auto-discover this file and wire it into your backend.\nSteps Work Together: Emit + Subscribe\nSteps aren\u2019t isolated. They communicate byemittingandsubscribingto events.This is the core of how you build backends with Motia.\nExample Flow: API Step \u2192 Event Step\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true}"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#the-simplest-example =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 2)",
    "text": ".sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\n\ud83d\udc49 With just two files, you have anAPI endpointthat triggers anevent-driven workflow.\nTriggers\nEvery Step has atypethat defineshow it triggers:\ntype\napi\nevent\ncron\nAPI Trigger\nRuns when an HTTP request hits the path.\nExample:\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id:"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#the-simplest-example =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 3)",
    "text": "/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nConfig:\nname\ntype\n'api'\npath\n:params\nmethod\nbodySchema\nHandler:handler(req, ctx)\nhandler(req, ctx)\nreq- Request withbody,headers,pathParams,queryParams\nreq\nbody\nheaders\npathParams\nqueryParams\nctx- Context withlogger,emit,state,streams,traceId\nctx\nlogger\nemit\nstate\nstreams\ntraceId\nReturns{ status, body, headers? }\n{ status, body, headers? }\nContext Object\nEvery handler receives actxobject with these tools:\nctx\nlogger\ninfo\nwarn\nerror\nemit\nstate\nstreams\ntraceId\nCore Functionality\nState \u2013 Persistent Data\nKey-value storage shared across Steps and workflows.\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nLogging \u2013 Structured & Contextual\nFor debugging, monitoring, and observability.\nlogger.info('Processing user', { userId:'123'});\nlogger.info('Processing user', { userId:'123'});\nStreams \u2013 Real-Time Data\nPush updates directly to connected clients.\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nRemember\nSteps are just files.Export aconfigandhandler.\nconfig\nhandler\nMotia auto-discovers and connects them.\nCombine Steps withemit + subscribeto build APIs, workflows, background jobs, or entire systems.\nWhat\u2019s Next?\n\ud83d\udc49Build your first app \u2192\nOverview\nOne primitive, any language, event-driven by default - that's Motia\nWorkbench\nVisualize, test, and debug your Motia flows with the built-in development platform\nOn this page"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#steps-work-together-emit--subscribe =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 1)",
    "text": "Steps\nOne primitive to build any backend. Simple, composable, and multi-language.\nOne Primitive for Any Backend\nAStepis the core primitive in Motia. Instead of juggling separate frameworks for APIs, background jobs, queues, or workflows, you define everything in one place:how it runs, when it runs, where it runs, and what it does.\nEvery Step file contains two parts:\nConfig\u2192 defines when and how the Step runs, and gives it a uniquename\nname\nHandler\u2192 the function that executes your business logic\nMotia automatically discovers any file ending in.step.ts,.step.js, or_step.py.The filename tells Motia to load it, and thenamein theconfiguniquely identifies the Step inside your system.\n.step.ts\n.step.js\n_step.py\nname\nconfig\nThe Simplest Example\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\n\ud83d\udc49 That\u2019s all you need to make a running API endpoint.Motia will auto-discover this file and wire it into your backend.\nSteps Work Together: Emit + Subscribe\nSteps aren\u2019t isolated. They communicate byemittingandsubscribingto events.This is the core of how you build backends with Motia.\nExample Flow: API Step \u2192 Event Step\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true}"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#steps-work-together-emit--subscribe =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 2)",
    "text": ".sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\n\ud83d\udc49 With just two files, you have anAPI endpointthat triggers anevent-driven workflow.\nTriggers\nEvery Step has atypethat defineshow it triggers:\ntype\napi\nevent\ncron\nAPI Trigger\nRuns when an HTTP request hits the path.\nExample:\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id:"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#steps-work-together-emit--subscribe =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 3)",
    "text": "/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nConfig:\nname\ntype\n'api'\npath\n:params\nmethod\nbodySchema\nHandler:handler(req, ctx)\nhandler(req, ctx)\nreq- Request withbody,headers,pathParams,queryParams\nreq\nbody\nheaders\npathParams\nqueryParams\nctx- Context withlogger,emit,state,streams,traceId\nctx\nlogger\nemit\nstate\nstreams\ntraceId\nReturns{ status, body, headers? }\n{ status, body, headers? }\nContext Object\nEvery handler receives actxobject with these tools:\nctx\nlogger\ninfo\nwarn\nerror\nemit\nstate\nstreams\ntraceId\nCore Functionality\nState \u2013 Persistent Data\nKey-value storage shared across Steps and workflows.\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nLogging \u2013 Structured & Contextual\nFor debugging, monitoring, and observability.\nlogger.info('Processing user', { userId:'123'});\nlogger.info('Processing user', { userId:'123'});\nStreams \u2013 Real-Time Data\nPush updates directly to connected clients.\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nRemember\nSteps are just files.Export aconfigandhandler.\nconfig\nhandler\nMotia auto-discovers and connects them.\nCombine Steps withemit + subscribeto build APIs, workflows, background jobs, or entire systems.\nWhat\u2019s Next?\n\ud83d\udc49Build your first app \u2192\nOverview\nOne primitive, any language, event-driven by default - that's Motia\nWorkbench\nVisualize, test, and debug your Motia flows with the built-in development platform\nOn this page"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#example-flow-api-step--event-step =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 1)",
    "text": "Steps\nOne primitive to build any backend. Simple, composable, and multi-language.\nOne Primitive for Any Backend\nAStepis the core primitive in Motia. Instead of juggling separate frameworks for APIs, background jobs, queues, or workflows, you define everything in one place:how it runs, when it runs, where it runs, and what it does.\nEvery Step file contains two parts:\nConfig\u2192 defines when and how the Step runs, and gives it a uniquename\nname\nHandler\u2192 the function that executes your business logic\nMotia automatically discovers any file ending in.step.ts,.step.js, or_step.py.The filename tells Motia to load it, and thenamein theconfiguniquely identifies the Step inside your system.\n.step.ts\n.step.js\n_step.py\nname\nconfig\nThe Simplest Example\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\n\ud83d\udc49 That\u2019s all you need to make a running API endpoint.Motia will auto-discover this file and wire it into your backend.\nSteps Work Together: Emit + Subscribe\nSteps aren\u2019t isolated. They communicate byemittingandsubscribingto events.This is the core of how you build backends with Motia.\nExample Flow: API Step \u2192 Event Step\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true}"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#example-flow-api-step--event-step =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 2)",
    "text": ".sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\n\ud83d\udc49 With just two files, you have anAPI endpointthat triggers anevent-driven workflow.\nTriggers\nEvery Step has atypethat defineshow it triggers:\ntype\napi\nevent\ncron\nAPI Trigger\nRuns when an HTTP request hits the path.\nExample:\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id:"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#example-flow-api-step--event-step =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 3)",
    "text": "/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nConfig:\nname\ntype\n'api'\npath\n:params\nmethod\nbodySchema\nHandler:handler(req, ctx)\nhandler(req, ctx)\nreq- Request withbody,headers,pathParams,queryParams\nreq\nbody\nheaders\npathParams\nqueryParams\nctx- Context withlogger,emit,state,streams,traceId\nctx\nlogger\nemit\nstate\nstreams\ntraceId\nReturns{ status, body, headers? }\n{ status, body, headers? }\nContext Object\nEvery handler receives actxobject with these tools:\nctx\nlogger\ninfo\nwarn\nerror\nemit\nstate\nstreams\ntraceId\nCore Functionality\nState \u2013 Persistent Data\nKey-value storage shared across Steps and workflows.\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nLogging \u2013 Structured & Contextual\nFor debugging, monitoring, and observability.\nlogger.info('Processing user', { userId:'123'});\nlogger.info('Processing user', { userId:'123'});\nStreams \u2013 Real-Time Data\nPush updates directly to connected clients.\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nRemember\nSteps are just files.Export aconfigandhandler.\nconfig\nhandler\nMotia auto-discovers and connects them.\nCombine Steps withemit + subscribeto build APIs, workflows, background jobs, or entire systems.\nWhat\u2019s Next?\n\ud83d\udc49Build your first app \u2192\nOverview\nOne primitive, any language, event-driven by default - that's Motia\nWorkbench\nVisualize, test, and debug your Motia flows with the built-in development platform\nOn this page"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#api-trigger =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 1)",
    "text": "Steps\nOne primitive to build any backend. Simple, composable, and multi-language.\nOne Primitive for Any Backend\nAStepis the core primitive in Motia. Instead of juggling separate frameworks for APIs, background jobs, queues, or workflows, you define everything in one place:how it runs, when it runs, where it runs, and what it does.\nEvery Step file contains two parts:\nConfig\u2192 defines when and how the Step runs, and gives it a uniquename\nname\nHandler\u2192 the function that executes your business logic\nMotia automatically discovers any file ending in.step.ts,.step.js, or_step.py.The filename tells Motia to load it, and thenamein theconfiguniquely identifies the Step inside your system.\n.step.ts\n.step.js\n_step.py\nname\nconfig\nThe Simplest Example\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\n\ud83d\udc49 That\u2019s all you need to make a running API endpoint.Motia will auto-discover this file and wire it into your backend.\nSteps Work Together: Emit + Subscribe\nSteps aren\u2019t isolated. They communicate byemittingandsubscribingto events.This is the core of how you build backends with Motia.\nExample Flow: API Step \u2192 Event Step\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true}"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#api-trigger =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 2)",
    "text": ".sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\n\ud83d\udc49 With just two files, you have anAPI endpointthat triggers anevent-driven workflow.\nTriggers\nEvery Step has atypethat defineshow it triggers:\ntype\napi\nevent\ncron\nAPI Trigger\nRuns when an HTTP request hits the path.\nExample:\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id:"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#api-trigger =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 3)",
    "text": "/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nConfig:\nname\ntype\n'api'\npath\n:params\nmethod\nbodySchema\nHandler:handler(req, ctx)\nhandler(req, ctx)\nreq- Request withbody,headers,pathParams,queryParams\nreq\nbody\nheaders\npathParams\nqueryParams\nctx- Context withlogger,emit,state,streams,traceId\nctx\nlogger\nemit\nstate\nstreams\ntraceId\nReturns{ status, body, headers? }\n{ status, body, headers? }\nContext Object\nEvery handler receives actxobject with these tools:\nctx\nlogger\ninfo\nwarn\nerror\nemit\nstate\nstreams\ntraceId\nCore Functionality\nState \u2013 Persistent Data\nKey-value storage shared across Steps and workflows.\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nLogging \u2013 Structured & Contextual\nFor debugging, monitoring, and observability.\nlogger.info('Processing user', { userId:'123'});\nlogger.info('Processing user', { userId:'123'});\nStreams \u2013 Real-Time Data\nPush updates directly to connected clients.\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nRemember\nSteps are just files.Export aconfigandhandler.\nconfig\nhandler\nMotia auto-discovers and connects them.\nCombine Steps withemit + subscribeto build APIs, workflows, background jobs, or entire systems.\nWhat\u2019s Next?\n\ud83d\udc49Build your first app \u2192\nOverview\nOne primitive, any language, event-driven by default - that's Motia\nWorkbench\nVisualize, test, and debug your Motia flows with the built-in development platform\nOn this page"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#context-object =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 1)",
    "text": "Steps\nOne primitive to build any backend. Simple, composable, and multi-language.\nOne Primitive for Any Backend\nAStepis the core primitive in Motia. Instead of juggling separate frameworks for APIs, background jobs, queues, or workflows, you define everything in one place:how it runs, when it runs, where it runs, and what it does.\nEvery Step file contains two parts:\nConfig\u2192 defines when and how the Step runs, and gives it a uniquename\nname\nHandler\u2192 the function that executes your business logic\nMotia automatically discovers any file ending in.step.ts,.step.js, or_step.py.The filename tells Motia to load it, and thenamein theconfiguniquely identifies the Step inside your system.\n.step.ts\n.step.js\n_step.py\nname\nconfig\nThe Simplest Example\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\n\ud83d\udc49 That\u2019s all you need to make a running API endpoint.Motia will auto-discover this file and wire it into your backend.\nSteps Work Together: Emit + Subscribe\nSteps aren\u2019t isolated. They communicate byemittingandsubscribingto events.This is the core of how you build backends with Motia.\nExample Flow: API Step \u2192 Event Step\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true}"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#context-object =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 2)",
    "text": ".sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\n\ud83d\udc49 With just two files, you have anAPI endpointthat triggers anevent-driven workflow.\nTriggers\nEvery Step has atypethat defineshow it triggers:\ntype\napi\nevent\ncron\nAPI Trigger\nRuns when an HTTP request hits the path.\nExample:\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id:"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#context-object =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 3)",
    "text": "/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nConfig:\nname\ntype\n'api'\npath\n:params\nmethod\nbodySchema\nHandler:handler(req, ctx)\nhandler(req, ctx)\nreq- Request withbody,headers,pathParams,queryParams\nreq\nbody\nheaders\npathParams\nqueryParams\nctx- Context withlogger,emit,state,streams,traceId\nctx\nlogger\nemit\nstate\nstreams\ntraceId\nReturns{ status, body, headers? }\n{ status, body, headers? }\nContext Object\nEvery handler receives actxobject with these tools:\nctx\nlogger\ninfo\nwarn\nerror\nemit\nstate\nstreams\ntraceId\nCore Functionality\nState \u2013 Persistent Data\nKey-value storage shared across Steps and workflows.\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nLogging \u2013 Structured & Contextual\nFor debugging, monitoring, and observability.\nlogger.info('Processing user', { userId:'123'});\nlogger.info('Processing user', { userId:'123'});\nStreams \u2013 Real-Time Data\nPush updates directly to connected clients.\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nRemember\nSteps are just files.Export aconfigandhandler.\nconfig\nhandler\nMotia auto-discovers and connects them.\nCombine Steps withemit + subscribeto build APIs, workflows, background jobs, or entire systems.\nWhat\u2019s Next?\n\ud83d\udc49Build your first app \u2192\nOverview\nOne primitive, any language, event-driven by default - that's Motia\nWorkbench\nVisualize, test, and debug your Motia flows with the built-in development platform\nOn this page"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#core-functionality =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 1)",
    "text": "Steps\nOne primitive to build any backend. Simple, composable, and multi-language.\nOne Primitive for Any Backend\nAStepis the core primitive in Motia. Instead of juggling separate frameworks for APIs, background jobs, queues, or workflows, you define everything in one place:how it runs, when it runs, where it runs, and what it does.\nEvery Step file contains two parts:\nConfig\u2192 defines when and how the Step runs, and gives it a uniquename\nname\nHandler\u2192 the function that executes your business logic\nMotia automatically discovers any file ending in.step.ts,.step.js, or_step.py.The filename tells Motia to load it, and thenamein theconfiguniquely identifies the Step inside your system.\n.step.ts\n.step.js\n_step.py\nname\nconfig\nThe Simplest Example\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\n\ud83d\udc49 That\u2019s all you need to make a running API endpoint.Motia will auto-discover this file and wire it into your backend.\nSteps Work Together: Emit + Subscribe\nSteps aren\u2019t isolated. They communicate byemittingandsubscribingto events.This is the core of how you build backends with Motia.\nExample Flow: API Step \u2192 Event Step\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true}"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#core-functionality =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 2)",
    "text": ".sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\n\ud83d\udc49 With just two files, you have anAPI endpointthat triggers anevent-driven workflow.\nTriggers\nEvery Step has atypethat defineshow it triggers:\ntype\napi\nevent\ncron\nAPI Trigger\nRuns when an HTTP request hits the path.\nExample:\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id:"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#core-functionality =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 3)",
    "text": "/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nConfig:\nname\ntype\n'api'\npath\n:params\nmethod\nbodySchema\nHandler:handler(req, ctx)\nhandler(req, ctx)\nreq- Request withbody,headers,pathParams,queryParams\nreq\nbody\nheaders\npathParams\nqueryParams\nctx- Context withlogger,emit,state,streams,traceId\nctx\nlogger\nemit\nstate\nstreams\ntraceId\nReturns{ status, body, headers? }\n{ status, body, headers? }\nContext Object\nEvery handler receives actxobject with these tools:\nctx\nlogger\ninfo\nwarn\nerror\nemit\nstate\nstreams\ntraceId\nCore Functionality\nState \u2013 Persistent Data\nKey-value storage shared across Steps and workflows.\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nLogging \u2013 Structured & Contextual\nFor debugging, monitoring, and observability.\nlogger.info('Processing user', { userId:'123'});\nlogger.info('Processing user', { userId:'123'});\nStreams \u2013 Real-Time Data\nPush updates directly to connected clients.\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nRemember\nSteps are just files.Export aconfigandhandler.\nconfig\nhandler\nMotia auto-discovers and connects them.\nCombine Steps withemit + subscribeto build APIs, workflows, background jobs, or entire systems.\nWhat\u2019s Next?\n\ud83d\udc49Build your first app \u2192\nOverview\nOne primitive, any language, event-driven by default - that's Motia\nWorkbench\nVisualize, test, and debug your Motia flows with the built-in development platform\nOn this page"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#state--persistent-data =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 1)",
    "text": "Steps\nOne primitive to build any backend. Simple, composable, and multi-language.\nOne Primitive for Any Backend\nAStepis the core primitive in Motia. Instead of juggling separate frameworks for APIs, background jobs, queues, or workflows, you define everything in one place:how it runs, when it runs, where it runs, and what it does.\nEvery Step file contains two parts:\nConfig\u2192 defines when and how the Step runs, and gives it a uniquename\nname\nHandler\u2192 the function that executes your business logic\nMotia automatically discovers any file ending in.step.ts,.step.js, or_step.py.The filename tells Motia to load it, and thenamein theconfiguniquely identifies the Step inside your system.\n.step.ts\n.step.js\n_step.py\nname\nconfig\nThe Simplest Example\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\n\ud83d\udc49 That\u2019s all you need to make a running API endpoint.Motia will auto-discover this file and wire it into your backend.\nSteps Work Together: Emit + Subscribe\nSteps aren\u2019t isolated. They communicate byemittingandsubscribingto events.This is the core of how you build backends with Motia.\nExample Flow: API Step \u2192 Event Step\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true}"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#state--persistent-data =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 2)",
    "text": ".sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\n\ud83d\udc49 With just two files, you have anAPI endpointthat triggers anevent-driven workflow.\nTriggers\nEvery Step has atypethat defineshow it triggers:\ntype\napi\nevent\ncron\nAPI Trigger\nRuns when an HTTP request hits the path.\nExample:\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id:"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#state--persistent-data =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 3)",
    "text": "/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nConfig:\nname\ntype\n'api'\npath\n:params\nmethod\nbodySchema\nHandler:handler(req, ctx)\nhandler(req, ctx)\nreq- Request withbody,headers,pathParams,queryParams\nreq\nbody\nheaders\npathParams\nqueryParams\nctx- Context withlogger,emit,state,streams,traceId\nctx\nlogger\nemit\nstate\nstreams\ntraceId\nReturns{ status, body, headers? }\n{ status, body, headers? }\nContext Object\nEvery handler receives actxobject with these tools:\nctx\nlogger\ninfo\nwarn\nerror\nemit\nstate\nstreams\ntraceId\nCore Functionality\nState \u2013 Persistent Data\nKey-value storage shared across Steps and workflows.\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nLogging \u2013 Structured & Contextual\nFor debugging, monitoring, and observability.\nlogger.info('Processing user', { userId:'123'});\nlogger.info('Processing user', { userId:'123'});\nStreams \u2013 Real-Time Data\nPush updates directly to connected clients.\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nRemember\nSteps are just files.Export aconfigandhandler.\nconfig\nhandler\nMotia auto-discovers and connects them.\nCombine Steps withemit + subscribeto build APIs, workflows, background jobs, or entire systems.\nWhat\u2019s Next?\n\ud83d\udc49Build your first app \u2192\nOverview\nOne primitive, any language, event-driven by default - that's Motia\nWorkbench\nVisualize, test, and debug your Motia flows with the built-in development platform\nOn this page"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#logging--structured--contextual =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 1)",
    "text": "Steps\nOne primitive to build any backend. Simple, composable, and multi-language.\nOne Primitive for Any Backend\nAStepis the core primitive in Motia. Instead of juggling separate frameworks for APIs, background jobs, queues, or workflows, you define everything in one place:how it runs, when it runs, where it runs, and what it does.\nEvery Step file contains two parts:\nConfig\u2192 defines when and how the Step runs, and gives it a uniquename\nname\nHandler\u2192 the function that executes your business logic\nMotia automatically discovers any file ending in.step.ts,.step.js, or_step.py.The filename tells Motia to load it, and thenamein theconfiguniquely identifies the Step inside your system.\n.step.ts\n.step.js\n_step.py\nname\nconfig\nThe Simplest Example\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\n\ud83d\udc49 That\u2019s all you need to make a running API endpoint.Motia will auto-discover this file and wire it into your backend.\nSteps Work Together: Emit + Subscribe\nSteps aren\u2019t isolated. They communicate byemittingandsubscribingto events.This is the core of how you build backends with Motia.\nExample Flow: API Step \u2192 Event Step\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true}"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#logging--structured--contextual =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 2)",
    "text": ".sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\n\ud83d\udc49 With just two files, you have anAPI endpointthat triggers anevent-driven workflow.\nTriggers\nEvery Step has atypethat defineshow it triggers:\ntype\napi\nevent\ncron\nAPI Trigger\nRuns when an HTTP request hits the path.\nExample:\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id:"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#logging--structured--contextual =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 3)",
    "text": "/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nConfig:\nname\ntype\n'api'\npath\n:params\nmethod\nbodySchema\nHandler:handler(req, ctx)\nhandler(req, ctx)\nreq- Request withbody,headers,pathParams,queryParams\nreq\nbody\nheaders\npathParams\nqueryParams\nctx- Context withlogger,emit,state,streams,traceId\nctx\nlogger\nemit\nstate\nstreams\ntraceId\nReturns{ status, body, headers? }\n{ status, body, headers? }\nContext Object\nEvery handler receives actxobject with these tools:\nctx\nlogger\ninfo\nwarn\nerror\nemit\nstate\nstreams\ntraceId\nCore Functionality\nState \u2013 Persistent Data\nKey-value storage shared across Steps and workflows.\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nLogging \u2013 Structured & Contextual\nFor debugging, monitoring, and observability.\nlogger.info('Processing user', { userId:'123'});\nlogger.info('Processing user', { userId:'123'});\nStreams \u2013 Real-Time Data\nPush updates directly to connected clients.\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nRemember\nSteps are just files.Export aconfigandhandler.\nconfig\nhandler\nMotia auto-discovers and connects them.\nCombine Steps withemit + subscribeto build APIs, workflows, background jobs, or entire systems.\nWhat\u2019s Next?\n\ud83d\udc49Build your first app \u2192\nOverview\nOne primitive, any language, event-driven by default - that's Motia\nWorkbench\nVisualize, test, and debug your Motia flows with the built-in development platform\nOn this page"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#streams--real-time-data =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 1)",
    "text": "Steps\nOne primitive to build any backend. Simple, composable, and multi-language.\nOne Primitive for Any Backend\nAStepis the core primitive in Motia. Instead of juggling separate frameworks for APIs, background jobs, queues, or workflows, you define everything in one place:how it runs, when it runs, where it runs, and what it does.\nEvery Step file contains two parts:\nConfig\u2192 defines when and how the Step runs, and gives it a uniquename\nname\nHandler\u2192 the function that executes your business logic\nMotia automatically discovers any file ending in.step.ts,.step.js, or_step.py.The filename tells Motia to load it, and thenamein theconfiguniquely identifies the Step inside your system.\n.step.ts\n.step.js\n_step.py\nname\nconfig\nThe Simplest Example\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\n\ud83d\udc49 That\u2019s all you need to make a running API endpoint.Motia will auto-discover this file and wire it into your backend.\nSteps Work Together: Emit + Subscribe\nSteps aren\u2019t isolated. They communicate byemittingandsubscribingto events.This is the core of how you build backends with Motia.\nExample Flow: API Step \u2192 Event Step\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true}"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#streams--real-time-data =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 2)",
    "text": ".sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\n\ud83d\udc49 With just two files, you have anAPI endpointthat triggers anevent-driven workflow.\nTriggers\nEvery Step has atypethat defineshow it triggers:\ntype\napi\nevent\ncron\nAPI Trigger\nRuns when an HTTP request hits the path.\nExample:\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id:"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#streams--real-time-data =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 3)",
    "text": "/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nConfig:\nname\ntype\n'api'\npath\n:params\nmethod\nbodySchema\nHandler:handler(req, ctx)\nhandler(req, ctx)\nreq- Request withbody,headers,pathParams,queryParams\nreq\nbody\nheaders\npathParams\nqueryParams\nctx- Context withlogger,emit,state,streams,traceId\nctx\nlogger\nemit\nstate\nstreams\ntraceId\nReturns{ status, body, headers? }\n{ status, body, headers? }\nContext Object\nEvery handler receives actxobject with these tools:\nctx\nlogger\ninfo\nwarn\nerror\nemit\nstate\nstreams\ntraceId\nCore Functionality\nState \u2013 Persistent Data\nKey-value storage shared across Steps and workflows.\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nLogging \u2013 Structured & Contextual\nFor debugging, monitoring, and observability.\nlogger.info('Processing user', { userId:'123'});\nlogger.info('Processing user', { userId:'123'});\nStreams \u2013 Real-Time Data\nPush updates directly to connected clients.\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nRemember\nSteps are just files.Export aconfigandhandler.\nconfig\nhandler\nMotia auto-discovers and connects them.\nCombine Steps withemit + subscribeto build APIs, workflows, background jobs, or entire systems.\nWhat\u2019s Next?\n\ud83d\udc49Build your first app \u2192\nOverview\nOne primitive, any language, event-driven by default - that's Motia\nWorkbench\nVisualize, test, and debug your Motia flows with the built-in development platform\nOn this page"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#remember =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 1)",
    "text": "Steps\nOne primitive to build any backend. Simple, composable, and multi-language.\nOne Primitive for Any Backend\nAStepis the core primitive in Motia. Instead of juggling separate frameworks for APIs, background jobs, queues, or workflows, you define everything in one place:how it runs, when it runs, where it runs, and what it does.\nEvery Step file contains two parts:\nConfig\u2192 defines when and how the Step runs, and gives it a uniquename\nname\nHandler\u2192 the function that executes your business logic\nMotia automatically discovers any file ending in.step.ts,.step.js, or_step.py.The filename tells Motia to load it, and thenamein theconfiguniquely identifies the Step inside your system.\n.step.ts\n.step.js\n_step.py\nname\nconfig\nThe Simplest Example\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\n\ud83d\udc49 That\u2019s all you need to make a running API endpoint.Motia will auto-discover this file and wire it into your backend.\nSteps Work Together: Emit + Subscribe\nSteps aren\u2019t isolated. They communicate byemittingandsubscribingto events.This is the core of how you build backends with Motia.\nExample Flow: API Step \u2192 Event Step\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true}"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#remember =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 2)",
    "text": ".sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\n\ud83d\udc49 With just two files, you have anAPI endpointthat triggers anevent-driven workflow.\nTriggers\nEvery Step has atypethat defineshow it triggers:\ntype\napi\nevent\ncron\nAPI Trigger\nRuns when an HTTP request hits the path.\nExample:\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id:"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#remember =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 3)",
    "text": "/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nConfig:\nname\ntype\n'api'\npath\n:params\nmethod\nbodySchema\nHandler:handler(req, ctx)\nhandler(req, ctx)\nreq- Request withbody,headers,pathParams,queryParams\nreq\nbody\nheaders\npathParams\nqueryParams\nctx- Context withlogger,emit,state,streams,traceId\nctx\nlogger\nemit\nstate\nstreams\ntraceId\nReturns{ status, body, headers? }\n{ status, body, headers? }\nContext Object\nEvery handler receives actxobject with these tools:\nctx\nlogger\ninfo\nwarn\nerror\nemit\nstate\nstreams\ntraceId\nCore Functionality\nState \u2013 Persistent Data\nKey-value storage shared across Steps and workflows.\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nLogging \u2013 Structured & Contextual\nFor debugging, monitoring, and observability.\nlogger.info('Processing user', { userId:'123'});\nlogger.info('Processing user', { userId:'123'});\nStreams \u2013 Real-Time Data\nPush updates directly to connected clients.\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nRemember\nSteps are just files.Export aconfigandhandler.\nconfig\nhandler\nMotia auto-discovers and connects them.\nCombine Steps withemit + subscribeto build APIs, workflows, background jobs, or entire systems.\nWhat\u2019s Next?\n\ud83d\udc49Build your first app \u2192\nOverview\nOne primitive, any language, event-driven by default - that's Motia\nWorkbench\nVisualize, test, and debug your Motia flows with the built-in development platform\nOn this page"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#whats-next =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 1)",
    "text": "Steps\nOne primitive to build any backend. Simple, composable, and multi-language.\nOne Primitive for Any Backend\nAStepis the core primitive in Motia. Instead of juggling separate frameworks for APIs, background jobs, queues, or workflows, you define everything in one place:how it runs, when it runs, where it runs, and what it does.\nEvery Step file contains two parts:\nConfig\u2192 defines when and how the Step runs, and gives it a uniquename\nname\nHandler\u2192 the function that executes your business logic\nMotia automatically discovers any file ending in.step.ts,.step.js, or_step.py.The filename tells Motia to load it, and thenamein theconfiguniquely identifies the Step inside your system.\n.step.ts\n.step.js\n_step.py\nname\nconfig\nThe Simplest Example\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\n\ud83d\udc49 That\u2019s all you need to make a running API endpoint.Motia will auto-discover this file and wire it into your backend.\nSteps Work Together: Emit + Subscribe\nSteps aren\u2019t isolated. They communicate byemittingandsubscribingto events.This is the core of how you build backends with Motia.\nExample Flow: API Step \u2192 Event Step\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true}"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#whats-next =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 2)",
    "text": ".sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\n\ud83d\udc49 With just two files, you have anAPI endpointthat triggers anevent-driven workflow.\nTriggers\nEvery Step has atypethat defineshow it triggers:\ntype\napi\nevent\ncron\nAPI Trigger\nRuns when an HTTP request hits the path.\nExample:\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id:"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#whats-next =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 3)",
    "text": "/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nConfig:\nname\ntype\n'api'\npath\n:params\nmethod\nbodySchema\nHandler:handler(req, ctx)\nhandler(req, ctx)\nreq- Request withbody,headers,pathParams,queryParams\nreq\nbody\nheaders\npathParams\nqueryParams\nctx- Context withlogger,emit,state,streams,traceId\nctx\nlogger\nemit\nstate\nstreams\ntraceId\nReturns{ status, body, headers? }\n{ status, body, headers? }\nContext Object\nEvery handler receives actxobject with these tools:\nctx\nlogger\ninfo\nwarn\nerror\nemit\nstate\nstreams\ntraceId\nCore Functionality\nState \u2013 Persistent Data\nKey-value storage shared across Steps and workflows.\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nLogging \u2013 Structured & Contextual\nFor debugging, monitoring, and observability.\nlogger.info('Processing user', { userId:'123'});\nlogger.info('Processing user', { userId:'123'});\nStreams \u2013 Real-Time Data\nPush updates directly to connected clients.\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nRemember\nSteps are just files.Export aconfigandhandler.\nconfig\nhandler\nMotia auto-discovers and connects them.\nCombine Steps withemit + subscribeto build APIs, workflows, background jobs, or entire systems.\nWhat\u2019s Next?\n\ud83d\udc49Build your first app \u2192\nOverview\nOne primitive, any language, event-driven by default - that's Motia\nWorkbench\nVisualize, test, and debug your Motia flows with the built-in development platform\nOn this page"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#event-trigger =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 1)",
    "text": "Steps\nOne primitive to build any backend. Simple, composable, and multi-language.\nOne Primitive for Any Backend\nAStepis the core primitive in Motia. Instead of juggling separate frameworks for APIs, background jobs, queues, or workflows, you define everything in one place:how it runs, when it runs, where it runs, and what it does.\nEvery Step file contains two parts:\nConfig\u2192 defines when and how the Step runs, and gives it a uniquename\nname\nHandler\u2192 the function that executes your business logic\nMotia automatically discovers any file ending in.step.ts,.step.js, or_step.py.The filename tells Motia to load it, and thenamein theconfiguniquely identifies the Step inside your system.\n.step.ts\n.step.js\n_step.py\nname\nconfig\nThe Simplest Example\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\n\ud83d\udc49 That\u2019s all you need to make a running API endpoint.Motia will auto-discover this file and wire it into your backend.\nSteps Work Together: Emit + Subscribe\nSteps aren\u2019t isolated. They communicate byemittingandsubscribingto events.This is the core of how you build backends with Motia.\nExample Flow: API Step \u2192 Event Step\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true}"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#event-trigger =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 2)",
    "text": ".sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\n\ud83d\udc49 With just two files, you have anAPI endpointthat triggers anevent-driven workflow.\nTriggers\nEvery Step has atypethat defineshow it triggers:\ntype\napi\nevent\ncron\nAPI Trigger\nRuns when an HTTP request hits the path.\nExample:\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id:"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#event-trigger =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 3)",
    "text": "/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nConfig:\nname\ntype\n'api'\npath\n:params\nmethod\nbodySchema\nHandler:handler(req, ctx)\nhandler(req, ctx)\nreq- Request withbody,headers,pathParams,queryParams\nreq\nbody\nheaders\npathParams\nqueryParams\nctx- Context withlogger,emit,state,streams,traceId\nctx\nlogger\nemit\nstate\nstreams\ntraceId\nReturns{ status, body, headers? }\n{ status, body, headers? }\nContext Object\nEvery handler receives actxobject with these tools:\nctx\nlogger\ninfo\nwarn\nerror\nemit\nstate\nstreams\ntraceId\nCore Functionality\nState \u2013 Persistent Data\nKey-value storage shared across Steps and workflows.\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nLogging \u2013 Structured & Contextual\nFor debugging, monitoring, and observability.\nlogger.info('Processing user', { userId:'123'});\nlogger.info('Processing user', { userId:'123'});\nStreams \u2013 Real-Time Data\nPush updates directly to connected clients.\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nRemember\nSteps are just files.Export aconfigandhandler.\nconfig\nhandler\nMotia auto-discovers and connects them.\nCombine Steps withemit + subscribeto build APIs, workflows, background jobs, or entire systems.\nWhat\u2019s Next?\n\ud83d\udc49Build your first app \u2192\nOverview\nOne primitive, any language, event-driven by default - that's Motia\nWorkbench\nVisualize, test, and debug your Motia flows with the built-in development platform\nOn this page"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#cron-trigger =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 1)",
    "text": "Steps\nOne primitive to build any backend. Simple, composable, and multi-language.\nOne Primitive for Any Backend\nAStepis the core primitive in Motia. Instead of juggling separate frameworks for APIs, background jobs, queues, or workflows, you define everything in one place:how it runs, when it runs, where it runs, and what it does.\nEvery Step file contains two parts:\nConfig\u2192 defines when and how the Step runs, and gives it a uniquename\nname\nHandler\u2192 the function that executes your business logic\nMotia automatically discovers any file ending in.step.ts,.step.js, or_step.py.The filename tells Motia to load it, and thenamein theconfiguniquely identifies the Step inside your system.\n.step.ts\n.step.js\n_step.py\nname\nconfig\nThe Simplest Example\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'HelloStep',type:'api',path:'/hello',method:'GET'};exportconsthandler:Handlers['HelloStep']=async(req, {logger})=>{logger.info('Hello endpoint called');return{ status:200, body: { message:'Hello world!'} };};\n\ud83d\udc49 That\u2019s all you need to make a running API endpoint.Motia will auto-discover this file and wire it into your backend.\nSteps Work Together: Emit + Subscribe\nSteps aren\u2019t isolated. They communicate byemittingandsubscribingto events.This is the core of how you build backends with Motia.\nExample Flow: API Step \u2192 Event Step\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true}"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#cron-trigger =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 2)",
    "text": ".sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ ApiRouteConfig, Handlers }from'motia';exportconstconfig:ApiRouteConfig={name:'SendMessage',type:'api',path:'/messages',method:'POST',emits: ['message.sent']};exportconsthandler:Handlers['SendMessage']=async(req, {emit})=>{awaitemit({topic:'message.sent',data: { text: req.body.text }});return{ status:200, body: { ok:true} };};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\nimport{ EventConfig, Handlers }from'motia';exportconstconfig:EventConfig={name:'ProcessMessage',type:'event',subscribes: ['message.sent']};exportconsthandler:Handlers['ProcessMessage']=async(input, {logger})=>{logger.info('Processing message', input);};\n\ud83d\udc49 With just two files, you have anAPI endpointthat triggers anevent-driven workflow.\nTriggers\nEvery Step has atypethat defineshow it triggers:\ntype\napi\nevent\ncron\nAPI Trigger\nRuns when an HTTP request hits the path.\nExample:\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nimport{ ApiRouteConfig, Handlers }from'motia'exportconstconfig:ApiRouteConfig={name:'GetUser',type:'api',path:'/users/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id:"
}
================================================================================
{
    "source_page": "Steps",
    "source_url": "https://www.motia.dev/docs/concepts/steps#cron-trigger =====",
    "chunk_topic": "Steps",
    "chunk_id": "Steps (Part 3)",
    "text": "/:id',method:'GET'}exportconsthandler:Handlers['GetUser']=async(req, {logger})=>{constuserId=req.pathParams.idlogger.info('Getting user', { userId })return{ status:200, body: { id: userId, name:'John'} }}\nConfig:\nname\ntype\n'api'\npath\n:params\nmethod\nbodySchema\nHandler:handler(req, ctx)\nhandler(req, ctx)\nreq- Request withbody,headers,pathParams,queryParams\nreq\nbody\nheaders\npathParams\nqueryParams\nctx- Context withlogger,emit,state,streams,traceId\nctx\nlogger\nemit\nstate\nstreams\ntraceId\nReturns{ status, body, headers? }\n{ status, body, headers? }\nContext Object\nEvery handler receives actxobject with these tools:\nctx\nlogger\ninfo\nwarn\nerror\nemit\nstate\nstreams\ntraceId\nCore Functionality\nState \u2013 Persistent Data\nKey-value storage shared across Steps and workflows.\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nawaitstate.set(traceId,'preferences', { theme:'dark'});constprefs=awaitstate.get(traceId,'preferences');\nLogging \u2013 Structured & Contextual\nFor debugging, monitoring, and observability.\nlogger.info('Processing user', { userId:'123'});\nlogger.info('Processing user', { userId:'123'});\nStreams \u2013 Real-Time Data\nPush updates directly to connected clients.\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nawaitstreams.chat.set('room-123','msg-456', { text:'Hello!'});\nRemember\nSteps are just files.Export aconfigandhandler.\nconfig\nhandler\nMotia auto-discovers and connects them.\nCombine Steps withemit + subscribeto build APIs, workflows, background jobs, or entire systems.\nWhat\u2019s Next?\n\ud83d\udc49Build your first app \u2192\nOverview\nOne primitive, any language, event-driven by default - that's Motia\nWorkbench\nVisualize, test, and debug your Motia flows with the built-in development platform\nOn this page"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#customizing-flows =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 1)",
    "text": "Customizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nCustomizing Flows\nMotia Workbench allows you to customize how your Steps appear in the flow visualization tool. This helps you create intuitive, context-aware visual components that clearly communicate your flow's behavior and external dependencies.\nUI Steps\nUI Steps provide a way to create custom visual representations of your workflow Steps in the Workbench flow visualization tool.\nOverview\nTo create a custom UI for a Step, create a.tsxor.jsxfile next to your Step file with the same base name:\n.tsx\n.jsx\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nBasic Usage\nLet's override an EventNode while keeping the same look. We'll add an image and show the description.\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\nAvailable Components\nMotia Workbench provides out-of-the-box components for different Step types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#customizing-flows =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 2)",
    "text": " types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#customizing-flows =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 3)",
    "text": "flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#customizing-flows =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 4)",
    "text": "\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nYou will need to add<BaseHandle>to your node, otherwise it won't show the connectors.\n<BaseHandle>\nIf your node has padding, make sure to add a group inside your node with classgroup relativeso the handles can be correctly positioned.\ngroup relative\nStyling Guidelines\nNOOP Steps\nNOOP (No Operation) Steps are a powerful feature that serve multiple purposes:\nModeling external processes, webhooks and integrations\nRepresenting human-in-the-loop activities\nCreating custom visualizations in the workbench\nTesting flows during development\nFile Structure\nNOOP Steps require two files with the same base name:\nstepName.step.ts- Contains the step configuration\nstepName.step.ts\nstepName.step.tsx- Contains the UI component (optional)\nstepName.step.tsx\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#customizing-flows =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 5)",
    "text": "'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nExample: Webhook Testing\nHere's a complete example of a NOOP Step that simulates webhook events:\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\""
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#customizing-flows =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 6)",
    "text": "-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nRepresenting External Processes\nNOOP Steps represent parts of your workflow that happen outside your system. Common examples include:\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#customizing-flows =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 7)",
    "text": "'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nBest Practices\nUI Steps\nEventNode\nApiNode\nNOOP Steps\n.step.ts\n.step.tsx\nvirtualSubscribes\nComponent Reference\nCore Imports\nBaseHandle\nEventNodeProps\nPosition\nHandle Placement\nObservability\nUnderstanding how to use the logging and debugging system in Motia\nMiddleware\nRun code before and after your API handlers\nOn this page"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#ui-steps =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 1)",
    "text": "Customizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nCustomizing Flows\nMotia Workbench allows you to customize how your Steps appear in the flow visualization tool. This helps you create intuitive, context-aware visual components that clearly communicate your flow's behavior and external dependencies.\nUI Steps\nUI Steps provide a way to create custom visual representations of your workflow Steps in the Workbench flow visualization tool.\nOverview\nTo create a custom UI for a Step, create a.tsxor.jsxfile next to your Step file with the same base name:\n.tsx\n.jsx\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nBasic Usage\nLet's override an EventNode while keeping the same look. We'll add an image and show the description.\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\nAvailable Components\nMotia Workbench provides out-of-the-box components for different Step types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#ui-steps =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 2)",
    "text": " types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#ui-steps =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 3)",
    "text": "flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#ui-steps =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 4)",
    "text": "\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nYou will need to add<BaseHandle>to your node, otherwise it won't show the connectors.\n<BaseHandle>\nIf your node has padding, make sure to add a group inside your node with classgroup relativeso the handles can be correctly positioned.\ngroup relative\nStyling Guidelines\nNOOP Steps\nNOOP (No Operation) Steps are a powerful feature that serve multiple purposes:\nModeling external processes, webhooks and integrations\nRepresenting human-in-the-loop activities\nCreating custom visualizations in the workbench\nTesting flows during development\nFile Structure\nNOOP Steps require two files with the same base name:\nstepName.step.ts- Contains the step configuration\nstepName.step.ts\nstepName.step.tsx- Contains the UI component (optional)\nstepName.step.tsx\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#ui-steps =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 5)",
    "text": "'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nExample: Webhook Testing\nHere's a complete example of a NOOP Step that simulates webhook events:\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\""
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#ui-steps =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 6)",
    "text": "-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nRepresenting External Processes\nNOOP Steps represent parts of your workflow that happen outside your system. Common examples include:\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#ui-steps =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 7)",
    "text": "'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nBest Practices\nUI Steps\nEventNode\nApiNode\nNOOP Steps\n.step.ts\n.step.tsx\nvirtualSubscribes\nComponent Reference\nCore Imports\nBaseHandle\nEventNodeProps\nPosition\nHandle Placement\nObservability\nUnderstanding how to use the logging and debugging system in Motia\nMiddleware\nRun code before and after your API handlers\nOn this page"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#overview =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 1)",
    "text": "Customizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nCustomizing Flows\nMotia Workbench allows you to customize how your Steps appear in the flow visualization tool. This helps you create intuitive, context-aware visual components that clearly communicate your flow's behavior and external dependencies.\nUI Steps\nUI Steps provide a way to create custom visual representations of your workflow Steps in the Workbench flow visualization tool.\nOverview\nTo create a custom UI for a Step, create a.tsxor.jsxfile next to your Step file with the same base name:\n.tsx\n.jsx\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nBasic Usage\nLet's override an EventNode while keeping the same look. We'll add an image and show the description.\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\nAvailable Components\nMotia Workbench provides out-of-the-box components for different Step types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#overview =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 2)",
    "text": " types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#overview =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 3)",
    "text": "flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#overview =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 4)",
    "text": "\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nYou will need to add<BaseHandle>to your node, otherwise it won't show the connectors.\n<BaseHandle>\nIf your node has padding, make sure to add a group inside your node with classgroup relativeso the handles can be correctly positioned.\ngroup relative\nStyling Guidelines\nNOOP Steps\nNOOP (No Operation) Steps are a powerful feature that serve multiple purposes:\nModeling external processes, webhooks and integrations\nRepresenting human-in-the-loop activities\nCreating custom visualizations in the workbench\nTesting flows during development\nFile Structure\nNOOP Steps require two files with the same base name:\nstepName.step.ts- Contains the step configuration\nstepName.step.ts\nstepName.step.tsx- Contains the UI component (optional)\nstepName.step.tsx\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#overview =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 5)",
    "text": "'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nExample: Webhook Testing\nHere's a complete example of a NOOP Step that simulates webhook events:\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\""
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#overview =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 6)",
    "text": "-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nRepresenting External Processes\nNOOP Steps represent parts of your workflow that happen outside your system. Common examples include:\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#overview =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 7)",
    "text": "'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nBest Practices\nUI Steps\nEventNode\nApiNode\nNOOP Steps\n.step.ts\n.step.tsx\nvirtualSubscribes\nComponent Reference\nCore Imports\nBaseHandle\nEventNodeProps\nPosition\nHandle Placement\nObservability\nUnderstanding how to use the logging and debugging system in Motia\nMiddleware\nRun code before and after your API handlers\nOn this page"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#basic-usage =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 1)",
    "text": "Customizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nCustomizing Flows\nMotia Workbench allows you to customize how your Steps appear in the flow visualization tool. This helps you create intuitive, context-aware visual components that clearly communicate your flow's behavior and external dependencies.\nUI Steps\nUI Steps provide a way to create custom visual representations of your workflow Steps in the Workbench flow visualization tool.\nOverview\nTo create a custom UI for a Step, create a.tsxor.jsxfile next to your Step file with the same base name:\n.tsx\n.jsx\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nBasic Usage\nLet's override an EventNode while keeping the same look. We'll add an image and show the description.\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\nAvailable Components\nMotia Workbench provides out-of-the-box components for different Step types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#basic-usage =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 2)",
    "text": " types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#basic-usage =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 3)",
    "text": "flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#basic-usage =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 4)",
    "text": "\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nYou will need to add<BaseHandle>to your node, otherwise it won't show the connectors.\n<BaseHandle>\nIf your node has padding, make sure to add a group inside your node with classgroup relativeso the handles can be correctly positioned.\ngroup relative\nStyling Guidelines\nNOOP Steps\nNOOP (No Operation) Steps are a powerful feature that serve multiple purposes:\nModeling external processes, webhooks and integrations\nRepresenting human-in-the-loop activities\nCreating custom visualizations in the workbench\nTesting flows during development\nFile Structure\nNOOP Steps require two files with the same base name:\nstepName.step.ts- Contains the step configuration\nstepName.step.ts\nstepName.step.tsx- Contains the UI component (optional)\nstepName.step.tsx\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#basic-usage =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 5)",
    "text": "'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nExample: Webhook Testing\nHere's a complete example of a NOOP Step that simulates webhook events:\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\""
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#basic-usage =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 6)",
    "text": "-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nRepresenting External Processes\nNOOP Steps represent parts of your workflow that happen outside your system. Common examples include:\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#basic-usage =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 7)",
    "text": "'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nBest Practices\nUI Steps\nEventNode\nApiNode\nNOOP Steps\n.step.ts\n.step.tsx\nvirtualSubscribes\nComponent Reference\nCore Imports\nBaseHandle\nEventNodeProps\nPosition\nHandle Placement\nObservability\nUnderstanding how to use the logging and debugging system in Motia\nMiddleware\nRun code before and after your API handlers\nOn this page"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#available-components =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 1)",
    "text": "Customizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nCustomizing Flows\nMotia Workbench allows you to customize how your Steps appear in the flow visualization tool. This helps you create intuitive, context-aware visual components that clearly communicate your flow's behavior and external dependencies.\nUI Steps\nUI Steps provide a way to create custom visual representations of your workflow Steps in the Workbench flow visualization tool.\nOverview\nTo create a custom UI for a Step, create a.tsxor.jsxfile next to your Step file with the same base name:\n.tsx\n.jsx\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nBasic Usage\nLet's override an EventNode while keeping the same look. We'll add an image and show the description.\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\nAvailable Components\nMotia Workbench provides out-of-the-box components for different Step types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#available-components =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 2)",
    "text": " types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#available-components =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 3)",
    "text": "flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#available-components =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 4)",
    "text": "\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nYou will need to add<BaseHandle>to your node, otherwise it won't show the connectors.\n<BaseHandle>\nIf your node has padding, make sure to add a group inside your node with classgroup relativeso the handles can be correctly positioned.\ngroup relative\nStyling Guidelines\nNOOP Steps\nNOOP (No Operation) Steps are a powerful feature that serve multiple purposes:\nModeling external processes, webhooks and integrations\nRepresenting human-in-the-loop activities\nCreating custom visualizations in the workbench\nTesting flows during development\nFile Structure\nNOOP Steps require two files with the same base name:\nstepName.step.ts- Contains the step configuration\nstepName.step.ts\nstepName.step.tsx- Contains the UI component (optional)\nstepName.step.tsx\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#available-components =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 5)",
    "text": "'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nExample: Webhook Testing\nHere's a complete example of a NOOP Step that simulates webhook events:\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\""
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#available-components =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 6)",
    "text": "-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nRepresenting External Processes\nNOOP Steps represent parts of your workflow that happen outside your system. Common examples include:\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#available-components =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 7)",
    "text": "'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nBest Practices\nUI Steps\nEventNode\nApiNode\nNOOP Steps\n.step.ts\n.step.tsx\nvirtualSubscribes\nComponent Reference\nCore Imports\nBaseHandle\nEventNodeProps\nPosition\nHandle Placement\nObservability\nUnderstanding how to use the logging and debugging system in Motia\nMiddleware\nRun code before and after your API handlers\nOn this page"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#complete-customization =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 1)",
    "text": "Customizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nCustomizing Flows\nMotia Workbench allows you to customize how your Steps appear in the flow visualization tool. This helps you create intuitive, context-aware visual components that clearly communicate your flow's behavior and external dependencies.\nUI Steps\nUI Steps provide a way to create custom visual representations of your workflow Steps in the Workbench flow visualization tool.\nOverview\nTo create a custom UI for a Step, create a.tsxor.jsxfile next to your Step file with the same base name:\n.tsx\n.jsx\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nBasic Usage\nLet's override an EventNode while keeping the same look. We'll add an image and show the description.\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\nAvailable Components\nMotia Workbench provides out-of-the-box components for different Step types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#complete-customization =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 2)",
    "text": " types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#complete-customization =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 3)",
    "text": "flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#complete-customization =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 4)",
    "text": "\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nYou will need to add<BaseHandle>to your node, otherwise it won't show the connectors.\n<BaseHandle>\nIf your node has padding, make sure to add a group inside your node with classgroup relativeso the handles can be correctly positioned.\ngroup relative\nStyling Guidelines\nNOOP Steps\nNOOP (No Operation) Steps are a powerful feature that serve multiple purposes:\nModeling external processes, webhooks and integrations\nRepresenting human-in-the-loop activities\nCreating custom visualizations in the workbench\nTesting flows during development\nFile Structure\nNOOP Steps require two files with the same base name:\nstepName.step.ts- Contains the step configuration\nstepName.step.ts\nstepName.step.tsx- Contains the UI component (optional)\nstepName.step.tsx\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#complete-customization =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 5)",
    "text": "'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nExample: Webhook Testing\nHere's a complete example of a NOOP Step that simulates webhook events:\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\""
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#complete-customization =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 6)",
    "text": "-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nRepresenting External Processes\nNOOP Steps represent parts of your workflow that happen outside your system. Common examples include:\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#complete-customization =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 7)",
    "text": "'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nBest Practices\nUI Steps\nEventNode\nApiNode\nNOOP Steps\n.step.ts\n.step.tsx\nvirtualSubscribes\nComponent Reference\nCore Imports\nBaseHandle\nEventNodeProps\nPosition\nHandle Placement\nObservability\nUnderstanding how to use the logging and debugging system in Motia\nMiddleware\nRun code before and after your API handlers\nOn this page"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#important-notes =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 1)",
    "text": "Customizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nCustomizing Flows\nMotia Workbench allows you to customize how your Steps appear in the flow visualization tool. This helps you create intuitive, context-aware visual components that clearly communicate your flow's behavior and external dependencies.\nUI Steps\nUI Steps provide a way to create custom visual representations of your workflow Steps in the Workbench flow visualization tool.\nOverview\nTo create a custom UI for a Step, create a.tsxor.jsxfile next to your Step file with the same base name:\n.tsx\n.jsx\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nBasic Usage\nLet's override an EventNode while keeping the same look. We'll add an image and show the description.\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\nAvailable Components\nMotia Workbench provides out-of-the-box components for different Step types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#important-notes =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 2)",
    "text": " types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#important-notes =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 3)",
    "text": "flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#important-notes =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 4)",
    "text": "\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nYou will need to add<BaseHandle>to your node, otherwise it won't show the connectors.\n<BaseHandle>\nIf your node has padding, make sure to add a group inside your node with classgroup relativeso the handles can be correctly positioned.\ngroup relative\nStyling Guidelines\nNOOP Steps\nNOOP (No Operation) Steps are a powerful feature that serve multiple purposes:\nModeling external processes, webhooks and integrations\nRepresenting human-in-the-loop activities\nCreating custom visualizations in the workbench\nTesting flows during development\nFile Structure\nNOOP Steps require two files with the same base name:\nstepName.step.ts- Contains the step configuration\nstepName.step.ts\nstepName.step.tsx- Contains the UI component (optional)\nstepName.step.tsx\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#important-notes =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 5)",
    "text": "'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nExample: Webhook Testing\nHere's a complete example of a NOOP Step that simulates webhook events:\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\""
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#important-notes =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 6)",
    "text": "-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nRepresenting External Processes\nNOOP Steps represent parts of your workflow that happen outside your system. Common examples include:\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#important-notes =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 7)",
    "text": "'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nBest Practices\nUI Steps\nEventNode\nApiNode\nNOOP Steps\n.step.ts\n.step.tsx\nvirtualSubscribes\nComponent Reference\nCore Imports\nBaseHandle\nEventNodeProps\nPosition\nHandle Placement\nObservability\nUnderstanding how to use the logging and debugging system in Motia\nMiddleware\nRun code before and after your API handlers\nOn this page"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#styling-guidelines =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 1)",
    "text": "Customizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nCustomizing Flows\nMotia Workbench allows you to customize how your Steps appear in the flow visualization tool. This helps you create intuitive, context-aware visual components that clearly communicate your flow's behavior and external dependencies.\nUI Steps\nUI Steps provide a way to create custom visual representations of your workflow Steps in the Workbench flow visualization tool.\nOverview\nTo create a custom UI for a Step, create a.tsxor.jsxfile next to your Step file with the same base name:\n.tsx\n.jsx\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nBasic Usage\nLet's override an EventNode while keeping the same look. We'll add an image and show the description.\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\nAvailable Components\nMotia Workbench provides out-of-the-box components for different Step types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#styling-guidelines =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 2)",
    "text": " types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#styling-guidelines =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 3)",
    "text": "flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#styling-guidelines =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 4)",
    "text": "\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nYou will need to add<BaseHandle>to your node, otherwise it won't show the connectors.\n<BaseHandle>\nIf your node has padding, make sure to add a group inside your node with classgroup relativeso the handles can be correctly positioned.\ngroup relative\nStyling Guidelines\nNOOP Steps\nNOOP (No Operation) Steps are a powerful feature that serve multiple purposes:\nModeling external processes, webhooks and integrations\nRepresenting human-in-the-loop activities\nCreating custom visualizations in the workbench\nTesting flows during development\nFile Structure\nNOOP Steps require two files with the same base name:\nstepName.step.ts- Contains the step configuration\nstepName.step.ts\nstepName.step.tsx- Contains the UI component (optional)\nstepName.step.tsx\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#styling-guidelines =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 5)",
    "text": "'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nExample: Webhook Testing\nHere's a complete example of a NOOP Step that simulates webhook events:\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\""
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#styling-guidelines =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 6)",
    "text": "-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nRepresenting External Processes\nNOOP Steps represent parts of your workflow that happen outside your system. Common examples include:\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#styling-guidelines =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 7)",
    "text": "'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nBest Practices\nUI Steps\nEventNode\nApiNode\nNOOP Steps\n.step.ts\n.step.tsx\nvirtualSubscribes\nComponent Reference\nCore Imports\nBaseHandle\nEventNodeProps\nPosition\nHandle Placement\nObservability\nUnderstanding how to use the logging and debugging system in Motia\nMiddleware\nRun code before and after your API handlers\nOn this page"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#noop-steps =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 1)",
    "text": "Customizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nCustomizing Flows\nMotia Workbench allows you to customize how your Steps appear in the flow visualization tool. This helps you create intuitive, context-aware visual components that clearly communicate your flow's behavior and external dependencies.\nUI Steps\nUI Steps provide a way to create custom visual representations of your workflow Steps in the Workbench flow visualization tool.\nOverview\nTo create a custom UI for a Step, create a.tsxor.jsxfile next to your Step file with the same base name:\n.tsx\n.jsx\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nBasic Usage\nLet's override an EventNode while keeping the same look. We'll add an image and show the description.\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\nAvailable Components\nMotia Workbench provides out-of-the-box components for different Step types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#noop-steps =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 2)",
    "text": " types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#noop-steps =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 3)",
    "text": "flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#noop-steps =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 4)",
    "text": "\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nYou will need to add<BaseHandle>to your node, otherwise it won't show the connectors.\n<BaseHandle>\nIf your node has padding, make sure to add a group inside your node with classgroup relativeso the handles can be correctly positioned.\ngroup relative\nStyling Guidelines\nNOOP Steps\nNOOP (No Operation) Steps are a powerful feature that serve multiple purposes:\nModeling external processes, webhooks and integrations\nRepresenting human-in-the-loop activities\nCreating custom visualizations in the workbench\nTesting flows during development\nFile Structure\nNOOP Steps require two files with the same base name:\nstepName.step.ts- Contains the step configuration\nstepName.step.ts\nstepName.step.tsx- Contains the UI component (optional)\nstepName.step.tsx\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#noop-steps =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 5)",
    "text": "'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nExample: Webhook Testing\nHere's a complete example of a NOOP Step that simulates webhook events:\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\""
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#noop-steps =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 6)",
    "text": "-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nRepresenting External Processes\nNOOP Steps represent parts of your workflow that happen outside your system. Common examples include:\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#noop-steps =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 7)",
    "text": "'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nBest Practices\nUI Steps\nEventNode\nApiNode\nNOOP Steps\n.step.ts\n.step.tsx\nvirtualSubscribes\nComponent Reference\nCore Imports\nBaseHandle\nEventNodeProps\nPosition\nHandle Placement\nObservability\nUnderstanding how to use the logging and debugging system in Motia\nMiddleware\nRun code before and after your API handlers\nOn this page"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#file-structure =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 1)",
    "text": "Customizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nCustomizing Flows\nMotia Workbench allows you to customize how your Steps appear in the flow visualization tool. This helps you create intuitive, context-aware visual components that clearly communicate your flow's behavior and external dependencies.\nUI Steps\nUI Steps provide a way to create custom visual representations of your workflow Steps in the Workbench flow visualization tool.\nOverview\nTo create a custom UI for a Step, create a.tsxor.jsxfile next to your Step file with the same base name:\n.tsx\n.jsx\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nBasic Usage\nLet's override an EventNode while keeping the same look. We'll add an image and show the description.\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\nAvailable Components\nMotia Workbench provides out-of-the-box components for different Step types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#file-structure =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 2)",
    "text": " types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#file-structure =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 3)",
    "text": "flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#file-structure =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 4)",
    "text": "\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nYou will need to add<BaseHandle>to your node, otherwise it won't show the connectors.\n<BaseHandle>\nIf your node has padding, make sure to add a group inside your node with classgroup relativeso the handles can be correctly positioned.\ngroup relative\nStyling Guidelines\nNOOP Steps\nNOOP (No Operation) Steps are a powerful feature that serve multiple purposes:\nModeling external processes, webhooks and integrations\nRepresenting human-in-the-loop activities\nCreating custom visualizations in the workbench\nTesting flows during development\nFile Structure\nNOOP Steps require two files with the same base name:\nstepName.step.ts- Contains the step configuration\nstepName.step.ts\nstepName.step.tsx- Contains the UI component (optional)\nstepName.step.tsx\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#file-structure =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 5)",
    "text": "'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nExample: Webhook Testing\nHere's a complete example of a NOOP Step that simulates webhook events:\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\""
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#file-structure =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 6)",
    "text": "-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nRepresenting External Processes\nNOOP Steps represent parts of your workflow that happen outside your system. Common examples include:\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#file-structure =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 7)",
    "text": "'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nBest Practices\nUI Steps\nEventNode\nApiNode\nNOOP Steps\n.step.ts\n.step.tsx\nvirtualSubscribes\nComponent Reference\nCore Imports\nBaseHandle\nEventNodeProps\nPosition\nHandle Placement\nObservability\nUnderstanding how to use the logging and debugging system in Motia\nMiddleware\nRun code before and after your API handlers\nOn this page"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#step-configuration-file =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 1)",
    "text": "Customizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nCustomizing Flows\nMotia Workbench allows you to customize how your Steps appear in the flow visualization tool. This helps you create intuitive, context-aware visual components that clearly communicate your flow's behavior and external dependencies.\nUI Steps\nUI Steps provide a way to create custom visual representations of your workflow Steps in the Workbench flow visualization tool.\nOverview\nTo create a custom UI for a Step, create a.tsxor.jsxfile next to your Step file with the same base name:\n.tsx\n.jsx\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nBasic Usage\nLet's override an EventNode while keeping the same look. We'll add an image and show the description.\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\nAvailable Components\nMotia Workbench provides out-of-the-box components for different Step types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#step-configuration-file =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 2)",
    "text": " types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#step-configuration-file =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 3)",
    "text": "flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#step-configuration-file =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 4)",
    "text": "\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nYou will need to add<BaseHandle>to your node, otherwise it won't show the connectors.\n<BaseHandle>\nIf your node has padding, make sure to add a group inside your node with classgroup relativeso the handles can be correctly positioned.\ngroup relative\nStyling Guidelines\nNOOP Steps\nNOOP (No Operation) Steps are a powerful feature that serve multiple purposes:\nModeling external processes, webhooks and integrations\nRepresenting human-in-the-loop activities\nCreating custom visualizations in the workbench\nTesting flows during development\nFile Structure\nNOOP Steps require two files with the same base name:\nstepName.step.ts- Contains the step configuration\nstepName.step.ts\nstepName.step.tsx- Contains the UI component (optional)\nstepName.step.tsx\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#step-configuration-file =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 5)",
    "text": "'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nExample: Webhook Testing\nHere's a complete example of a NOOP Step that simulates webhook events:\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\""
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#step-configuration-file =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 6)",
    "text": "-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nRepresenting External Processes\nNOOP Steps represent parts of your workflow that happen outside your system. Common examples include:\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#step-configuration-file =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 7)",
    "text": "'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nBest Practices\nUI Steps\nEventNode\nApiNode\nNOOP Steps\n.step.ts\n.step.tsx\nvirtualSubscribes\nComponent Reference\nCore Imports\nBaseHandle\nEventNodeProps\nPosition\nHandle Placement\nObservability\nUnderstanding how to use the logging and debugging system in Motia\nMiddleware\nRun code before and after your API handlers\nOn this page"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#ui-component-file =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 1)",
    "text": "Customizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nCustomizing Flows\nMotia Workbench allows you to customize how your Steps appear in the flow visualization tool. This helps you create intuitive, context-aware visual components that clearly communicate your flow's behavior and external dependencies.\nUI Steps\nUI Steps provide a way to create custom visual representations of your workflow Steps in the Workbench flow visualization tool.\nOverview\nTo create a custom UI for a Step, create a.tsxor.jsxfile next to your Step file with the same base name:\n.tsx\n.jsx\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nBasic Usage\nLet's override an EventNode while keeping the same look. We'll add an image and show the description.\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\nAvailable Components\nMotia Workbench provides out-of-the-box components for different Step types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#ui-component-file =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 2)",
    "text": " types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#ui-component-file =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 3)",
    "text": "flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#ui-component-file =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 4)",
    "text": "\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nYou will need to add<BaseHandle>to your node, otherwise it won't show the connectors.\n<BaseHandle>\nIf your node has padding, make sure to add a group inside your node with classgroup relativeso the handles can be correctly positioned.\ngroup relative\nStyling Guidelines\nNOOP Steps\nNOOP (No Operation) Steps are a powerful feature that serve multiple purposes:\nModeling external processes, webhooks and integrations\nRepresenting human-in-the-loop activities\nCreating custom visualizations in the workbench\nTesting flows during development\nFile Structure\nNOOP Steps require two files with the same base name:\nstepName.step.ts- Contains the step configuration\nstepName.step.ts\nstepName.step.tsx- Contains the UI component (optional)\nstepName.step.tsx\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#ui-component-file =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 5)",
    "text": "'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nExample: Webhook Testing\nHere's a complete example of a NOOP Step that simulates webhook events:\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\""
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#ui-component-file =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 6)",
    "text": "-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nRepresenting External Processes\nNOOP Steps represent parts of your workflow that happen outside your system. Common examples include:\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#ui-component-file =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 7)",
    "text": "'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nBest Practices\nUI Steps\nEventNode\nApiNode\nNOOP Steps\n.step.ts\n.step.tsx\nvirtualSubscribes\nComponent Reference\nCore Imports\nBaseHandle\nEventNodeProps\nPosition\nHandle Placement\nObservability\nUnderstanding how to use the logging and debugging system in Motia\nMiddleware\nRun code before and after your API handlers\nOn this page"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#example-webhook-testing =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 1)",
    "text": "Customizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nCustomizing Flows\nMotia Workbench allows you to customize how your Steps appear in the flow visualization tool. This helps you create intuitive, context-aware visual components that clearly communicate your flow's behavior and external dependencies.\nUI Steps\nUI Steps provide a way to create custom visual representations of your workflow Steps in the Workbench flow visualization tool.\nOverview\nTo create a custom UI for a Step, create a.tsxor.jsxfile next to your Step file with the same base name:\n.tsx\n.jsx\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nBasic Usage\nLet's override an EventNode while keeping the same look. We'll add an image and show the description.\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\nAvailable Components\nMotia Workbench provides out-of-the-box components for different Step types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#example-webhook-testing =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 2)",
    "text": " types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#example-webhook-testing =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 3)",
    "text": "flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#example-webhook-testing =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 4)",
    "text": "\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nYou will need to add<BaseHandle>to your node, otherwise it won't show the connectors.\n<BaseHandle>\nIf your node has padding, make sure to add a group inside your node with classgroup relativeso the handles can be correctly positioned.\ngroup relative\nStyling Guidelines\nNOOP Steps\nNOOP (No Operation) Steps are a powerful feature that serve multiple purposes:\nModeling external processes, webhooks and integrations\nRepresenting human-in-the-loop activities\nCreating custom visualizations in the workbench\nTesting flows during development\nFile Structure\nNOOP Steps require two files with the same base name:\nstepName.step.ts- Contains the step configuration\nstepName.step.ts\nstepName.step.tsx- Contains the UI component (optional)\nstepName.step.tsx\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#example-webhook-testing =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 5)",
    "text": "'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nExample: Webhook Testing\nHere's a complete example of a NOOP Step that simulates webhook events:\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\""
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#example-webhook-testing =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 6)",
    "text": "-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nRepresenting External Processes\nNOOP Steps represent parts of your workflow that happen outside your system. Common examples include:\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#example-webhook-testing =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 7)",
    "text": "'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nBest Practices\nUI Steps\nEventNode\nApiNode\nNOOP Steps\n.step.ts\n.step.tsx\nvirtualSubscribes\nComponent Reference\nCore Imports\nBaseHandle\nEventNodeProps\nPosition\nHandle Placement\nObservability\nUnderstanding how to use the logging and debugging system in Motia\nMiddleware\nRun code before and after your API handlers\nOn this page"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#representing-external-processes =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 1)",
    "text": "Customizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nCustomizing Flows\nMotia Workbench allows you to customize how your Steps appear in the flow visualization tool. This helps you create intuitive, context-aware visual components that clearly communicate your flow's behavior and external dependencies.\nUI Steps\nUI Steps provide a way to create custom visual representations of your workflow Steps in the Workbench flow visualization tool.\nOverview\nTo create a custom UI for a Step, create a.tsxor.jsxfile next to your Step file with the same base name:\n.tsx\n.jsx\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nBasic Usage\nLet's override an EventNode while keeping the same look. We'll add an image and show the description.\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\nAvailable Components\nMotia Workbench provides out-of-the-box components for different Step types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#representing-external-processes =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 2)",
    "text": " types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#representing-external-processes =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 3)",
    "text": "flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#representing-external-processes =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 4)",
    "text": "\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nYou will need to add<BaseHandle>to your node, otherwise it won't show the connectors.\n<BaseHandle>\nIf your node has padding, make sure to add a group inside your node with classgroup relativeso the handles can be correctly positioned.\ngroup relative\nStyling Guidelines\nNOOP Steps\nNOOP (No Operation) Steps are a powerful feature that serve multiple purposes:\nModeling external processes, webhooks and integrations\nRepresenting human-in-the-loop activities\nCreating custom visualizations in the workbench\nTesting flows during development\nFile Structure\nNOOP Steps require two files with the same base name:\nstepName.step.ts- Contains the step configuration\nstepName.step.ts\nstepName.step.tsx- Contains the UI component (optional)\nstepName.step.tsx\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#representing-external-processes =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 5)",
    "text": "'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nExample: Webhook Testing\nHere's a complete example of a NOOP Step that simulates webhook events:\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\""
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#representing-external-processes =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 6)",
    "text": "-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nRepresenting External Processes\nNOOP Steps represent parts of your workflow that happen outside your system. Common examples include:\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#representing-external-processes =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 7)",
    "text": "'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nBest Practices\nUI Steps\nEventNode\nApiNode\nNOOP Steps\n.step.ts\n.step.tsx\nvirtualSubscribes\nComponent Reference\nCore Imports\nBaseHandle\nEventNodeProps\nPosition\nHandle Placement\nObservability\nUnderstanding how to use the logging and debugging system in Motia\nMiddleware\nRun code before and after your API handlers\nOn this page"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#webhook-callbacks =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 1)",
    "text": "Customizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nCustomizing Flows\nMotia Workbench allows you to customize how your Steps appear in the flow visualization tool. This helps you create intuitive, context-aware visual components that clearly communicate your flow's behavior and external dependencies.\nUI Steps\nUI Steps provide a way to create custom visual representations of your workflow Steps in the Workbench flow visualization tool.\nOverview\nTo create a custom UI for a Step, create a.tsxor.jsxfile next to your Step file with the same base name:\n.tsx\n.jsx\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nBasic Usage\nLet's override an EventNode while keeping the same look. We'll add an image and show the description.\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\nAvailable Components\nMotia Workbench provides out-of-the-box components for different Step types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#webhook-callbacks =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 2)",
    "text": " types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#webhook-callbacks =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 3)",
    "text": "flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#webhook-callbacks =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 4)",
    "text": "\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nYou will need to add<BaseHandle>to your node, otherwise it won't show the connectors.\n<BaseHandle>\nIf your node has padding, make sure to add a group inside your node with classgroup relativeso the handles can be correctly positioned.\ngroup relative\nStyling Guidelines\nNOOP Steps\nNOOP (No Operation) Steps are a powerful feature that serve multiple purposes:\nModeling external processes, webhooks and integrations\nRepresenting human-in-the-loop activities\nCreating custom visualizations in the workbench\nTesting flows during development\nFile Structure\nNOOP Steps require two files with the same base name:\nstepName.step.ts- Contains the step configuration\nstepName.step.ts\nstepName.step.tsx- Contains the UI component (optional)\nstepName.step.tsx\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#webhook-callbacks =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 5)",
    "text": "'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nExample: Webhook Testing\nHere's a complete example of a NOOP Step that simulates webhook events:\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\""
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#webhook-callbacks =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 6)",
    "text": "-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nRepresenting External Processes\nNOOP Steps represent parts of your workflow that happen outside your system. Common examples include:\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#webhook-callbacks =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 7)",
    "text": "'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nBest Practices\nUI Steps\nEventNode\nApiNode\nNOOP Steps\n.step.ts\n.step.tsx\nvirtualSubscribes\nComponent Reference\nCore Imports\nBaseHandle\nEventNodeProps\nPosition\nHandle Placement\nObservability\nUnderstanding how to use the logging and debugging system in Motia\nMiddleware\nRun code before and after your API handlers\nOn this page"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#human-approvals =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 1)",
    "text": "Customizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nCustomizing Flows\nMotia Workbench allows you to customize how your Steps appear in the flow visualization tool. This helps you create intuitive, context-aware visual components that clearly communicate your flow's behavior and external dependencies.\nUI Steps\nUI Steps provide a way to create custom visual representations of your workflow Steps in the Workbench flow visualization tool.\nOverview\nTo create a custom UI for a Step, create a.tsxor.jsxfile next to your Step file with the same base name:\n.tsx\n.jsx\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nBasic Usage\nLet's override an EventNode while keeping the same look. We'll add an image and show the description.\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\nAvailable Components\nMotia Workbench provides out-of-the-box components for different Step types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#human-approvals =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 2)",
    "text": " types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#human-approvals =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 3)",
    "text": "flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#human-approvals =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 4)",
    "text": "\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nYou will need to add<BaseHandle>to your node, otherwise it won't show the connectors.\n<BaseHandle>\nIf your node has padding, make sure to add a group inside your node with classgroup relativeso the handles can be correctly positioned.\ngroup relative\nStyling Guidelines\nNOOP Steps\nNOOP (No Operation) Steps are a powerful feature that serve multiple purposes:\nModeling external processes, webhooks and integrations\nRepresenting human-in-the-loop activities\nCreating custom visualizations in the workbench\nTesting flows during development\nFile Structure\nNOOP Steps require two files with the same base name:\nstepName.step.ts- Contains the step configuration\nstepName.step.ts\nstepName.step.tsx- Contains the UI component (optional)\nstepName.step.tsx\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#human-approvals =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 5)",
    "text": "'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nExample: Webhook Testing\nHere's a complete example of a NOOP Step that simulates webhook events:\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\""
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#human-approvals =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 6)",
    "text": "-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nRepresenting External Processes\nNOOP Steps represent parts of your workflow that happen outside your system. Common examples include:\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#human-approvals =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 7)",
    "text": "'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nBest Practices\nUI Steps\nEventNode\nApiNode\nNOOP Steps\n.step.ts\n.step.tsx\nvirtualSubscribes\nComponent Reference\nCore Imports\nBaseHandle\nEventNodeProps\nPosition\nHandle Placement\nObservability\nUnderstanding how to use the logging and debugging system in Motia\nMiddleware\nRun code before and after your API handlers\nOn this page"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#external-system-integration =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 1)",
    "text": "Customizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nCustomizing Flows\nMotia Workbench allows you to customize how your Steps appear in the flow visualization tool. This helps you create intuitive, context-aware visual components that clearly communicate your flow's behavior and external dependencies.\nUI Steps\nUI Steps provide a way to create custom visual representations of your workflow Steps in the Workbench flow visualization tool.\nOverview\nTo create a custom UI for a Step, create a.tsxor.jsxfile next to your Step file with the same base name:\n.tsx\n.jsx\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nBasic Usage\nLet's override an EventNode while keeping the same look. We'll add an image and show the description.\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\nAvailable Components\nMotia Workbench provides out-of-the-box components for different Step types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#external-system-integration =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 2)",
    "text": " types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#external-system-integration =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 3)",
    "text": "flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#external-system-integration =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 4)",
    "text": "\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nYou will need to add<BaseHandle>to your node, otherwise it won't show the connectors.\n<BaseHandle>\nIf your node has padding, make sure to add a group inside your node with classgroup relativeso the handles can be correctly positioned.\ngroup relative\nStyling Guidelines\nNOOP Steps\nNOOP (No Operation) Steps are a powerful feature that serve multiple purposes:\nModeling external processes, webhooks and integrations\nRepresenting human-in-the-loop activities\nCreating custom visualizations in the workbench\nTesting flows during development\nFile Structure\nNOOP Steps require two files with the same base name:\nstepName.step.ts- Contains the step configuration\nstepName.step.ts\nstepName.step.tsx- Contains the UI component (optional)\nstepName.step.tsx\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#external-system-integration =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 5)",
    "text": "'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nExample: Webhook Testing\nHere's a complete example of a NOOP Step that simulates webhook events:\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\""
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#external-system-integration =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 6)",
    "text": "-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nRepresenting External Processes\nNOOP Steps represent parts of your workflow that happen outside your system. Common examples include:\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#external-system-integration =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 7)",
    "text": "'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nBest Practices\nUI Steps\nEventNode\nApiNode\nNOOP Steps\n.step.ts\n.step.tsx\nvirtualSubscribes\nComponent Reference\nCore Imports\nBaseHandle\nEventNodeProps\nPosition\nHandle Placement\nObservability\nUnderstanding how to use the logging and debugging system in Motia\nMiddleware\nRun code before and after your API handlers\nOn this page"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#best-practices =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 1)",
    "text": "Customizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nCustomizing Flows\nMotia Workbench allows you to customize how your Steps appear in the flow visualization tool. This helps you create intuitive, context-aware visual components that clearly communicate your flow's behavior and external dependencies.\nUI Steps\nUI Steps provide a way to create custom visual representations of your workflow Steps in the Workbench flow visualization tool.\nOverview\nTo create a custom UI for a Step, create a.tsxor.jsxfile next to your Step file with the same base name:\n.tsx\n.jsx\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nBasic Usage\nLet's override an EventNode while keeping the same look. We'll add an image and show the description.\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\nAvailable Components\nMotia Workbench provides out-of-the-box components for different Step types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#best-practices =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 2)",
    "text": " types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#best-practices =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 3)",
    "text": "flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#best-practices =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 4)",
    "text": "\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nYou will need to add<BaseHandle>to your node, otherwise it won't show the connectors.\n<BaseHandle>\nIf your node has padding, make sure to add a group inside your node with classgroup relativeso the handles can be correctly positioned.\ngroup relative\nStyling Guidelines\nNOOP Steps\nNOOP (No Operation) Steps are a powerful feature that serve multiple purposes:\nModeling external processes, webhooks and integrations\nRepresenting human-in-the-loop activities\nCreating custom visualizations in the workbench\nTesting flows during development\nFile Structure\nNOOP Steps require two files with the same base name:\nstepName.step.ts- Contains the step configuration\nstepName.step.ts\nstepName.step.tsx- Contains the UI component (optional)\nstepName.step.tsx\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#best-practices =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 5)",
    "text": "'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nExample: Webhook Testing\nHere's a complete example of a NOOP Step that simulates webhook events:\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\""
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#best-practices =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 6)",
    "text": "-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nRepresenting External Processes\nNOOP Steps represent parts of your workflow that happen outside your system. Common examples include:\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#best-practices =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 7)",
    "text": "'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nBest Practices\nUI Steps\nEventNode\nApiNode\nNOOP Steps\n.step.ts\n.step.tsx\nvirtualSubscribes\nComponent Reference\nCore Imports\nBaseHandle\nEventNodeProps\nPosition\nHandle Placement\nObservability\nUnderstanding how to use the logging and debugging system in Motia\nMiddleware\nRun code before and after your API handlers\nOn this page"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#ui-steps-1 =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 1)",
    "text": "Customizing Flows\nCreate custom visualizations and represent external processes in your Motia workflows\nCustomizing Flows\nMotia Workbench allows you to customize how your Steps appear in the flow visualization tool. This helps you create intuitive, context-aware visual components that clearly communicate your flow's behavior and external dependencies.\nUI Steps\nUI Steps provide a way to create custom visual representations of your workflow Steps in the Workbench flow visualization tool.\nOverview\nTo create a custom UI for a Step, create a.tsxor.jsxfile next to your Step file with the same base name:\n.tsx\n.jsx\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nsteps/\u2514\u2500\u2500 myStep/\u251c\u2500\u2500 myStep.step.ts      # Step definition\u2514\u2500\u2500 myStep.step.tsx     # Visual override\nBasic Usage\nLet's override an EventNode while keeping the same look. We'll add an image and show the description.\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\n// myStep.step.tsximport{ EventNode, EventNodeProps }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<EventNode{...props}><divclassName=\"flex flex-row items-start gap-2\"><divclassName=\"text-sm text-gray-400 font-mono\">{props.data.description}</div><imgstyle={{ width:'64px', height:'64px'}}src=\"https://www.motia.dev/icon.png\"/></div></EventNode>)}\nAvailable Components\nMotia Workbench provides out-of-the-box components for different Step types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#ui-steps-1 =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 2)",
    "text": " types:\nComplete Customization\nYou can fully customize your node to look completely different. Here's an example of a custom ideator agent node:\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#ui-steps-1 =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 3)",
    "text": "flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nimport{ BaseHandle, EventNodeProps, Position }from'motia/workbench'importReactfrom'react'exportconstNode:React.FC<EventNodeProps>=(props)=>{return(<divclassName=\"w-80 bg-black text-white rounded-xl p-4\"><divclassName=\"group relative\"><BaseHandletype=\"target\"position={Position.Top}variant=\"event\"/><divclassName=\"flex items-center space-x-3\"><imgclassName=\"w-8 h-8\"src=\"https://cdn-icons-png.flaticon.com/512/12222/12222588.png\"/><divclassName=\"text-lg font-semibold\">{props.data.name}</div></div><divclassName=\"mt-2 text-sm font-medium text-gray-300\">{props.data.description}</div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Input</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentIdea:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">contentType:</div><divclassName=\"text-orange-500\">string</div></div></div></div><divclassName=\"mt-3 flex flex-col gap-2 border border-gray-800 border-solid p-2 rounded-md w-full\"><divclassName=\"flex items-center text-xs text-gray-400 space-x-2\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#ui-steps-1 =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 4)",
    "text": "\">Output</div><divclassName=\"flex flex-col gap-2 whitespace-pre-wrap font-mono\"><divclassName=\"flex items-center gap-2\"><divclassName=\"\">topic:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">subtopics:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">keywords:</div><divclassName=\"text-orange-500\">string[]</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">tone:</div><divclassName=\"text-orange-500\">string</div></div><divclassName=\"flex items-center gap-2\"><divclassName=\"\">audience:</div><divclassName=\"text-orange-500\">string</div></div></div></div><BaseHandletype=\"source\"position={Position.Bottom}variant=\"event\"/></div></div>)}\nYou will need to add<BaseHandle>to your node, otherwise it won't show the connectors.\n<BaseHandle>\nIf your node has padding, make sure to add a group inside your node with classgroup relativeso the handles can be correctly positioned.\ngroup relative\nStyling Guidelines\nNOOP Steps\nNOOP (No Operation) Steps are a powerful feature that serve multiple purposes:\nModeling external processes, webhooks and integrations\nRepresenting human-in-the-loop activities\nCreating custom visualizations in the workbench\nTesting flows during development\nFile Structure\nNOOP Steps require two files with the same base name:\nstepName.step.ts- Contains the step configuration\nstepName.step.ts\nstepName.step.tsx- Contains the UI component (optional)\nstepName.step.tsx\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#ui-steps-1 =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 5)",
    "text": "'motia'exportconstconfig:NoopConfig={type:'noop',name:'My NOOP Step',description:'Description of what this step simulates',virtualEmits: ['event.one','event.two'],virtualSubscribes: [],// Required even if emptyflows: ['my-flow'],}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// myStep.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionMyStep() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium\">My StepUI</div><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nExample: Webhook Testing\nHere's a complete example of a NOOP Step that simulates webhook events:\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsimport{ NoopConfig }from'motia'exportconstconfig:NoopConfig={type:'noop',name:'Webhook Simulator',description:'Simulates incoming webhook events',virtualEmits: ['webhook.received'],virtualSubscribes: [],flows: ['webhook-flow'],}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\""
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#ui-steps-1 =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 6)",
    "text": "-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\n// test-webhook.step.tsximportReactfrom'react'import{ BaseHandle, Position }from'motia/workbench'exportdefaultfunctionWebhookSimulator() {return(<div className=\"p-4 bg-gray-800 rounded-lg border border-gray-600 text-white\"><div className=\"text-sm font-medium mb-2\">Webhook Simulator</div><buttononClick={() => {fetch('/api/webhook', {method:'POST',headers: {'Content-Type':'application/json'},body:JSON.stringify({ event:'test'}),})}}className=\"px-3 py-1 bg-blue-600 rounded text-sm\">TriggerWebhook</button><BaseHandle type=\"source\"position={Position.Bottom}/></div>)}\nRepresenting External Processes\nNOOP Steps represent parts of your workflow that happen outside your system. Common examples include:\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Wait for Stripe Webhook',description:'Waits for payment confirmation',virtualSubscribes: ['payment.initiated'],virtualEmits: ['/api/stripe/webhook'],flows: ['payment'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'Manager Review',description:'Manager reviews request',virtualSubscribes: ['approval.requested'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['"
}
================================================================================
{
    "source_page": "Customizing Flows",
    "source_url": "https://www.motia.dev/docs/development-guide/customizing-flows#ui-steps-1 =====",
    "chunk_topic": "Customizing Flows",
    "chunk_id": "Customizing Flows (Part 7)",
    "text": "'],virtualEmits: ['/api/approvals/submit'],flows: ['approval'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nexportconstconfig:NoopConfig={type:'noop',name:'GitHub Webhook',description:'Waiting for repository events',virtualSubscribes: ['repository.watched'],virtualEmits: ['/api/github/webhook'],flows: ['repo-automation'],}\nBest Practices\nUI Steps\nEventNode\nApiNode\nNOOP Steps\n.step.ts\n.step.tsx\nvirtualSubscribes\nComponent Reference\nCore Imports\nBaseHandle\nEventNodeProps\nPosition\nHandle Placement\nObservability\nUnderstanding how to use the logging and debugging system in Motia\nMiddleware\nRun code before and after your API handlers\nOn this page"
}
================================================================================
