[
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nNodemailer\nNodemailer\nSend e-mails with Node.JS ‚Äì easy as cake! ‚úâÔ∏è\nNodemailer makes sending email from a Node.js application straightforward and secure, without pulling in a single runtime dependency.\nnpm install nodemailer\nnpm install nodemailer\nEmailEngineis a self‚Äëhosted email gateway that lets you make REST calls to IMAP & SMTP accounts, receive webhooks for mailbox changes, and send email with extras such as OAuth2, delayed delivery, open‚Äë & click‚Äëtracking, bounce detection, and more.\nWhy Nodemailer?‚Äã\nZero runtime dependencies‚Äì the entire implementation lives in one audited package.\nSecurity first‚Äì avoids known RCE vectors that have affected other Node.js mailers.\nUnicode everywhere‚Äì send any characters, including emoji¬†üí™.\nCross‚Äëplatform‚Äì no native addons, works the same on Linux, macOS, and Windows (great for Azure).\nHTML e‚Äëmailswithplain‚Äëtext fallbacksout of the box.\nAttachments&embedded imageswithout pain.\nOut‚Äëof‚Äëthe‚ÄëboxTLS/STARTTLSencryption.\nMultipletransports(SMTP, Sendmail, SES, streams, and more).\nDKIMsigning &OAuth2authentication.\nProxy supportfor restricted networks.\nPlugin APIfor advanced message manipulation.\nBuilt‚Äëin test accounts fromEthereal.emailfor local development.\nRequirements‚Äã\nNode.js¬†‚â•¬†6.0.0(async/await examples require ‚â•¬†8.0.0).\nNo other system libraries, services, or build tools are needed.\nQuick‚Äëstart‚Äã\nCreate a transporter.Use SMTP or another supported transport.\nCompose a message.Define sender, recipient(s), subject, and content.\nSend itwithtransporter.sendMail().\ntransporter.sendMail()\nExample (using an Ethereal test account)‚Äã\nconstnodemailer=require(\"nodemailer\");// Create a test account or replace with real credentials.consttransporter=nodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,// true for 465, false for other portsauth:{user:\"maddison53@ethereal.email\",pass:\"jn7jnAPss4f63QBp6D\",},});// Wrap in an async IIFE so we can use await.(async",
        "source_url": "https://nodemailer.com/",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "465, false for other portsauth:{user:\"maddison53@ethereal.email\",pass:\"jn7jnAPss4f63QBp6D\",},});// Wrap in an async IIFE so we can use await.(async()=>{constinfo=awaittransporter.sendMail({from:'\"Maddison Foo¬†Koch\" <maddison53@ethereal.email>',to:\"bar@example.com, baz@example.com\",subject:\"Hello ‚úî\",text:\"Hello world?\",// plain‚Äëtext bodyhtml:\"<b>Hello world?</b>\",// HTML body});console.log(\"Message sent:\",info.messageId);})();\nconstnodemailer=require(\"nodemailer\");// Create a test account or replace with real credentials.consttransporter=nodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,// true for 465, false for other portsauth:{user:\"maddison53@ethereal.email\",pass:\"jn7jnAPss4f63QBp6D\",},});// Wrap in an async IIFE so we can use await.(async()=>{constinfo=awaittransporter.sendMail({from:'\"Maddison Foo¬†Koch\" <maddison53@ethereal.email>',to:\"bar@example.com, baz@example.com\",subject:\"Hello ‚úî\",text:\"Hello world?\",// plain‚Äëtext bodyhtml:\"<b>Hello world?</b>\",// HTML body});console.log(\"Message sent:\",info.messageId);})();\nTip:Ethereal generates a URL for every message so you can view the rendered email in your browser ‚Äî perfect for development.\nSource & license‚Äã\nNodemailer is MIT‚Äëlicensed open source. Browse the code onGitHub.\nMade with ‚ù§Ô∏è byAndris¬†Reinman. Logo bySven¬†Kristjansen.\nWhy Nodemailer?\nRequirements\nQuick‚ÄëstartExample (using an Ethereal test account)\nExample (using an Ethereal test account)\nSource & license",
        "source_url": "https://nodemailer.com/",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 403
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nNodemailer\nNodemailer\nSend e-mails with Node.JS ‚Äì easy as cake! ‚úâÔ∏è\nNodemailer makes sending email from a Node.js application straightforward and secure, without pulling in a single runtime dependency.\nnpm install nodemailer\nnpm install nodemailer\nEmailEngineis a self‚Äëhosted email gateway that lets you make REST calls to IMAP & SMTP accounts, receive webhooks for mailbox changes, and send email with extras such as OAuth2, delayed delivery, open‚Äë & click‚Äëtracking, bounce detection, and more.\nWhy Nodemailer?‚Äã\nZero runtime dependencies‚Äì the entire implementation lives in one audited package.\nSecurity first‚Äì avoids known RCE vectors that have affected other Node.js mailers.\nUnicode everywhere‚Äì send any characters, including emoji¬†üí™.\nCross‚Äëplatform‚Äì no native addons, works the same on Linux, macOS, and Windows (great for Azure).\nHTML e‚Äëmailswithplain‚Äëtext fallbacksout of the box.\nAttachments&embedded imageswithout pain.\nOut‚Äëof‚Äëthe‚ÄëboxTLS/STARTTLSencryption.\nMultipletransports(SMTP, Sendmail, SES, streams, and more).\nDKIMsigning &OAuth2authentication.\nProxy supportfor restricted networks.\nPlugin APIfor advanced message manipulation.\nBuilt‚Äëin test accounts fromEthereal.emailfor local development.\nRequirements‚Äã\nNode.js¬†‚â•¬†6.0.0(async/await examples require ‚â•¬†8.0.0).\nNo other system libraries, services, or build tools are needed.\nQuick‚Äëstart‚Äã\nCreate a transporter.Use SMTP or another supported transport.\nCompose a message.Define sender, recipient(s), subject, and content.\nSend itwithtransporter.sendMail().\ntransporter.sendMail()\nExample (using an Ethereal test account)‚Äã\nconstnodemailer=require(\"nodemailer\");// Create a test account or replace with real credentials.consttransporter=nodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,// true for 465, false for other portsauth:{user:\"maddison53@ethereal.email\",pass:\"jn7jnAPss4f63QBp6D\",},});// Wrap in an async IIFE so we can use await.(async",
        "source_url": "https://nodemailer.com/#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "465, false for other portsauth:{user:\"maddison53@ethereal.email\",pass:\"jn7jnAPss4f63QBp6D\",},});// Wrap in an async IIFE so we can use await.(async()=>{constinfo=awaittransporter.sendMail({from:'\"Maddison Foo¬†Koch\" <maddison53@ethereal.email>',to:\"bar@example.com, baz@example.com\",subject:\"Hello ‚úî\",text:\"Hello world?\",// plain‚Äëtext bodyhtml:\"<b>Hello world?</b>\",// HTML body});console.log(\"Message sent:\",info.messageId);})();\nconstnodemailer=require(\"nodemailer\");// Create a test account or replace with real credentials.consttransporter=nodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,// true for 465, false for other portsauth:{user:\"maddison53@ethereal.email\",pass:\"jn7jnAPss4f63QBp6D\",},});// Wrap in an async IIFE so we can use await.(async()=>{constinfo=awaittransporter.sendMail({from:'\"Maddison Foo¬†Koch\" <maddison53@ethereal.email>',to:\"bar@example.com, baz@example.com\",subject:\"Hello ‚úî\",text:\"Hello world?\",// plain‚Äëtext bodyhtml:\"<b>Hello world?</b>\",// HTML body});console.log(\"Message sent:\",info.messageId);})();\nTip:Ethereal generates a URL for every message so you can view the rendered email in your browser ‚Äî perfect for development.\nSource & license‚Äã\nNodemailer is MIT‚Äëlicensed open source. Browse the code onGitHub.\nMade with ‚ù§Ô∏è byAndris¬†Reinman. Logo bySven¬†Kristjansen.\nWhy Nodemailer?\nRequirements\nQuick‚ÄëstartExample (using an Ethereal test account)\nExample (using an Ethereal test account)\nSource & license",
        "source_url": "https://nodemailer.com/#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 403
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsageUsing Gmail\nUsing Gmail\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nUsage\nUsage\nThis page shows how to get Nodemailer up and running quickly, then walks through the most common tasks you‚Äôll perform: creating atransporterand sending a message.\nInstallation‚Äã\nAdd Nodemailer to your project:\nnpm install nodemailer\nnpm install nodemailer\nCreate a transporter‚Äã\nEvery email you send goes through atransporter‚Äîan object that knows how to deliver messages to your chosen email service.\nconstnodemailer=require(\"nodemailer\");// Create a transporter for SMTPconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:587,secure:false,// upgrade later with STARTTLSauth:{user:process.env.SMTP_USER,pass:process.env.SMTP_PASS,},});\nconstnodemailer=require(\"nodemailer\");// Create a transporter for SMTPconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:587,secure:false,// upgrade later with STARTTLSauth:{user:process.env.SMTP_USER,pass:process.env.SMTP_PASS,},});\ncreateTransport(transport[, defaults])returns a reusable transporter instance.\ncreateTransport(transport[, defaults])\n\"smtp://user:pass@smtp.example.com:587\"\nCreate the transporteronceand reuse it. Transporter creation opens network sockets and performs authentication; doing this for every email adds needless overhead.\nOther transport types‚Äã\nSMTP‚Äì see theSMTP guidefor all available options.\nPlugins‚Äì Nodemailer can deliver through anything that exposes asend(mail, callback)interface. See thetransport plugin docs.\nsend(mail, callback)\nVerify the connection (optional)‚Äã\nBefore you start sending, you can check that Nodemailer can connect to your SMTP server:\nawaittransporter.verify();console.log(\"Server is ready to take our messages\");\nawaittransporter.verify();console.log(\"Server is ready to take our messages\");\nSend a message‚Äã\nOnce you have a transporter, send an email withtransporter.sendMail(message[, callback]).\ntransporter.sendMail(message[, callback])\n(async()=>{try{constinfo=awaittransporter.sendMail({from:'\"Example Team\" <team@example.com>',// sender addressto:\"alice@example.com, bob@example.com\",// list of receiverssubject:\"Hello\",// Subject linetext:\"Hello",
        "source_url": "https://nodemailer.com/usage",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "{constinfo=awaittransporter.sendMail({from:'\"Example Team\" <team@example.com>',// sender addressto:\"alice@example.com, bob@example.com\",// list of receiverssubject:\"Hello\",// Subject linetext:\"Hello world?\",// plain text bodyhtml:\"<b>Hello world?</b>\",// html body});console.log(\"Message sent: %s\",info.messageId);console.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));}catch(err){console.error(\"Error while sending mail\",err);}})();\n(async()=>{try{constinfo=awaittransporter.sendMail({from:'\"Example Team\" <team@example.com>',// sender addressto:\"alice@example.com, bob@example.com\",// list of receiverssubject:\"Hello\",// Subject linetext:\"Hello world?\",// plain text bodyhtml:\"<b>Hello world?</b>\",// html body});console.log(\"Message sent: %s\",info.messageId);console.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));}catch(err){console.error(\"Error while sending mail\",err);}})();\nParameters‚Äã\n(err, info) => {}\nsendMail\nTheinfoobject returned by most transports contains:\ninfo\nmessageId\nenvelope\naccepted\nrejected\npending\nresponse\nIf a message has multiple recipients it is consideredsentas long asat least oneaddress was accepted.\nInstallation\nCreate a transporterOther transport types\nOther transport types\nVerify the connection (optional)\nSend a messageParameters\nParameters",
        "source_url": "https://nodemailer.com/usage",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 316
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsageUsing Gmail\nUsing Gmail\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nUsage\nUsage\nThis page shows how to get Nodemailer up and running quickly, then walks through the most common tasks you‚Äôll perform: creating atransporterand sending a message.\nInstallation‚Äã\nAdd Nodemailer to your project:\nnpm install nodemailer\nnpm install nodemailer\nCreate a transporter‚Äã\nEvery email you send goes through atransporter‚Äîan object that knows how to deliver messages to your chosen email service.\nconstnodemailer=require(\"nodemailer\");// Create a transporter for SMTPconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:587,secure:false,// upgrade later with STARTTLSauth:{user:process.env.SMTP_USER,pass:process.env.SMTP_PASS,},});\nconstnodemailer=require(\"nodemailer\");// Create a transporter for SMTPconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:587,secure:false,// upgrade later with STARTTLSauth:{user:process.env.SMTP_USER,pass:process.env.SMTP_PASS,},});\ncreateTransport(transport[, defaults])returns a reusable transporter instance.\ncreateTransport(transport[, defaults])\n\"smtp://user:pass@smtp.example.com:587\"\nCreate the transporteronceand reuse it. Transporter creation opens network sockets and performs authentication; doing this for every email adds needless overhead.\nOther transport types‚Äã\nSMTP‚Äì see theSMTP guidefor all available options.\nPlugins‚Äì Nodemailer can deliver through anything that exposes asend(mail, callback)interface. See thetransport plugin docs.\nsend(mail, callback)\nVerify the connection (optional)‚Äã\nBefore you start sending, you can check that Nodemailer can connect to your SMTP server:\nawaittransporter.verify();console.log(\"Server is ready to take our messages\");\nawaittransporter.verify();console.log(\"Server is ready to take our messages\");\nSend a message‚Äã\nOnce you have a transporter, send an email withtransporter.sendMail(message[, callback]).\ntransporter.sendMail(message[, callback])\n(async()=>{try{constinfo=awaittransporter.sendMail({from:'\"Example Team\" <team@example.com>',// sender addressto:\"alice@example.com, bob@example.com\",// list of receiverssubject:\"Hello\",// Subject linetext:\"Hello",
        "source_url": "https://nodemailer.com/usage#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "{constinfo=awaittransporter.sendMail({from:'\"Example Team\" <team@example.com>',// sender addressto:\"alice@example.com, bob@example.com\",// list of receiverssubject:\"Hello\",// Subject linetext:\"Hello world?\",// plain text bodyhtml:\"<b>Hello world?</b>\",// html body});console.log(\"Message sent: %s\",info.messageId);console.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));}catch(err){console.error(\"Error while sending mail\",err);}})();\n(async()=>{try{constinfo=awaittransporter.sendMail({from:'\"Example Team\" <team@example.com>',// sender addressto:\"alice@example.com, bob@example.com\",// list of receiverssubject:\"Hello\",// Subject linetext:\"Hello world?\",// plain text bodyhtml:\"<b>Hello world?</b>\",// html body});console.log(\"Message sent: %s\",info.messageId);console.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));}catch(err){console.error(\"Error while sending mail\",err);}})();\nParameters‚Äã\n(err, info) => {}\nsendMail\nTheinfoobject returned by most transports contains:\ninfo\nmessageId\nenvelope\naccepted\nrejected\npending\nresponse\nIf a message has multiple recipients it is consideredsentas long asat least oneaddress was accepted.\nInstallation\nCreate a transporterOther transport types\nOther transport types\nVerify the connection (optional)\nSend a messageParameters\nParameters",
        "source_url": "https://nodemailer.com/usage#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 316
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsageUsing Gmail\nUsing Gmail\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nUsage\nUsing Gmail\nUsing Gmail\nTL;DRFor new projects, useOAuth‚ÄØ2.0(or an App¬†Password if you already have Google¬†2‚ÄëStep Verification turned on). ‚ÄúLess Secure App‚Äù access was permanently disabled by Google onMay¬†30‚ÄØ2022.\nGmail is still the quickest way to send a test email with Nodemailer, but it isnotthe most resilient choice for production workloads. Gmail is designed for humans, not automated services, and its login heuristics are aggressive. When Google detects something that looks like account‚Äëhijacking (for example, your production server running from a different country than your laptop) it will simply block the SMTP connection rather than deliver the mail.\nBelow we cover the three supported authentication methods, the Gmail sending limits, and some caveats that often trip developers up.\n1. Choose an authentication method‚Äã\nOAuth¬†2.0 (recommended)‚Äã\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({service:\"gmail\",auth:{type:\"OAuth2\",user:\"me@gmail.com\",clientId:process.env.GOOGLE_CLIENT_ID,clientSecret:process.env.GOOGLE_CLIENT_SECRET,refreshToken:process.env.GOOGLE_REFRESH_TOKEN,},});\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({service:\"gmail\",auth:{type:\"OAuth2\",user:\"me@gmail.com\",clientId:process.env.GOOGLE_CLIENT_ID,clientSecret:process.env.GOOGLE_CLIENT_SECRET,refreshToken:process.env.GOOGLE_REFRESH_TOKEN,},});\nOAuth¬†2.0 avoids password handling altogether. You perform a one‚Äëtime consent flow, store therefresh_token, and Nodemailer silently refreshes access tokens when needed.\nrefresh_token\nSee the dedicated guide ‚û°Ô∏èSMTP¬†/ OAuth¬†2.0for a step‚Äëby‚Äëstep walkthrough.\nApp¬†Password (requires 2‚ÄëStep Verification)‚Äã\nIf the Google account already has 2‚ÄëStep Verification, you can generate a 16‚ÄëcharacterApp¬†Passwordand use it like a normal SMTP password:\nconsttransporter=nodemailer.createTransport({service:\"gmail\",auth:{user:\"me@gmail.com\",pass:process.env.GOOGLE",
        "source_url": "https://nodemailer.com/usage/using-gmail",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "Step Verification, you can generate a 16‚ÄëcharacterApp¬†Passwordand use it like a normal SMTP password:\nconsttransporter=nodemailer.createTransport({service:\"gmail\",auth:{user:\"me@gmail.com\",pass:process.env.GOOGLE_APP_PASSWORD,},});\nconsttransporter=nodemailer.createTransport({service:\"gmail\",auth:{user:\"me@gmail.com\",pass:process.env.GOOGLE_APP_PASSWORD,},});\nApp¬†Passwordsbypass most of Google‚Äôs heuristics, but Google may still block traffic from unusual locations or IP ranges.\n2. Gmail quirks to keep in mind‚Äã\nGmail rewrites theFrom:header‚Äã\nGmailalwayssets the authenticated account address as the sender. If you authenticate asfoo@example.comand passbar@example.comin thefromfield, Gmail will silently replace it withfoo@example.com. Usealiasesor a Google¬†WorkspaceSend¬†Asaddress if you need a different visible sender.\nfoo@example.com\nbar@example.com\nfrom\nfoo@example.com\nDaily sending limits‚Äã\nPersonal GmailUp to500recipients per rolling 24‚Äëhour period.\nGoogle¬†WorkspaceUp to2‚ÄØ000recipients per rolling 24‚Äëhour period.\nA single e‚Äëmail counts once per unique recipient, so a message with oneTo:and oneCc:address counts astwo.\nExceeding these limits will result in SMTP error454¬†4.7.0‚ÄúToo many recipients‚Äùuntil the quota resets.\n3. Production alternatives‚Äã\nFor predictable delivery and higher volume you will want to move to a specialist SMTP provider (SendGrid, Postmark, Amazon¬†SES, etc.). Most offer free tiers (~200‚Äì300 e‚Äëmails/day) similar to Gmail but without the login heuristics, sender‚Äëaddress rewrite, or recipient caps.\nTroubleshooting checklist‚Äã\nCheck the Google Account ‚ÄòSecurity¬†> Recent¬†activity‚Äô pageto see if Google is blocking the login attempt.\nIf usingOAuth¬†2.0, verify that therefresh_tokenis still valid and that the OAuth consent screen is in ‚ÄúProduction‚Äù status.\nrefresh_token\nIf using anApp¬†Password, confirm that 2‚ÄëStep Verification is still enabled and that the App¬†Password has not been revoked.\nMake sure the server‚Äôs clock is in sync (OAuth tokens are time‚Äësensitive).\nTry sending from the same IP range manually (e.g. usingopenssl s_client -connect smtp.gmail.com:465) to",
        "source_url": "https://nodemailer.com/usage/using-gmail",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "¬†Password has not been revoked.\nMake sure the server‚Äôs clock is in sync (OAuth tokens are time‚Äësensitive).\nTry sending from the same IP range manually (e.g. usingopenssl s_client -connect smtp.gmail.com:465) to reproduce the error.\nopenssl s_client -connect smtp.gmail.com:465\n1. Choose an authentication methodOAuth¬†2.0 (recommended)App¬†Password (requires 2‚ÄëStep Verification)\nOAuth¬†2.0 (recommended)\nApp¬†Password (requires 2‚ÄëStep Verification)\n2. Gmail quirks to keep in mindGmail rewrites theFrom:headerDaily sending limits\nGmail rewrites theFrom:header\nDaily sending limits\n3. Production alternatives\nTroubleshooting checklist",
        "source_url": "https://nodemailer.com/usage/using-gmail",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 152
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsageUsing Gmail\nUsing Gmail\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nUsage\nUsing Gmail\nUsing Gmail\nTL;DRFor new projects, useOAuth‚ÄØ2.0(or an App¬†Password if you already have Google¬†2‚ÄëStep Verification turned on). ‚ÄúLess Secure App‚Äù access was permanently disabled by Google onMay¬†30‚ÄØ2022.\nGmail is still the quickest way to send a test email with Nodemailer, but it isnotthe most resilient choice for production workloads. Gmail is designed for humans, not automated services, and its login heuristics are aggressive. When Google detects something that looks like account‚Äëhijacking (for example, your production server running from a different country than your laptop) it will simply block the SMTP connection rather than deliver the mail.\nBelow we cover the three supported authentication methods, the Gmail sending limits, and some caveats that often trip developers up.\n1. Choose an authentication method‚Äã\nOAuth¬†2.0 (recommended)‚Äã\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({service:\"gmail\",auth:{type:\"OAuth2\",user:\"me@gmail.com\",clientId:process.env.GOOGLE_CLIENT_ID,clientSecret:process.env.GOOGLE_CLIENT_SECRET,refreshToken:process.env.GOOGLE_REFRESH_TOKEN,},});\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({service:\"gmail\",auth:{type:\"OAuth2\",user:\"me@gmail.com\",clientId:process.env.GOOGLE_CLIENT_ID,clientSecret:process.env.GOOGLE_CLIENT_SECRET,refreshToken:process.env.GOOGLE_REFRESH_TOKEN,},});\nOAuth¬†2.0 avoids password handling altogether. You perform a one‚Äëtime consent flow, store therefresh_token, and Nodemailer silently refreshes access tokens when needed.\nrefresh_token\nSee the dedicated guide ‚û°Ô∏èSMTP¬†/ OAuth¬†2.0for a step‚Äëby‚Äëstep walkthrough.\nApp¬†Password (requires 2‚ÄëStep Verification)‚Äã\nIf the Google account already has 2‚ÄëStep Verification, you can generate a 16‚ÄëcharacterApp¬†Passwordand use it like a normal SMTP password:\nconsttransporter=nodemailer.createTransport({service:\"gmail\",auth:{user:\"me@gmail.com\",pass:process.env.GOOGLE",
        "source_url": "https://nodemailer.com/usage/using-gmail#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "Step Verification, you can generate a 16‚ÄëcharacterApp¬†Passwordand use it like a normal SMTP password:\nconsttransporter=nodemailer.createTransport({service:\"gmail\",auth:{user:\"me@gmail.com\",pass:process.env.GOOGLE_APP_PASSWORD,},});\nconsttransporter=nodemailer.createTransport({service:\"gmail\",auth:{user:\"me@gmail.com\",pass:process.env.GOOGLE_APP_PASSWORD,},});\nApp¬†Passwordsbypass most of Google‚Äôs heuristics, but Google may still block traffic from unusual locations or IP ranges.\n2. Gmail quirks to keep in mind‚Äã\nGmail rewrites theFrom:header‚Äã\nGmailalwayssets the authenticated account address as the sender. If you authenticate asfoo@example.comand passbar@example.comin thefromfield, Gmail will silently replace it withfoo@example.com. Usealiasesor a Google¬†WorkspaceSend¬†Asaddress if you need a different visible sender.\nfoo@example.com\nbar@example.com\nfrom\nfoo@example.com\nDaily sending limits‚Äã\nPersonal GmailUp to500recipients per rolling 24‚Äëhour period.\nGoogle¬†WorkspaceUp to2‚ÄØ000recipients per rolling 24‚Äëhour period.\nA single e‚Äëmail counts once per unique recipient, so a message with oneTo:and oneCc:address counts astwo.\nExceeding these limits will result in SMTP error454¬†4.7.0‚ÄúToo many recipients‚Äùuntil the quota resets.\n3. Production alternatives‚Äã\nFor predictable delivery and higher volume you will want to move to a specialist SMTP provider (SendGrid, Postmark, Amazon¬†SES, etc.). Most offer free tiers (~200‚Äì300 e‚Äëmails/day) similar to Gmail but without the login heuristics, sender‚Äëaddress rewrite, or recipient caps.\nTroubleshooting checklist‚Äã\nCheck the Google Account ‚ÄòSecurity¬†> Recent¬†activity‚Äô pageto see if Google is blocking the login attempt.\nIf usingOAuth¬†2.0, verify that therefresh_tokenis still valid and that the OAuth consent screen is in ‚ÄúProduction‚Äù status.\nrefresh_token\nIf using anApp¬†Password, confirm that 2‚ÄëStep Verification is still enabled and that the App¬†Password has not been revoked.\nMake sure the server‚Äôs clock is in sync (OAuth tokens are time‚Äësensitive).\nTry sending from the same IP range manually (e.g. usingopenssl s_client -connect smtp.gmail.com:465) to",
        "source_url": "https://nodemailer.com/usage/using-gmail#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "¬†Password has not been revoked.\nMake sure the server‚Äôs clock is in sync (OAuth tokens are time‚Äësensitive).\nTry sending from the same IP range manually (e.g. usingopenssl s_client -connect smtp.gmail.com:465) to reproduce the error.\nopenssl s_client -connect smtp.gmail.com:465\n1. Choose an authentication methodOAuth¬†2.0 (recommended)App¬†Password (requires 2‚ÄëStep Verification)\nOAuth¬†2.0 (recommended)\nApp¬†Password (requires 2‚ÄëStep Verification)\n2. Gmail quirks to keep in mindGmail rewrites theFrom:headerDaily sending limits\nGmail rewrites theFrom:header\nDaily sending limits\n3. Production alternatives\nTroubleshooting checklist",
        "source_url": "https://nodemailer.com/usage/using-gmail#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 152
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configurationAttachmentsAlternativesAddress objectCalendar eventsEmbedded imagesList headersCustom headersCustom source\nAttachments\nAlternatives\nAddress object\nCalendar events\nEmbedded images\nList headers\nCustom headers\nCustom source\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nMessage configuration\nMessage configuration\nThe following are the possible fields of an email message:\nCommon fields‚Äã\nfrom- The email address of the sender. All email addresses can be plain'sender@server.com'or formatted'\"Sender Name\" <sender@server.com>', seeAddress objectfor details\n'sender@server.com'\n'\"Sender Name\" <sender@server.com>'\nto- Comma separated list or an array of recipients email addresses that will appear on theTo:field\ncc- Comma separated list or an array of recipients email addresses that will appear on theCc:field\nbcc- Comma separated list or an array of recipients email addresses that will appear on theBcc:field\nsubject- The subject of the email\ntext- The plaintext version of the message as a Unicode string, Buffer, Stream or an attachment-like object ({path: '/var/data/...'})\n{path: '/var/data/...'}\nhtml- The HTML version of the message as a Unicode string, Buffer, Stream or an attachment-like object ({path: 'http://...'})\n{path: 'http://...'}\nattachments- An array of attachment objects (seeUsing attachmentsfor details). Attachments can be used forembedding imagesas well.\nA large majority of emails sent look a lot like this, using only a few basic fields:\nvarmessage={from:\"sender@server.com\",to:\"receiver@sender.com\",subject:\"Message title\",text:\"Plaintext version of the message\",html:\"<p>HTML version of the message</p>\",};\nvarmessage={from:\"sender@server.com\",to:\"receiver@sender.com\",subject:\"Message title\",text:\"Plaintext version of the message\",html:\"<p>HTML version of the message</p>\",};\nMore advanced fields‚Äã\nsender- An email address that will appear on theSender:field (always preferfromif you're not sure which one to use)\nreplyTo- An email address that will appear on theReply-To:field\ninReplyTo- The Message-ID this message is rep",
        "source_url": "https://nodemailer.com/message",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": " address that will appear on theSender:field (always preferfromif you're not sure which one to use)\nreplyTo- An email address that will appear on theReply-To:field\ninReplyTo- The Message-ID this message is replying to\nreferences- Message-ID list (an array or space separated string)\nenvelope- optional SMTP envelope, if auto-generated envelope is not suitable (seeSMTP envelopefor details)\nattachDataUrls‚Äì if true then convertdata:images in the HTML content of this message to embedded attachments\nwatchHtml- Apple Watch specific HTML version of the message. Latest watches have no problems rendering text/html content so watchHtml is most probably never seen by the recipient\namp- AMP4EMAIL specific HTML version of the message, same usage as withtextandhtml. See AMP examplebelowfor usage orthis blogpostfor sending and rendering\ntext\nhtml\nicalEvent‚Äì iCalendar event to use as an alternative. See detailshere\nalternatives- An array of alternative text contents (in addition to text and html parts) (seeUsing alternative contentfor details)\nencoding- identifies encoding for text/html strings (defaults to 'utf-8', other values are 'hex' and 'base64')\nraw- existing MIME message to use instead of generating a new one. See detailshere\ntextEncoding- force content-transfer-encoding for text values (eitherquoted-printableorbase64). By default the best option is detected (for lots of ascii usequoted-printable, otherwisebase64)\npriority- Sets message importance headers, either'high','normal'(default) or'low'.\nheaders- An object or array of additional header fields (e.g.{\"X-Key-Name\": \"key value\"}or[{key: \"X-Key-Name\", value: \"val1\"}, {key: \"X-Key-Name\", value: \"val2\"}]). Read more about custom headershere\n{\"X-Key-Name\": \"key value\"}\n[{key: \"X-Key-Name\", value: \"val1\"}, {key: \"X-Key-Name\", value: \"val2\"}]\nmessageId- optional Message-Id value, random value will be generated if not set\ndate- optional Date value, current UTC string will be used if not set\nlist- helper for setting List-* headers (see morehere)\ndisableFileAccessif true, then does not allow to use files as content. Use it when",
        "source_url": "https://nodemailer.com/message",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": " set\ndate- optional Date value, current UTC string will be used if not set\nlist- helper for setting List-* headers (see morehere)\ndisableFileAccessif true, then does not allow to use files as content. Use it when you want to use JSON data from untrusted source as the email. If an attachment or message node tries to fetch something from a file the sending returns an error. If this field is also set in the transport options, then the value in mail data is ignored\ndisableUrlAccessif true, then does not allow to use URLs as content. If this field is also set in the transport options, then the value in mail data is ignored\nvarmessage={...,headers:{'My-Custom-Header':'header value'},date:newDate('2000-01-01 00:00:00')};\nvarmessage={...,headers:{'My-Custom-Header':'header value'},date:newDate('2000-01-01 00:00:00')};\nvarhtmlstream=fs.createReadStream(\"content.html\");transport.sendMail({html:htmlstream},function(err){if(err){// check if htmlstream is still open and close it to clean up}});\nvarhtmlstream=fs.createReadStream(\"content.html\");transport.sendMail({html:htmlstream},function(err){if(err){// check if htmlstream is still open and close it to clean up}});\nletmessage={from:\"Nodemailer <example@nodemailer.com>\",to:\"Nodemailer <example@nodemailer.com>\",subject:\"AMP4EMAIL message\",text:\"For clients with plaintext support only\",html:\"<p>For clients that do not support AMP4EMAIL or amp content is not valid</p>\",amp:`<!doctype html><html ‚ö°4email><head><meta charset=\"utf-8\"><style amp4email-boilerplate>body{visibility:hidden}</style><script async src=\"https://cdn.ampproject.org/v0.js\"></script><script async custom-element=\"amp-anim\" src=\"https://cdn.ampproject.org/v0/amp-anim-0.1.js\"></script></head><body><p>Image: <amp-img src=\"https://cldup.com/P0b1bUmEet.png\" width=\"16\" height=\"16\"/></p><p>GIF (requires \"amp-anim\" script in header):<br/><amp-anim",
        "source_url": "https://nodemailer.com/message",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "amp-img src=\"https://cldup.com/P0b1bUmEet.png\" width=\"16\" height=\"16\"/></p><p>GIF (requires \"amp-anim\" script in header):<br/><amp-anim src=\"https://cldup.com/D72zpdwI-i.gif\" width=\"500\" height=\"350\"/></p></body></html>`,};\nletmessage={from:\"Nodemailer <example@nodemailer.com>\",to:\"Nodemailer <example@nodemailer.com>\",subject:\"AMP4EMAIL message\",text:\"For clients with plaintext support only\",html:\"<p>For clients that do not support AMP4EMAIL or amp content is not valid</p>\",amp:`<!doctype html><html ‚ö°4email><head><meta charset=\"utf-8\"><style amp4email-boilerplate>body{visibility:hidden}</style><script async src=\"https://cdn.ampproject.org/v0.js\"></script><script async custom-element=\"amp-anim\" src=\"https://cdn.ampproject.org/v0/amp-anim-0.1.js\"></script></head><body><p>Image: <amp-img src=\"https://cldup.com/P0b1bUmEet.png\" width=\"16\" height=\"16\"/></p><p>GIF (requires \"amp-anim\" script in header):<br/><amp-anim src=\"https://cldup.com/D72zpdwI-i.gif\" width=\"500\" height=\"350\"/></p></body></html>`,};\nCommon fields\nMore advanced fields",
        "source_url": "https://nodemailer.com/message",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 335
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configurationAttachmentsAlternativesAddress objectCalendar eventsEmbedded imagesList headersCustom headersCustom source\nAttachments\nAlternatives\nAddress object\nCalendar events\nEmbedded images\nList headers\nCustom headers\nCustom source\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nMessage configuration\nMessage configuration\nThe following are the possible fields of an email message:\nCommon fields‚Äã\nfrom- The email address of the sender. All email addresses can be plain'sender@server.com'or formatted'\"Sender Name\" <sender@server.com>', seeAddress objectfor details\n'sender@server.com'\n'\"Sender Name\" <sender@server.com>'\nto- Comma separated list or an array of recipients email addresses that will appear on theTo:field\ncc- Comma separated list or an array of recipients email addresses that will appear on theCc:field\nbcc- Comma separated list or an array of recipients email addresses that will appear on theBcc:field\nsubject- The subject of the email\ntext- The plaintext version of the message as a Unicode string, Buffer, Stream or an attachment-like object ({path: '/var/data/...'})\n{path: '/var/data/...'}\nhtml- The HTML version of the message as a Unicode string, Buffer, Stream or an attachment-like object ({path: 'http://...'})\n{path: 'http://...'}\nattachments- An array of attachment objects (seeUsing attachmentsfor details). Attachments can be used forembedding imagesas well.\nA large majority of emails sent look a lot like this, using only a few basic fields:\nvarmessage={from:\"sender@server.com\",to:\"receiver@sender.com\",subject:\"Message title\",text:\"Plaintext version of the message\",html:\"<p>HTML version of the message</p>\",};\nvarmessage={from:\"sender@server.com\",to:\"receiver@sender.com\",subject:\"Message title\",text:\"Plaintext version of the message\",html:\"<p>HTML version of the message</p>\",};\nMore advanced fields‚Äã\nsender- An email address that will appear on theSender:field (always preferfromif you're not sure which one to use)\nreplyTo- An email address that will appear on theReply-To:field\ninReplyTo- The Message-ID this message is rep",
        "source_url": "https://nodemailer.com/message#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": " address that will appear on theSender:field (always preferfromif you're not sure which one to use)\nreplyTo- An email address that will appear on theReply-To:field\ninReplyTo- The Message-ID this message is replying to\nreferences- Message-ID list (an array or space separated string)\nenvelope- optional SMTP envelope, if auto-generated envelope is not suitable (seeSMTP envelopefor details)\nattachDataUrls‚Äì if true then convertdata:images in the HTML content of this message to embedded attachments\nwatchHtml- Apple Watch specific HTML version of the message. Latest watches have no problems rendering text/html content so watchHtml is most probably never seen by the recipient\namp- AMP4EMAIL specific HTML version of the message, same usage as withtextandhtml. See AMP examplebelowfor usage orthis blogpostfor sending and rendering\ntext\nhtml\nicalEvent‚Äì iCalendar event to use as an alternative. See detailshere\nalternatives- An array of alternative text contents (in addition to text and html parts) (seeUsing alternative contentfor details)\nencoding- identifies encoding for text/html strings (defaults to 'utf-8', other values are 'hex' and 'base64')\nraw- existing MIME message to use instead of generating a new one. See detailshere\ntextEncoding- force content-transfer-encoding for text values (eitherquoted-printableorbase64). By default the best option is detected (for lots of ascii usequoted-printable, otherwisebase64)\npriority- Sets message importance headers, either'high','normal'(default) or'low'.\nheaders- An object or array of additional header fields (e.g.{\"X-Key-Name\": \"key value\"}or[{key: \"X-Key-Name\", value: \"val1\"}, {key: \"X-Key-Name\", value: \"val2\"}]). Read more about custom headershere\n{\"X-Key-Name\": \"key value\"}\n[{key: \"X-Key-Name\", value: \"val1\"}, {key: \"X-Key-Name\", value: \"val2\"}]\nmessageId- optional Message-Id value, random value will be generated if not set\ndate- optional Date value, current UTC string will be used if not set\nlist- helper for setting List-* headers (see morehere)\ndisableFileAccessif true, then does not allow to use files as content. Use it when",
        "source_url": "https://nodemailer.com/message#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": " set\ndate- optional Date value, current UTC string will be used if not set\nlist- helper for setting List-* headers (see morehere)\ndisableFileAccessif true, then does not allow to use files as content. Use it when you want to use JSON data from untrusted source as the email. If an attachment or message node tries to fetch something from a file the sending returns an error. If this field is also set in the transport options, then the value in mail data is ignored\ndisableUrlAccessif true, then does not allow to use URLs as content. If this field is also set in the transport options, then the value in mail data is ignored\nvarmessage={...,headers:{'My-Custom-Header':'header value'},date:newDate('2000-01-01 00:00:00')};\nvarmessage={...,headers:{'My-Custom-Header':'header value'},date:newDate('2000-01-01 00:00:00')};\nvarhtmlstream=fs.createReadStream(\"content.html\");transport.sendMail({html:htmlstream},function(err){if(err){// check if htmlstream is still open and close it to clean up}});\nvarhtmlstream=fs.createReadStream(\"content.html\");transport.sendMail({html:htmlstream},function(err){if(err){// check if htmlstream is still open and close it to clean up}});\nletmessage={from:\"Nodemailer <example@nodemailer.com>\",to:\"Nodemailer <example@nodemailer.com>\",subject:\"AMP4EMAIL message\",text:\"For clients with plaintext support only\",html:\"<p>For clients that do not support AMP4EMAIL or amp content is not valid</p>\",amp:`<!doctype html><html ‚ö°4email><head><meta charset=\"utf-8\"><style amp4email-boilerplate>body{visibility:hidden}</style><script async src=\"https://cdn.ampproject.org/v0.js\"></script><script async custom-element=\"amp-anim\" src=\"https://cdn.ampproject.org/v0/amp-anim-0.1.js\"></script></head><body><p>Image: <amp-img src=\"https://cldup.com/P0b1bUmEet.png\" width=\"16\" height=\"16\"/></p><p>GIF (requires \"amp-anim\" script in header):<br/><amp-anim",
        "source_url": "https://nodemailer.com/message#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "amp-img src=\"https://cldup.com/P0b1bUmEet.png\" width=\"16\" height=\"16\"/></p><p>GIF (requires \"amp-anim\" script in header):<br/><amp-anim src=\"https://cldup.com/D72zpdwI-i.gif\" width=\"500\" height=\"350\"/></p></body></html>`,};\nletmessage={from:\"Nodemailer <example@nodemailer.com>\",to:\"Nodemailer <example@nodemailer.com>\",subject:\"AMP4EMAIL message\",text:\"For clients with plaintext support only\",html:\"<p>For clients that do not support AMP4EMAIL or amp content is not valid</p>\",amp:`<!doctype html><html ‚ö°4email><head><meta charset=\"utf-8\"><style amp4email-boilerplate>body{visibility:hidden}</style><script async src=\"https://cdn.ampproject.org/v0.js\"></script><script async custom-element=\"amp-anim\" src=\"https://cdn.ampproject.org/v0/amp-anim-0.1.js\"></script></head><body><p>Image: <amp-img src=\"https://cldup.com/P0b1bUmEet.png\" width=\"16\" height=\"16\"/></p><p>GIF (requires \"amp-anim\" script in header):<br/><amp-anim src=\"https://cldup.com/D72zpdwI-i.gif\" width=\"500\" height=\"350\"/></p></body></html>`,};\nCommon fields\nMore advanced fields",
        "source_url": "https://nodemailer.com/message#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 335
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configurationAttachmentsAlternativesAddress objectCalendar eventsEmbedded imagesList headersCustom headersCustom source\nAttachments\nAlternatives\nAddress object\nCalendar events\nEmbedded images\nList headers\nCustom headers\nCustom source\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nMessage configuration\nAttachments\nAttachments\nUse theattachmentsoption of themessage objectto attach files.\nattachments\nAn attachment is an object inside theattachmentsarray. You can attachas many files as you need.\nattachments\nfilename\nstring\ncontent\nstring | Buffer | Stream\npath\nstring\nhref\nstring\nhttpHeaders\nobject\nhref\n{ authorization: 'Bearer ‚Ä¶' }\ncontentType\nstring\nfilename\ncontentDisposition\nstring\n'attachment'\ncid\nstring\n<img src=\"cid:my-logo\"/>\nencoding\nstring\ncontent\n'base64'\n'hex'\nheaders\nobject\nraw\nstring\nPreferpath,href, or aStreamwhen attaching large files so that Nodemailer can stream data without loading it all into memory.\npath\nhref\nStream\nExamples‚Äã\nconstfs=require(\"fs\");// inside a message objectattachments:[// 1. Plain text{filename:\"hello.txt\",content:\"Hello world!\",},// 2. Binary (Buffer){filename:\"buffer.txt\",content:Buffer.from(\"Hello world!\",\"utf8\"),},// 3. Local file (streamed){filename:\"report.pdf\",path:\"/absolute/path/to/report.pdf\",},// 4. Implicit filename & type (derived from path){path:\"/absolute/path/to/image.png\",},// 5. Readable stream{filename:\"notes.txt\",content:fs.createReadStream(\"./notes.txt\"),},// 6. Custom content‚Äëtype{filename:\"data.bin\",content:Buffer.from(\"deadbeef\",\"hex\"),contentType:\"application/octet-stream\",},// 7. Remote file{filename:\"license.txt\",href:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\",},// 8. Base64‚Äëencoded string{filename:\"photo.jpg\",content:\"/9j/4AAQSkZJRgABAQAAAQABAAD‚Ä¶\",// truncatedencoding:\"base64\",},// 9. Data URI{path:\"data:text/plain;base64,SGVsbG8gd29ybGQ=\",},// ",
        "source_url": "https://nodemailer.com/message/attachments",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "QSkZJRgABAQAAAQABAAD‚Ä¶\",// truncatedencoding:\"base64\",},// 9. Data URI{path:\"data:text/plain;base64,SGVsbG8gd29ybGQ=\",},// 10. Pre‚Äëbuilt MIME node{raw:[\"Content-Type: text/plain; charset=utf-8\",'Content-Disposition: attachment; filename=\"greeting.txt\"',\"\",\"Hello world!\"].join(\"\\r\\n\"),},];\nconstfs=require(\"fs\");// inside a message objectattachments:[// 1. Plain text{filename:\"hello.txt\",content:\"Hello world!\",},// 2. Binary (Buffer){filename:\"buffer.txt\",content:Buffer.from(\"Hello world!\",\"utf8\"),},// 3. Local file (streamed){filename:\"report.pdf\",path:\"/absolute/path/to/report.pdf\",},// 4. Implicit filename & type (derived from path){path:\"/absolute/path/to/image.png\",},// 5. Readable stream{filename:\"notes.txt\",content:fs.createReadStream(\"./notes.txt\"),},// 6. Custom content‚Äëtype{filename:\"data.bin\",content:Buffer.from(\"deadbeef\",\"hex\"),contentType:\"application/octet-stream\",},// 7. Remote file{filename:\"license.txt\",href:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\",},// 8. Base64‚Äëencoded string{filename:\"photo.jpg\",content:\"/9j/4AAQSkZJRgABAQAAAQABAAD‚Ä¶\",// truncatedencoding:\"base64\",},// 9. Data URI{path:\"data:text/plain;base64,SGVsbG8gd29ybGQ=\",},// 10. Pre‚Äëbuilt MIME node{raw:[\"Content-Type: text/plain; charset=utf-8\",'Content-Disposition: attachment; filename=\"greeting.txt\"',\"\",\"Hello world!\"].join(\"\\r\\n\"),},];\nEmbedding images‚Äã\nTo embed an image inside the HTML part of the email, set acidon the attachment and reference that CID in the HTML:\ncid\nattachments:[{filename:'logo.png',path:'./assets/logo.png',cid:'logo@nodemailer'}],html:'<p><img src=\"cid:logo@nodemailer\" alt=\"Nodemailer logo\"></p>'\nattachments:[{filename:'logo.png',path:'./assets/logo.png',cid:'logo@nod",
        "source_url": "https://nodemailer.com/message/attachments",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "logo@nodemailer'}],html:'<p><img src=\"cid:logo@nodemailer\" alt=\"Nodemailer logo\"></p>'\nattachments:[{filename:'logo.png',path:'./assets/logo.png',cid:'logo@nodemailer'}],html:'<p><img src=\"cid:logo@nodemailer\" alt=\"Nodemailer logo\"></p>'\nExamples\nEmbedding images",
        "source_url": "https://nodemailer.com/message/attachments",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 82
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configurationAttachmentsAlternativesAddress objectCalendar eventsEmbedded imagesList headersCustom headersCustom source\nAttachments\nAlternatives\nAddress object\nCalendar events\nEmbedded images\nList headers\nCustom headers\nCustom source\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nMessage configuration\nAttachments\nAttachments\nUse theattachmentsoption of themessage objectto attach files.\nattachments\nAn attachment is an object inside theattachmentsarray. You can attachas many files as you need.\nattachments\nfilename\nstring\ncontent\nstring | Buffer | Stream\npath\nstring\nhref\nstring\nhttpHeaders\nobject\nhref\n{ authorization: 'Bearer ‚Ä¶' }\ncontentType\nstring\nfilename\ncontentDisposition\nstring\n'attachment'\ncid\nstring\n<img src=\"cid:my-logo\"/>\nencoding\nstring\ncontent\n'base64'\n'hex'\nheaders\nobject\nraw\nstring\nPreferpath,href, or aStreamwhen attaching large files so that Nodemailer can stream data without loading it all into memory.\npath\nhref\nStream\nExamples‚Äã\nconstfs=require(\"fs\");// inside a message objectattachments:[// 1. Plain text{filename:\"hello.txt\",content:\"Hello world!\",},// 2. Binary (Buffer){filename:\"buffer.txt\",content:Buffer.from(\"Hello world!\",\"utf8\"),},// 3. Local file (streamed){filename:\"report.pdf\",path:\"/absolute/path/to/report.pdf\",},// 4. Implicit filename & type (derived from path){path:\"/absolute/path/to/image.png\",},// 5. Readable stream{filename:\"notes.txt\",content:fs.createReadStream(\"./notes.txt\"),},// 6. Custom content‚Äëtype{filename:\"data.bin\",content:Buffer.from(\"deadbeef\",\"hex\"),contentType:\"application/octet-stream\",},// 7. Remote file{filename:\"license.txt\",href:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\",},// 8. Base64‚Äëencoded string{filename:\"photo.jpg\",content:\"/9j/4AAQSkZJRgABAQAAAQABAAD‚Ä¶\",// truncatedencoding:\"base64\",},// 9. Data URI{path:\"data:text/plain;base64,SGVsbG8gd29ybGQ=\",},// ",
        "source_url": "https://nodemailer.com/message/attachments#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "QSkZJRgABAQAAAQABAAD‚Ä¶\",// truncatedencoding:\"base64\",},// 9. Data URI{path:\"data:text/plain;base64,SGVsbG8gd29ybGQ=\",},// 10. Pre‚Äëbuilt MIME node{raw:[\"Content-Type: text/plain; charset=utf-8\",'Content-Disposition: attachment; filename=\"greeting.txt\"',\"\",\"Hello world!\"].join(\"\\r\\n\"),},];\nconstfs=require(\"fs\");// inside a message objectattachments:[// 1. Plain text{filename:\"hello.txt\",content:\"Hello world!\",},// 2. Binary (Buffer){filename:\"buffer.txt\",content:Buffer.from(\"Hello world!\",\"utf8\"),},// 3. Local file (streamed){filename:\"report.pdf\",path:\"/absolute/path/to/report.pdf\",},// 4. Implicit filename & type (derived from path){path:\"/absolute/path/to/image.png\",},// 5. Readable stream{filename:\"notes.txt\",content:fs.createReadStream(\"./notes.txt\"),},// 6. Custom content‚Äëtype{filename:\"data.bin\",content:Buffer.from(\"deadbeef\",\"hex\"),contentType:\"application/octet-stream\",},// 7. Remote file{filename:\"license.txt\",href:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\",},// 8. Base64‚Äëencoded string{filename:\"photo.jpg\",content:\"/9j/4AAQSkZJRgABAQAAAQABAAD‚Ä¶\",// truncatedencoding:\"base64\",},// 9. Data URI{path:\"data:text/plain;base64,SGVsbG8gd29ybGQ=\",},// 10. Pre‚Äëbuilt MIME node{raw:[\"Content-Type: text/plain; charset=utf-8\",'Content-Disposition: attachment; filename=\"greeting.txt\"',\"\",\"Hello world!\"].join(\"\\r\\n\"),},];\nEmbedding images‚Äã\nTo embed an image inside the HTML part of the email, set acidon the attachment and reference that CID in the HTML:\ncid\nattachments:[{filename:'logo.png',path:'./assets/logo.png',cid:'logo@nodemailer'}],html:'<p><img src=\"cid:logo@nodemailer\" alt=\"Nodemailer logo\"></p>'\nattachments:[{filename:'logo.png',path:'./assets/logo.png',cid:'logo@nod",
        "source_url": "https://nodemailer.com/message/attachments#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "logo@nodemailer'}],html:'<p><img src=\"cid:logo@nodemailer\" alt=\"Nodemailer logo\"></p>'\nattachments:[{filename:'logo.png',path:'./assets/logo.png',cid:'logo@nodemailer'}],html:'<p><img src=\"cid:logo@nodemailer\" alt=\"Nodemailer logo\"></p>'\nExamples\nEmbedding images",
        "source_url": "https://nodemailer.com/message/attachments#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 82
    },
    {
        "chunk_id": "Nodemailer",
        "text": "Nodemailer\nUsage\nMessage configurationAttachmentsAlternativesAddress objectCalendar eventsEmbedded imagesList headersCustom headersCustom source\nAttachments\nAlternatives\nAddress object\nCalendar events\nEmbedded images\nList headers\nCustom headers\nCustom source\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nMessage configuration\nAlternatives\nAlternatives\nIn addition to plain‚Äëtext and HTML bodies, you can embedalternative representationsof the same content‚Äîfor example, Markdown or a calendar invite. The email client chooses the representation that best fits the recipient‚Äôs environment. Alternatives are most often used for calendar events and other machine‚Äëreadable formats.\nicalEvent\nIf you want to send a calendar event, consider theicalEventoption instead. SeeCalendar eventsfor details.\nicalEvent\nHow alternatives differ from attachments‚Äã\nAlternative objects accept exactly the same fields asattachment objects. The only difference is where Nodemailer places them in the MIME tree:\nmultipart/mixed\nmultipart/related\nmultipart/alternative\nUsage‚Äã\nconstmessage={// ...html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nconstmessage={// ...html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nYou can includeas manyalternative bodies as you need. Place the most preferred version last‚Äîthe majority of clients read the list from top to bottom and render the last format they understand.\nHow alternatives differ from attachments\nUsage",
        "source_url": "https://nodemailer.com/message/alternatives",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 338
    },
    {
        "chunk_id": "Nodemailer",
        "text": "Nodemailer\nUsage\nMessage configurationAttachmentsAlternativesAddress objectCalendar eventsEmbedded imagesList headersCustom headersCustom source\nAttachments\nAlternatives\nAddress object\nCalendar events\nEmbedded images\nList headers\nCustom headers\nCustom source\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nMessage configuration\nAlternatives\nAlternatives\nIn addition to plain‚Äëtext and HTML bodies, you can embedalternative representationsof the same content‚Äîfor example, Markdown or a calendar invite. The email client chooses the representation that best fits the recipient‚Äôs environment. Alternatives are most often used for calendar events and other machine‚Äëreadable formats.\nicalEvent\nIf you want to send a calendar event, consider theicalEventoption instead. SeeCalendar eventsfor details.\nicalEvent\nHow alternatives differ from attachments‚Äã\nAlternative objects accept exactly the same fields asattachment objects. The only difference is where Nodemailer places them in the MIME tree:\nmultipart/mixed\nmultipart/related\nmultipart/alternative\nUsage‚Äã\nconstmessage={// ...html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nconstmessage={// ...html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nYou can includeas manyalternative bodies as you need. Place the most preferred version last‚Äîthe majority of clients read the list from top to bottom and render the last format they understand.\nHow alternatives differ from attachments\nUsage",
        "source_url": "https://nodemailer.com/message/alternatives#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 338
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configurationAttachmentsAlternativesAddress objectCalendar eventsEmbedded imagesList headersCustom headersCustom source\nAttachments\nAlternatives\nAddress object\nCalendar events\nEmbedded images\nList headers\nCustom headers\nCustom source\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nMessage configuration\nAddress object\nAddress object\nEmail address values in Nodemailer can be provided inthree interchangeable formats. You can freely mix these formats in any address field (from,to,cc,bcc,replyTo, etc.).\nfrom\nto\ncc\nbcc\nreplyTo\n1. Plain address‚Äã\n\"foobar@example.com\";\n\"foobar@example.com\";\n2. Formatted address (display name + email)‚Äã\nIncludes full Unicode support for the display name:\n\"–ù–æ–¥–µ –ú–∞–π–ª–µ—Ä <foobar@example.com>\";\n\"–ù–æ–¥–µ –ú–∞–π–ª–µ—Ä <foobar@example.com>\";\nAll address fields are comma‚Äëseparated lists. If the display name itself contains a comma (or any other special character), wrap the name indouble quotes:\n'\"–ú–∞–π–ª–µ—Ä, –ù–æ–¥–µ\" <foobar@example.com>';\n'\"–ú–∞–π–ª–µ—Ä, –ù–æ–¥–µ\" <foobar@example.com>';\n3. Address object‚Äã\nLet Nodemailer handle the formatting for you‚Äîjust provide a plain object withnameandaddressproperties:\nname\naddress\n{name:'–ú–∞–π–ª–µ—Ä, –ù–æ–¥–µ',address:'foobar@example.com'}\n{name:'–ú–∞–π–ª–µ—Ä, –ù–æ–¥–µ',address:'foobar@example.com'}\nMixing formats & using arrays‚Äã\nEvery address field acceptsanyof the following:\na single address (any of the three formats above)\na comma‚Äëseparated string of addresses\nan array of addresses\nan array that contains comma‚Äëseparated stringsand/oraddress objects\n// Example message object (CommonJS)constmessage={from:'\"Example Sender\" <sender@example.com>',to:'foobar@example.com, \"–ù–æ–¥–µ –ú–∞–π–ª–µ—Ä\" <bar@example.com>, \"Name, User\" <baz@example.com>',cc:[\"first@example.com\",'\"–ù–æ–¥–µ –ú–∞–π–ª–µ—Ä\" <second@example.com>','\"Name, User\" <third@example.com>'],bcc:[\"hidden@example.com\",{name:\"–ú–∞–π–ª–µ—Ä, –ù–æ–¥–µ\",address:\"another@example.com\",},],};\n// Example message object (CommonJS)constmessage",
        "source_url": "https://nodemailer.com/message/addresses",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "@example.com>','\"Name, User\" <third@example.com>'],bcc:[\"hidden@example.com\",{name:\"–ú–∞–π–ª–µ—Ä, –ù–æ–¥–µ\",address:\"another@example.com\",},],};\n// Example message object (CommonJS)constmessage={from:'\"Example Sender\" <sender@example.com>',to:'foobar@example.com, \"–ù–æ–¥–µ –ú–∞–π–ª–µ—Ä\" <bar@example.com>, \"Name, User\" <baz@example.com>',cc:[\"first@example.com\",'\"–ù–æ–¥–µ –ú–∞–π–ª–µ—Ä\" <second@example.com>','\"Name, User\" <third@example.com>'],bcc:[\"hidden@example.com\",{name:\"–ú–∞–π–ª–µ—Ä, –ù–æ–¥–µ\",address:\"another@example.com\",},],};\nInternationalized domains‚Äã\nUnicode domain names (IDNs) are welcome‚ÄîNodemailer automatically converts them toPunycodebehind the scenes:\n'\"Unicode Domain\" <info@m√ºriaad-pol√ºteism.info>';\n'\"Unicode Domain\" <info@m√ºriaad-pol√ºteism.info>';\nQuick send example‚Äã\nconstnodemailer=require(\"nodemailer\");(async()=>{consttransport=nodemailer.createTransport({host:\"smtp.example.com\",port:587,auth:{user:\"smtp-user\",pass:\"smtp-pass\",},});awaittransport.sendMail({from:'\"Example Sender\" <sender@example.com>',to:[\"recipient@example.com\",{name:\"Nodemailer User\",address:\"user@example.com\"}],subject:\"Hello from Nodemailer\",text:\"This demonstrates the different address formats.\",});})();\nconstnodemailer=require(\"nodemailer\");(async()=>{consttransport=nodemailer.createTransport({host:\"smtp.example.com\",port:587,auth:{user:\"smtp-user\",pass:\"smtp-pass\",},});awaittransport.sendMail({from:'\"Example Sender\" <sender@example.com>',to:[\"recipient@example.com\",{name:\"Nodemailer User\",address:\"user@example.com\"}],subject:\"Hello from Nodemailer\",text:\"This demonstrates the different address formats.\",});})();\n1. Plain address\n2. Formatted address (display name + email)\n3. Address object\nMixing formats & using arrays\nInternationalized domainsQuick send example\nQuick send example",
        "source_url": "https://nodemailer.com/message/addresses",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 454
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "\nQuick send example",
        "source_url": "https://nodemailer.com/message/addresses",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 4
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configurationAttachmentsAlternativesAddress objectCalendar eventsEmbedded imagesList headersCustom headersCustom source\nAttachments\nAlternatives\nAddress object\nCalendar events\nEmbedded images\nList headers\nCustom headers\nCustom source\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nMessage configuration\nAddress object\nAddress object\nEmail address values in Nodemailer can be provided inthree interchangeable formats. You can freely mix these formats in any address field (from,to,cc,bcc,replyTo, etc.).\nfrom\nto\ncc\nbcc\nreplyTo\n1. Plain address‚Äã\n\"foobar@example.com\";\n\"foobar@example.com\";\n2. Formatted address (display name + email)‚Äã\nIncludes full Unicode support for the display name:\n\"–ù–æ–¥–µ –ú–∞–π–ª–µ—Ä <foobar@example.com>\";\n\"–ù–æ–¥–µ –ú–∞–π–ª–µ—Ä <foobar@example.com>\";\nAll address fields are comma‚Äëseparated lists. If the display name itself contains a comma (or any other special character), wrap the name indouble quotes:\n'\"–ú–∞–π–ª–µ—Ä, –ù–æ–¥–µ\" <foobar@example.com>';\n'\"–ú–∞–π–ª–µ—Ä, –ù–æ–¥–µ\" <foobar@example.com>';\n3. Address object‚Äã\nLet Nodemailer handle the formatting for you‚Äîjust provide a plain object withnameandaddressproperties:\nname\naddress\n{name:'–ú–∞–π–ª–µ—Ä, –ù–æ–¥–µ',address:'foobar@example.com'}\n{name:'–ú–∞–π–ª–µ—Ä, –ù–æ–¥–µ',address:'foobar@example.com'}\nMixing formats & using arrays‚Äã\nEvery address field acceptsanyof the following:\na single address (any of the three formats above)\na comma‚Äëseparated string of addresses\nan array of addresses\nan array that contains comma‚Äëseparated stringsand/oraddress objects\n// Example message object (CommonJS)constmessage={from:'\"Example Sender\" <sender@example.com>',to:'foobar@example.com, \"–ù–æ–¥–µ –ú–∞–π–ª–µ—Ä\" <bar@example.com>, \"Name, User\" <baz@example.com>',cc:[\"first@example.com\",'\"–ù–æ–¥–µ –ú–∞–π–ª–µ—Ä\" <second@example.com>','\"Name, User\" <third@example.com>'],bcc:[\"hidden@example.com\",{name:\"–ú–∞–π–ª–µ—Ä, –ù–æ–¥–µ\",address:\"another@example.com\",},],};\n// Example message object (CommonJS)constmessage",
        "source_url": "https://nodemailer.com/message/addresses#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "@example.com>','\"Name, User\" <third@example.com>'],bcc:[\"hidden@example.com\",{name:\"–ú–∞–π–ª–µ—Ä, –ù–æ–¥–µ\",address:\"another@example.com\",},],};\n// Example message object (CommonJS)constmessage={from:'\"Example Sender\" <sender@example.com>',to:'foobar@example.com, \"–ù–æ–¥–µ –ú–∞–π–ª–µ—Ä\" <bar@example.com>, \"Name, User\" <baz@example.com>',cc:[\"first@example.com\",'\"–ù–æ–¥–µ –ú–∞–π–ª–µ—Ä\" <second@example.com>','\"Name, User\" <third@example.com>'],bcc:[\"hidden@example.com\",{name:\"–ú–∞–π–ª–µ—Ä, –ù–æ–¥–µ\",address:\"another@example.com\",},],};\nInternationalized domains‚Äã\nUnicode domain names (IDNs) are welcome‚ÄîNodemailer automatically converts them toPunycodebehind the scenes:\n'\"Unicode Domain\" <info@m√ºriaad-pol√ºteism.info>';\n'\"Unicode Domain\" <info@m√ºriaad-pol√ºteism.info>';\nQuick send example‚Äã\nconstnodemailer=require(\"nodemailer\");(async()=>{consttransport=nodemailer.createTransport({host:\"smtp.example.com\",port:587,auth:{user:\"smtp-user\",pass:\"smtp-pass\",},});awaittransport.sendMail({from:'\"Example Sender\" <sender@example.com>',to:[\"recipient@example.com\",{name:\"Nodemailer User\",address:\"user@example.com\"}],subject:\"Hello from Nodemailer\",text:\"This demonstrates the different address formats.\",});})();\nconstnodemailer=require(\"nodemailer\");(async()=>{consttransport=nodemailer.createTransport({host:\"smtp.example.com\",port:587,auth:{user:\"smtp-user\",pass:\"smtp-pass\",},});awaittransport.sendMail({from:'\"Example Sender\" <sender@example.com>',to:[\"recipient@example.com\",{name:\"Nodemailer User\",address:\"user@example.com\"}],subject:\"Hello from Nodemailer\",text:\"This demonstrates the different address formats.\",});})();\n1. Plain address\n2. Formatted address (display name + email)\n3. Address object\nMixing formats & using arrays\nInternationalized domainsQuick send example\nQuick send example",
        "source_url": "https://nodemailer.com/message/addresses#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 454
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "\nQuick send example",
        "source_url": "https://nodemailer.com/message/addresses#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 4
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configurationAttachmentsAlternativesAddress objectCalendar eventsEmbedded imagesList headersCustom headersCustom source\nAttachments\nAlternatives\nAddress object\nCalendar events\nEmbedded images\nList headers\nCustom headers\nCustom source\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nMessage configuration\nCalendar events\nCalendar events\nNodemailer can embed an iCalendar (.ics) file in an email so that calendar‚Äëaware clients ‚Äî Gmail, Outlook, Apple¬†Mail, and others ‚Äî showAdd¬†to¬†calendarorAccept¬†/¬†Declinecontrols directly inside the message.\n.ics\nNodemailer onlyattachesthe calendar file. It doesnotbuild the iCalendar content for you. To generate valid.icstext, use a helper such asical‚Äëgeneratororicsand pass its output to Nodemailer.\n.ics\nicalEventmessage option‚Äã\nicalEvent\nAttach the calendar file by adding anicalEventobject to the message you pass totransporter.sendMail():\nicalEvent\ntransporter.sendMail()\nletmessage={/* ...from, to, subject, etc. */icalEvent:{/* options */},};\nletmessage={/* ...from, to, subject, etc. */icalEvent:{/* options */},};\nmethod\nstring\n'PUBLISH'\n'REQUEST'\n'REPLY'\n'CANCEL'\nfilename\nstring\n'invite.ics'\ncontent\nstring | Buffer | Stream\npath\nstring\n.ics\nhref\nstring\nencoding\nstring\n'base64'\n'hex'\nProvideexactly oneofcontent,path, orhref.\ncontent\npath\nhref\nCalendar messages are fragile: mixing them with extra file attachments or complex alternative bodies often confuses email clients. For maximum compatibility keep the email totext,html, and a singleicalEvent‚Äî nothing else.\nExamples‚Äã\n1¬†¬∑¬†Send aREQUESTevent from a string‚Äã\nconstappointment=`\\BEGIN:VCALENDAR\\r\\n\\PRODID:-//ACME/DesktopCalendar//EN\\r\\n\\METHOD:REQUEST\\r\\n\\...END:VCALENDAR`;letmessage={from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Appointment\",text:\"Please see the attached appointment\",icalEvent:{filename:\"invitation.ics\",method:\"REQUEST\",content:appointment,},};\nconstappointment=`\\BEGIN:VCALENDAR\\r\\n\\PRO",
        "source_url": "https://nodemailer.com/message/calendar-events",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "to:\"recipient@example.com\",subject:\"Appointment\",text:\"Please see the attached appointment\",icalEvent:{filename:\"invitation.ics\",method:\"REQUEST\",content:appointment,},};\nconstappointment=`\\BEGIN:VCALENDAR\\r\\n\\PRODID:-//ACME/DesktopCalendar//EN\\r\\n\\METHOD:REQUEST\\r\\n\\...END:VCALENDAR`;letmessage={from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Appointment\",text:\"Please see the attached appointment\",icalEvent:{filename:\"invitation.ics\",method:\"REQUEST\",content:appointment,},};\n2¬†¬∑¬†Send aPUBLISHevent loaded from a file‚Äã\nletmessage={from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Appointment\",text:\"Please see the attached appointment\",icalEvent:{method:\"PUBLISH\",path:\"/absolute/path/to/invite.ics\",},};\nletmessage={from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Appointment\",text:\"Please see the attached appointment\",icalEvent:{method:\"PUBLISH\",path:\"/absolute/path/to/invite.ics\",},};\n3¬†¬∑¬†Send aCANCELevent fetched from a URL‚Äã\nletmessage={from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Appointment cancelled\",text:\"The appointment has been cancelled. See details in the attached calendar update.\",icalEvent:{method:\"CANCEL\",href:\"https://www.example.com/events/123/cancel.ics\",},};\nletmessage={from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Appointment cancelled\",text:\"The appointment has been cancelled. See details in the attached calendar update.\",icalEvent:{method:\"CANCEL\",href:\"https://www.example.com/events/123/cancel.ics\",},};\nFor a complete runnable example, combine themessageobject above withnodemailer.createTransport()and calltransporter.sendMail().\nmessage\nnodemailer.createTransport()\ntransporter.sendMail()\nicalEventmessage option\nicalEvent\nExamples1¬†¬∑¬†Send aREQUESTevent from a string2¬†¬∑¬†Send aPUBLISHevent loaded from a file3¬†¬∑¬†Send aCANCELevent fetched from a URL\n1¬†¬∑¬†Send aREQUESTevent from a string\n2¬†¬∑¬†Send aPUBLISHevent loaded from a file\n3¬†¬∑¬†Send aCANCELevent fetched from a URL",
        "source_url": "https://nodemailer.com/message/calendar-events",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 499
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "Levent fetched from a URL\n1¬†¬∑¬†Send aREQUESTevent from a string\n2¬†¬∑¬†Send aPUBLISHevent loaded from a file\n3¬†¬∑¬†Send aCANCELevent fetched from a URL",
        "source_url": "https://nodemailer.com/message/calendar-events",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 49
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configurationAttachmentsAlternativesAddress objectCalendar eventsEmbedded imagesList headersCustom headersCustom source\nAttachments\nAlternatives\nAddress object\nCalendar events\nEmbedded images\nList headers\nCustom headers\nCustom source\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nMessage configuration\nCalendar events\nCalendar events\nNodemailer can embed an iCalendar (.ics) file in an email so that calendar‚Äëaware clients ‚Äî Gmail, Outlook, Apple¬†Mail, and others ‚Äî showAdd¬†to¬†calendarorAccept¬†/¬†Declinecontrols directly inside the message.\n.ics\nNodemailer onlyattachesthe calendar file. It doesnotbuild the iCalendar content for you. To generate valid.icstext, use a helper such asical‚Äëgeneratororicsand pass its output to Nodemailer.\n.ics\nicalEventmessage option‚Äã\nicalEvent\nAttach the calendar file by adding anicalEventobject to the message you pass totransporter.sendMail():\nicalEvent\ntransporter.sendMail()\nletmessage={/* ...from, to, subject, etc. */icalEvent:{/* options */},};\nletmessage={/* ...from, to, subject, etc. */icalEvent:{/* options */},};\nmethod\nstring\n'PUBLISH'\n'REQUEST'\n'REPLY'\n'CANCEL'\nfilename\nstring\n'invite.ics'\ncontent\nstring | Buffer | Stream\npath\nstring\n.ics\nhref\nstring\nencoding\nstring\n'base64'\n'hex'\nProvideexactly oneofcontent,path, orhref.\ncontent\npath\nhref\nCalendar messages are fragile: mixing them with extra file attachments or complex alternative bodies often confuses email clients. For maximum compatibility keep the email totext,html, and a singleicalEvent‚Äî nothing else.\nExamples‚Äã\n1¬†¬∑¬†Send aREQUESTevent from a string‚Äã\nconstappointment=`\\BEGIN:VCALENDAR\\r\\n\\PRODID:-//ACME/DesktopCalendar//EN\\r\\n\\METHOD:REQUEST\\r\\n\\...END:VCALENDAR`;letmessage={from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Appointment\",text:\"Please see the attached appointment\",icalEvent:{filename:\"invitation.ics\",method:\"REQUEST\",content:appointment,},};\nconstappointment=`\\BEGIN:VCALENDAR\\r\\n\\PRO",
        "source_url": "https://nodemailer.com/message/calendar-events#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "to:\"recipient@example.com\",subject:\"Appointment\",text:\"Please see the attached appointment\",icalEvent:{filename:\"invitation.ics\",method:\"REQUEST\",content:appointment,},};\nconstappointment=`\\BEGIN:VCALENDAR\\r\\n\\PRODID:-//ACME/DesktopCalendar//EN\\r\\n\\METHOD:REQUEST\\r\\n\\...END:VCALENDAR`;letmessage={from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Appointment\",text:\"Please see the attached appointment\",icalEvent:{filename:\"invitation.ics\",method:\"REQUEST\",content:appointment,},};\n2¬†¬∑¬†Send aPUBLISHevent loaded from a file‚Äã\nletmessage={from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Appointment\",text:\"Please see the attached appointment\",icalEvent:{method:\"PUBLISH\",path:\"/absolute/path/to/invite.ics\",},};\nletmessage={from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Appointment\",text:\"Please see the attached appointment\",icalEvent:{method:\"PUBLISH\",path:\"/absolute/path/to/invite.ics\",},};\n3¬†¬∑¬†Send aCANCELevent fetched from a URL‚Äã\nletmessage={from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Appointment cancelled\",text:\"The appointment has been cancelled. See details in the attached calendar update.\",icalEvent:{method:\"CANCEL\",href:\"https://www.example.com/events/123/cancel.ics\",},};\nletmessage={from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Appointment cancelled\",text:\"The appointment has been cancelled. See details in the attached calendar update.\",icalEvent:{method:\"CANCEL\",href:\"https://www.example.com/events/123/cancel.ics\",},};\nFor a complete runnable example, combine themessageobject above withnodemailer.createTransport()and calltransporter.sendMail().\nmessage\nnodemailer.createTransport()\ntransporter.sendMail()\nicalEventmessage option\nicalEvent\nExamples1¬†¬∑¬†Send aREQUESTevent from a string2¬†¬∑¬†Send aPUBLISHevent loaded from a file3¬†¬∑¬†Send aCANCELevent fetched from a URL\n1¬†¬∑¬†Send aREQUESTevent from a string\n2¬†¬∑¬†Send aPUBLISHevent loaded from a file\n3¬†¬∑¬†Send aCANCELevent fetched from a URL",
        "source_url": "https://nodemailer.com/message/calendar-events#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 499
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "Levent fetched from a URL\n1¬†¬∑¬†Send aREQUESTevent from a string\n2¬†¬∑¬†Send aPUBLISHevent loaded from a file\n3¬†¬∑¬†Send aCANCELevent fetched from a URL",
        "source_url": "https://nodemailer.com/message/calendar-events#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 49
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configurationAttachmentsAlternativesAddress objectCalendar eventsEmbedded imagesList headersCustom headersCustom source\nAttachments\nAlternatives\nAddress object\nCalendar events\nEmbedded images\nList headers\nCustom headers\nCustom source\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nMessage configuration\nEmbedded images\nEmbedded images\nYou can embed images directly inside the HTML body by attaching them and referring to them with thecid:URL scheme.\ncid:\nAdd the image toattachments.\nSet acid(Content‚ÄëID) that is unique within the message.\nReference the image in your HTML (or CSS) withcid:<cid>.\ncid:<cid>\ncid:\nUsing a Content‚ÄëID lets the email client display the image even when it blocks external images, because the file travels inside the message itself.\ncid\nThecidmust beglobally uniquewithin the message. A good pattern is to append a domain you control, e.g.logo.12345@example.com.\nlogo.12345@example.com\nconstmessage={from:\"Alice <alice@example.com>\",to:\"Bob <bob@example.com>\",subject:\"Inline image test\",html:'Embedded image: <img src=\"cid:logo@example.com\" alt=\"logo\"/>',attachments:[{filename:\"logo.png\",path:\"/path/to/logo.png\",cid:\"logo@example.com\",// same cid value as in the html img src},],};\nconstmessage={from:\"Alice <alice@example.com>\",to:\"Bob <bob@example.com>\",subject:\"Inline image test\",html:'Embedded image: <img src=\"cid:logo@example.com\" alt=\"logo\"/>',attachments:[{filename:\"logo.png\",path:\"/path/to/logo.png\",cid:\"logo@example.com\",// same cid value as in the html img src},],};\nconstfs=require(\"fs\");constmessage={// ...html:'<img src=\"cid:screenshot@example.com\"/>',attachments:[{filename:\"screenshot.png\",content:fs.readFileSync(\"/tmp/screenshot.png\"),cid:\"screenshot@example.com\",},],};\nconstfs=require(\"fs\");constmessage={// ...html:'<img src=\"cid:screenshot@example.com\"/>',attachments:[{filename:\"screenshot.png\",content:fs.readFileSync(\"/tmp/screenshot.png\"),cid:\"screenshot@example.com\",},],};\nhtml:`<h1>Monthly report</h1><img src=\"cid",
        "source_url": "https://nodemailer.com/message/embedded-images",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "creenshot@example.com\"/>',attachments:[{filename:\"screenshot.png\",content:fs.readFileSync(\"/tmp/screenshot.png\"),cid:\"screenshot@example.com\",},],};\nhtml:`<h1>Monthly report</h1><img src=\"cid:chart@example.com\" alt=\"Chart\"/><img src=\"cid:badge@example.com\" alt=\"Badge\"/>`,attachments:[{filename:'chart.png',path:'./chart.png',cid:'chart@example.com'},{filename:'badge.png',path:'./badge.png',cid:'badge@example.com'}]\nhtml:`<h1>Monthly report</h1><img src=\"cid:chart@example.com\" alt=\"Chart\"/><img src=\"cid:badge@example.com\" alt=\"Badge\"/>`,attachments:[{filename:'chart.png',path:'./chart.png',cid:'chart@example.com'},{filename:'badge.png',path:'./badge.png',cid:'badge@example.com'}]",
        "source_url": "https://nodemailer.com/message/embedded-images",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 190
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configurationAttachmentsAlternativesAddress objectCalendar eventsEmbedded imagesList headersCustom headersCustom source\nAttachments\nAlternatives\nAddress object\nCalendar events\nEmbedded images\nList headers\nCustom headers\nCustom source\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nMessage configuration\nEmbedded images\nEmbedded images\nYou can embed images directly inside the HTML body by attaching them and referring to them with thecid:URL scheme.\ncid:\nAdd the image toattachments.\nSet acid(Content‚ÄëID) that is unique within the message.\nReference the image in your HTML (or CSS) withcid:<cid>.\ncid:<cid>\ncid:\nUsing a Content‚ÄëID lets the email client display the image even when it blocks external images, because the file travels inside the message itself.\ncid\nThecidmust beglobally uniquewithin the message. A good pattern is to append a domain you control, e.g.logo.12345@example.com.\nlogo.12345@example.com\nconstmessage={from:\"Alice <alice@example.com>\",to:\"Bob <bob@example.com>\",subject:\"Inline image test\",html:'Embedded image: <img src=\"cid:logo@example.com\" alt=\"logo\"/>',attachments:[{filename:\"logo.png\",path:\"/path/to/logo.png\",cid:\"logo@example.com\",// same cid value as in the html img src},],};\nconstmessage={from:\"Alice <alice@example.com>\",to:\"Bob <bob@example.com>\",subject:\"Inline image test\",html:'Embedded image: <img src=\"cid:logo@example.com\" alt=\"logo\"/>',attachments:[{filename:\"logo.png\",path:\"/path/to/logo.png\",cid:\"logo@example.com\",// same cid value as in the html img src},],};\nconstfs=require(\"fs\");constmessage={// ...html:'<img src=\"cid:screenshot@example.com\"/>',attachments:[{filename:\"screenshot.png\",content:fs.readFileSync(\"/tmp/screenshot.png\"),cid:\"screenshot@example.com\",},],};\nconstfs=require(\"fs\");constmessage={// ...html:'<img src=\"cid:screenshot@example.com\"/>',attachments:[{filename:\"screenshot.png\",content:fs.readFileSync(\"/tmp/screenshot.png\"),cid:\"screenshot@example.com\",},],};\nhtml:`<h1>Monthly report</h1><img src=\"cid",
        "source_url": "https://nodemailer.com/message/embedded-images#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "creenshot@example.com\"/>',attachments:[{filename:\"screenshot.png\",content:fs.readFileSync(\"/tmp/screenshot.png\"),cid:\"screenshot@example.com\",},],};\nhtml:`<h1>Monthly report</h1><img src=\"cid:chart@example.com\" alt=\"Chart\"/><img src=\"cid:badge@example.com\" alt=\"Badge\"/>`,attachments:[{filename:'chart.png',path:'./chart.png',cid:'chart@example.com'},{filename:'badge.png',path:'./badge.png',cid:'badge@example.com'}]\nhtml:`<h1>Monthly report</h1><img src=\"cid:chart@example.com\" alt=\"Chart\"/><img src=\"cid:badge@example.com\" alt=\"Badge\"/>`,attachments:[{filename:'chart.png',path:'./chart.png',cid:'chart@example.com'},{filename:'badge.png',path:'./badge.png',cid:'badge@example.com'}]",
        "source_url": "https://nodemailer.com/message/embedded-images#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 190
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configurationAttachmentsAlternativesAddress objectCalendar eventsEmbedded imagesList headersCustom headersCustom source\nAttachments\nAlternatives\nAddress object\nCalendar events\nEmbedded images\nList headers\nCustom headers\nCustom source\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nMessage configuration\nList headers\nList headers\nAddingRFC‚ÄØ2369List-*headers(such asList‚ÄëHelp,List‚ÄëUnsubscribe, etc.) lets mailing‚Äëlist recipients quickly discover helpful actions provided by email clients. Nodemailer exposes alistmessage option so you can define these headers declaratively instead of hand‚Äëcrafting raw header lines.\nList-*\nList‚ÄëHelp\nList‚ÄëUnsubscribe\nlist\nHow it works‚Äã\nPass alistobject totransporter.sendMail(). Each key in that object becomes the correspondingList-*header name (case‚Äëinsensitive). For example,helpbecomes theList-Helpheader.\nlist\ntransporter.sendMail()\nList-*\nhelp\nList-Help\nValue formats‚Äã\nstring\n<‚Ä¶>\n{ url, comment }\nArray< string | { url, comment } >\nList-*\nArray<Array<‚Ä¶>>\nList-*values are inserted verbatim‚Äîlines aren‚Äôt folded and strings aren‚Äôt encoded. Stick to ASCII characters and be prepared for lengthy header lines.\nList-*\nComplete example‚Äã\nconstnodemailer=require(\"nodemailer\");// 1. Create a transport (replace with your configuration)consttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:587,auth:{user:\"username\",pass:\"password\",},});// 2. Send a message with various List-* headersasyncfunctionsendListMessage(){awaittransporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"List Message\",text:\"I hope no‚Äëone unsubscribes from this list!\",list:{// List-Help: <mailto:admin@example.com?subject=help>help:\"admin@example.com?subject=help\",// List-Unsubscribe: <http://example.com> (Comment)unsubscribe:{url:\"http://example.com\",comment:\"Comment\",},// List-Subscribe: <mailto:admin@example.com?subject=subscribe>// List-Subscribe: <http://example.com> (Subscribe)subscribe:[\"admin@example.com?subject=subscribe\",{url:\"http://example.com\",comment:\"Subscribe\",",
        "source_url": "https://nodemailer.com/message/list-headers",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "// List-Subscribe: <mailto:admin@example.com?subject=subscribe>// List-Subscribe: <http://example.com> (Subscribe)subscribe:[\"admin@example.com?subject=subscribe\",{url:\"http://example.com\",comment:\"Subscribe\",},],// List-Post: <http://example.com/post>, <mailto:admin@example.com?subject=post> (Post)post:[[\"http://example.com/post\",{url:\"admin@example.com?subject=post\",comment:\"Post\",},],],},});console.log(\"List message sent ‚úî\");}sendListMessage().catch(console.error);\nconstnodemailer=require(\"nodemailer\");// 1. Create a transport (replace with your configuration)consttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:587,auth:{user:\"username\",pass:\"password\",},});// 2. Send a message with various List-* headersasyncfunctionsendListMessage(){awaittransporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"List Message\",text:\"I hope no‚Äëone unsubscribes from this list!\",list:{// List-Help: <mailto:admin@example.com?subject=help>help:\"admin@example.com?subject=help\",// List-Unsubscribe: <http://example.com> (Comment)unsubscribe:{url:\"http://example.com\",comment:\"Comment\",},// List-Subscribe: <mailto:admin@example.com?subject=subscribe>// List-Subscribe: <http://example.com> (Subscribe)subscribe:[\"admin@example.com?subject=subscribe\",{url:\"http://example.com\",comment:\"Subscribe\",},],// List-Post: <http://example.com/post>, <mailto:admin@example.com?subject=post> (Post)post:[[\"http://example.com/post\",{url:\"admin@example.com?subject=post\",comment:\"Post\",},],],},});console.log(\"List message sent ‚úî\");}sendListMessage().catch(console.error);\nResulting headers (excerpt)‚Äã\nList-Help: <mailto:admin@example.com?subject=help>List-Unsubscribe: <http://example.com> (Comment)List-Subscribe: <mailto:admin@example.com?subject=subscribe>List-Subscribe: <http://example.com> (Subscribe)List-Post: <http://example.com/post>, <mailto:admin@example.com?subject=post> (Post)\nList-Help: <mailto:admin@example.com?",
        "source_url": "https://nodemailer.com/message/list-headers",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "=subscribe>List-Subscribe: <http://example.com> (Subscribe)List-Post: <http://example.com/post>, <mailto:admin@example.com?subject=post> (Post)\nList-Help: <mailto:admin@example.com?subject=help>List-Unsubscribe: <http://example.com> (Comment)List-Subscribe: <mailto:admin@example.com?subject=subscribe>List-Subscribe: <http://example.com> (Subscribe)List-Post: <http://example.com/post>, <mailto:admin@example.com?subject=post> (Post)\nHow it worksValue formats\nValue formats\nComplete exampleResulting headers (excerpt)\nResulting headers (excerpt)",
        "source_url": "https://nodemailer.com/message/list-headers",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 140
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configurationAttachmentsAlternativesAddress objectCalendar eventsEmbedded imagesList headersCustom headersCustom source\nAttachments\nAlternatives\nAddress object\nCalendar events\nEmbedded images\nList headers\nCustom headers\nCustom source\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nMessage configuration\nList headers\nList headers\nAddingRFC‚ÄØ2369List-*headers(such asList‚ÄëHelp,List‚ÄëUnsubscribe, etc.) lets mailing‚Äëlist recipients quickly discover helpful actions provided by email clients. Nodemailer exposes alistmessage option so you can define these headers declaratively instead of hand‚Äëcrafting raw header lines.\nList-*\nList‚ÄëHelp\nList‚ÄëUnsubscribe\nlist\nHow it works‚Äã\nPass alistobject totransporter.sendMail(). Each key in that object becomes the correspondingList-*header name (case‚Äëinsensitive). For example,helpbecomes theList-Helpheader.\nlist\ntransporter.sendMail()\nList-*\nhelp\nList-Help\nValue formats‚Äã\nstring\n<‚Ä¶>\n{ url, comment }\nArray< string | { url, comment } >\nList-*\nArray<Array<‚Ä¶>>\nList-*values are inserted verbatim‚Äîlines aren‚Äôt folded and strings aren‚Äôt encoded. Stick to ASCII characters and be prepared for lengthy header lines.\nList-*\nComplete example‚Äã\nconstnodemailer=require(\"nodemailer\");// 1. Create a transport (replace with your configuration)consttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:587,auth:{user:\"username\",pass:\"password\",},});// 2. Send a message with various List-* headersasyncfunctionsendListMessage(){awaittransporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"List Message\",text:\"I hope no‚Äëone unsubscribes from this list!\",list:{// List-Help: <mailto:admin@example.com?subject=help>help:\"admin@example.com?subject=help\",// List-Unsubscribe: <http://example.com> (Comment)unsubscribe:{url:\"http://example.com\",comment:\"Comment\",},// List-Subscribe: <mailto:admin@example.com?subject=subscribe>// List-Subscribe: <http://example.com> (Subscribe)subscribe:[\"admin@example.com?subject=subscribe\",{url:\"http://example.com\",comment:\"Subscribe\",",
        "source_url": "https://nodemailer.com/message/list-headers#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "// List-Subscribe: <mailto:admin@example.com?subject=subscribe>// List-Subscribe: <http://example.com> (Subscribe)subscribe:[\"admin@example.com?subject=subscribe\",{url:\"http://example.com\",comment:\"Subscribe\",},],// List-Post: <http://example.com/post>, <mailto:admin@example.com?subject=post> (Post)post:[[\"http://example.com/post\",{url:\"admin@example.com?subject=post\",comment:\"Post\",},],],},});console.log(\"List message sent ‚úî\");}sendListMessage().catch(console.error);\nconstnodemailer=require(\"nodemailer\");// 1. Create a transport (replace with your configuration)consttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:587,auth:{user:\"username\",pass:\"password\",},});// 2. Send a message with various List-* headersasyncfunctionsendListMessage(){awaittransporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"List Message\",text:\"I hope no‚Äëone unsubscribes from this list!\",list:{// List-Help: <mailto:admin@example.com?subject=help>help:\"admin@example.com?subject=help\",// List-Unsubscribe: <http://example.com> (Comment)unsubscribe:{url:\"http://example.com\",comment:\"Comment\",},// List-Subscribe: <mailto:admin@example.com?subject=subscribe>// List-Subscribe: <http://example.com> (Subscribe)subscribe:[\"admin@example.com?subject=subscribe\",{url:\"http://example.com\",comment:\"Subscribe\",},],// List-Post: <http://example.com/post>, <mailto:admin@example.com?subject=post> (Post)post:[[\"http://example.com/post\",{url:\"admin@example.com?subject=post\",comment:\"Post\",},],],},});console.log(\"List message sent ‚úî\");}sendListMessage().catch(console.error);\nResulting headers (excerpt)‚Äã\nList-Help: <mailto:admin@example.com?subject=help>List-Unsubscribe: <http://example.com> (Comment)List-Subscribe: <mailto:admin@example.com?subject=subscribe>List-Subscribe: <http://example.com> (Subscribe)List-Post: <http://example.com/post>, <mailto:admin@example.com?subject=post> (Post)\nList-Help: <mailto:admin@example.com?",
        "source_url": "https://nodemailer.com/message/list-headers#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "=subscribe>List-Subscribe: <http://example.com> (Subscribe)List-Post: <http://example.com/post>, <mailto:admin@example.com?subject=post> (Post)\nList-Help: <mailto:admin@example.com?subject=help>List-Unsubscribe: <http://example.com> (Comment)List-Subscribe: <mailto:admin@example.com?subject=subscribe>List-Subscribe: <http://example.com> (Subscribe)List-Post: <http://example.com/post>, <mailto:admin@example.com?subject=post> (Post)\nHow it worksValue formats\nValue formats\nComplete exampleResulting headers (excerpt)\nResulting headers (excerpt)",
        "source_url": "https://nodemailer.com/message/list-headers#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 140
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configurationAttachmentsAlternativesAddress objectCalendar eventsEmbedded imagesList headersCustom headersCustom source\nAttachments\nAlternatives\nAddress object\nCalendar events\nEmbedded images\nList headers\nCustom headers\nCustom source\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nMessage configuration\nCustom headers\nCustom headers\nNodemailer generates all mandatory headers for you, so in day‚Äëto‚Äëday usage you rarely need to touch them.\nWhen youdohave to add or override headers‚Äîeither at themessage levelor for a singleattachment / alternative‚Äîuse theheadersproperty.\nheaders\nheaders‚Äî an object whose key‚Äìvalue pairs become raw message headers.Keys are converted to their canonical header name (x-my-key‚ûúX-My-Key).Values are encoded (non‚ÄëASCII ‚Üímime‚Äëword) and long lines are wrapped to max‚Äë78‚ÄØbytes unless you opt out withprepared.\nheaders‚Äî an object whose key‚Äìvalue pairs become raw message headers.\nheaders\nKeys are converted to their canonical header name (x-my-key‚ûúX-My-Key).\nx-my-key\nX-My-Key\nValues are encoded (non‚ÄëASCII ‚Üímime‚Äëword) and long lines are wrapped to max‚Äë78‚ÄØbytes unless you opt out withprepared.\nprepared\nDonotsetprotected headerssuch asFrom,To,Subject,Date,Message-ID, or MIME boundary headers‚ÄîNodemailer will ignore or overwrite them.\nFrom\nTo\nSubject\nDate\nMessage-ID\nExamples‚Äã\n1. Add simple custom headers‚Äã\nconstmessage={// other fields ‚Ä¶headers:{\"x-my-key\":\"header value\",\"x-another-key\":\"another value\",},};/*Results in:X-My-Key: header valueX-Another-Key: another value*/\nconstmessage={// other fields ‚Ä¶headers:{\"x-my-key\":\"header value\",\"x-another-key\":\"another value\",},};/*Results in:X-My-Key: header valueX-Another-Key: another value*/\n2. Repeat the same header key‚Äã\nProvide anArrayto create multiple header lines with thesame key:\nArray\nconstmessage={// ‚Ä¶headers:{\"x-my-key\":[\"value for row 1\",\"value for row 2\",\"value for row 3\"],},};/*X-My-Key: value for row 1X-My-Key: value for row",
        "source_url": "https://nodemailer.com/message/custom-headers",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "message={// ‚Ä¶headers:{\"x-my-key\":[\"value for row 1\",\"value for row 2\",\"value for row 3\"],},};/*X-My-Key: value for row 1X-My-Key: value for row 2X-My-Key: value for row 3*/\nconstmessage={// ‚Ä¶headers:{\"x-my-key\":[\"value for row 1\",\"value for row 2\",\"value for row 3\"],},};/*X-My-Key: value for row 1X-My-Key: value for row 2X-My-Key: value for row 3*/\n3. Bypass Nodemailer‚Äôs encoding & folding‚Äã\nSetprepared: trueif you already took care of encoding / line‚Äëwrapping yourself and want Nodemailer to pass the value throughverbatim.\nprepared: true\nconstmessage={// ‚Ä¶headers:{\"x-processed\":\"a really long header or value with non‚Äëascii üöÄ\",\"x-unprocessed\":{prepared:true,value:\"a really long header or value with non‚Äëascii üöÄ\",},},};/*X-Processed: a really long header or value with non‚Äëascii =?UTF-8?Q?=F0=9F=9A=80?=X-Unprocessed: a really long header or value with non‚Äëascii üöÄ*/\nconstmessage={// ‚Ä¶headers:{\"x-processed\":\"a really long header or value with non‚Äëascii üöÄ\",\"x-unprocessed\":{prepared:true,value:\"a really long header or value with non‚Äëascii üöÄ\",},},};/*X-Processed: a really long header or value with non‚Äëascii =?UTF-8?Q?=F0=9F=9A=80?=X-Unprocessed: a really long header or value with non‚Äëascii üöÄ*/\n4. Headers on an attachment‚Äã\nheadersis available inside any attachment or alternative object:\nheaders\nconstmessage={// ‚Ä¶attachments:[{filename:\"report.csv\",content:csvBuffer,headers:{\"x-report-id\":\"2025‚ÄëQ1\",},},],};\nconstmessage={// ‚Ä¶attachments:[{filename:\"report.csv\",content:csvBuffer,headers:{\"x-report-id\":\"2025‚ÄëQ1\",},},],};\nExamples1. Add simple custom headers2. Repeat the same header key3. Bypass Nodemailer‚Äôs encoding & folding4. Headers on",
        "source_url": "https://nodemailer.com/message/custom-headers",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": ":csvBuffer,headers:{\"x-report-id\":\"2025‚ÄëQ1\",},},],};\nExamples1. Add simple custom headers2. Repeat the same header key3. Bypass Nodemailer‚Äôs encoding & folding4. Headers on an attachment\n1. Add simple custom headers\n2. Repeat the same header key\n3. Bypass Nodemailer‚Äôs encoding & folding\n4. Headers on an attachment",
        "source_url": "https://nodemailer.com/message/custom-headers",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 86
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configurationAttachmentsAlternativesAddress objectCalendar eventsEmbedded imagesList headersCustom headersCustom source\nAttachments\nAlternatives\nAddress object\nCalendar events\nEmbedded images\nList headers\nCustom headers\nCustom source\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nMessage configuration\nCustom headers\nCustom headers\nNodemailer generates all mandatory headers for you, so in day‚Äëto‚Äëday usage you rarely need to touch them.\nWhen youdohave to add or override headers‚Äîeither at themessage levelor for a singleattachment / alternative‚Äîuse theheadersproperty.\nheaders\nheaders‚Äî an object whose key‚Äìvalue pairs become raw message headers.Keys are converted to their canonical header name (x-my-key‚ûúX-My-Key).Values are encoded (non‚ÄëASCII ‚Üímime‚Äëword) and long lines are wrapped to max‚Äë78‚ÄØbytes unless you opt out withprepared.\nheaders‚Äî an object whose key‚Äìvalue pairs become raw message headers.\nheaders\nKeys are converted to their canonical header name (x-my-key‚ûúX-My-Key).\nx-my-key\nX-My-Key\nValues are encoded (non‚ÄëASCII ‚Üímime‚Äëword) and long lines are wrapped to max‚Äë78‚ÄØbytes unless you opt out withprepared.\nprepared\nDonotsetprotected headerssuch asFrom,To,Subject,Date,Message-ID, or MIME boundary headers‚ÄîNodemailer will ignore or overwrite them.\nFrom\nTo\nSubject\nDate\nMessage-ID\nExamples‚Äã\n1. Add simple custom headers‚Äã\nconstmessage={// other fields ‚Ä¶headers:{\"x-my-key\":\"header value\",\"x-another-key\":\"another value\",},};/*Results in:X-My-Key: header valueX-Another-Key: another value*/\nconstmessage={// other fields ‚Ä¶headers:{\"x-my-key\":\"header value\",\"x-another-key\":\"another value\",},};/*Results in:X-My-Key: header valueX-Another-Key: another value*/\n2. Repeat the same header key‚Äã\nProvide anArrayto create multiple header lines with thesame key:\nArray\nconstmessage={// ‚Ä¶headers:{\"x-my-key\":[\"value for row 1\",\"value for row 2\",\"value for row 3\"],},};/*X-My-Key: value for row 1X-My-Key: value for row",
        "source_url": "https://nodemailer.com/message/custom-headers#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "message={// ‚Ä¶headers:{\"x-my-key\":[\"value for row 1\",\"value for row 2\",\"value for row 3\"],},};/*X-My-Key: value for row 1X-My-Key: value for row 2X-My-Key: value for row 3*/\nconstmessage={// ‚Ä¶headers:{\"x-my-key\":[\"value for row 1\",\"value for row 2\",\"value for row 3\"],},};/*X-My-Key: value for row 1X-My-Key: value for row 2X-My-Key: value for row 3*/\n3. Bypass Nodemailer‚Äôs encoding & folding‚Äã\nSetprepared: trueif you already took care of encoding / line‚Äëwrapping yourself and want Nodemailer to pass the value throughverbatim.\nprepared: true\nconstmessage={// ‚Ä¶headers:{\"x-processed\":\"a really long header or value with non‚Äëascii üöÄ\",\"x-unprocessed\":{prepared:true,value:\"a really long header or value with non‚Äëascii üöÄ\",},},};/*X-Processed: a really long header or value with non‚Äëascii =?UTF-8?Q?=F0=9F=9A=80?=X-Unprocessed: a really long header or value with non‚Äëascii üöÄ*/\nconstmessage={// ‚Ä¶headers:{\"x-processed\":\"a really long header or value with non‚Äëascii üöÄ\",\"x-unprocessed\":{prepared:true,value:\"a really long header or value with non‚Äëascii üöÄ\",},},};/*X-Processed: a really long header or value with non‚Äëascii =?UTF-8?Q?=F0=9F=9A=80?=X-Unprocessed: a really long header or value with non‚Äëascii üöÄ*/\n4. Headers on an attachment‚Äã\nheadersis available inside any attachment or alternative object:\nheaders\nconstmessage={// ‚Ä¶attachments:[{filename:\"report.csv\",content:csvBuffer,headers:{\"x-report-id\":\"2025‚ÄëQ1\",},},],};\nconstmessage={// ‚Ä¶attachments:[{filename:\"report.csv\",content:csvBuffer,headers:{\"x-report-id\":\"2025‚ÄëQ1\",},},],};\nExamples1. Add simple custom headers2. Repeat the same header key3. Bypass Nodemailer‚Äôs encoding & folding4. Headers on",
        "source_url": "https://nodemailer.com/message/custom-headers#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": ":csvBuffer,headers:{\"x-report-id\":\"2025‚ÄëQ1\",},},],};\nExamples1. Add simple custom headers2. Repeat the same header key3. Bypass Nodemailer‚Äôs encoding & folding4. Headers on an attachment\n1. Add simple custom headers\n2. Repeat the same header key\n3. Bypass Nodemailer‚Äôs encoding & folding\n4. Headers on an attachment",
        "source_url": "https://nodemailer.com/message/custom-headers#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 86
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configurationAttachmentsAlternativesAddress objectCalendar eventsEmbedded imagesList headersCustom headersCustom source\nAttachments\nAlternatives\nAddress object\nCalendar events\nEmbedded images\nList headers\nCustom headers\nCustom source\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nMessage configuration\nCustom source\nCustom source\nWhen you already have a fully‚Äëformatted RFC‚ÄØ822/EML message‚Äîperhaps because it was composed elsewhere or fetched from storage‚Äîyou can hand it to Nodemailer verbatim with therawoption. Nodemailer will bypass its normal MIME generation and deliver exactly what you supply.\nYou can userawat three levels:\nWhole message‚Äî supply a single RFC‚ÄØ822 document.\nPer alternative‚Äî supply atext/plain,text/html, or other MIME alternative that you built yourself.\ntext/plain\ntext/html\nPer attachment‚Äî supply an attachment body, complete with its own headers.\nWhen you userawfor theentiremessage, you must also setenvelope.fromandenvelope.toso that the SMTP transaction has the correct sender and recipients. These values arenotextracted from the raw source.\nenvelope.from\nenvelope.to\nExamples‚Äã\n1. String as the entire message‚Äã\nconstmessage={envelope:{from:\"sender@example.com\",to:[\"recipient@example.com\"],},raw:`From: sender@example.comTo: recipient@example.comSubject: Hello worldHello world!`,};\nconstmessage={envelope:{from:\"sender@example.com\",to:[\"recipient@example.com\"],},raw:`From: sender@example.comTo: recipient@example.comSubject: Hello worldHello world!`,};\nNodemailer will normalise new‚Äëlines for you, so plain\\nis fine.\n\\n\n2. EML file as the entire message‚Äã\nconstmessage={envelope:{from:\"sender@example.com\",to:[\"recipient@example.com\"],},raw:{path:\"/path/to/message.eml\",// absolute or relative to process.cwd()},};\nconstmessage={envelope:{from:\"sender@example.com\",to:[\"recipient@example.com\"],},raw:{path:\"/path/to/message.eml\",// absolute or relative to process.cwd()},};\n3. String as an attachment‚Äã\nWhenrawis used insideattachments[], includeallof the MIME headers yourself. Nodemailerdoes notaddContent‚ÄëType,Content‚ÄëDisposition, or any other headers.\nattachments[]\nContent‚ÄëType",
        "source_url": "https://nodemailer.com/message/custom-source",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": ".cwd()},};\n3. String as an attachment‚Äã\nWhenrawis used insideattachments[], includeallof the MIME headers yourself. Nodemailerdoes notaddContent‚ÄëType,Content‚ÄëDisposition, or any other headers.\nattachments[]\nContent‚ÄëType\nContent‚ÄëDisposition\nconstmessage={from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Custom attachment\",attachments:[{raw:`Content-Type: text/plainContent-Disposition: attachment; filename=\"notes.txt\"Attached text file`,},],};\nconstmessage={from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Custom attachment\",attachments:[{raw:`Content-Type: text/plainContent-Disposition: attachment; filename=\"notes.txt\"Attached text file`,},],};\nExamples1. String as the entire message2. EML file as the entire message3. String as an attachment\n1. String as the entire message\n2. EML file as the entire message\n3. String as an attachment",
        "source_url": "https://nodemailer.com/message/custom-source",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 197
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configurationAttachmentsAlternativesAddress objectCalendar eventsEmbedded imagesList headersCustom headersCustom source\nAttachments\nAlternatives\nAddress object\nCalendar events\nEmbedded images\nList headers\nCustom headers\nCustom source\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nMessage configuration\nCustom source\nCustom source\nWhen you already have a fully‚Äëformatted RFC‚ÄØ822/EML message‚Äîperhaps because it was composed elsewhere or fetched from storage‚Äîyou can hand it to Nodemailer verbatim with therawoption. Nodemailer will bypass its normal MIME generation and deliver exactly what you supply.\nYou can userawat three levels:\nWhole message‚Äî supply a single RFC‚ÄØ822 document.\nPer alternative‚Äî supply atext/plain,text/html, or other MIME alternative that you built yourself.\ntext/plain\ntext/html\nPer attachment‚Äî supply an attachment body, complete with its own headers.\nWhen you userawfor theentiremessage, you must also setenvelope.fromandenvelope.toso that the SMTP transaction has the correct sender and recipients. These values arenotextracted from the raw source.\nenvelope.from\nenvelope.to\nExamples‚Äã\n1. String as the entire message‚Äã\nconstmessage={envelope:{from:\"sender@example.com\",to:[\"recipient@example.com\"],},raw:`From: sender@example.comTo: recipient@example.comSubject: Hello worldHello world!`,};\nconstmessage={envelope:{from:\"sender@example.com\",to:[\"recipient@example.com\"],},raw:`From: sender@example.comTo: recipient@example.comSubject: Hello worldHello world!`,};\nNodemailer will normalise new‚Äëlines for you, so plain\\nis fine.\n\\n\n2. EML file as the entire message‚Äã\nconstmessage={envelope:{from:\"sender@example.com\",to:[\"recipient@example.com\"],},raw:{path:\"/path/to/message.eml\",// absolute or relative to process.cwd()},};\nconstmessage={envelope:{from:\"sender@example.com\",to:[\"recipient@example.com\"],},raw:{path:\"/path/to/message.eml\",// absolute or relative to process.cwd()},};\n3. String as an attachment‚Äã\nWhenrawis used insideattachments[], includeallof the MIME headers yourself. Nodemailerdoes notaddContent‚ÄëType,Content‚ÄëDisposition, or any other headers.\nattachments[]\nContent‚ÄëType",
        "source_url": "https://nodemailer.com/message/custom-source#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": ".cwd()},};\n3. String as an attachment‚Äã\nWhenrawis used insideattachments[], includeallof the MIME headers yourself. Nodemailerdoes notaddContent‚ÄëType,Content‚ÄëDisposition, or any other headers.\nattachments[]\nContent‚ÄëType\nContent‚ÄëDisposition\nconstmessage={from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Custom attachment\",attachments:[{raw:`Content-Type: text/plainContent-Disposition: attachment; filename=\"notes.txt\"Attached text file`,},],};\nconstmessage={from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Custom attachment\",attachments:[{raw:`Content-Type: text/plainContent-Disposition: attachment; filename=\"notes.txt\"Attached text file`,},],};\nExamples1. String as the entire message2. EML file as the entire message3. String as an attachment\n1. String as the entire message\n2. EML file as the entire message\n3. String as an attachment",
        "source_url": "https://nodemailer.com/message/custom-source#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 197
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transportSMTP envelopePooled SMTP ConnectionsTesting SMTPOAuth2Well-Known ServicesCustom authenticationProxy supportDelivery Status Notifications (DSN)\nSMTP envelope\nPooled SMTP Connections\nTesting SMTP\nOAuth2\nWell-Known Services\nCustom authentication\nProxy support\nDelivery Status Notifications (DSN)\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nSMTP transport\nSMTP transport\nSMTP is the main transport in Nodemailer for delivering messages. SMTP is also the protocol used between different email hosts, so it's truly universal. Almost every email delivery provider supports SMTP-based sending, even when they advertise API‚Äëbased sending as the primary option. APIs can offer more features, but they also introduce vendor lock‚Äëin. With SMTP you can usually swap providers by changing only the configuration object or connection URL.\nCreating a transport‚Äã\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport(options[,defaults]);\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport(options[,defaults]);\noptions‚Äì object that defines the connection (detailed below).\noptions\ndefaults‚Äì object merged into every message object (for example, you can set a commonfromaddress).\ndefaults\nYou can also pass a connection URL instead of an options object. Use thesmtp:orsmtps:protocol in the URL.\nconstpoolConfig=\"smtps://username:password@smtp.example.com/?pool=true\";consttransporter=nodemailer.createTransport(poolConfig);\nconstpoolConfig=\"smtps://username:password@smtp.example.com/?pool=true\";consttransporter=nodemailer.createTransport(poolConfig);\nGeneral options‚Äã\nhost\nstring\n\"localhost\"\nport\nnumber\n587\n465\nsecure: true\nsecure\nboolean\nfalse\ntrue\nservice\nstring\n\"gmail\"\nhost\nport\nsecure\nauth\nobject\nauthMethod\nstring\n\"PLAIN\"\nNodemailer resolves thehostvalue withdns.resolve(). If you pointhostto an IP address that isnotresolvable (for example, it is defined in/etc/hosts), also settls.servernameto the real hostname. TLS validation continues to work even though a DNS lookup is skipped.\nhost\ndns.resolve()\nhost\ntls.servername\nTLS options‚Äã\nsecure\nboolean\nfalse\ntls\nobject\nTLSSocket\n{ reject",
        "source_url": "https://nodemailer.com/smtp",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "nameto the real hostname. TLS validation continues to work even though a DNS lookup is skipped.\nhost\ndns.resolve()\nhost\ntls.servername\nTLS options‚Äã\nsecure\nboolean\nfalse\ntls\nobject\nTLSSocket\n{ rejectUnauthorized: true }\ntls.servername\nstring\nhost\nignoreTLS\nboolean\nfalse\nrequireTLS\nboolean\nfalse\nSettingsecure: falsedoesnotnecessarily mean you are sending in plaintext‚Äîmost servers automatically upgrade to TLS via theSTARTTLScommand. Nodemailer follows the server‚Äôs lead unlessignoreTLSis set.\nsecure: false\nignoreTLS\nConnection options‚Äã\nname\nHELO\nEHLO\nlocalAddress\nconnectionTimeout\ngreetingTimeout\nsocketTimeout\ndnsTimeout\nDebug options‚Äã\nlogger\nobject\nboolean\ntrue\nfalse\ndebug\nboolean\ntrue\nCustom logger\nIf you want to use some specific logger, you can wrap it into Nodemailer-compatible logger object.\nconstsmtpLogger={};// Set up logger wrapperfor(letlevelof['trace','debug','info','warn','error','fatal']){smtpLogger[level]=(data,message,...args)=>{if(args&&args.length){message=util.format(message,...args);}data.msg=message;data.src='nodemailer';if(typeofpinoLogger[level]==='function'){pinoLogger[level](data);}else{pinoLogger.debug(data);}};}nodemailer.createTransport({...,logger:smtpLogger})\nconstsmtpLogger={};// Set up logger wrapperfor(letlevelof['trace','debug','info','warn','error','fatal']){smtpLogger[level]=(data,message,...args)=>{if(args&&args.length){message=util.format(message,...args);}data.msg=message;data.src='nodemailer';if(typeofpinoLogger[level]==='function'){pinoLogger[level](data);}else{pinoLogger.debug(data);}};}nodemailer.createTransport({...,logger:smtpLogger})\nSecurity options‚Äã\ndisableFileAccess\nboolean\ndisableUrlAccess\nboolean\nPooling options‚Äã\nSeePooled SMTPfor the complete list. The most important flag is:\npool\nboolean\nProxy options‚Äã\nAll SMTP transports support proxies. Read more inUsing proxies.\nExamples‚Äã\n1. Single connection‚Äã\nA new SMTP connection is created for every message:\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:587,secure:false,// upgrade later with STARTTLSauth:{user:\"",
        "source_url": "https://nodemailer.com/smtp",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "Examples‚Äã\n1. Single connection‚Äã\nA new SMTP connection is created for every message:\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:587,secure:false,// upgrade later with STARTTLSauth:{user:\"username\",pass:\"password\",},});\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:587,secure:false,// upgrade later with STARTTLSauth:{user:\"username\",pass:\"password\",},});\n2. Pooled connections‚Äã\nKeep a pool of connections open against an SMTP server on port¬†465:\nconsttransporter=nodemailer.createTransport({pool:true,host:\"smtp.example.com\",port:465,secure:true,// use TLSauth:{user:\"username\",pass:\"password\",},});\nconsttransporter=nodemailer.createTransport({pool:true,host:\"smtp.example.com\",port:465,secure:true,// use TLSauth:{user:\"username\",pass:\"password\",},});\n3. Allow self‚Äësigned certificates‚Äã\nConnect to a TLS server that uses a self‚Äësigned or otherwise invalid certificate:\nconsttransporter=nodemailer.createTransport({host:\"my.smtp.host\",port:465,secure:true,auth:{user:\"username\",pass:\"pass\",},tls:{// do not fail on invalid certsrejectUnauthorized:false,},});\nconsttransporter=nodemailer.createTransport({host:\"my.smtp.host\",port:465,secure:true,auth:{user:\"username\",pass:\"pass\",},tls:{// do not fail on invalid certsrejectUnauthorized:false,},});\nAuthentication‚Äã\nIf theauthobject is omitted, Nodemailer treats the connection as already authenticated.\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:587,});\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:587,});\nLogin‚Äã\nauth:{type:\"login\",// defaultuser:\"username\",pass:\"password\",}\nauth:{type:\"login\",// defaultuser:\"username\",pass:\"password\",}\nOAuth¬†2.0‚Äã\nauth:{type:\"oauth2\",user:\"user@example.com\",accessToken:\"generated_access_token\",expires:1484314697598,}\nauth:{type:\"oauth2\",user:\"user@example.com\",accessToken:\"generated_access_token\",expires:1484314697598,}\nSee the dedicatedOAuth¬†2.0 guidefor details, or implement acustom authentication handlerif your protocol is",
        "source_url": "https://nodemailer.com/smtp",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "auth:{type:\"oauth2\",user:\"user@example.com\",accessToken:\"generated_access_token\",expires:1484314697598,}\nSee the dedicatedOAuth¬†2.0 guidefor details, or implement acustom authentication handlerif your protocol is not natively supported (see theNTLM handlerfor an example).\nVerifying the configuration‚Äã\nUsetransporter.verify()to make sure the SMTP configuration works.\ntransporter.verify()\n// Promise style (Node.js 8+)try{awaittransporter.verify();console.log(\"Server is ready to take our messages\");}catch(err){console.error(\"Verification failed\",err);}// Callback styletransporter.verify((error,success)=>{if(error){console.error(error);}else{console.log(\"Server is ready to take our messages\");}});\n// Promise style (Node.js 8+)try{awaittransporter.verify();console.log(\"Server is ready to take our messages\");}catch(err){console.error(\"Verification failed\",err);}// Callback styletransporter.verify((error,success)=>{if(error){console.error(error);}else{console.log(\"Server is ready to take our messages\");}});\nverify()checks DNS resolution, the TCP handshake, and authentication. It doesnotvalidate whether the service allows a specific envelopeFromaddress‚Äîthat depends on the server configuration.\nverify()\nCreating a transportGeneral optionsTLS optionsConnection optionsDebug optionsSecurity optionsPooling optionsProxy options\nGeneral options\nTLS options\nConnection options\nDebug options\nSecurity options\nPooling options\nProxy options\nExamples1. Single connection2. Pooled connections3. Allow self‚Äësigned certificates\n1. Single connection\n2. Pooled connections\n3. Allow self‚Äësigned certificates\nAuthenticationLoginOAuth¬†2.0\nLogin\nOAuth¬†2.0\nVerifying the configuration",
        "source_url": "https://nodemailer.com/smtp",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 363
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transportSMTP envelopePooled SMTP ConnectionsTesting SMTPOAuth2Well-Known ServicesCustom authenticationProxy supportDelivery Status Notifications (DSN)\nSMTP envelope\nPooled SMTP Connections\nTesting SMTP\nOAuth2\nWell-Known Services\nCustom authentication\nProxy support\nDelivery Status Notifications (DSN)\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nSMTP transport\nSMTP transport\nSMTP is the main transport in Nodemailer for delivering messages. SMTP is also the protocol used between different email hosts, so it's truly universal. Almost every email delivery provider supports SMTP-based sending, even when they advertise API‚Äëbased sending as the primary option. APIs can offer more features, but they also introduce vendor lock‚Äëin. With SMTP you can usually swap providers by changing only the configuration object or connection URL.\nCreating a transport‚Äã\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport(options[,defaults]);\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport(options[,defaults]);\noptions‚Äì object that defines the connection (detailed below).\noptions\ndefaults‚Äì object merged into every message object (for example, you can set a commonfromaddress).\ndefaults\nYou can also pass a connection URL instead of an options object. Use thesmtp:orsmtps:protocol in the URL.\nconstpoolConfig=\"smtps://username:password@smtp.example.com/?pool=true\";consttransporter=nodemailer.createTransport(poolConfig);\nconstpoolConfig=\"smtps://username:password@smtp.example.com/?pool=true\";consttransporter=nodemailer.createTransport(poolConfig);\nGeneral options‚Äã\nhost\nstring\n\"localhost\"\nport\nnumber\n587\n465\nsecure: true\nsecure\nboolean\nfalse\ntrue\nservice\nstring\n\"gmail\"\nhost\nport\nsecure\nauth\nobject\nauthMethod\nstring\n\"PLAIN\"\nNodemailer resolves thehostvalue withdns.resolve(). If you pointhostto an IP address that isnotresolvable (for example, it is defined in/etc/hosts), also settls.servernameto the real hostname. TLS validation continues to work even though a DNS lookup is skipped.\nhost\ndns.resolve()\nhost\ntls.servername\nTLS options‚Äã\nsecure\nboolean\nfalse\ntls\nobject\nTLSSocket\n{ reject",
        "source_url": "https://nodemailer.com/smtp#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "nameto the real hostname. TLS validation continues to work even though a DNS lookup is skipped.\nhost\ndns.resolve()\nhost\ntls.servername\nTLS options‚Äã\nsecure\nboolean\nfalse\ntls\nobject\nTLSSocket\n{ rejectUnauthorized: true }\ntls.servername\nstring\nhost\nignoreTLS\nboolean\nfalse\nrequireTLS\nboolean\nfalse\nSettingsecure: falsedoesnotnecessarily mean you are sending in plaintext‚Äîmost servers automatically upgrade to TLS via theSTARTTLScommand. Nodemailer follows the server‚Äôs lead unlessignoreTLSis set.\nsecure: false\nignoreTLS\nConnection options‚Äã\nname\nHELO\nEHLO\nlocalAddress\nconnectionTimeout\ngreetingTimeout\nsocketTimeout\ndnsTimeout\nDebug options‚Äã\nlogger\nobject\nboolean\ntrue\nfalse\ndebug\nboolean\ntrue\nCustom logger\nIf you want to use some specific logger, you can wrap it into Nodemailer-compatible logger object.\nconstsmtpLogger={};// Set up logger wrapperfor(letlevelof['trace','debug','info','warn','error','fatal']){smtpLogger[level]=(data,message,...args)=>{if(args&&args.length){message=util.format(message,...args);}data.msg=message;data.src='nodemailer';if(typeofpinoLogger[level]==='function'){pinoLogger[level](data);}else{pinoLogger.debug(data);}};}nodemailer.createTransport({...,logger:smtpLogger})\nconstsmtpLogger={};// Set up logger wrapperfor(letlevelof['trace','debug','info','warn','error','fatal']){smtpLogger[level]=(data,message,...args)=>{if(args&&args.length){message=util.format(message,...args);}data.msg=message;data.src='nodemailer';if(typeofpinoLogger[level]==='function'){pinoLogger[level](data);}else{pinoLogger.debug(data);}};}nodemailer.createTransport({...,logger:smtpLogger})\nSecurity options‚Äã\ndisableFileAccess\nboolean\ndisableUrlAccess\nboolean\nPooling options‚Äã\nSeePooled SMTPfor the complete list. The most important flag is:\npool\nboolean\nProxy options‚Äã\nAll SMTP transports support proxies. Read more inUsing proxies.\nExamples‚Äã\n1. Single connection‚Äã\nA new SMTP connection is created for every message:\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:587,secure:false,// upgrade later with STARTTLSauth:{user:\"",
        "source_url": "https://nodemailer.com/smtp#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "Examples‚Äã\n1. Single connection‚Äã\nA new SMTP connection is created for every message:\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:587,secure:false,// upgrade later with STARTTLSauth:{user:\"username\",pass:\"password\",},});\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:587,secure:false,// upgrade later with STARTTLSauth:{user:\"username\",pass:\"password\",},});\n2. Pooled connections‚Äã\nKeep a pool of connections open against an SMTP server on port¬†465:\nconsttransporter=nodemailer.createTransport({pool:true,host:\"smtp.example.com\",port:465,secure:true,// use TLSauth:{user:\"username\",pass:\"password\",},});\nconsttransporter=nodemailer.createTransport({pool:true,host:\"smtp.example.com\",port:465,secure:true,// use TLSauth:{user:\"username\",pass:\"password\",},});\n3. Allow self‚Äësigned certificates‚Äã\nConnect to a TLS server that uses a self‚Äësigned or otherwise invalid certificate:\nconsttransporter=nodemailer.createTransport({host:\"my.smtp.host\",port:465,secure:true,auth:{user:\"username\",pass:\"pass\",},tls:{// do not fail on invalid certsrejectUnauthorized:false,},});\nconsttransporter=nodemailer.createTransport({host:\"my.smtp.host\",port:465,secure:true,auth:{user:\"username\",pass:\"pass\",},tls:{// do not fail on invalid certsrejectUnauthorized:false,},});\nAuthentication‚Äã\nIf theauthobject is omitted, Nodemailer treats the connection as already authenticated.\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:587,});\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:587,});\nLogin‚Äã\nauth:{type:\"login\",// defaultuser:\"username\",pass:\"password\",}\nauth:{type:\"login\",// defaultuser:\"username\",pass:\"password\",}\nOAuth¬†2.0‚Äã\nauth:{type:\"oauth2\",user:\"user@example.com\",accessToken:\"generated_access_token\",expires:1484314697598,}\nauth:{type:\"oauth2\",user:\"user@example.com\",accessToken:\"generated_access_token\",expires:1484314697598,}\nSee the dedicatedOAuth¬†2.0 guidefor details, or implement acustom authentication handlerif your protocol is",
        "source_url": "https://nodemailer.com/smtp#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "auth:{type:\"oauth2\",user:\"user@example.com\",accessToken:\"generated_access_token\",expires:1484314697598,}\nSee the dedicatedOAuth¬†2.0 guidefor details, or implement acustom authentication handlerif your protocol is not natively supported (see theNTLM handlerfor an example).\nVerifying the configuration‚Äã\nUsetransporter.verify()to make sure the SMTP configuration works.\ntransporter.verify()\n// Promise style (Node.js 8+)try{awaittransporter.verify();console.log(\"Server is ready to take our messages\");}catch(err){console.error(\"Verification failed\",err);}// Callback styletransporter.verify((error,success)=>{if(error){console.error(error);}else{console.log(\"Server is ready to take our messages\");}});\n// Promise style (Node.js 8+)try{awaittransporter.verify();console.log(\"Server is ready to take our messages\");}catch(err){console.error(\"Verification failed\",err);}// Callback styletransporter.verify((error,success)=>{if(error){console.error(error);}else{console.log(\"Server is ready to take our messages\");}});\nverify()checks DNS resolution, the TCP handshake, and authentication. It doesnotvalidate whether the service allows a specific envelopeFromaddress‚Äîthat depends on the server configuration.\nverify()\nCreating a transportGeneral optionsTLS optionsConnection optionsDebug optionsSecurity optionsPooling optionsProxy options\nGeneral options\nTLS options\nConnection options\nDebug options\nSecurity options\nPooling options\nProxy options\nExamples1. Single connection2. Pooled connections3. Allow self‚Äësigned certificates\n1. Single connection\n2. Pooled connections\n3. Allow self‚Äësigned certificates\nAuthenticationLoginOAuth¬†2.0\nLogin\nOAuth¬†2.0\nVerifying the configuration",
        "source_url": "https://nodemailer.com/smtp#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 363
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transportSMTP envelopePooled SMTP ConnectionsTesting SMTPOAuth2Well-Known ServicesCustom authenticationProxy supportDelivery Status Notifications (DSN)\nSMTP envelope\nPooled SMTP Connections\nTesting SMTP\nOAuth2\nWell-Known Services\nCustom authentication\nProxy support\nDelivery Status Notifications (DSN)\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nSMTP transport\nSMTP envelope\nSMTP envelope\nWhen Nodemailer delivers an email over SMTP it sendstwo distinct layersof information:\nMessage headersthat your email client shows (From:,To:, etc.).\nFrom:\nTo:\nSMTP envelope commands(MAIL FROM,RCPT TO) that the SMTP server actually uses to route and return the message.\nMAIL FROM\nRCPT TO\nBy default, Nodemailerbuilds the envelope automaticallyfrom thefrom,to,cc, andbccheader fields.¬†\nIf you need fine‚Äëgrained control‚Äîfor example to implementVERP, to set a dedicated bounce address, or to send a message to recipients that you donotreveal in the headers‚Äîyou can override the defaults with theenvelopeproperty.\nfrom\nto\ncc\nbcc\nenvelope\nTheenvelopeproperty‚Äã\nenvelope\n{envelope:{from:'bounce+12345@example.com',// becomes MAIL FROM:to:[// becomes RCPT TO:'alice@example.com','Bob <bob@example.net>']}}\n{envelope:{from:'bounce+12345@example.com',// becomes MAIL FROM:to:[// becomes RCPT TO:'alice@example.com','Bob <bob@example.net>']}}\nfrom\nstring\nMAIL FROM\nto\nstring | string[]\nRCPT TO\ncc\nstring | string[]\nto\nbcc\nstring | string[]\nto\nAny address format that Nodemailer supports‚Äîplain,Name <address>pairs, or international (UTF‚Äë8) domains‚Äîcan be used here.\nName <address>\nComplete example‚Äã\nconstnodemailer=require(\"nodemailer\");asyncfunctionmain(){// Create a transport. Replace with your own transport options.consttransport=nodemailer.createTransport({sendmail:true,});constinfo=awaittransport.sendMail({from:\"Mailer <mailer@example.com>\",// Header From:to:\"Daemon <daemon@example.com>\",// Header To:envelope:{from:\"bounce+12345@example.com\",// MAIL FROM:to:[//",
        "source_url": "https://nodemailer.com/smtp/envelope",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "info=awaittransport.sendMail({from:\"Mailer <mailer@example.com>\",// Header From:to:\"Daemon <daemon@example.com>\",// Header To:envelope:{from:\"bounce+12345@example.com\",// MAIL FROM:to:[// RCPT TO:\"daemon@example.com\",\"mailer@example.com\",],},subject:\"Custom SMTP envelope\",text:\"Hello!\",});console.log(\"Envelope used:\",info.envelope);// => { from: 'bounce+12345@example.com', to: [ 'daemon@example.com', 'mailer@example.com' ] }}main().catch(console.error);\nconstnodemailer=require(\"nodemailer\");asyncfunctionmain(){// Create a transport. Replace with your own transport options.consttransport=nodemailer.createTransport({sendmail:true,});constinfo=awaittransport.sendMail({from:\"Mailer <mailer@example.com>\",// Header From:to:\"Daemon <daemon@example.com>\",// Header To:envelope:{from:\"bounce+12345@example.com\",// MAIL FROM:to:[// RCPT TO:\"daemon@example.com\",\"mailer@example.com\",],},subject:\"Custom SMTP envelope\",text:\"Hello!\",});console.log(\"Envelope used:\",info.envelope);// => { from: 'bounce+12345@example.com', to: [ 'daemon@example.com', 'mailer@example.com' ] }}main().catch(console.error);\nThe object returned bysendMail()always includes anenvelopeproperty. It containsfrom(a string) andto(an array). When sending, Nodemailer mergesallrecipients fromto,cc, andbccinto that singletoarray.\nsendMail()\nenvelope\nfrom\nto\nto\ncc\nbcc\nto\nWhen should I override the envelope?‚Äã\nVERP or bounce management‚Äì route bounces to a unique per‚Äëmessage address.\nMailing lists‚Äì deliver the same message to many recipients while hiding the list in the header.\nDifferent return‚Äëpath‚Äì use one domain in the headers but another for bounce processing.\nIf you do not have a specific reason, let Nodemailer generate the envelope automatically.\nTheenvelopepropertyComplete exampleWhen should I override the envelope?\nenvelope\nComplete example\nWhen should I override the envelope?",
        "source_url": "https://nodemailer.com/smtp/envelope",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 445
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transportSMTP envelopePooled SMTP ConnectionsTesting SMTPOAuth2Well-Known ServicesCustom authenticationProxy supportDelivery Status Notifications (DSN)\nSMTP envelope\nPooled SMTP Connections\nTesting SMTP\nOAuth2\nWell-Known Services\nCustom authentication\nProxy support\nDelivery Status Notifications (DSN)\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nSMTP transport\nSMTP envelope\nSMTP envelope\nWhen Nodemailer delivers an email over SMTP it sendstwo distinct layersof information:\nMessage headersthat your email client shows (From:,To:, etc.).\nFrom:\nTo:\nSMTP envelope commands(MAIL FROM,RCPT TO) that the SMTP server actually uses to route and return the message.\nMAIL FROM\nRCPT TO\nBy default, Nodemailerbuilds the envelope automaticallyfrom thefrom,to,cc, andbccheader fields.¬†\nIf you need fine‚Äëgrained control‚Äîfor example to implementVERP, to set a dedicated bounce address, or to send a message to recipients that you donotreveal in the headers‚Äîyou can override the defaults with theenvelopeproperty.\nfrom\nto\ncc\nbcc\nenvelope\nTheenvelopeproperty‚Äã\nenvelope\n{envelope:{from:'bounce+12345@example.com',// becomes MAIL FROM:to:[// becomes RCPT TO:'alice@example.com','Bob <bob@example.net>']}}\n{envelope:{from:'bounce+12345@example.com',// becomes MAIL FROM:to:[// becomes RCPT TO:'alice@example.com','Bob <bob@example.net>']}}\nfrom\nstring\nMAIL FROM\nto\nstring | string[]\nRCPT TO\ncc\nstring | string[]\nto\nbcc\nstring | string[]\nto\nAny address format that Nodemailer supports‚Äîplain,Name <address>pairs, or international (UTF‚Äë8) domains‚Äîcan be used here.\nName <address>\nComplete example‚Äã\nconstnodemailer=require(\"nodemailer\");asyncfunctionmain(){// Create a transport. Replace with your own transport options.consttransport=nodemailer.createTransport({sendmail:true,});constinfo=awaittransport.sendMail({from:\"Mailer <mailer@example.com>\",// Header From:to:\"Daemon <daemon@example.com>\",// Header To:envelope:{from:\"bounce+12345@example.com\",// MAIL FROM:to:[//",
        "source_url": "https://nodemailer.com/smtp/envelope#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "info=awaittransport.sendMail({from:\"Mailer <mailer@example.com>\",// Header From:to:\"Daemon <daemon@example.com>\",// Header To:envelope:{from:\"bounce+12345@example.com\",// MAIL FROM:to:[// RCPT TO:\"daemon@example.com\",\"mailer@example.com\",],},subject:\"Custom SMTP envelope\",text:\"Hello!\",});console.log(\"Envelope used:\",info.envelope);// => { from: 'bounce+12345@example.com', to: [ 'daemon@example.com', 'mailer@example.com' ] }}main().catch(console.error);\nconstnodemailer=require(\"nodemailer\");asyncfunctionmain(){// Create a transport. Replace with your own transport options.consttransport=nodemailer.createTransport({sendmail:true,});constinfo=awaittransport.sendMail({from:\"Mailer <mailer@example.com>\",// Header From:to:\"Daemon <daemon@example.com>\",// Header To:envelope:{from:\"bounce+12345@example.com\",// MAIL FROM:to:[// RCPT TO:\"daemon@example.com\",\"mailer@example.com\",],},subject:\"Custom SMTP envelope\",text:\"Hello!\",});console.log(\"Envelope used:\",info.envelope);// => { from: 'bounce+12345@example.com', to: [ 'daemon@example.com', 'mailer@example.com' ] }}main().catch(console.error);\nThe object returned bysendMail()always includes anenvelopeproperty. It containsfrom(a string) andto(an array). When sending, Nodemailer mergesallrecipients fromto,cc, andbccinto that singletoarray.\nsendMail()\nenvelope\nfrom\nto\nto\ncc\nbcc\nto\nWhen should I override the envelope?‚Äã\nVERP or bounce management‚Äì route bounces to a unique per‚Äëmessage address.\nMailing lists‚Äì deliver the same message to many recipients while hiding the list in the header.\nDifferent return‚Äëpath‚Äì use one domain in the headers but another for bounce processing.\nIf you do not have a specific reason, let Nodemailer generate the envelope automatically.\nTheenvelopepropertyComplete exampleWhen should I override the envelope?\nenvelope\nComplete example\nWhen should I override the envelope?",
        "source_url": "https://nodemailer.com/smtp/envelope#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 445
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transportSMTP envelopePooled SMTP ConnectionsTesting SMTPOAuth2Well-Known ServicesCustom authenticationProxy supportDelivery Status Notifications (DSN)\nSMTP envelope\nPooled SMTP Connections\nTesting SMTP\nOAuth2\nWell-Known Services\nCustom authentication\nProxy support\nDelivery Status Notifications (DSN)\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nSMTP transport\nPooled SMTP Connections\nPooled SMTP Connections\nUsingpooledSMTP connections keeps a fixed number of TCP/TLS connections open to the SMTP server and re‚Äëuses them for every message. This dramatically reduces TLS hand‚Äëshake latency and is perfect when either\nyou need to blast out alargebatch of e‚Äëmails, or\nyour provider caps the number of parallel connections you‚Äôre allowed to use.\nQuick example‚Äã\nconstnodemailer=require(\"nodemailer\");/*** One shared transporter for your whole process.* The transporter will automatically open up to `maxConnections`* sockets and keep them warm.*/consttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,pool:true,// ‚ôªÔ∏è  enable connection poolingmaxConnections:5,// optional ‚Äì defaults to 5maxMessages:100,// optional ‚Äì defaults to 100auth:{user:process.env.SMTP_USER,pass:process.env.SMTP_PASS,},});// Somewhere in your code ‚Äì *do not* create a new transporter each timeawaittransporter.sendMail({from:\"Newsletters <noreply@example.com>\",to:\"alice@example.com\",subject:\"Hello pooled world\",text:\"Hi Alice! üëã\",});\nconstnodemailer=require(\"nodemailer\");/*** One shared transporter for your whole process.* The transporter will automatically open up to `maxConnections`* sockets and keep them warm.*/consttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,pool:true,// ‚ôªÔ∏è  enable connection poolingmaxConnections:5,// optional ‚Äì defaults to 5maxMessages:100,// optional ‚Äì defaults to 100auth:{user:process.env.SMTP_USER,pass:process.env.SMTP_PASS,},});// Somewhere in your code ‚Äì *do not* create a new transporter each timeawaittransporter.sendMail({from:\"Newsletters <noreply@example.com>\",to:\"alice@example.com\",subject:\"",
        "source_url": "https://nodemailer.com/smtp/pooled",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": ":process.env.SMTP_PASS,},});// Somewhere in your code ‚Äì *do not* create a new transporter each timeawaittransporter.sendMail({from:\"Newsletters <noreply@example.com>\",to:\"alice@example.com\",subject:\"Hello pooled world\",text:\"Hi Alice! üëã\",});\nTransport options‚Äã\npool\nboolean\nfalse\nmaxConnections\nnumber\n5\nmaxMessages\nnumber\n100\nThe following options aredeprecatedand will be removed in a future major release:\nrateDelta‚Äì size of the time window (ms) used for rate limiting (default:1000).\nrateDelta\n1000\nrateLimit‚Äì how many messages may be sent during onerateDeltawindow. The limit is shared betweenallpooled connections.\nrateLimit\nrateDelta\nRuntime helpers‚Äã\ntransporter.isIdle()‚Üíboolean‚Äã\ntransporter.isIdle()\nboolean\nReturnstrueif at least one connection slot is free.\ntrue\ntransporter.close()‚Äã\ntransporter.close()\nClosesallactive connections immediately and drains the message queue. Idle connections are normally closed automatically aftersocketTimeout, so calling this manually is rarely required.\nsocketTimeout\n// Graceful shutdownprocess.on(\"SIGTERM\",async()=>{awaittransporter.close();process.exit(0);});\n// Graceful shutdownprocess.on(\"SIGTERM\",async()=>{awaittransporter.close();process.exit(0);});\nEvent:idle‚Äã\nidle\nThe transporter emits anidleevent whenever a connection slot becomes available. This allows you to implementpush‚Äëstylesenders that pull messages from an external queue only when Nodemailer is ready for them:\nidle\nconst{getNextMessage}=require(\"./messageQueue\");transporter.on(\"idle\",async()=>{while(transporter.isIdle()){constmessage=awaitgetNextMessage();if(!message)return;// queue is emptytry{awaittransporter.sendMail(message);}catch(err){console.error(\"‚ùå  Failed to send\",err);}}});\nconst{getNextMessage}=require(\"./messageQueue\");transporter.on(\"idle\",async()=>{while(transporter.isIdle()){constmessage=awaitgetNextMessage();if(!message)return;// queue is emptytry{awaittransporter.sendMail(message);}catch(err){console.error(\"‚ùå  Failed to send\",err);}}});\nBest practices‚Äã\nCreate one transporterandreuse it‚Äì every newcreateTransport()call spawns itsownpool.\ncreateTransport()\nAdjustmaxConnectionsandmax",
        "source_url": "https://nodemailer.com/smtp/pooled",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "Mail(message);}catch(err){console.error(\"‚ùå  Failed to send\",err);}}});\nBest practices‚Äã\nCreate one transporterandreuse it‚Äì every newcreateTransport()call spawns itsownpool.\ncreateTransport()\nAdjustmaxConnectionsandmaxMessagesto match the policy of your SMTP provider.\nmaxConnections\nmaxMessages\nHandle back‚Äëpressureusing theidleevent instead of pushing thousands of messages into memory.\nidle\nClose the poolon graceful shutdown so that your process exits promptly.\nQuick example\nTransport options\nRuntime helperstransporter.isIdle()‚Üíbooleantransporter.close()\ntransporter.isIdle()‚Üíboolean\ntransporter.isIdle()\nboolean\ntransporter.close()\ntransporter.close()\nEvent:idleBest practices\nidle\nBest practices",
        "source_url": "https://nodemailer.com/smtp/pooled",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 151
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transportSMTP envelopePooled SMTP ConnectionsTesting SMTPOAuth2Well-Known ServicesCustom authenticationProxy supportDelivery Status Notifications (DSN)\nSMTP envelope\nPooled SMTP Connections\nTesting SMTP\nOAuth2\nWell-Known Services\nCustom authentication\nProxy support\nDelivery Status Notifications (DSN)\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nSMTP transport\nPooled SMTP Connections\nPooled SMTP Connections\nUsingpooledSMTP connections keeps a fixed number of TCP/TLS connections open to the SMTP server and re‚Äëuses them for every message. This dramatically reduces TLS hand‚Äëshake latency and is perfect when either\nyou need to blast out alargebatch of e‚Äëmails, or\nyour provider caps the number of parallel connections you‚Äôre allowed to use.\nQuick example‚Äã\nconstnodemailer=require(\"nodemailer\");/*** One shared transporter for your whole process.* The transporter will automatically open up to `maxConnections`* sockets and keep them warm.*/consttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,pool:true,// ‚ôªÔ∏è  enable connection poolingmaxConnections:5,// optional ‚Äì defaults to 5maxMessages:100,// optional ‚Äì defaults to 100auth:{user:process.env.SMTP_USER,pass:process.env.SMTP_PASS,},});// Somewhere in your code ‚Äì *do not* create a new transporter each timeawaittransporter.sendMail({from:\"Newsletters <noreply@example.com>\",to:\"alice@example.com\",subject:\"Hello pooled world\",text:\"Hi Alice! üëã\",});\nconstnodemailer=require(\"nodemailer\");/*** One shared transporter for your whole process.* The transporter will automatically open up to `maxConnections`* sockets and keep them warm.*/consttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,pool:true,// ‚ôªÔ∏è  enable connection poolingmaxConnections:5,// optional ‚Äì defaults to 5maxMessages:100,// optional ‚Äì defaults to 100auth:{user:process.env.SMTP_USER,pass:process.env.SMTP_PASS,},});// Somewhere in your code ‚Äì *do not* create a new transporter each timeawaittransporter.sendMail({from:\"Newsletters <noreply@example.com>\",to:\"alice@example.com\",subject:\"",
        "source_url": "https://nodemailer.com/smtp/pooled#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": ":process.env.SMTP_PASS,},});// Somewhere in your code ‚Äì *do not* create a new transporter each timeawaittransporter.sendMail({from:\"Newsletters <noreply@example.com>\",to:\"alice@example.com\",subject:\"Hello pooled world\",text:\"Hi Alice! üëã\",});\nTransport options‚Äã\npool\nboolean\nfalse\nmaxConnections\nnumber\n5\nmaxMessages\nnumber\n100\nThe following options aredeprecatedand will be removed in a future major release:\nrateDelta‚Äì size of the time window (ms) used for rate limiting (default:1000).\nrateDelta\n1000\nrateLimit‚Äì how many messages may be sent during onerateDeltawindow. The limit is shared betweenallpooled connections.\nrateLimit\nrateDelta\nRuntime helpers‚Äã\ntransporter.isIdle()‚Üíboolean‚Äã\ntransporter.isIdle()\nboolean\nReturnstrueif at least one connection slot is free.\ntrue\ntransporter.close()‚Äã\ntransporter.close()\nClosesallactive connections immediately and drains the message queue. Idle connections are normally closed automatically aftersocketTimeout, so calling this manually is rarely required.\nsocketTimeout\n// Graceful shutdownprocess.on(\"SIGTERM\",async()=>{awaittransporter.close();process.exit(0);});\n// Graceful shutdownprocess.on(\"SIGTERM\",async()=>{awaittransporter.close();process.exit(0);});\nEvent:idle‚Äã\nidle\nThe transporter emits anidleevent whenever a connection slot becomes available. This allows you to implementpush‚Äëstylesenders that pull messages from an external queue only when Nodemailer is ready for them:\nidle\nconst{getNextMessage}=require(\"./messageQueue\");transporter.on(\"idle\",async()=>{while(transporter.isIdle()){constmessage=awaitgetNextMessage();if(!message)return;// queue is emptytry{awaittransporter.sendMail(message);}catch(err){console.error(\"‚ùå  Failed to send\",err);}}});\nconst{getNextMessage}=require(\"./messageQueue\");transporter.on(\"idle\",async()=>{while(transporter.isIdle()){constmessage=awaitgetNextMessage();if(!message)return;// queue is emptytry{awaittransporter.sendMail(message);}catch(err){console.error(\"‚ùå  Failed to send\",err);}}});\nBest practices‚Äã\nCreate one transporterandreuse it‚Äì every newcreateTransport()call spawns itsownpool.\ncreateTransport()\nAdjustmaxConnectionsandmax",
        "source_url": "https://nodemailer.com/smtp/pooled#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "Mail(message);}catch(err){console.error(\"‚ùå  Failed to send\",err);}}});\nBest practices‚Äã\nCreate one transporterandreuse it‚Äì every newcreateTransport()call spawns itsownpool.\ncreateTransport()\nAdjustmaxConnectionsandmaxMessagesto match the policy of your SMTP provider.\nmaxConnections\nmaxMessages\nHandle back‚Äëpressureusing theidleevent instead of pushing thousands of messages into memory.\nidle\nClose the poolon graceful shutdown so that your process exits promptly.\nQuick example\nTransport options\nRuntime helperstransporter.isIdle()‚Üíbooleantransporter.close()\ntransporter.isIdle()‚Üíboolean\ntransporter.isIdle()\nboolean\ntransporter.close()\ntransporter.close()\nEvent:idleBest practices\nidle\nBest practices",
        "source_url": "https://nodemailer.com/smtp/pooled#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 151
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transportSMTP envelopePooled SMTP ConnectionsTesting SMTPOAuth2Well-Known ServicesCustom authenticationProxy supportDelivery Status Notifications (DSN)\nSMTP envelope\nPooled SMTP Connections\nTesting SMTP\nOAuth2\nWell-Known Services\nCustom authentication\nProxy support\nDelivery Status Notifications (DSN)\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nSMTP transport\nTesting SMTP\nTesting SMTP\nWhen you need to exercise the email‚Äësending paths of your application in a development or continuous‚Äëintegration environment, youmust notaccidentally spam real inboxes. Instead of routing all mail to a single hard‚Äëcoded test address, point your code at amail‚Äëcatcherservice: it accepts messages over SMTP exactly like a production provider, butneverdelivers them. It just stores the messages so that you can open or download them later.\nNodemailer ships with first‚Äëclass support forEthereal Email‚Äî a free, open‚Äësource mail‚Äëcatcher designed for test environments. You can either\nprovision an account on the flywithcreateTestAccount, or\ncreateTestAccount\ncreate a persistent test mailboxfrom the Ethereal dashboard.\nIf you would rather stay completely offline you can preview messages locally withforwardemail/email‚Äëtemplates(it renders every message in your browser and iOS simulator viapreview-email).\nQuick‚Äëstart‚Äã\nInstall Nodemailer if you have not done so yet:\nnpm install nodemailer\nnpm install nodemailer\n1. Spin up a throw‚Äëaway Ethereal account‚Äã\n// ./mail.jsconstnodemailer=require(\"nodemailer\");nodemailer.createTestAccount((err,account)=>{if(err){console.error(\"Failed to create a testing account. \"+err.message);return;}// 1Ô∏è‚É£  Configure a transporter that talks to Etherealconsttransporter=nodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,// upgrade later with STARTTLSauth:{user:account.user,// generated userpass:account.pass,// generated password},});// 2Ô∏è‚É£  Send a messagetransporter.sendMail({from:\"Example app <no-reply@example.com>\",to:\"user@example.com\",subject:\"Hello from tests ‚úî\",text:\"This message was sent from a Node.js integration test.\",}).then((info)=>{console.log(\"Message sent:",
        "source_url": "https://nodemailer.com/smtp/testing",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "Mail({from:\"Example app <no-reply@example.com>\",to:\"user@example.com\",subject:\"Hello from tests ‚úî\",text:\"This message was sent from a Node.js integration test.\",}).then((info)=>{console.log(\"Message sent: %s\",info.messageId);// Preview the stored message in Ethereal‚Äôs web UIconsole.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));}).catch(console.error);});\n// ./mail.jsconstnodemailer=require(\"nodemailer\");nodemailer.createTestAccount((err,account)=>{if(err){console.error(\"Failed to create a testing account. \"+err.message);return;}// 1Ô∏è‚É£  Configure a transporter that talks to Etherealconsttransporter=nodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,// upgrade later with STARTTLSauth:{user:account.user,// generated userpass:account.pass,// generated password},});// 2Ô∏è‚É£  Send a messagetransporter.sendMail({from:\"Example app <no-reply@example.com>\",to:\"user@example.com\",subject:\"Hello from tests ‚úî\",text:\"This message was sent from a Node.js integration test.\",}).then((info)=>{console.log(\"Message sent: %s\",info.messageId);// Preview the stored message in Ethereal‚Äôs web UIconsole.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));}).catch(console.error);});\nEthereal automatically deletes an account after48¬†hours of inactivity. Save the generated credentials somewhere if you want to inspect the messages later via the dashboard.\n2. Switch transports per environment‚Äã\nYou only need one place in your code base that knows which SMTP credentials to use. Everything else just callscreateTransport().\ncreateTransport()\n// ./mail‚Äëtransport.jsconstnodemailer=require(\"nodemailer\");functioncreateTransport(){if(process.env.NODE_ENV===\"production\"){// üöÄ  Real emailsreturnnodemailer.createTransport({host:\"smtp.sendgrid.net\",port:587,secure:false,auth:{user:process.env.SMTP_USERNAME,pass:process.env.SMTP_PASSWORD,},});}// üß™  Captured by Etherealreturnnodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,auth:{user:process.env.ETHEREAL_USERNAME,pass:process.env.ETHEREAL_PASSWORD,},});}module.exports=createTransport;\n",
        "source_url": "https://nodemailer.com/smtp/testing",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "returnnodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,auth:{user:process.env.ETHEREAL_USERNAME,pass:process.env.ETHEREAL_PASSWORD,},});}module.exports=createTransport;\n// ./mail‚Äëtransport.jsconstnodemailer=require(\"nodemailer\");functioncreateTransport(){if(process.env.NODE_ENV===\"production\"){// üöÄ  Real emailsreturnnodemailer.createTransport({host:\"smtp.sendgrid.net\",port:587,secure:false,auth:{user:process.env.SMTP_USERNAME,pass:process.env.SMTP_PASSWORD,},});}// üß™  Captured by Etherealreturnnodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,auth:{user:process.env.ETHEREAL_USERNAME,pass:process.env.ETHEREAL_PASSWORD,},});}module.exports=createTransport;\nYour application code can treat the transporter as a black box:\nconstcreateTransport=require('./mail-transport');consttransporter=createTransport();awaittransporter.sendMail({...});\nconstcreateTransport=require('./mail-transport');consttransporter=createTransport();awaittransporter.sendMail({...});\n3. Inspect the message‚Äã\nWhensendMailresolves (or its callback fires), the returnedinfoobject contains everything you need to locate the message inside Ethereal:\nsendMail\ninfo\nconstinfo=awaittransporter.sendMail(message);console.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));// ‚Üí https://ethereal.email/message/WaQKMgKddxQDoou\nconstinfo=awaittransporter.sendMail(message);console.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));// ‚Üí https://ethereal.email/message/WaQKMgKddxQDoou\nYou can also openMessages¬†‚Üí Inboxin Ethereal‚Äôs dashboard and browse around.\nBelow is what a captured message looks like in the Ethereal UI.\nQuick‚Äëstart1. Spin up a throw‚Äëaway Ethereal account2. Switch transports per environment3. Inspect the message\n1. Spin up a throw‚Äëaway Ethereal account\n2. Switch transports per environment\n3. Inspect the message",
        "source_url": "https://nodemailer.com/smtp/testing",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 455
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": ". Inspect the message",
        "source_url": "https://nodemailer.com/smtp/testing",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 5
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transportSMTP envelopePooled SMTP ConnectionsTesting SMTPOAuth2Well-Known ServicesCustom authenticationProxy supportDelivery Status Notifications (DSN)\nSMTP envelope\nPooled SMTP Connections\nTesting SMTP\nOAuth2\nWell-Known Services\nCustom authentication\nProxy support\nDelivery Status Notifications (DSN)\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nSMTP transport\nTesting SMTP\nTesting SMTP\nWhen you need to exercise the email‚Äësending paths of your application in a development or continuous‚Äëintegration environment, youmust notaccidentally spam real inboxes. Instead of routing all mail to a single hard‚Äëcoded test address, point your code at amail‚Äëcatcherservice: it accepts messages over SMTP exactly like a production provider, butneverdelivers them. It just stores the messages so that you can open or download them later.\nNodemailer ships with first‚Äëclass support forEthereal Email‚Äî a free, open‚Äësource mail‚Äëcatcher designed for test environments. You can either\nprovision an account on the flywithcreateTestAccount, or\ncreateTestAccount\ncreate a persistent test mailboxfrom the Ethereal dashboard.\nIf you would rather stay completely offline you can preview messages locally withforwardemail/email‚Äëtemplates(it renders every message in your browser and iOS simulator viapreview-email).\nQuick‚Äëstart‚Äã\nInstall Nodemailer if you have not done so yet:\nnpm install nodemailer\nnpm install nodemailer\n1. Spin up a throw‚Äëaway Ethereal account‚Äã\n// ./mail.jsconstnodemailer=require(\"nodemailer\");nodemailer.createTestAccount((err,account)=>{if(err){console.error(\"Failed to create a testing account. \"+err.message);return;}// 1Ô∏è‚É£  Configure a transporter that talks to Etherealconsttransporter=nodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,// upgrade later with STARTTLSauth:{user:account.user,// generated userpass:account.pass,// generated password},});// 2Ô∏è‚É£  Send a messagetransporter.sendMail({from:\"Example app <no-reply@example.com>\",to:\"user@example.com\",subject:\"Hello from tests ‚úî\",text:\"This message was sent from a Node.js integration test.\",}).then((info)=>{console.log(\"Message sent:",
        "source_url": "https://nodemailer.com/smtp/testing#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "Mail({from:\"Example app <no-reply@example.com>\",to:\"user@example.com\",subject:\"Hello from tests ‚úî\",text:\"This message was sent from a Node.js integration test.\",}).then((info)=>{console.log(\"Message sent: %s\",info.messageId);// Preview the stored message in Ethereal‚Äôs web UIconsole.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));}).catch(console.error);});\n// ./mail.jsconstnodemailer=require(\"nodemailer\");nodemailer.createTestAccount((err,account)=>{if(err){console.error(\"Failed to create a testing account. \"+err.message);return;}// 1Ô∏è‚É£  Configure a transporter that talks to Etherealconsttransporter=nodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,// upgrade later with STARTTLSauth:{user:account.user,// generated userpass:account.pass,// generated password},});// 2Ô∏è‚É£  Send a messagetransporter.sendMail({from:\"Example app <no-reply@example.com>\",to:\"user@example.com\",subject:\"Hello from tests ‚úî\",text:\"This message was sent from a Node.js integration test.\",}).then((info)=>{console.log(\"Message sent: %s\",info.messageId);// Preview the stored message in Ethereal‚Äôs web UIconsole.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));}).catch(console.error);});\nEthereal automatically deletes an account after48¬†hours of inactivity. Save the generated credentials somewhere if you want to inspect the messages later via the dashboard.\n2. Switch transports per environment‚Äã\nYou only need one place in your code base that knows which SMTP credentials to use. Everything else just callscreateTransport().\ncreateTransport()\n// ./mail‚Äëtransport.jsconstnodemailer=require(\"nodemailer\");functioncreateTransport(){if(process.env.NODE_ENV===\"production\"){// üöÄ  Real emailsreturnnodemailer.createTransport({host:\"smtp.sendgrid.net\",port:587,secure:false,auth:{user:process.env.SMTP_USERNAME,pass:process.env.SMTP_PASSWORD,},});}// üß™  Captured by Etherealreturnnodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,auth:{user:process.env.ETHEREAL_USERNAME,pass:process.env.ETHEREAL_PASSWORD,},});}module.exports=createTransport;\n",
        "source_url": "https://nodemailer.com/smtp/testing#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "returnnodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,auth:{user:process.env.ETHEREAL_USERNAME,pass:process.env.ETHEREAL_PASSWORD,},});}module.exports=createTransport;\n// ./mail‚Äëtransport.jsconstnodemailer=require(\"nodemailer\");functioncreateTransport(){if(process.env.NODE_ENV===\"production\"){// üöÄ  Real emailsreturnnodemailer.createTransport({host:\"smtp.sendgrid.net\",port:587,secure:false,auth:{user:process.env.SMTP_USERNAME,pass:process.env.SMTP_PASSWORD,},});}// üß™  Captured by Etherealreturnnodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,auth:{user:process.env.ETHEREAL_USERNAME,pass:process.env.ETHEREAL_PASSWORD,},});}module.exports=createTransport;\nYour application code can treat the transporter as a black box:\nconstcreateTransport=require('./mail-transport');consttransporter=createTransport();awaittransporter.sendMail({...});\nconstcreateTransport=require('./mail-transport');consttransporter=createTransport();awaittransporter.sendMail({...});\n3. Inspect the message‚Äã\nWhensendMailresolves (or its callback fires), the returnedinfoobject contains everything you need to locate the message inside Ethereal:\nsendMail\ninfo\nconstinfo=awaittransporter.sendMail(message);console.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));// ‚Üí https://ethereal.email/message/WaQKMgKddxQDoou\nconstinfo=awaittransporter.sendMail(message);console.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));// ‚Üí https://ethereal.email/message/WaQKMgKddxQDoou\nYou can also openMessages¬†‚Üí Inboxin Ethereal‚Äôs dashboard and browse around.\nBelow is what a captured message looks like in the Ethereal UI.\nQuick‚Äëstart1. Spin up a throw‚Äëaway Ethereal account2. Switch transports per environment3. Inspect the message\n1. Spin up a throw‚Äëaway Ethereal account\n2. Switch transports per environment\n3. Inspect the message",
        "source_url": "https://nodemailer.com/smtp/testing#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 455
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": ". Inspect the message",
        "source_url": "https://nodemailer.com/smtp/testing#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 5
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transportSMTP envelopePooled SMTP ConnectionsTesting SMTPOAuth2Well-Known ServicesCustom authenticationProxy supportDelivery Status Notifications (DSN)\nSMTP envelope\nPooled SMTP Connections\nTesting SMTP\nOAuth2\nWell-Known Services\nCustom authentication\nProxy support\nDelivery Status Notifications (DSN)\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nSMTP transport\nOAuth2\nOAuth2\nOAuth2 lets your application use short‚Äëlived access tokens instead of passwords. Tokens are scoped, revocable, and regenerable, so a leaked token causes far less harm than a leaked password.\nProvider‚Äëagnostic OAuth2 authentication\nGmail‚Äëspecific helpers\nManaging OAuth2 app credentials is painful. LetEmailEnginehandle them for you. Once an account is registered with EmailEngine, you can point Nodemailer to EmailEngine and skip all authentication completely. Read morehere.\nProvider‚Äëagnostic OAuth2 authentication‚Äã\nUse this method when the SMTP server accepts a plain username + access token pair. No client secrets or refresh tokens are involved.\nauth‚Äì authentication objecttype‚Äì'OAuth2'user‚Äì e‚Äëmail address (required)accessToken‚Äì access token (required)expires‚Äì UNIX timestamp whenaccessTokenexpires (optional)\nauth‚Äì authentication object\ntype‚Äì'OAuth2'\n'OAuth2'\nuser‚Äì e‚Äëmail address (required)\naccessToken‚Äì access token (required)\nexpires‚Äì UNIX timestamp whenaccessTokenexpires (optional)\nToken scopes‚Ä¢ Gmail ‚Äì request the token with thehttps://mail.google.com/scope\n‚Ä¢ Outlook ‚Äì request the token with thehttps://outlook.office.com/SMTP.Sendscope\nhttps://mail.google.com/\nhttps://outlook.office.com/SMTP.Send\nlettransporter=nodemailer.createTransport({host:\"smtp.gmail.com\",port:465,secure:true,auth:{type:\"OAuth2\",user:\"user@example.com\",accessToken:\"ya29.Xx_XX0xxxxx-xX0X0XxXXxXxXXXxX0x\",},});\nlettransporter=nodemailer.createTransport({host:\"smtp.gmail.com\",port:465,secure:true,auth:{type:\"OAuth2\",user:\"user@example.com\",accessToken:\"ya29.Xx_XX0xxxxx-xX0X0XxXXxXxXXXxX0x\",},});\nNormal (non",
        "source_url": "https://nodemailer.com/smtp/oauth2",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": ",secure:true,auth:{type:\"OAuth2\",user:\"user@example.com\",accessToken:\"ya29.Xx_XX0xxxxx-xX0X0XxXXxXxXXXxX0x\",},});\nNormal (non‚Äëpooled) transports can overrideauthper‚Äëmessage. Create the transport once and pass different tokens insendMailoptions as needed.\nGmail‚Äëspecific helpers‚Äã\nThe sections below cover Gmail‚Äëonly flows that Nodemailer can automate for you.\nYour app requests consent from the user and receives arefreshToken. Nodemailer uses this token to generate freshaccessTokens when needed.\nauth‚Äì authentication objecttype‚Äì'OAuth2'user‚Äì e‚Äëmail address (required)clientId‚Äì OAuth2 client ID (required)clientSecret‚Äì OAuth2 client secret (required)refreshToken‚Äì refresh token (required)accessToken‚Äì access token (optional; Nodemailer auto‚Äërefreshes if missing or expired)expires‚Äì UNIX expiration timestamp foraccessToken(optional)accessUrl‚Äì custom token endpoint (optional; defaults to Gmail)\nauth‚Äì authentication object\ntype‚Äì'OAuth2'\n'OAuth2'\nuser‚Äì e‚Äëmail address (required)\nclientId‚Äì OAuth2 client ID (required)\nclientSecret‚Äì OAuth2 client secret (required)\nrefreshToken‚Äì refresh token (required)\naccessToken‚Äì access token (optional; Nodemailer auto‚Äërefreshes if missing or expired)\nexpires‚Äì UNIX expiration timestamp foraccessToken(optional)\naccessUrl‚Äì custom token endpoint (optional; defaults to Gmail)\nUse a Google service account to impersonate a user. No interactive consent is required.\nauth‚Äì authentication objecttype‚Äì'OAuth2'user‚Äì e‚Äëmail address to send as (required)serviceClient‚Äì service accountclient_id(required)privateKey‚Äì service account private key (required)\nauth‚Äì authentication object\ntype‚Äì'OAuth2'\n'OAuth2'\nuser‚Äì e‚Äëmail address to send as (required)\nserviceClient‚Äì service accountclient_id(required)\nprivateKey‚Äì service account private key (required)\nRegister anoauth2_provision_cbcallback that returns a token whenever Nodemailer needs one.\noauth2_provision_cb\ntransporter.set(\"oauth2_provision_cb\",(user,renew,cb)=>{consttoken=userTokens[user];if(!token)returncb(newError(\"Unknown user\"));cb(null,token);});\ntransporter.set(\"oauth2_provision_cb\",(user,renew,cb)=>{consttoken=userTokens[user];if(!",
        "source_url": "https://nodemailer.com/smtp/oauth2",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": ")=>{consttoken=userTokens[user];if(!token)returncb(newError(\"Unknown user\"));cb(null,token);});\ntransporter.set(\"oauth2_provision_cb\",(user,renew,cb)=>{consttoken=userTokens[user];if(!token)returncb(newError(\"Unknown user\"));cb(null,token);});\nListen for thetokenevent to persist newly generated tokens.\ntoken\ntransporter.on(\"token\",(t)=>{console.log(\"User:\",t.user);console.log(\"New access token:\",t.accessToken);console.log(\"Expires at:\",newDate(t.expires));});\ntransporter.on(\"token\",(t)=>{console.log(\"User:\",t.user);console.log(\"New access token:\",t.accessToken);console.log(\"Expires at:\",newDate(t.expires));});\nAuthenticate with an existing token\nlettransporter=nodemailer.createTransport({host:\"smtp.gmail.com\",port:465,secure:true,auth:{type:\"OAuth2\",user:\"user@example.com\",accessToken:\"ya29.Xx_XX0xxxxx-xX0X0XxXXxXxXXXxX0x\",},});\nlettransporter=nodemailer.createTransport({host:\"smtp.gmail.com\",port:465,secure:true,auth:{type:\"OAuth2\",user:\"user@example.com\",accessToken:\"ya29.Xx_XX0xxxxx-xX0X0XxXXxXxXXXxX0x\",},});\nCustom handler‚Äì token returned by your own service\nlettransporter=nodemailer.createTransport({host:\"smtp.gmail.com\",port:465,secure:true,auth:{type:\"OAuth2\",user:\"user@example.com\"},});transporter.set(\"oauth2_provision_cb\",(user,renew,cb)=>{cb(null,userTokens[user]);});\nlettransporter=nodemailer.createTransport({host:\"smtp.gmail.com\",port:465,secure:true,auth:{type:\"OAuth2\",user:\"user@example.com\"},});transporter.set(\"oauth2_provision_cb\",(user,renew,cb)=>{cb(null,userTokens[user]);});\nFull 3‚Äëlegged setup‚Äì Nodemailer refreshes tokens automatically\nlettransporter=nodemailer.createTransport({host:\"smtp.gmail.com\",port:465,secure:true,auth:{type:\"OAuth2\",user:\"user@example.com\",clientId:\"000000000000-xxx.apps.googleusercontent.com\",clientSecret:\"XxxxxXXxX0xxxxxxxx0XXxX",
        "source_url": "https://nodemailer.com/smtp/oauth2",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": ".gmail.com\",port:465,secure:true,auth:{type:\"OAuth2\",user:\"user@example.com\",clientId:\"000000000000-xxx.apps.googleusercontent.com\",clientSecret:\"XxxxxXXxX0xxxxxxxx0XXxX0\",refreshToken:\"1/XXxXxsss-xxxXXXXXxXxx0XXXxxXXx0x00xxx\",accessToken:\"ya29.Xx_XX0xxxxx-xX0X0XxXXxXxXXXxX0x\",expires:1484314697598,},});\nlettransporter=nodemailer.createTransport({host:\"smtp.gmail.com\",port:465,secure:true,auth:{type:\"OAuth2\",user:\"user@example.com\",clientId:\"000000000000-xxx.apps.googleusercontent.com\",clientSecret:\"XxxxxXXxX0xxxxxxxx0XXxX0\",refreshToken:\"1/XXxXxsss-xxxXXXXXxXxx0XXXxxXXx0x00xxx\",accessToken:\"ya29.Xx_XX0xxxxx-xX0X0XxXXxXxXXXxX0x\",expires:1484314697598,},});\nService account‚Äì token re‚Äëgenerated via 2LO\nlettransporter=nodemailer.createTransport({host:\"smtp.gmail.com\",port:465,secure:true,auth:{type:\"OAuth2\",user:\"user@example.com\",serviceClient:\"113600000000000000000\",privateKey:\"-----BEGIN PRIVATE KEY-----\\nMIIEvgIBADANBg...\",accessToken:\"ya29.Xx_XX0xxxxx-xX0X0XxXXxXxXXXxX0x\",expires:1484314697598,},});\nlettransporter=nodemailer.createTransport({host:\"smtp.gmail.com\",port:465,secure:true,auth:{type:\"OAuth2\",user:\"user@example.com\",serviceClient:\"113600000000000000000\",privateKey:\"-----BEGIN PRIVATE KEY-----\\nMIIEvgIBADANBg...\",accessToken:\"ya29.Xx_XX0xxxxx-xX0X0XxXXxXxXXXxX0x\",expires:1484314697598,},});\nPer‚Äëmessage auth‚Äì single transport, many users\nlettransporter=nodemailer.createTransport({host:\"smtp.gmail.com\",port:465,secure:true,auth:{type:\"OAuth",
        "source_url": "https://nodemailer.com/smtp/oauth2",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": "x\",expires:1484314697598,},});\nPer‚Äëmessage auth‚Äì single transport, many users\nlettransporter=nodemailer.createTransport({host:\"smtp.gmail.com\",port:465,secure:true,auth:{type:\"OAuth2\",clientId:\"000000000000-xxx.apps.googleusercontent.com\",clientSecret:\"XxxxxXXxX0xxxxxxxx0XXxX0\",},});transporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Message\",text:\"I hope this message gets through!\",auth:{user:\"user@example.com\",refreshToken:\"1/XXxXxsss-xxxXXXXXxXxx0XXXxxXXx0x00xxx\",accessToken:\"ya29.Xx_XX0xxxxx-xX0X0XxXXxXxXXXxX0x\",expires:1484314697598,},});\nlettransporter=nodemailer.createTransport({host:\"smtp.gmail.com\",port:465,secure:true,auth:{type:\"OAuth2\",clientId:\"000000000000-xxx.apps.googleusercontent.com\",clientSecret:\"XxxxxXXxX0xxxxxxxx0XXxX0\",},});transporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Message\",text:\"I hope this message gets through!\",auth:{user:\"user@example.com\",refreshToken:\"1/XXxXxsss-xxxXXXXXxXxx0XXXxxXXx0x00xxx\",accessToken:\"ya29.Xx_XX0xxxxx-xX0X0XxXXxXxXXXxX0x\",expires:1484314697598,},});\nPer‚Äëmessage auth does not work with pooled transports.\nGmail SMTP requires thehttps://mail.google.com/scope ‚Äì ensure your token has it.\nhttps://mail.google.com/\nGmail API access must be enabled for your Client ID in Google API Manager.\nProvider‚Äëagnostic OAuth2 authentication\nGmail‚Äëspecific helpers",
        "source_url": "https://nodemailer.com/smtp/oauth2",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 413
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transportSMTP envelopePooled SMTP ConnectionsTesting SMTPOAuth2Well-Known ServicesCustom authenticationProxy supportDelivery Status Notifications (DSN)\nSMTP envelope\nPooled SMTP Connections\nTesting SMTP\nOAuth2\nWell-Known Services\nCustom authentication\nProxy support\nDelivery Status Notifications (DSN)\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nSMTP transport\nOAuth2\nOAuth2\nOAuth2 lets your application use short‚Äëlived access tokens instead of passwords. Tokens are scoped, revocable, and regenerable, so a leaked token causes far less harm than a leaked password.\nProvider‚Äëagnostic OAuth2 authentication\nGmail‚Äëspecific helpers\nManaging OAuth2 app credentials is painful. LetEmailEnginehandle them for you. Once an account is registered with EmailEngine, you can point Nodemailer to EmailEngine and skip all authentication completely. Read morehere.\nProvider‚Äëagnostic OAuth2 authentication‚Äã\nUse this method when the SMTP server accepts a plain username + access token pair. No client secrets or refresh tokens are involved.\nauth‚Äì authentication objecttype‚Äì'OAuth2'user‚Äì e‚Äëmail address (required)accessToken‚Äì access token (required)expires‚Äì UNIX timestamp whenaccessTokenexpires (optional)\nauth‚Äì authentication object\ntype‚Äì'OAuth2'\n'OAuth2'\nuser‚Äì e‚Äëmail address (required)\naccessToken‚Äì access token (required)\nexpires‚Äì UNIX timestamp whenaccessTokenexpires (optional)\nToken scopes‚Ä¢ Gmail ‚Äì request the token with thehttps://mail.google.com/scope\n‚Ä¢ Outlook ‚Äì request the token with thehttps://outlook.office.com/SMTP.Sendscope\nhttps://mail.google.com/\nhttps://outlook.office.com/SMTP.Send\nlettransporter=nodemailer.createTransport({host:\"smtp.gmail.com\",port:465,secure:true,auth:{type:\"OAuth2\",user:\"user@example.com\",accessToken:\"ya29.Xx_XX0xxxxx-xX0X0XxXXxXxXXXxX0x\",},});\nlettransporter=nodemailer.createTransport({host:\"smtp.gmail.com\",port:465,secure:true,auth:{type:\"OAuth2\",user:\"user@example.com\",accessToken:\"ya29.Xx_XX0xxxxx-xX0X0XxXXxXxXXXxX0x\",},});\nNormal (non",
        "source_url": "https://nodemailer.com/smtp/oauth2#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": ",secure:true,auth:{type:\"OAuth2\",user:\"user@example.com\",accessToken:\"ya29.Xx_XX0xxxxx-xX0X0XxXXxXxXXXxX0x\",},});\nNormal (non‚Äëpooled) transports can overrideauthper‚Äëmessage. Create the transport once and pass different tokens insendMailoptions as needed.\nGmail‚Äëspecific helpers‚Äã\nThe sections below cover Gmail‚Äëonly flows that Nodemailer can automate for you.\nYour app requests consent from the user and receives arefreshToken. Nodemailer uses this token to generate freshaccessTokens when needed.\nauth‚Äì authentication objecttype‚Äì'OAuth2'user‚Äì e‚Äëmail address (required)clientId‚Äì OAuth2 client ID (required)clientSecret‚Äì OAuth2 client secret (required)refreshToken‚Äì refresh token (required)accessToken‚Äì access token (optional; Nodemailer auto‚Äërefreshes if missing or expired)expires‚Äì UNIX expiration timestamp foraccessToken(optional)accessUrl‚Äì custom token endpoint (optional; defaults to Gmail)\nauth‚Äì authentication object\ntype‚Äì'OAuth2'\n'OAuth2'\nuser‚Äì e‚Äëmail address (required)\nclientId‚Äì OAuth2 client ID (required)\nclientSecret‚Äì OAuth2 client secret (required)\nrefreshToken‚Äì refresh token (required)\naccessToken‚Äì access token (optional; Nodemailer auto‚Äërefreshes if missing or expired)\nexpires‚Äì UNIX expiration timestamp foraccessToken(optional)\naccessUrl‚Äì custom token endpoint (optional; defaults to Gmail)\nUse a Google service account to impersonate a user. No interactive consent is required.\nauth‚Äì authentication objecttype‚Äì'OAuth2'user‚Äì e‚Äëmail address to send as (required)serviceClient‚Äì service accountclient_id(required)privateKey‚Äì service account private key (required)\nauth‚Äì authentication object\ntype‚Äì'OAuth2'\n'OAuth2'\nuser‚Äì e‚Äëmail address to send as (required)\nserviceClient‚Äì service accountclient_id(required)\nprivateKey‚Äì service account private key (required)\nRegister anoauth2_provision_cbcallback that returns a token whenever Nodemailer needs one.\noauth2_provision_cb\ntransporter.set(\"oauth2_provision_cb\",(user,renew,cb)=>{consttoken=userTokens[user];if(!token)returncb(newError(\"Unknown user\"));cb(null,token);});\ntransporter.set(\"oauth2_provision_cb\",(user,renew,cb)=>{consttoken=userTokens[user];if(!",
        "source_url": "https://nodemailer.com/smtp/oauth2#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": ")=>{consttoken=userTokens[user];if(!token)returncb(newError(\"Unknown user\"));cb(null,token);});\ntransporter.set(\"oauth2_provision_cb\",(user,renew,cb)=>{consttoken=userTokens[user];if(!token)returncb(newError(\"Unknown user\"));cb(null,token);});\nListen for thetokenevent to persist newly generated tokens.\ntoken\ntransporter.on(\"token\",(t)=>{console.log(\"User:\",t.user);console.log(\"New access token:\",t.accessToken);console.log(\"Expires at:\",newDate(t.expires));});\ntransporter.on(\"token\",(t)=>{console.log(\"User:\",t.user);console.log(\"New access token:\",t.accessToken);console.log(\"Expires at:\",newDate(t.expires));});\nAuthenticate with an existing token\nlettransporter=nodemailer.createTransport({host:\"smtp.gmail.com\",port:465,secure:true,auth:{type:\"OAuth2\",user:\"user@example.com\",accessToken:\"ya29.Xx_XX0xxxxx-xX0X0XxXXxXxXXXxX0x\",},});\nlettransporter=nodemailer.createTransport({host:\"smtp.gmail.com\",port:465,secure:true,auth:{type:\"OAuth2\",user:\"user@example.com\",accessToken:\"ya29.Xx_XX0xxxxx-xX0X0XxXXxXxXXXxX0x\",},});\nCustom handler‚Äì token returned by your own service\nlettransporter=nodemailer.createTransport({host:\"smtp.gmail.com\",port:465,secure:true,auth:{type:\"OAuth2\",user:\"user@example.com\"},});transporter.set(\"oauth2_provision_cb\",(user,renew,cb)=>{cb(null,userTokens[user]);});\nlettransporter=nodemailer.createTransport({host:\"smtp.gmail.com\",port:465,secure:true,auth:{type:\"OAuth2\",user:\"user@example.com\"},});transporter.set(\"oauth2_provision_cb\",(user,renew,cb)=>{cb(null,userTokens[user]);});\nFull 3‚Äëlegged setup‚Äì Nodemailer refreshes tokens automatically\nlettransporter=nodemailer.createTransport({host:\"smtp.gmail.com\",port:465,secure:true,auth:{type:\"OAuth2\",user:\"user@example.com\",clientId:\"000000000000-xxx.apps.googleusercontent.com\",clientSecret:\"XxxxxXXxX0xxxxxxxx0XXxX",
        "source_url": "https://nodemailer.com/smtp/oauth2#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": ".gmail.com\",port:465,secure:true,auth:{type:\"OAuth2\",user:\"user@example.com\",clientId:\"000000000000-xxx.apps.googleusercontent.com\",clientSecret:\"XxxxxXXxX0xxxxxxxx0XXxX0\",refreshToken:\"1/XXxXxsss-xxxXXXXXxXxx0XXXxxXXx0x00xxx\",accessToken:\"ya29.Xx_XX0xxxxx-xX0X0XxXXxXxXXXxX0x\",expires:1484314697598,},});\nlettransporter=nodemailer.createTransport({host:\"smtp.gmail.com\",port:465,secure:true,auth:{type:\"OAuth2\",user:\"user@example.com\",clientId:\"000000000000-xxx.apps.googleusercontent.com\",clientSecret:\"XxxxxXXxX0xxxxxxxx0XXxX0\",refreshToken:\"1/XXxXxsss-xxxXXXXXxXxx0XXXxxXXx0x00xxx\",accessToken:\"ya29.Xx_XX0xxxxx-xX0X0XxXXxXxXXXxX0x\",expires:1484314697598,},});\nService account‚Äì token re‚Äëgenerated via 2LO\nlettransporter=nodemailer.createTransport({host:\"smtp.gmail.com\",port:465,secure:true,auth:{type:\"OAuth2\",user:\"user@example.com\",serviceClient:\"113600000000000000000\",privateKey:\"-----BEGIN PRIVATE KEY-----\\nMIIEvgIBADANBg...\",accessToken:\"ya29.Xx_XX0xxxxx-xX0X0XxXXxXxXXXxX0x\",expires:1484314697598,},});\nlettransporter=nodemailer.createTransport({host:\"smtp.gmail.com\",port:465,secure:true,auth:{type:\"OAuth2\",user:\"user@example.com\",serviceClient:\"113600000000000000000\",privateKey:\"-----BEGIN PRIVATE KEY-----\\nMIIEvgIBADANBg...\",accessToken:\"ya29.Xx_XX0xxxxx-xX0X0XxXXxXxXXXxX0x\",expires:1484314697598,},});\nPer‚Äëmessage auth‚Äì single transport, many users\nlettransporter=nodemailer.createTransport({host:\"smtp.gmail.com\",port:465,secure:true,auth:{type:\"OAuth",
        "source_url": "https://nodemailer.com/smtp/oauth2#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": "x\",expires:1484314697598,},});\nPer‚Äëmessage auth‚Äì single transport, many users\nlettransporter=nodemailer.createTransport({host:\"smtp.gmail.com\",port:465,secure:true,auth:{type:\"OAuth2\",clientId:\"000000000000-xxx.apps.googleusercontent.com\",clientSecret:\"XxxxxXXxX0xxxxxxxx0XXxX0\",},});transporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Message\",text:\"I hope this message gets through!\",auth:{user:\"user@example.com\",refreshToken:\"1/XXxXxsss-xxxXXXXXxXxx0XXXxxXXx0x00xxx\",accessToken:\"ya29.Xx_XX0xxxxx-xX0X0XxXXxXxXXXxX0x\",expires:1484314697598,},});\nlettransporter=nodemailer.createTransport({host:\"smtp.gmail.com\",port:465,secure:true,auth:{type:\"OAuth2\",clientId:\"000000000000-xxx.apps.googleusercontent.com\",clientSecret:\"XxxxxXXxX0xxxxxxxx0XXxX0\",},});transporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Message\",text:\"I hope this message gets through!\",auth:{user:\"user@example.com\",refreshToken:\"1/XXxXxsss-xxxXXXXXxXxx0XXXxxXXx0x00xxx\",accessToken:\"ya29.Xx_XX0xxxxx-xX0X0XxXXxXxXXXxX0x\",expires:1484314697598,},});\nPer‚Äëmessage auth does not work with pooled transports.\nGmail SMTP requires thehttps://mail.google.com/scope ‚Äì ensure your token has it.\nhttps://mail.google.com/\nGmail API access must be enabled for your Client ID in Google API Manager.\nProvider‚Äëagnostic OAuth2 authentication\nGmail‚Äëspecific helpers",
        "source_url": "https://nodemailer.com/smtp/oauth2#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 413
    },
    {
        "chunk_id": "Nodemailer",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transportSMTP envelopePooled SMTP ConnectionsTesting SMTPOAuth2Well-Known ServicesCustom authenticationProxy supportDelivery Status Notifications (DSN)\nSMTP envelope\nPooled SMTP Connections\nTesting SMTP\nOAuth2\nWell-Known Services\nCustom authentication\nProxy support\nDelivery Status Notifications (DSN)\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nSMTP transport\nWell-Known Services\nWell-Known Services\nNodemailer ships with connection presets for many popular SMTP providers.\nInstead of looking up each provider‚Äôs SMTP host name, port and security settings\nyou can pass a singleservicestring when you create a transport.\nNodemailer will fill in the rest for you.\nservice\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({service:\"Gmail\",// any id from the table below, case insensitiveauth:{user:process.env.SMTP_USER,pass:process.env.SMTP_PASS,},});\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({service:\"Gmail\",// any id from the table below, case insensitiveauth:{user:process.env.SMTP_USER,pass:process.env.SMTP_PASS,},});\nInternallyserviceis just a shortcut ‚Äì you can always supplyhost,port,secureand other options yourself. If something changes or your provider is\nmissing you can open a pull‚Äërequest against theservices.jsonfile\nor bypass this feature entirely and set the connection details manually.\nservice\nhost\nport\nsecure\nMost major providers require OAuth‚ÄØ2 or application‚Äëspecific\npasswords. The presets only configure the server connection; you are still\nresponsible for using the correct authentication mechanism.\nList of built‚Äëin services‚Äã\nList of built‚Äëin services",
        "source_url": "https://nodemailer.com/smtp/well-known-services",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 383
    },
    {
        "chunk_id": "Nodemailer",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transportSMTP envelopePooled SMTP ConnectionsTesting SMTPOAuth2Well-Known ServicesCustom authenticationProxy supportDelivery Status Notifications (DSN)\nSMTP envelope\nPooled SMTP Connections\nTesting SMTP\nOAuth2\nWell-Known Services\nCustom authentication\nProxy support\nDelivery Status Notifications (DSN)\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nSMTP transport\nWell-Known Services\nWell-Known Services\nNodemailer ships with connection presets for many popular SMTP providers.\nInstead of looking up each provider‚Äôs SMTP host name, port and security settings\nyou can pass a singleservicestring when you create a transport.\nNodemailer will fill in the rest for you.\nservice\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({service:\"Gmail\",// any id from the table below, case insensitiveauth:{user:process.env.SMTP_USER,pass:process.env.SMTP_PASS,},});\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({service:\"Gmail\",// any id from the table below, case insensitiveauth:{user:process.env.SMTP_USER,pass:process.env.SMTP_PASS,},});\nInternallyserviceis just a shortcut ‚Äì you can always supplyhost,port,secureand other options yourself. If something changes or your provider is\nmissing you can open a pull‚Äërequest against theservices.jsonfile\nor bypass this feature entirely and set the connection details manually.\nservice\nhost\nport\nsecure\nMost major providers require OAuth‚ÄØ2 or application‚Äëspecific\npasswords. The presets only configure the server connection; you are still\nresponsible for using the correct authentication mechanism.\nList of built‚Äëin services‚Äã\nList of built‚Äëin services",
        "source_url": "https://nodemailer.com/smtp/well-known-services#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 383
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transportSMTP envelopePooled SMTP ConnectionsTesting SMTPOAuth2Well-Known ServicesCustom authenticationProxy supportDelivery Status Notifications (DSN)\nSMTP envelope\nPooled SMTP Connections\nTesting SMTP\nOAuth2\nWell-Known Services\nCustom authentication\nProxy support\nDelivery Status Notifications (DSN)\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nSMTP transport\nCustom authentication\nCustom authentication\nNodemailer‚Äôs SMTP transport can be extended withcustom authentication mechanismsthat are not supported out¬†of¬†the box.\nWhen do I need a custom handler?‚Äã\nIf the server advertises an authentication keyword that Nodemailer does not recognise, you need to teach Nodemailer how to complete the exchange.¬†For example, when the server replies with:\n250‚ÄëAUTH LOGIN PLAIN MY‚ÄëCUSTOM‚ÄëMETHOD\n250‚ÄëAUTH LOGIN PLAIN MY‚ÄëCUSTOM‚ÄëMETHOD\nNodemailer already understandsLOGINandPLAIN, but has no idea whatMY‚ÄëCUSTOM‚ÄëMETHODis. By providing a handler named exactly after that keyword you enable Nodemailer to use it.\nIf several mechanisms are available you canforceNodemailer to use yours by settingauth.methodto the same identifier.\nauth.method\nDefining a handler‚Äã\nAdd acustomAuthmap to the transporter options. Each key is the mechanism name and each value is a function that performs the exchange.\ncustomAuth\nconstnodemailer=require(\"nodemailer\");asyncfunctionmyCustomMethod(ctx){// Build and send a single AUTH command (dummy example ‚Äì adapt to your spec)constresponse=awaitctx.sendCommand(\"AUTH MY-CUSTOM-METHOD \"+Buffer.from(ctx.auth.credentials.pass).toString(\"base64\"));// Check server replyif(response.status<200||response.status>=300){thrownewError(\"Authentication failed: \"+response.text);}}consttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,auth:{type:\"custom\",// tells Nodemailer we are using a custom handlermethod:\"MY-CUSTOM-METHOD\",// forces this exact mechanismuser:\"username\",pass:\"verysecret\",},customAuth:{\"MY-CUSTOM-METHOD\":myCustomMethod,},});\nconstnodemailer=require(\"nodemailer\");asyncfunctionmyCustomMethod(ctx){// Build and send a single AUTH command (dummy example ‚Äì adapt to your spec)constresponse=await",
        "source_url": "https://nodemailer.com/smtp/customauth",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "customAuth:{\"MY-CUSTOM-METHOD\":myCustomMethod,},});\nconstnodemailer=require(\"nodemailer\");asyncfunctionmyCustomMethod(ctx){// Build and send a single AUTH command (dummy example ‚Äì adapt to your spec)constresponse=awaitctx.sendCommand(\"AUTH MY-CUSTOM-METHOD \"+Buffer.from(ctx.auth.credentials.pass).toString(\"base64\"));// Check server replyif(response.status<200||response.status>=300){thrownewError(\"Authentication failed: \"+response.text);}}consttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,auth:{type:\"custom\",// tells Nodemailer we are using a custom handlermethod:\"MY-CUSTOM-METHOD\",// forces this exact mechanismuser:\"username\",pass:\"verysecret\",},customAuth:{\"MY-CUSTOM-METHOD\":myCustomMethod,},});\nHandler signature‚Äã\n(ctx:HandlerContext)=>Promise<void>|void\n(ctx:HandlerContext)=>Promise<void>|void\nYou get acontext object(ctx) and you either:\nctx\nreturn a Promise that resolves on success or rejects on error,or\ncallctx.resolve()/ctx.reject(err)manually.\nctx.resolve()\nctx.reject(err)\nctx.auth‚Äã\nctx.auth\nctx.auth‚Äì the fullauthobject you passed tocreateTransport()\nctx.auth\nauth\ncreateTransport()\nctx.auth.credentials‚Äì convenient alias for{ user, pass, options }\nctx.auth.credentials\n{ user, pass, options }\nctx.sendCommand(command)‚Äã\nctx.sendCommand(command)\nSends a raw SMTP command and returns a Promise with the parsed reply:\nstatus\n235\ncode\n2.7.0\ntext\nresponse\n235 2.7.0 Authentication successful\nA callback style is also supported:ctx.sendCommand(cmd, (err, info) => { ‚Ä¶ }).\nctx.sendCommand(cmd, (err, info) => { ‚Ä¶ })\nPassing additional parameters‚Äã\nNeed more thanuserandpass? Add anoptionsobject ‚Äì it will be available viactx.auth.credentials.options.\noptions\nctx.auth.credentials.options\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,auth:{type:\"custom\",method:\"MY-CUSTOM-METHOD\",user:\"username\",pass:\"verysecret\",options:{clientId:\"verysecret\",applicationId:\"my-app\",},},customAuth:{\"MY-CUSTOM-METHOD\":async(ctx)=>{consttoken=",
        "source_url": "https://nodemailer.com/smtp/customauth",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "\",method:\"MY-CUSTOM-METHOD\",user:\"username\",pass:\"verysecret\",options:{clientId:\"verysecret\",applicationId:\"my-app\",},},customAuth:{\"MY-CUSTOM-METHOD\":async(ctx)=>{consttoken=awaitgenerateSecretTokenSomehow(ctx.auth.credentials.options.clientId,ctx.auth.credentials.options.applicationId);awaitctx.sendCommand(\"AUTH MY-CUSTOM-METHOD \"+token);},},});\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,auth:{type:\"custom\",method:\"MY-CUSTOM-METHOD\",user:\"username\",pass:\"verysecret\",options:{clientId:\"verysecret\",applicationId:\"my-app\",},},customAuth:{\"MY-CUSTOM-METHOD\":async(ctx)=>{consttoken=awaitgenerateSecretTokenSomehow(ctx.auth.credentials.options.clientId,ctx.auth.credentials.options.applicationId);awaitctx.sendCommand(\"AUTH MY-CUSTOM-METHOD \"+token);},},});\nCommunity‚Äëprovided handlers‚Äã\nnodemailer‚Äëntlm‚Äëauth\nnodemailer‚Äëcram‚Äëmd5\nWhen do I need a custom handler?\nDefining a handlerHandler signaturectx.authctx.sendCommand(command)\nHandler signature\nctx.auth\nctx.auth\nctx.sendCommand(command)\nctx.sendCommand(command)\nPassing additional parameters\nCommunity‚Äëprovided handlers",
        "source_url": "https://nodemailer.com/smtp/customauth",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 273
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transportSMTP envelopePooled SMTP ConnectionsTesting SMTPOAuth2Well-Known ServicesCustom authenticationProxy supportDelivery Status Notifications (DSN)\nSMTP envelope\nPooled SMTP Connections\nTesting SMTP\nOAuth2\nWell-Known Services\nCustom authentication\nProxy support\nDelivery Status Notifications (DSN)\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nSMTP transport\nCustom authentication\nCustom authentication\nNodemailer‚Äôs SMTP transport can be extended withcustom authentication mechanismsthat are not supported out¬†of¬†the box.\nWhen do I need a custom handler?‚Äã\nIf the server advertises an authentication keyword that Nodemailer does not recognise, you need to teach Nodemailer how to complete the exchange.¬†For example, when the server replies with:\n250‚ÄëAUTH LOGIN PLAIN MY‚ÄëCUSTOM‚ÄëMETHOD\n250‚ÄëAUTH LOGIN PLAIN MY‚ÄëCUSTOM‚ÄëMETHOD\nNodemailer already understandsLOGINandPLAIN, but has no idea whatMY‚ÄëCUSTOM‚ÄëMETHODis. By providing a handler named exactly after that keyword you enable Nodemailer to use it.\nIf several mechanisms are available you canforceNodemailer to use yours by settingauth.methodto the same identifier.\nauth.method\nDefining a handler‚Äã\nAdd acustomAuthmap to the transporter options. Each key is the mechanism name and each value is a function that performs the exchange.\ncustomAuth\nconstnodemailer=require(\"nodemailer\");asyncfunctionmyCustomMethod(ctx){// Build and send a single AUTH command (dummy example ‚Äì adapt to your spec)constresponse=awaitctx.sendCommand(\"AUTH MY-CUSTOM-METHOD \"+Buffer.from(ctx.auth.credentials.pass).toString(\"base64\"));// Check server replyif(response.status<200||response.status>=300){thrownewError(\"Authentication failed: \"+response.text);}}consttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,auth:{type:\"custom\",// tells Nodemailer we are using a custom handlermethod:\"MY-CUSTOM-METHOD\",// forces this exact mechanismuser:\"username\",pass:\"verysecret\",},customAuth:{\"MY-CUSTOM-METHOD\":myCustomMethod,},});\nconstnodemailer=require(\"nodemailer\");asyncfunctionmyCustomMethod(ctx){// Build and send a single AUTH command (dummy example ‚Äì adapt to your spec)constresponse=await",
        "source_url": "https://nodemailer.com/smtp/customauth#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "customAuth:{\"MY-CUSTOM-METHOD\":myCustomMethod,},});\nconstnodemailer=require(\"nodemailer\");asyncfunctionmyCustomMethod(ctx){// Build and send a single AUTH command (dummy example ‚Äì adapt to your spec)constresponse=awaitctx.sendCommand(\"AUTH MY-CUSTOM-METHOD \"+Buffer.from(ctx.auth.credentials.pass).toString(\"base64\"));// Check server replyif(response.status<200||response.status>=300){thrownewError(\"Authentication failed: \"+response.text);}}consttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,auth:{type:\"custom\",// tells Nodemailer we are using a custom handlermethod:\"MY-CUSTOM-METHOD\",// forces this exact mechanismuser:\"username\",pass:\"verysecret\",},customAuth:{\"MY-CUSTOM-METHOD\":myCustomMethod,},});\nHandler signature‚Äã\n(ctx:HandlerContext)=>Promise<void>|void\n(ctx:HandlerContext)=>Promise<void>|void\nYou get acontext object(ctx) and you either:\nctx\nreturn a Promise that resolves on success or rejects on error,or\ncallctx.resolve()/ctx.reject(err)manually.\nctx.resolve()\nctx.reject(err)\nctx.auth‚Äã\nctx.auth\nctx.auth‚Äì the fullauthobject you passed tocreateTransport()\nctx.auth\nauth\ncreateTransport()\nctx.auth.credentials‚Äì convenient alias for{ user, pass, options }\nctx.auth.credentials\n{ user, pass, options }\nctx.sendCommand(command)‚Äã\nctx.sendCommand(command)\nSends a raw SMTP command and returns a Promise with the parsed reply:\nstatus\n235\ncode\n2.7.0\ntext\nresponse\n235 2.7.0 Authentication successful\nA callback style is also supported:ctx.sendCommand(cmd, (err, info) => { ‚Ä¶ }).\nctx.sendCommand(cmd, (err, info) => { ‚Ä¶ })\nPassing additional parameters‚Äã\nNeed more thanuserandpass? Add anoptionsobject ‚Äì it will be available viactx.auth.credentials.options.\noptions\nctx.auth.credentials.options\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,auth:{type:\"custom\",method:\"MY-CUSTOM-METHOD\",user:\"username\",pass:\"verysecret\",options:{clientId:\"verysecret\",applicationId:\"my-app\",},},customAuth:{\"MY-CUSTOM-METHOD\":async(ctx)=>{consttoken=",
        "source_url": "https://nodemailer.com/smtp/customauth#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "\",method:\"MY-CUSTOM-METHOD\",user:\"username\",pass:\"verysecret\",options:{clientId:\"verysecret\",applicationId:\"my-app\",},},customAuth:{\"MY-CUSTOM-METHOD\":async(ctx)=>{consttoken=awaitgenerateSecretTokenSomehow(ctx.auth.credentials.options.clientId,ctx.auth.credentials.options.applicationId);awaitctx.sendCommand(\"AUTH MY-CUSTOM-METHOD \"+token);},},});\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,auth:{type:\"custom\",method:\"MY-CUSTOM-METHOD\",user:\"username\",pass:\"verysecret\",options:{clientId:\"verysecret\",applicationId:\"my-app\",},},customAuth:{\"MY-CUSTOM-METHOD\":async(ctx)=>{consttoken=awaitgenerateSecretTokenSomehow(ctx.auth.credentials.options.clientId,ctx.auth.credentials.options.applicationId);awaitctx.sendCommand(\"AUTH MY-CUSTOM-METHOD \"+token);},},});\nCommunity‚Äëprovided handlers‚Äã\nnodemailer‚Äëntlm‚Äëauth\nnodemailer‚Äëcram‚Äëmd5\nWhen do I need a custom handler?\nDefining a handlerHandler signaturectx.authctx.sendCommand(command)\nHandler signature\nctx.auth\nctx.auth\nctx.sendCommand(command)\nctx.sendCommand(command)\nPassing additional parameters\nCommunity‚Äëprovided handlers",
        "source_url": "https://nodemailer.com/smtp/customauth#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 273
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transportSMTP envelopePooled SMTP ConnectionsTesting SMTPOAuth2Well-Known ServicesCustom authenticationProxy supportDelivery Status Notifications (DSN)\nSMTP envelope\nPooled SMTP Connections\nTesting SMTP\nOAuth2\nWell-Known Services\nCustom authentication\nProxy support\nDelivery Status Notifications (DSN)\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nSMTP transport\nProxy support\nProxy support\nNodemailer can connect to an SMTP serverthrough an outbound proxy. Out of the box it understandsHTTP CONNECTproxies. ForSOCKS4/4a/5and any other schemes you can either:\nInstall the community‚Äëmaintainedsockspackage and let Nodemailer do the rest.\nsocks\nProvide your own proxy handler function.\nQuick start‚Äã\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,proxy:\"http://proxy.example.test:3128\",// ‚Üê HTTP proxy URL});\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,proxy:\"http://proxy.example.test:3128\",// ‚Üê HTTP proxy URL});\nSet theproxyoption to a valid URL string. Nodemailer parses the URL and decides how to tunnel the connection.\nproxy\nHTTP CONNECT proxies‚Äã\nHTTP proxies are fully supportedwithout additional dependencies. Just pass their URL in theproxyoption:\nproxy\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,proxy:process.env.HTTP_PROXY,// or HTTPS_PROXY});\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,proxy:process.env.HTTP_PROXY,// or HTTPS_PROXY});\nSOCKS proxies‚Äã\nSupport for SOCKS4, SOCKS4a and SOCKS5 isnot bundledto keep Nodemailer lean. Install thesockspackage in your project and register it with the transporter:\nsocks\nnpm install socks --save\nnpm install socks --save\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,proxy:\"socks5://127.0.0.1:1080\",});transporter.set(\"proxy_socks_module\",",
        "source_url": "https://nodemailer.com/smtp/proxies",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,proxy:\"socks5://127.0.0.1:1080\",});transporter.set(\"proxy_socks_module\",require(\"socks\"));\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,proxy:\"socks5://127.0.0.1:1080\",});transporter.set(\"proxy_socks_module\",require(\"socks\"));\nSupported URL protocols‚Äã\nsocks4:\nsocks4a:\nsocks5:\nsocks:\nLocal testing with SSH‚Äã\nCreate an ad‚Äëhoc SOCKS5 proxy that forwards all traffic through an SSH server:\nssh -N -D 0.0.0.0:1080 user@remote.host\nssh -N -D 0.0.0.0:1080 user@remote.host\nThen setproxy: \"socks5://localhost:1080\".\nproxy: \"socks5://localhost:1080\"\nCustom proxy handlers‚Äã\nNeed a special authentication flow or a corporate proxy that speaks a proprietary protocol? Provide your own socket‚Äëcreation logic:\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,proxy:\"myproxy://127.0.0.1:9999\",});// Register a handler for the \"myproxy:\" URL schemetransporter.set(\"proxy_handler_myproxy\",(proxy,options,done)=>{constnet=require(\"net\");console.log(`Proxy host=%s port=%s`,proxy.hostname,proxy.port);constsocket=net.connect(proxy.port,proxy.hostname,()=>{// ...hand‚Äëshake with your proxy here...// Return the socket to Nodemailerdone(null,{connection:socket});});});\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,proxy:\"myproxy://127.0.0.1:9999\",});// Register a handler for the \"myproxy:\" URL schemetransporter.set(\"proxy_handler_myproxy\",(proxy,options,done)=>{constnet=require(\"net\");console.log(`Proxy host=%s port=%s`,proxy.hostname,proxy.port);constsocket=net.connect(proxy.port,proxy.hostname,()=>{// ...hand‚Äëshake with your proxy here...// Return the socket to Nodemailerdone",
        "source_url": "https://nodemailer.com/smtp/proxies",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "net\");console.log(`Proxy host=%s port=%s`,proxy.hostname,proxy.port);constsocket=net.connect(proxy.port,proxy.hostname,()=>{// ...hand‚Äëshake with your proxy here...// Return the socket to Nodemailerdone(null,{connection:socket});});});\nIf the proxy socket isalready encrypted(e.g. you connected withtls.connect()), setsecured: trueso Nodemailer skips its own STARTTLS upgrade:\ntls.connect()\nsecured: true\nconsttls=require(\"tls\");transporter.set(\"proxy_handler_myproxys\",(proxy,options,done)=>{constsocket=tls.connect(proxy.port,proxy.hostname,()=>{done(null,{connection:socket,secured:true});});});\nconsttls=require(\"tls\");transporter.set(\"proxy_handler_myproxys\",(proxy,options,done)=>{constsocket=tls.connect(proxy.port,proxy.hostname,()=>{done(null,{connection:socket,secured:true});});});\nQuick start\nHTTP CONNECT proxies\nSOCKS proxiesSupported URL protocolsLocal testing with SSH\nSupported URL protocols\nLocal testing with SSH\nCustom proxy handlers",
        "source_url": "https://nodemailer.com/smtp/proxies",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 222
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transportSMTP envelopePooled SMTP ConnectionsTesting SMTPOAuth2Well-Known ServicesCustom authenticationProxy supportDelivery Status Notifications (DSN)\nSMTP envelope\nPooled SMTP Connections\nTesting SMTP\nOAuth2\nWell-Known Services\nCustom authentication\nProxy support\nDelivery Status Notifications (DSN)\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nSMTP transport\nProxy support\nProxy support\nNodemailer can connect to an SMTP serverthrough an outbound proxy. Out of the box it understandsHTTP CONNECTproxies. ForSOCKS4/4a/5and any other schemes you can either:\nInstall the community‚Äëmaintainedsockspackage and let Nodemailer do the rest.\nsocks\nProvide your own proxy handler function.\nQuick start‚Äã\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,proxy:\"http://proxy.example.test:3128\",// ‚Üê HTTP proxy URL});\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,proxy:\"http://proxy.example.test:3128\",// ‚Üê HTTP proxy URL});\nSet theproxyoption to a valid URL string. Nodemailer parses the URL and decides how to tunnel the connection.\nproxy\nHTTP CONNECT proxies‚Äã\nHTTP proxies are fully supportedwithout additional dependencies. Just pass their URL in theproxyoption:\nproxy\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,proxy:process.env.HTTP_PROXY,// or HTTPS_PROXY});\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,proxy:process.env.HTTP_PROXY,// or HTTPS_PROXY});\nSOCKS proxies‚Äã\nSupport for SOCKS4, SOCKS4a and SOCKS5 isnot bundledto keep Nodemailer lean. Install thesockspackage in your project and register it with the transporter:\nsocks\nnpm install socks --save\nnpm install socks --save\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,proxy:\"socks5://127.0.0.1:1080\",});transporter.set(\"proxy_socks_module\",",
        "source_url": "https://nodemailer.com/smtp/proxies#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,proxy:\"socks5://127.0.0.1:1080\",});transporter.set(\"proxy_socks_module\",require(\"socks\"));\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,proxy:\"socks5://127.0.0.1:1080\",});transporter.set(\"proxy_socks_module\",require(\"socks\"));\nSupported URL protocols‚Äã\nsocks4:\nsocks4a:\nsocks5:\nsocks:\nLocal testing with SSH‚Äã\nCreate an ad‚Äëhoc SOCKS5 proxy that forwards all traffic through an SSH server:\nssh -N -D 0.0.0.0:1080 user@remote.host\nssh -N -D 0.0.0.0:1080 user@remote.host\nThen setproxy: \"socks5://localhost:1080\".\nproxy: \"socks5://localhost:1080\"\nCustom proxy handlers‚Äã\nNeed a special authentication flow or a corporate proxy that speaks a proprietary protocol? Provide your own socket‚Äëcreation logic:\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,proxy:\"myproxy://127.0.0.1:9999\",});// Register a handler for the \"myproxy:\" URL schemetransporter.set(\"proxy_handler_myproxy\",(proxy,options,done)=>{constnet=require(\"net\");console.log(`Proxy host=%s port=%s`,proxy.hostname,proxy.port);constsocket=net.connect(proxy.port,proxy.hostname,()=>{// ...hand‚Äëshake with your proxy here...// Return the socket to Nodemailerdone(null,{connection:socket});});});\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,proxy:\"myproxy://127.0.0.1:9999\",});// Register a handler for the \"myproxy:\" URL schemetransporter.set(\"proxy_handler_myproxy\",(proxy,options,done)=>{constnet=require(\"net\");console.log(`Proxy host=%s port=%s`,proxy.hostname,proxy.port);constsocket=net.connect(proxy.port,proxy.hostname,()=>{// ...hand‚Äëshake with your proxy here...// Return the socket to Nodemailerdone",
        "source_url": "https://nodemailer.com/smtp/proxies#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "net\");console.log(`Proxy host=%s port=%s`,proxy.hostname,proxy.port);constsocket=net.connect(proxy.port,proxy.hostname,()=>{// ...hand‚Äëshake with your proxy here...// Return the socket to Nodemailerdone(null,{connection:socket});});});\nIf the proxy socket isalready encrypted(e.g. you connected withtls.connect()), setsecured: trueso Nodemailer skips its own STARTTLS upgrade:\ntls.connect()\nsecured: true\nconsttls=require(\"tls\");transporter.set(\"proxy_handler_myproxys\",(proxy,options,done)=>{constsocket=tls.connect(proxy.port,proxy.hostname,()=>{done(null,{connection:socket,secured:true});});});\nconsttls=require(\"tls\");transporter.set(\"proxy_handler_myproxys\",(proxy,options,done)=>{constsocket=tls.connect(proxy.port,proxy.hostname,()=>{done(null,{connection:socket,secured:true});});});\nQuick start\nHTTP CONNECT proxies\nSOCKS proxiesSupported URL protocolsLocal testing with SSH\nSupported URL protocols\nLocal testing with SSH\nCustom proxy handlers",
        "source_url": "https://nodemailer.com/smtp/proxies#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 222
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transportSMTP envelopePooled SMTP ConnectionsTesting SMTPOAuth2Well-Known ServicesCustom authenticationProxy supportDelivery Status Notifications (DSN)\nSMTP envelope\nPooled SMTP Connections\nTesting SMTP\nOAuth2\nWell-Known Services\nCustom authentication\nProxy support\nDelivery Status Notifications (DSN)\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nSMTP transport\nDelivery Status Notifications (DSN)\nDelivery Status Notifications (DSN)\nThe SMTPDelivery Status Notification(DSN) extension (defined inRFC¬†3461) isoptional. Your outbound SMTP servicemusthave the extension enabled for DSN requests to take effect.\nIf your SMTP service supports DSN, you can ask Nodemailer to request a bounce‚Äëreport (failure), delay notice, or success confirmation for any individual message. You do so by adding adsnobject to the message options passed totransporter.sendMail().\ndsn\ntransporter.sendMail()\ndsnobject fields‚Äã\ndsn\nid\nstring\nreturn\n'headers' | 'full'\nnotify\nstring | string[]\n'never'\n'success'\n'failure'\n'delay'\n'never'\nrecipient\nstring\nNon‚Äëxtextstrings are escaped automatically by Nodemailer.\nExamples‚Äã\n1. Success notifications only‚Äã\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:587,secure:false,auth:{user:\"smtp-user\",pass:\"smtp-pass\",},});awaittransporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Message\",text:\"I hope this message gets read!\",dsn:{id:\"msg-123\",return:\"headers\",notify:\"success\",recipient:\"sender@example.com\",},});\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:587,secure:false,auth:{user:\"smtp-user\",pass:\"smtp-pass\",},});awaittransporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Message\",text:\"I hope this message gets read!\",dsn:{id:\"msg-123\",return:\"headers\",notify:\"success\",recipient:\"sender@example.com\",},});\n2. Failureanddelay notifications‚Äã\nawaittransporter.sendMail({from:\"sender@example.com\",to:\"recipient",
        "source_url": "https://nodemailer.com/smtp/dsn",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": " gets read!\",dsn:{id:\"msg-123\",return:\"headers\",notify:\"success\",recipient:\"sender@example.com\",},});\n2. Failureanddelay notifications‚Äã\nawaittransporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Message\",text:\"I hope this message gets read!\",dsn:{id:\"msg-124\",return:\"headers\",notify:[\"failure\",\"delay\"],recipient:\"sender@example.com\",},});\nawaittransporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Message\",text:\"I hope this message gets read!\",dsn:{id:\"msg-124\",return:\"headers\",notify:[\"failure\",\"delay\"],recipient:\"sender@example.com\",},});\n3. Opting out of DSN entirely‚Äã\nIf you explicitly donotwant DSN reports, passnotify: 'never'.\nnotify: 'never'\nawaittransporter.sendMail({/* ... */dsn:{notify:\"never\",},});\nawaittransporter.sendMail({/* ... */dsn:{notify:\"never\",},});\nTroubleshooting‚Äã\nNo DSN received?Double‚Äëcheck that your SMTP provider advertises theDSNcapability in itsEHLOresponse and that you are not forcing a downgrade to the legacyHELOcommand.\nDSN\nEHLO\nHELO\nProvider‚Äëspecific quirks.Some ESPs accept only a subset of DSN options or rewrite the recipient address. Consult your provider‚Äôs documentation if delivery reports seem incomplete.\ndsnobject fields\ndsn\nExamples1. Success notifications only2. Failureanddelay notifications3. Opting out of DSN entirely\n1. Success notifications only\n2. Failureanddelay notifications\n3. Opting out of DSN entirely\nTroubleshooting",
        "source_url": "https://nodemailer.com/smtp/dsn",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 354
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transportSMTP envelopePooled SMTP ConnectionsTesting SMTPOAuth2Well-Known ServicesCustom authenticationProxy supportDelivery Status Notifications (DSN)\nSMTP envelope\nPooled SMTP Connections\nTesting SMTP\nOAuth2\nWell-Known Services\nCustom authentication\nProxy support\nDelivery Status Notifications (DSN)\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nSMTP transport\nDelivery Status Notifications (DSN)\nDelivery Status Notifications (DSN)\nThe SMTPDelivery Status Notification(DSN) extension (defined inRFC¬†3461) isoptional. Your outbound SMTP servicemusthave the extension enabled for DSN requests to take effect.\nIf your SMTP service supports DSN, you can ask Nodemailer to request a bounce‚Äëreport (failure), delay notice, or success confirmation for any individual message. You do so by adding adsnobject to the message options passed totransporter.sendMail().\ndsn\ntransporter.sendMail()\ndsnobject fields‚Äã\ndsn\nid\nstring\nreturn\n'headers' | 'full'\nnotify\nstring | string[]\n'never'\n'success'\n'failure'\n'delay'\n'never'\nrecipient\nstring\nNon‚Äëxtextstrings are escaped automatically by Nodemailer.\nExamples‚Äã\n1. Success notifications only‚Äã\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:587,secure:false,auth:{user:\"smtp-user\",pass:\"smtp-pass\",},});awaittransporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Message\",text:\"I hope this message gets read!\",dsn:{id:\"msg-123\",return:\"headers\",notify:\"success\",recipient:\"sender@example.com\",},});\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:587,secure:false,auth:{user:\"smtp-user\",pass:\"smtp-pass\",},});awaittransporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Message\",text:\"I hope this message gets read!\",dsn:{id:\"msg-123\",return:\"headers\",notify:\"success\",recipient:\"sender@example.com\",},});\n2. Failureanddelay notifications‚Äã\nawaittransporter.sendMail({from:\"sender@example.com\",to:\"recipient",
        "source_url": "https://nodemailer.com/smtp/dsn#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": " gets read!\",dsn:{id:\"msg-123\",return:\"headers\",notify:\"success\",recipient:\"sender@example.com\",},});\n2. Failureanddelay notifications‚Äã\nawaittransporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Message\",text:\"I hope this message gets read!\",dsn:{id:\"msg-124\",return:\"headers\",notify:[\"failure\",\"delay\"],recipient:\"sender@example.com\",},});\nawaittransporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Message\",text:\"I hope this message gets read!\",dsn:{id:\"msg-124\",return:\"headers\",notify:[\"failure\",\"delay\"],recipient:\"sender@example.com\",},});\n3. Opting out of DSN entirely‚Äã\nIf you explicitly donotwant DSN reports, passnotify: 'never'.\nnotify: 'never'\nawaittransporter.sendMail({/* ... */dsn:{notify:\"never\",},});\nawaittransporter.sendMail({/* ... */dsn:{notify:\"never\",},});\nTroubleshooting‚Äã\nNo DSN received?Double‚Äëcheck that your SMTP provider advertises theDSNcapability in itsEHLOresponse and that you are not forcing a downgrade to the legacyHELOcommand.\nDSN\nEHLO\nHELO\nProvider‚Äëspecific quirks.Some ESPs accept only a subset of DSN options or rewrite the recipient address. Consult your provider‚Äôs documentation if delivery reports seem incomplete.\ndsnobject fields\ndsn\nExamples1. Success notifications only2. Failureanddelay notifications3. Opting out of DSN entirely\n1. Success notifications only\n2. Failureanddelay notifications\n3. Opting out of DSN entirely\nTroubleshooting",
        "source_url": "https://nodemailer.com/smtp/dsn#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 354
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transportsSendmail transportSES transportStream transport\nSendmail transport\nSES transport\nStream transport\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nOther transports\nOther transports\nNodemailer ships with a fully‚ÄëfeaturedSMTP transportenabled by default, but you‚Äôre byno meanslimited to SMTP. Atransportis simply the mechanism Nodemailer uses to hand off a fully‚Äëconstructed email message‚Äîwhether that‚Äôs piping intosendmail, posting to an HTTPS API, or any other delivery strategy.\nsendmail\nThis page lists the transports that are bundled with Nodemailer as well as popular community transports. You can also roll your own by following thetransport API documentation.\nExample: Amazon¬†SES transport‚Äã\nBelow is a minimal example that delivers mail throughAmazon¬†SESusing the built‚Äëin SES transport. It wraps the officialAWS¬†SDK¬†v3client under the hood.\nnpm install nodemailer @aws-sdk/client-sesv2\nnpm install nodemailer @aws-sdk/client-sesv2\nconstnodemailer=require(\"nodemailer\");const{SESv2Client,SendEmailCommand}=require(\"@aws-sdk/client-sesv2\");constsesClient=newSESv2Client({});consttransporter=nodemailer.createTransport({SES:{sesClient,SendEmailCommand},});(async()=>{awaittransporter.sendMail({from:\"you@example.com\",to:\"friend@example.net\",subject:\"Hello from SES\",text:\"This message was sent with Nodemailer & Amazon SES!\",});})();\nconstnodemailer=require(\"nodemailer\");const{SESv2Client,SendEmailCommand}=require(\"@aws-sdk/client-sesv2\");constsesClient=newSESv2Client({});consttransporter=nodemailer.createTransport({SES:{sesClient,SendEmailCommand},});(async()=>{awaittransporter.sendMail({from:\"you@example.com\",to:\"friend@example.net\",subject:\"Hello from SES\",text:\"This message was sent with Nodemailer & Amazon SES!\",});})();\nAvailable transports‚Äã\nBundled (built‚Äëin) transports‚Äã\nsendmail\nCommunity transports‚Äã\nThese transports live in separate NPM packages maintained by the community. Install them withnpm¬†installand pass their exported function tonodemailer.createTransport().\nnpm¬†install\nnodemailer.createTransport()\nMailtrap‚Äì Deliver",
        "source_url": "https://nodemailer.com/transports",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "sendmail\nCommunity transports‚Äã\nThese transports live in separate NPM packages maintained by the community. Install them withnpm¬†installand pass their exported function tonodemailer.createTransport().\nnpm¬†install\nnodemailer.createTransport()\nMailtrap‚Äì Deliver messages to your Mailtrap inbox for safe testing (npm)\nMailgun‚Äì Send via Mailgun‚Äôs HTTP API (npm)\nCustom‚Äì Implement business‚Äëspecific logic by authoringyour own transport\nHeads‚ÄëupThird‚Äëparty transports are not maintained by the Nodemailer team. Check each project‚Äôs README for installation and usage instructions.\nTransport‚Äëagnostic options‚Äã\nWhile each transport defines its own configuration object, the following options are recognised byalltransports:\nattachDataUrls\nBoolean\ndata:\ndisableFileAccess\nBoolean\ndisableUrlAccess\nBoolean\nnormalizeHeaderKey(key)\nFunction\nExample: Amazon¬†SES transport\nAvailable transportsBundled (built‚Äëin) transportsCommunity transports\nBundled (built‚Äëin) transports\nCommunity transports\nTransport‚Äëagnostic options",
        "source_url": "https://nodemailer.com/transports",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 208
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transportsSendmail transportSES transportStream transport\nSendmail transport\nSES transport\nStream transport\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nOther transports\nOther transports\nNodemailer ships with a fully‚ÄëfeaturedSMTP transportenabled by default, but you‚Äôre byno meanslimited to SMTP. Atransportis simply the mechanism Nodemailer uses to hand off a fully‚Äëconstructed email message‚Äîwhether that‚Äôs piping intosendmail, posting to an HTTPS API, or any other delivery strategy.\nsendmail\nThis page lists the transports that are bundled with Nodemailer as well as popular community transports. You can also roll your own by following thetransport API documentation.\nExample: Amazon¬†SES transport‚Äã\nBelow is a minimal example that delivers mail throughAmazon¬†SESusing the built‚Äëin SES transport. It wraps the officialAWS¬†SDK¬†v3client under the hood.\nnpm install nodemailer @aws-sdk/client-sesv2\nnpm install nodemailer @aws-sdk/client-sesv2\nconstnodemailer=require(\"nodemailer\");const{SESv2Client,SendEmailCommand}=require(\"@aws-sdk/client-sesv2\");constsesClient=newSESv2Client({});consttransporter=nodemailer.createTransport({SES:{sesClient,SendEmailCommand},});(async()=>{awaittransporter.sendMail({from:\"you@example.com\",to:\"friend@example.net\",subject:\"Hello from SES\",text:\"This message was sent with Nodemailer & Amazon SES!\",});})();\nconstnodemailer=require(\"nodemailer\");const{SESv2Client,SendEmailCommand}=require(\"@aws-sdk/client-sesv2\");constsesClient=newSESv2Client({});consttransporter=nodemailer.createTransport({SES:{sesClient,SendEmailCommand},});(async()=>{awaittransporter.sendMail({from:\"you@example.com\",to:\"friend@example.net\",subject:\"Hello from SES\",text:\"This message was sent with Nodemailer & Amazon SES!\",});})();\nAvailable transports‚Äã\nBundled (built‚Äëin) transports‚Äã\nsendmail\nCommunity transports‚Äã\nThese transports live in separate NPM packages maintained by the community. Install them withnpm¬†installand pass their exported function tonodemailer.createTransport().\nnpm¬†install\nnodemailer.createTransport()\nMailtrap‚Äì Deliver",
        "source_url": "https://nodemailer.com/transports#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "sendmail\nCommunity transports‚Äã\nThese transports live in separate NPM packages maintained by the community. Install them withnpm¬†installand pass their exported function tonodemailer.createTransport().\nnpm¬†install\nnodemailer.createTransport()\nMailtrap‚Äì Deliver messages to your Mailtrap inbox for safe testing (npm)\nMailgun‚Äì Send via Mailgun‚Äôs HTTP API (npm)\nCustom‚Äì Implement business‚Äëspecific logic by authoringyour own transport\nHeads‚ÄëupThird‚Äëparty transports are not maintained by the Nodemailer team. Check each project‚Äôs README for installation and usage instructions.\nTransport‚Äëagnostic options‚Äã\nWhile each transport defines its own configuration object, the following options are recognised byalltransports:\nattachDataUrls\nBoolean\ndata:\ndisableFileAccess\nBoolean\ndisableUrlAccess\nBoolean\nnormalizeHeaderKey(key)\nFunction\nExample: Amazon¬†SES transport\nAvailable transportsBundled (built‚Äëin) transportsCommunity transports\nBundled (built‚Äëin) transports\nCommunity transports\nTransport‚Äëagnostic options",
        "source_url": "https://nodemailer.com/transports#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 208
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transportsSendmail transportSES transportStream transport\nSendmail transport\nSES transport\nStream transport\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nOther transports\nSendmail transport\nSendmail transport\nTheSendmail transporthands the generated RFC‚ÄØ822 message off to the localsendmail(or compatible) binary by piping it tostdin. Functionally, this is the same mechanism used by PHP'smail()helper.\nmail()\nUsage‚Äã\n// CommonJSconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({sendmail:true,// enable Sendmail transport});\n// CommonJSconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({sendmail:true,// enable Sendmail transport});\nSettingsendmail: trueactivates the transport. Nodemailer will try to locate the binary automatically (defaults tosendmailin yourPATH). If necessary, you can point Nodemailer to a different binary with thepathoption (see below).\nsendmail: true\nsendmail\nPATH\npath\nTransport options‚Äã\npath\nString\n'sendmail'\nnewline\n'unix'\n'windows'\n'unix'\n\\n\n\\r\\n\nargs\nString[]\n-i\nWhen no customargsarray is passed Nodemailer will execute\nargs\nsendmail -i -f <from> <to‚Ä¶>\nsendmail -i -f <from> <to‚Ä¶>\nWithargsprovided the command becomes\nargs\nsendmail -i <args‚Ä¶> <to‚Ä¶>\nsendmail -i <args‚Ä¶> <to‚Ä¶>\nResponse‚Äã\nTheinfoobject thattransporter.sendMail()yields contains only two properties‚Äîsendmailwrites nothing to stdout/stderr:\ninfo\ntransporter.sendMail()\nsendmail\nenvelope‚Äì{ from: 'address', to: ['address', ‚Ä¶] }\nenvelope\n{ from: 'address', to: ['address', ‚Ä¶] }\nmessageId‚Äì value of the generatedMessage‚ÄëIDheader\nmessageId\nTroubleshooting‚Äã\nIf Nodemailer cannot find/usr/bin/sendmail(the default on most Unix systems) make sure the binary is installed and available on yourPATH. Consult your distribution's documentation or theComputer¬†Hope sendmail referencefor installation instructions.\nPATH\nExamples‚Äã\nconstnodemailer=require(\"nodemailer\");consttransporter=n",
        "source_url": "https://nodemailer.com/transports/sendmail",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": " most Unix systems) make sure the binary is installed and available on yourPATH. Consult your distribution's documentation or theComputer¬†Hope sendmail referencefor installation instructions.\nPATH\nExamples‚Äã\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({sendmail:true,newline:\"unix\",path:\"/usr/sbin/sendmail\",});transporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Test message\",text:\"I hope this message gets delivered!\",},(err,info)=>{if(err){console.error(err);return;}console.log(info.envelope);console.log(info.messageId);});\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({sendmail:true,newline:\"unix\",path:\"/usr/sbin/sendmail\",});transporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Test message\",text:\"I hope this message gets delivered!\",},(err,info)=>{if(err){console.error(err);return;}console.log(info.envelope);console.log(info.messageId);});\nIf you need to pass custom flags‚Äîfor example, to override the envelope sender‚Äîinclude them via theargsoption:\nargs\nconsttransporter=nodemailer.createTransport({sendmail:true,args:[\"-f\",\"bounce@example.com\"],});\nconsttransporter=nodemailer.createTransport({sendmail:true,args:[\"-f\",\"bounce@example.com\"],});\nUsageTransport optionsResponseTroubleshootingExamples\nTransport options\nResponse\nTroubleshooting\nExamples",
        "source_url": "https://nodemailer.com/transports/sendmail",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 315
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transportsSendmail transportSES transportStream transport\nSendmail transport\nSES transport\nStream transport\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nOther transports\nSendmail transport\nSendmail transport\nTheSendmail transporthands the generated RFC‚ÄØ822 message off to the localsendmail(or compatible) binary by piping it tostdin. Functionally, this is the same mechanism used by PHP'smail()helper.\nmail()\nUsage‚Äã\n// CommonJSconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({sendmail:true,// enable Sendmail transport});\n// CommonJSconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({sendmail:true,// enable Sendmail transport});\nSettingsendmail: trueactivates the transport. Nodemailer will try to locate the binary automatically (defaults tosendmailin yourPATH). If necessary, you can point Nodemailer to a different binary with thepathoption (see below).\nsendmail: true\nsendmail\nPATH\npath\nTransport options‚Äã\npath\nString\n'sendmail'\nnewline\n'unix'\n'windows'\n'unix'\n\\n\n\\r\\n\nargs\nString[]\n-i\nWhen no customargsarray is passed Nodemailer will execute\nargs\nsendmail -i -f <from> <to‚Ä¶>\nsendmail -i -f <from> <to‚Ä¶>\nWithargsprovided the command becomes\nargs\nsendmail -i <args‚Ä¶> <to‚Ä¶>\nsendmail -i <args‚Ä¶> <to‚Ä¶>\nResponse‚Äã\nTheinfoobject thattransporter.sendMail()yields contains only two properties‚Äîsendmailwrites nothing to stdout/stderr:\ninfo\ntransporter.sendMail()\nsendmail\nenvelope‚Äì{ from: 'address', to: ['address', ‚Ä¶] }\nenvelope\n{ from: 'address', to: ['address', ‚Ä¶] }\nmessageId‚Äì value of the generatedMessage‚ÄëIDheader\nmessageId\nTroubleshooting‚Äã\nIf Nodemailer cannot find/usr/bin/sendmail(the default on most Unix systems) make sure the binary is installed and available on yourPATH. Consult your distribution's documentation or theComputer¬†Hope sendmail referencefor installation instructions.\nPATH\nExamples‚Äã\nconstnodemailer=require(\"nodemailer\");consttransporter=n",
        "source_url": "https://nodemailer.com/transports/sendmail#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": " most Unix systems) make sure the binary is installed and available on yourPATH. Consult your distribution's documentation or theComputer¬†Hope sendmail referencefor installation instructions.\nPATH\nExamples‚Äã\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({sendmail:true,newline:\"unix\",path:\"/usr/sbin/sendmail\",});transporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Test message\",text:\"I hope this message gets delivered!\",},(err,info)=>{if(err){console.error(err);return;}console.log(info.envelope);console.log(info.messageId);});\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({sendmail:true,newline:\"unix\",path:\"/usr/sbin/sendmail\",});transporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Test message\",text:\"I hope this message gets delivered!\",},(err,info)=>{if(err){console.error(err);return;}console.log(info.envelope);console.log(info.messageId);});\nIf you need to pass custom flags‚Äîfor example, to override the envelope sender‚Äîinclude them via theargsoption:\nargs\nconsttransporter=nodemailer.createTransport({sendmail:true,args:[\"-f\",\"bounce@example.com\"],});\nconsttransporter=nodemailer.createTransport({sendmail:true,args:[\"-f\",\"bounce@example.com\"],});\nUsageTransport optionsResponseTroubleshootingExamples\nTransport options\nResponse\nTroubleshooting\nExamples",
        "source_url": "https://nodemailer.com/transports/sendmail#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 315
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transportsSendmail transportSES transportStream transport\nSendmail transport\nSES transport\nStream transport\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nOther transports\nSES transport\nSES transport\nNodemailerSES transportlets you deliver email throughAmazon Simple Email Service (SES)using the official AWS JavaScript SESv2 Client package@aws-sdk/client‚Äësesv2.\nIt is a thin wrapper aroundSendEmailCommandthat preserves the familiartransporter.sendMail()API.\nSendEmailCommand\ntransporter.sendMail()\nThe SES SDK is not bundled with Nodemailer. Install it explicitly:\nnpm install @aws-sdk/client-sesv2\nnpm install @aws-sdk/client-sesv2\nQuick start‚Äã\nconstnodemailer=require(\"nodemailer\");const{SESv2Client,SendEmailCommand}=require(\"@aws-sdk/client-sesv2\");// 1. Configure the AWS SDK client (uses default credential chain if omitted)constsesClient=newSESv2Client({region:\"us‚Äëeast‚Äë1\"});// 2. Create a Nodemailer transport that points at SESconsttransporter=nodemailer.createTransport({SES:{sesClient,SendEmailCommand},});// 3. Send the messageconstinfo=awaittransporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Hello from Nodemailer + SES\",text:\"I hope this message gets sent!\",// Any SendEmailCommand input can be set under the `ses` key:ses:{ConfigurationSetName:\"my‚Äëconfig‚Äëset\",EmailTags:[{Name:\"tag_name\",Value:\"tag_value\"}],},});console.log(info.envelope);// { from: ..., to: [...] }console.log(info.messageId);// SES MessageId\nconstnodemailer=require(\"nodemailer\");const{SESv2Client,SendEmailCommand}=require(\"@aws-sdk/client-sesv2\");// 1. Configure the AWS SDK client (uses default credential chain if omitted)constsesClient=newSESv2Client({region:\"us‚Äëeast‚Äë1\"});// 2. Create a Nodemailer transport that points at SESconsttransporter=nodemailer.createTransport({SES:{sesClient,SendEmailCommand},});// 3. Send the messageconstinfo=awaittransporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com",
        "source_url": "https://nodemailer.com/transports/ses",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": " that points at SESconsttransporter=nodemailer.createTransport({SES:{sesClient,SendEmailCommand},});// 3. Send the messageconstinfo=awaittransporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Hello from Nodemailer + SES\",text:\"I hope this message gets sent!\",// Any SendEmailCommand input can be set under the `ses` key:ses:{ConfigurationSetName:\"my‚Äëconfig‚Äëset\",EmailTags:[{Name:\"tag_name\",Value:\"tag_value\"}],},});console.log(info.envelope);// { from: ..., to: [...] }console.log(info.messageId);// SES MessageId\nYou can also use the traditional callback style‚Äîtransporter.sendMail(mail, cb)‚Äîif you prefer.\ntransporter.sendMail(mail, cb)\nTransport options‚Äã\nPass anSESobject tocreateTransport()with the followingrequiredkeys:\nSES\ncreateTransport()\nsesClient\nSESv2Client\nSendEmailCommand\nSendEmailCommand\nMessage‚Äëlevel options‚Äã\nsendMail()accepts an optionalsesproperty.\nAll keys of this object are merged into the input object passed toSendEmailCommand, so you can set any parameter supported by the operation (for exampleEmailTags,ConfigurationSetName, ‚Ä¶).\nsendMail()\nEmailTags\nConfigurationSetName\nResponse object‚Äã\nThe promise (or callback) resolves to:\nenvelope\n{ from: 'address', to: ['address'] }\nmessageId\nTroubleshooting‚Äã\n‚ÄúUser is not authorized to perform: ses:SendEmail‚Äù‚Äã\nConfirm that the IAM principal used by the SDK has theses:SendEmailpermission (seeExample¬†2).\nMake sure theFromaddress (or its domain) isverifiedin the SES console.\nRare: AWS access keys containing non‚Äëalphanumeric characters have been reported to fail‚Äîregenerate the keys if permission checks look correct.\nLimited functionality:SES transport doesn't support verifying connections anymoresee\n‚ÄúCannot find module '@aws-sdk/client-sesv2'‚Äù‚Äã\nThe SES SDK is not bundled with Nodemailer. Install it explicitly:\nnpm install @aws-sdk/client-sesv2\nnpm install @aws-sdk/client-sesv2\nExamples‚Äã\n1. Send a message‚Äã\nconstnodemailer=require(\"nodemailer\");const{SESv2Client,SendEmailCommand}=require(\"@aws-sdk/client-sesv2\");constsesClient=newSESv2Client",
        "source_url": "https://nodemailer.com/transports/ses",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "v2\nExamples‚Äã\n1. Send a message‚Äã\nconstnodemailer=require(\"nodemailer\");const{SESv2Client,SendEmailCommand}=require(\"@aws-sdk/client-sesv2\");constsesClient=newSESv2Client({region:process.env.AWS_REGION});consttransporter=nodemailer.createTransport({SES:{sesClient,SendEmailCommand},});transporter.sendMail({from:\"sender@example.com\",to:[\"recipient@example.com\"],subject:\"Message via SES transport\",text:\"I hope this message gets sent!\",ses:{EmailTags:[{Name:\"tag_name\",Value:\"tag_value\"}],},},(err,info)=>{if(err){console.error(err);return;}console.log(info.envelope);console.log(info.messageId);});\nconstnodemailer=require(\"nodemailer\");const{SESv2Client,SendEmailCommand}=require(\"@aws-sdk/client-sesv2\");constsesClient=newSESv2Client({region:process.env.AWS_REGION});consttransporter=nodemailer.createTransport({SES:{sesClient,SendEmailCommand},});transporter.sendMail({from:\"sender@example.com\",to:[\"recipient@example.com\"],subject:\"Message via SES transport\",text:\"I hope this message gets sent!\",ses:{EmailTags:[{Name:\"tag_name\",Value:\"tag_value\"}],},},(err,info)=>{if(err){console.error(err);return;}console.log(info.envelope);console.log(info.messageId);});\n2. Minimal IAM policy‚Äã\n{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Action\":\"ses:SendRawEmail\",\"Resource\":\"*\"}]}\n{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Action\":\"ses:SendRawEmail\",\"Resource\":\"*\"}]}\nQuick start\nTransport options\nMessage‚Äëlevel options\nResponse object\nTroubleshooting‚ÄúUser is not authorized to perform: ses:SendEmail‚Äù‚ÄúCannot find module '@aws-sdk/client-sesv2'‚Äù\n‚ÄúUser is not authorized to perform: ses:SendEmail‚Äù\n‚ÄúCannot find module '@aws-sdk/client-sesv2'‚Äù\nExamples1. Send a message2. Minimal IAM policy\n1. Send a message\n2. Minimal IAM policy",
        "source_url": "https://nodemailer.com/transports/ses",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 460
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": ". Send a message\n2. Minimal IAM policy",
        "source_url": "https://nodemailer.com/transports/ses",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 10
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transportsSendmail transportSES transportStream transport\nSendmail transport\nSES transport\nStream transport\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nOther transports\nSES transport\nSES transport\nNodemailerSES transportlets you deliver email throughAmazon Simple Email Service (SES)using the official AWS JavaScript SESv2 Client package@aws-sdk/client‚Äësesv2.\nIt is a thin wrapper aroundSendEmailCommandthat preserves the familiartransporter.sendMail()API.\nSendEmailCommand\ntransporter.sendMail()\nThe SES SDK is not bundled with Nodemailer. Install it explicitly:\nnpm install @aws-sdk/client-sesv2\nnpm install @aws-sdk/client-sesv2\nQuick start‚Äã\nconstnodemailer=require(\"nodemailer\");const{SESv2Client,SendEmailCommand}=require(\"@aws-sdk/client-sesv2\");// 1. Configure the AWS SDK client (uses default credential chain if omitted)constsesClient=newSESv2Client({region:\"us‚Äëeast‚Äë1\"});// 2. Create a Nodemailer transport that points at SESconsttransporter=nodemailer.createTransport({SES:{sesClient,SendEmailCommand},});// 3. Send the messageconstinfo=awaittransporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Hello from Nodemailer + SES\",text:\"I hope this message gets sent!\",// Any SendEmailCommand input can be set under the `ses` key:ses:{ConfigurationSetName:\"my‚Äëconfig‚Äëset\",EmailTags:[{Name:\"tag_name\",Value:\"tag_value\"}],},});console.log(info.envelope);// { from: ..., to: [...] }console.log(info.messageId);// SES MessageId\nconstnodemailer=require(\"nodemailer\");const{SESv2Client,SendEmailCommand}=require(\"@aws-sdk/client-sesv2\");// 1. Configure the AWS SDK client (uses default credential chain if omitted)constsesClient=newSESv2Client({region:\"us‚Äëeast‚Äë1\"});// 2. Create a Nodemailer transport that points at SESconsttransporter=nodemailer.createTransport({SES:{sesClient,SendEmailCommand},});// 3. Send the messageconstinfo=awaittransporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com",
        "source_url": "https://nodemailer.com/transports/ses#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": " that points at SESconsttransporter=nodemailer.createTransport({SES:{sesClient,SendEmailCommand},});// 3. Send the messageconstinfo=awaittransporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Hello from Nodemailer + SES\",text:\"I hope this message gets sent!\",// Any SendEmailCommand input can be set under the `ses` key:ses:{ConfigurationSetName:\"my‚Äëconfig‚Äëset\",EmailTags:[{Name:\"tag_name\",Value:\"tag_value\"}],},});console.log(info.envelope);// { from: ..., to: [...] }console.log(info.messageId);// SES MessageId\nYou can also use the traditional callback style‚Äîtransporter.sendMail(mail, cb)‚Äîif you prefer.\ntransporter.sendMail(mail, cb)\nTransport options‚Äã\nPass anSESobject tocreateTransport()with the followingrequiredkeys:\nSES\ncreateTransport()\nsesClient\nSESv2Client\nSendEmailCommand\nSendEmailCommand\nMessage‚Äëlevel options‚Äã\nsendMail()accepts an optionalsesproperty.\nAll keys of this object are merged into the input object passed toSendEmailCommand, so you can set any parameter supported by the operation (for exampleEmailTags,ConfigurationSetName, ‚Ä¶).\nsendMail()\nEmailTags\nConfigurationSetName\nResponse object‚Äã\nThe promise (or callback) resolves to:\nenvelope\n{ from: 'address', to: ['address'] }\nmessageId\nTroubleshooting‚Äã\n‚ÄúUser is not authorized to perform: ses:SendEmail‚Äù‚Äã\nConfirm that the IAM principal used by the SDK has theses:SendEmailpermission (seeExample¬†2).\nMake sure theFromaddress (or its domain) isverifiedin the SES console.\nRare: AWS access keys containing non‚Äëalphanumeric characters have been reported to fail‚Äîregenerate the keys if permission checks look correct.\nLimited functionality:SES transport doesn't support verifying connections anymoresee\n‚ÄúCannot find module '@aws-sdk/client-sesv2'‚Äù‚Äã\nThe SES SDK is not bundled with Nodemailer. Install it explicitly:\nnpm install @aws-sdk/client-sesv2\nnpm install @aws-sdk/client-sesv2\nExamples‚Äã\n1. Send a message‚Äã\nconstnodemailer=require(\"nodemailer\");const{SESv2Client,SendEmailCommand}=require(\"@aws-sdk/client-sesv2\");constsesClient=newSESv2Client",
        "source_url": "https://nodemailer.com/transports/ses#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "v2\nExamples‚Äã\n1. Send a message‚Äã\nconstnodemailer=require(\"nodemailer\");const{SESv2Client,SendEmailCommand}=require(\"@aws-sdk/client-sesv2\");constsesClient=newSESv2Client({region:process.env.AWS_REGION});consttransporter=nodemailer.createTransport({SES:{sesClient,SendEmailCommand},});transporter.sendMail({from:\"sender@example.com\",to:[\"recipient@example.com\"],subject:\"Message via SES transport\",text:\"I hope this message gets sent!\",ses:{EmailTags:[{Name:\"tag_name\",Value:\"tag_value\"}],},},(err,info)=>{if(err){console.error(err);return;}console.log(info.envelope);console.log(info.messageId);});\nconstnodemailer=require(\"nodemailer\");const{SESv2Client,SendEmailCommand}=require(\"@aws-sdk/client-sesv2\");constsesClient=newSESv2Client({region:process.env.AWS_REGION});consttransporter=nodemailer.createTransport({SES:{sesClient,SendEmailCommand},});transporter.sendMail({from:\"sender@example.com\",to:[\"recipient@example.com\"],subject:\"Message via SES transport\",text:\"I hope this message gets sent!\",ses:{EmailTags:[{Name:\"tag_name\",Value:\"tag_value\"}],},},(err,info)=>{if(err){console.error(err);return;}console.log(info.envelope);console.log(info.messageId);});\n2. Minimal IAM policy‚Äã\n{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Action\":\"ses:SendRawEmail\",\"Resource\":\"*\"}]}\n{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Action\":\"ses:SendRawEmail\",\"Resource\":\"*\"}]}\nQuick start\nTransport options\nMessage‚Äëlevel options\nResponse object\nTroubleshooting‚ÄúUser is not authorized to perform: ses:SendEmail‚Äù‚ÄúCannot find module '@aws-sdk/client-sesv2'‚Äù\n‚ÄúUser is not authorized to perform: ses:SendEmail‚Äù\n‚ÄúCannot find module '@aws-sdk/client-sesv2'‚Äù\nExamples1. Send a message2. Minimal IAM policy\n1. Send a message\n2. Minimal IAM policy",
        "source_url": "https://nodemailer.com/transports/ses#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 460
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": ". Send a message\n2. Minimal IAM policy",
        "source_url": "https://nodemailer.com/transports/ses#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 10
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transportsSendmail transportSES transportStream transport\nSendmail transport\nSES transport\nStream transport\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nOther transports\nStream transport\nStream transport\nStream transport isnota real SMTP transport. Instead of handing the message off to a remote mail server itbuildsthe complete RFC‚ÄØ822 e‚Äëmail and gives it back to you. This makes it perfect for\nTesting‚Äì inspect the exact bytes that would be sent over the wire, run snapshot tests, or feed the output to another system.\nCustom delivery pipelines‚Äì run Nodemailer plugins (DKIM, list headers, etc.) and then deliver the message yourself via an in‚Äëhouse API, store it for audit logging, and so on.\nEnabling Stream transport‚Äã\nCreate the transporter just like any other Nodemailer transport, but passstreamTransport: truein the constructor options:\nstreamTransport: true\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({streamTransport:true,// optional tweaks shown below});\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({streamTransport:true,// optional tweaks shown below});\nOptions‚Äã\nstreamTransport\nboolean\nbuffer\nboolean\nfalse\nBuffer\nReadable\nnewline\n'windows' | 'unix'\n'unix'\n\\r\\n\n\\n\njsonTransport\nboolean\nfalse\nstreamTransport\nsendMail()callback signature‚Äã\nsendMail()\nThe callback receives(err, info)whereinfocontains:\n(err, info)\ninfo\nenvelope‚Äì the SMTP envelope{ from, to }.\nenvelope\n{ from, to }\nmessageId‚Äì theMessage‚ÄëIDheader value.\nmessageId\nmessage‚Äì a Node.jsReadablestream (default)oraBuffer/JSON string depending on the options you set.\nmessage\nReadable\nBuffer\nExamples‚Äã\n1. Stream a message with Windows‚Äëstyle new‚Äëlines‚Äã\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({streamTransport:true,newline:\"windows\",// CRLF (\\r\\n)});transporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Streamed message\",text:\"This message is streamed using CRLF new‚Äëlines.\",},(err,info)=>{if(err)throwerr;console.log(info.envelope);console",
        "source_url": "https://nodemailer.com/transports/stream",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": ":\"sender@example.com\",to:\"recipient@example.com\",subject:\"Streamed message\",text:\"This message is streamed using CRLF new‚Äëlines.\",},(err,info)=>{if(err)throwerr;console.log(info.envelope);console.log(info.messageId);// Pipe the raw RFC‚ÄØ822 message to STDOUTinfo.message.pipe(process.stdout);});\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({streamTransport:true,newline:\"windows\",// CRLF (\\r\\n)});transporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Streamed message\",text:\"This message is streamed using CRLF new‚Äëlines.\",},(err,info)=>{if(err)throwerr;console.log(info.envelope);console.log(info.messageId);// Pipe the raw RFC‚ÄØ822 message to STDOUTinfo.message.pipe(process.stdout);});\n2. Return aBufferwith Unix‚Äëstyle new‚Äëlines‚Äã\nBuffer\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({streamTransport:true,buffer:true,// return Buffer instead of Streamnewline:\"unix\",// LF (\\n)});transporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Buffered message\",text:\"This message is buffered using LF new‚Äëlines.\",},(err,info)=>{if(err)throwerr;console.log(info.envelope);console.log(info.messageId);// The complete message is in a single Bufferconsole.log(info.message.toString());});\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({streamTransport:true,buffer:true,// return Buffer instead of Streamnewline:\"unix\",// LF (\\n)});transporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Buffered message\",text:\"This message is buffered using LF new‚Äëlines.\",},(err,info)=>{if(err)throwerr;console.log(info.envelope);console.log(info.messageId);// The complete message is in a single Bufferconsole.log(info.message.toString());});\n3. Generate a JSON‚Äëencoded message object (‚â•‚ÄØv3.1.0)‚Äã\nPassjsonTransport: true(and omitstreamTransport). The resultinginfo.messageis a serialized JSON string that you can later feed back to Nodemailer or inspect in your tests. Binary data such as attachments is base64‚Äëencoded.\njsonTransport: true",
        "source_url": "https://nodemailer.com/transports/stream",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "PassjsonTransport: true(and omitstreamTransport). The resultinginfo.messageis a serialized JSON string that you can later feed back to Nodemailer or inspect in your tests. Binary data such as attachments is base64‚Äëencoded.\njsonTransport: true\nstreamTransport\ninfo.message\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({jsonTransport:true,});transporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"JSON message\",text:\"I hope this message gets JSON‚Äëified!\",},(err,info)=>{if(err)throwerr;console.log(info.envelope);console.log(info.messageId);console.log(info.message);// JSON string});\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({jsonTransport:true,});transporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"JSON message\",text:\"I hope this message gets JSON‚Äëified!\",},(err,info)=>{if(err)throwerr;console.log(info.envelope);console.log(info.messageId);console.log(info.message);// JSON string});\nAn abbreviated example of the JSON payload:\n{\"from\":{\"address\":\"sender@example.com\",\"name\":\"\"},\"to\":[{\"address\":\"recipient@example.com\",\"name\":\"\"}],\"subject\":\"JSON message\",\"text\":\"I hope this message gets JSON‚Äëified!\",\"headers\":{},\"messageId\":\"<77a3458f-8070-339d-095f-85bb73f3db8e@example.com>\"}\n{\"from\":{\"address\":\"sender@example.com\",\"name\":\"\"},\"to\":[{\"address\":\"recipient@example.com\",\"name\":\"\"}],\"subject\":\"JSON message\",\"text\":\"I hope this message gets JSON‚Äëified!\",\"headers\":{},\"messageId\":\"<77a3458f-8070-339d-095f-85bb73f3db8e@example.com>\"}\nWhen to choose Stream vs. JSON transport‚Äã\nstreamTransport\njsonTransport\n_raw\nEnabling Stream transportOptionssendMail()callback signature\nOptions\nsendMail()callback signature\nsendMail()\nExamples1. Stream a message with Windows‚Äëstyle new‚Äëlines2. Return aBufferwith Unix‚Äëstyle new‚Äëlines3. Generate a JSON‚Äëencoded message object (‚â•‚ÄØv3.1.0)\n1. Stream a message with Windows‚Äëstyle new‚Äëlines\n2. Return aBufferwith Unix",
        "source_url": "https://nodemailer.com/transports/stream",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": " aBufferwith Unix‚Äëstyle new‚Äëlines3. Generate a JSON‚Äëencoded message object (‚â•‚ÄØv3.1.0)\n1. Stream a message with Windows‚Äëstyle new‚Äëlines\n2. Return aBufferwith Unix‚Äëstyle new‚Äëlines\nBuffer\n3. Generate a JSON‚Äëencoded message object (‚â•‚ÄØv3.1.0)\nWhen to choose Stream vs. JSON transport",
        "source_url": "https://nodemailer.com/transports/stream",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 87
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transportsSendmail transportSES transportStream transport\nSendmail transport\nSES transport\nStream transport\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nOther transports\nStream transport\nStream transport\nStream transport isnota real SMTP transport. Instead of handing the message off to a remote mail server itbuildsthe complete RFC‚ÄØ822 e‚Äëmail and gives it back to you. This makes it perfect for\nTesting‚Äì inspect the exact bytes that would be sent over the wire, run snapshot tests, or feed the output to another system.\nCustom delivery pipelines‚Äì run Nodemailer plugins (DKIM, list headers, etc.) and then deliver the message yourself via an in‚Äëhouse API, store it for audit logging, and so on.\nEnabling Stream transport‚Äã\nCreate the transporter just like any other Nodemailer transport, but passstreamTransport: truein the constructor options:\nstreamTransport: true\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({streamTransport:true,// optional tweaks shown below});\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({streamTransport:true,// optional tweaks shown below});\nOptions‚Äã\nstreamTransport\nboolean\nbuffer\nboolean\nfalse\nBuffer\nReadable\nnewline\n'windows' | 'unix'\n'unix'\n\\r\\n\n\\n\njsonTransport\nboolean\nfalse\nstreamTransport\nsendMail()callback signature‚Äã\nsendMail()\nThe callback receives(err, info)whereinfocontains:\n(err, info)\ninfo\nenvelope‚Äì the SMTP envelope{ from, to }.\nenvelope\n{ from, to }\nmessageId‚Äì theMessage‚ÄëIDheader value.\nmessageId\nmessage‚Äì a Node.jsReadablestream (default)oraBuffer/JSON string depending on the options you set.\nmessage\nReadable\nBuffer\nExamples‚Äã\n1. Stream a message with Windows‚Äëstyle new‚Äëlines‚Äã\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({streamTransport:true,newline:\"windows\",// CRLF (\\r\\n)});transporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Streamed message\",text:\"This message is streamed using CRLF new‚Äëlines.\",},(err,info)=>{if(err)throwerr;console.log(info.envelope);console",
        "source_url": "https://nodemailer.com/transports/stream#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": ":\"sender@example.com\",to:\"recipient@example.com\",subject:\"Streamed message\",text:\"This message is streamed using CRLF new‚Äëlines.\",},(err,info)=>{if(err)throwerr;console.log(info.envelope);console.log(info.messageId);// Pipe the raw RFC‚ÄØ822 message to STDOUTinfo.message.pipe(process.stdout);});\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({streamTransport:true,newline:\"windows\",// CRLF (\\r\\n)});transporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Streamed message\",text:\"This message is streamed using CRLF new‚Äëlines.\",},(err,info)=>{if(err)throwerr;console.log(info.envelope);console.log(info.messageId);// Pipe the raw RFC‚ÄØ822 message to STDOUTinfo.message.pipe(process.stdout);});\n2. Return aBufferwith Unix‚Äëstyle new‚Äëlines‚Äã\nBuffer\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({streamTransport:true,buffer:true,// return Buffer instead of Streamnewline:\"unix\",// LF (\\n)});transporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Buffered message\",text:\"This message is buffered using LF new‚Äëlines.\",},(err,info)=>{if(err)throwerr;console.log(info.envelope);console.log(info.messageId);// The complete message is in a single Bufferconsole.log(info.message.toString());});\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({streamTransport:true,buffer:true,// return Buffer instead of Streamnewline:\"unix\",// LF (\\n)});transporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Buffered message\",text:\"This message is buffered using LF new‚Äëlines.\",},(err,info)=>{if(err)throwerr;console.log(info.envelope);console.log(info.messageId);// The complete message is in a single Bufferconsole.log(info.message.toString());});\n3. Generate a JSON‚Äëencoded message object (‚â•‚ÄØv3.1.0)‚Äã\nPassjsonTransport: true(and omitstreamTransport). The resultinginfo.messageis a serialized JSON string that you can later feed back to Nodemailer or inspect in your tests. Binary data such as attachments is base64‚Äëencoded.\njsonTransport: true",
        "source_url": "https://nodemailer.com/transports/stream#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "PassjsonTransport: true(and omitstreamTransport). The resultinginfo.messageis a serialized JSON string that you can later feed back to Nodemailer or inspect in your tests. Binary data such as attachments is base64‚Äëencoded.\njsonTransport: true\nstreamTransport\ninfo.message\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({jsonTransport:true,});transporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"JSON message\",text:\"I hope this message gets JSON‚Äëified!\",},(err,info)=>{if(err)throwerr;console.log(info.envelope);console.log(info.messageId);console.log(info.message);// JSON string});\nconstnodemailer=require(\"nodemailer\");consttransporter=nodemailer.createTransport({jsonTransport:true,});transporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"JSON message\",text:\"I hope this message gets JSON‚Äëified!\",},(err,info)=>{if(err)throwerr;console.log(info.envelope);console.log(info.messageId);console.log(info.message);// JSON string});\nAn abbreviated example of the JSON payload:\n{\"from\":{\"address\":\"sender@example.com\",\"name\":\"\"},\"to\":[{\"address\":\"recipient@example.com\",\"name\":\"\"}],\"subject\":\"JSON message\",\"text\":\"I hope this message gets JSON‚Äëified!\",\"headers\":{},\"messageId\":\"<77a3458f-8070-339d-095f-85bb73f3db8e@example.com>\"}\n{\"from\":{\"address\":\"sender@example.com\",\"name\":\"\"},\"to\":[{\"address\":\"recipient@example.com\",\"name\":\"\"}],\"subject\":\"JSON message\",\"text\":\"I hope this message gets JSON‚Äëified!\",\"headers\":{},\"messageId\":\"<77a3458f-8070-339d-095f-85bb73f3db8e@example.com>\"}\nWhen to choose Stream vs. JSON transport‚Äã\nstreamTransport\njsonTransport\n_raw\nEnabling Stream transportOptionssendMail()callback signature\nOptions\nsendMail()callback signature\nsendMail()\nExamples1. Stream a message with Windows‚Äëstyle new‚Äëlines2. Return aBufferwith Unix‚Äëstyle new‚Äëlines3. Generate a JSON‚Äëencoded message object (‚â•‚ÄØv3.1.0)\n1. Stream a message with Windows‚Äëstyle new‚Äëlines\n2. Return aBufferwith Unix",
        "source_url": "https://nodemailer.com/transports/stream#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": " aBufferwith Unix‚Äëstyle new‚Äëlines3. Generate a JSON‚Äëencoded message object (‚â•‚ÄØv3.1.0)\n1. Stream a message with Windows‚Äëstyle new‚Äëlines\n2. Return aBufferwith Unix‚Äëstyle new‚Äëlines\nBuffer\n3. Generate a JSON‚Äëencoded message object (‚â•‚ÄØv3.1.0)\nWhen to choose Stream vs. JSON transport",
        "source_url": "https://nodemailer.com/transports/stream#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 87
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPluginsCreate plugins\nCreate plugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nPlugins\nPlugins\nNodemailer is designed‚ÄØto beextensible. You can inject custom logic at three well‚Äëdefined phases of a message‚Äôs lifecycle:\ncompile\nstream\ntransport\nPrefercompileandstreamplugins for portability. Transport plugins are only required when you need complete control over delivery.\nWriting a plugin‚Äã\n// commonjs ‚Äî works on Node.js ‚â•¬†6.0.0module.exports=functionmyCompilePlugin(mail,callback){// `mail` is the Nodemailer Mail object// Add or adjust properties before the MIME source is generatedif(!mail.data.text&&mail.data.html){mail.data.text=require(\"html-to-text\").htmlToText(mail.data.html);}callback();// Always invoke the callback (or pass an Error)};\n// commonjs ‚Äî works on Node.js ‚â•¬†6.0.0module.exports=functionmyCompilePlugin(mail,callback){// `mail` is the Nodemailer Mail object// Add or adjust properties before the MIME source is generatedif(!mail.data.text&&mail.data.html){mail.data.text=require(\"html-to-text\").htmlToText(mail.data.html);}callback();// Always invoke the callback (or pass an Error)};\nRegister the plugin on a transport instance:\nconstnodemailer=require(\"nodemailer\");consttransport=nodemailer.createTransport({sendmail:true});transport.use(\"compile\",require(\"./myCompilePlugin\"));\nconstnodemailer=require(\"nodemailer\");consttransport=nodemailer.createTransport({sendmail:true});transport.use(\"compile\",require(\"./myCompilePlugin\"));\nError handling‚Äã\nIf your plugin encounters a fatal problem, pass anErrorobject to the callback:\nError\ncallback(newError(\"Template not found\"));\ncallback(newError(\"Template not found\"));\nThe message willnotbe sent and the error will propagate to the caller‚ÄôssendMail()callback/promise.\nsendMail()\nPublic plugins‚Äã\nA curated selection of community‚Äëmaintained plugins:\nexpress‚Äëhandlebars‚Äì Render Handlebars templates from your Express views directory.https://github.com/yads/nodemailer-express-handlebars\ninline‚Äëbase64‚Äì Convert inline base64‚Äëencoded images to CID attachments.https://github.com/mixmaxhq/nodemailer-plugin-inline-base64\nhtml‚Äëto‚Äëtext‚Äì Automatically generate a plain‚Äëtext version when one is",
        "source_url": "https://nodemailer.com/plugins",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "bars\ninline‚Äëbase64‚Äì Convert inline base64‚Äëencoded images to CID attachments.https://github.com/mixmaxhq/nodemailer-plugin-inline-base64\nhtml‚Äëto‚Äëtext‚Äì Automatically generate a plain‚Äëtext version when one is missing.https://github.com/andris9/nodemailer-html-to-text\nLooking for something else? Trysearching npm for ‚Äúnodemailer plugin‚Äù.\nNeed more power? SeeCreating plugins ¬ªfor a deep dive into the plugin API.\nWriting a pluginError handling\nError handling\nPublic plugins",
        "source_url": "https://nodemailer.com/plugins",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 111
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPluginsCreate plugins\nCreate plugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nPlugins\nPlugins\nNodemailer is designed‚ÄØto beextensible. You can inject custom logic at three well‚Äëdefined phases of a message‚Äôs lifecycle:\ncompile\nstream\ntransport\nPrefercompileandstreamplugins for portability. Transport plugins are only required when you need complete control over delivery.\nWriting a plugin‚Äã\n// commonjs ‚Äî works on Node.js ‚â•¬†6.0.0module.exports=functionmyCompilePlugin(mail,callback){// `mail` is the Nodemailer Mail object// Add or adjust properties before the MIME source is generatedif(!mail.data.text&&mail.data.html){mail.data.text=require(\"html-to-text\").htmlToText(mail.data.html);}callback();// Always invoke the callback (or pass an Error)};\n// commonjs ‚Äî works on Node.js ‚â•¬†6.0.0module.exports=functionmyCompilePlugin(mail,callback){// `mail` is the Nodemailer Mail object// Add or adjust properties before the MIME source is generatedif(!mail.data.text&&mail.data.html){mail.data.text=require(\"html-to-text\").htmlToText(mail.data.html);}callback();// Always invoke the callback (or pass an Error)};\nRegister the plugin on a transport instance:\nconstnodemailer=require(\"nodemailer\");consttransport=nodemailer.createTransport({sendmail:true});transport.use(\"compile\",require(\"./myCompilePlugin\"));\nconstnodemailer=require(\"nodemailer\");consttransport=nodemailer.createTransport({sendmail:true});transport.use(\"compile\",require(\"./myCompilePlugin\"));\nError handling‚Äã\nIf your plugin encounters a fatal problem, pass anErrorobject to the callback:\nError\ncallback(newError(\"Template not found\"));\ncallback(newError(\"Template not found\"));\nThe message willnotbe sent and the error will propagate to the caller‚ÄôssendMail()callback/promise.\nsendMail()\nPublic plugins‚Äã\nA curated selection of community‚Äëmaintained plugins:\nexpress‚Äëhandlebars‚Äì Render Handlebars templates from your Express views directory.https://github.com/yads/nodemailer-express-handlebars\ninline‚Äëbase64‚Äì Convert inline base64‚Äëencoded images to CID attachments.https://github.com/mixmaxhq/nodemailer-plugin-inline-base64\nhtml‚Äëto‚Äëtext‚Äì Automatically generate a plain‚Äëtext version when one is",
        "source_url": "https://nodemailer.com/plugins#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "bars\ninline‚Äëbase64‚Äì Convert inline base64‚Äëencoded images to CID attachments.https://github.com/mixmaxhq/nodemailer-plugin-inline-base64\nhtml‚Äëto‚Äëtext‚Äì Automatically generate a plain‚Äëtext version when one is missing.https://github.com/andris9/nodemailer-html-to-text\nLooking for something else? Trysearching npm for ‚Äúnodemailer plugin‚Äù.\nNeed more power? SeeCreating plugins ¬ªfor a deep dive into the plugin API.\nWriting a pluginError handling\nError handling\nPublic plugins",
        "source_url": "https://nodemailer.com/plugins#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 111
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPluginsCreate plugins\nCreate plugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nPlugins\nCreate plugins\nCreate plugins\nNodemailer exposes three points in the e‚Äëmail delivery pipeline where you can attachplugins:\ncompile‚Äì triggered right after the originalsendMail()input has been received, before any MIME tree has been built. Modifymail.datahere (e.g. tweakhtmlcontents, add headers, etc.).\ncompile\nsendMail()\nmail.data\nhtml\nstream‚Äì triggered after Nodemailer has generated the complete MIME tree butbeforeit starts streaming the raw message. At this stage you can mutate themail.messageobject or inject transform streams that the message is piped through.\nstream\nmail.message\nTransport‚Äì the final step where the raw message stream is sent to its destination. Custom transports implement this stage themselves.\nAttachingcompileandstreamplugins‚Äã\ncompile\nstream\ntransporter.use(step,pluginFn);\ntransporter.use(step,pluginFn);\ntransporter\nObject\nnodemailer.createTransport()\nstep\nString\n'compile'\n'stream'\npluginFn\nFunction(mail, done)\nPlugin API‚Äã\nEvery plugin ‚Äë‚Äë including custom transports ‚Äë‚Äë receives two arguments:\nmail‚Äì¬†Details about the message being processed (see below)\nmail\ndone‚Äì¬†Callbackfunction (err?)whichmustbe invoked when your plugin finishes (pass anErrorto abort the send)\ndone\nfunction (err?)\nError\nmailobject‚Äã\nmail\ndata\ncompile\nstream\nsendMail()\nmessage\nstream\nMimeNode\nresolveContent\ncompile\nstream\nString\nBuffer\nmail.resolveContent(obj, key, callback)‚Äã\nmail.resolveContent(obj, key, callback)\nConvert anyNodemailer content type(file path, URL, Stream, Buffer, etc.) into a plainStringorBuffer.\nString\nBuffer\nmail.resolveContent(sourceObject,propertyName,(err,value)=>{if(err)returndone(err);// value is String or Buffer depending on the input type});\nmail.resolveContent(sourceObject,propertyName,(err,value)=>{if(err)returndone(err);// value is String or Buffer depending on the input type});\nfunctionplugin(mail,done){mail.resolveContent(mail.data,\"html\",(err,html)=>{if(err)returndone(err);console.log(\"HTML contents: %",
        "source_url": "https://nodemailer.com/plugins/create",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "ndone(err);// value is String or Buffer depending on the input type});\nfunctionplugin(mail,done){mail.resolveContent(mail.data,\"html\",(err,html)=>{if(err)returndone(err);console.log(\"HTML contents: %s\",html.toString());done();});}\nfunctionplugin(mail,done){mail.resolveContent(mail.data,\"html\",(err,html)=>{if(err)returndone(err);console.log(\"HTML contents: %s\",html.toString());done();});}\ncompileplugins‚Äã\ncompile\ncompilepluginsonlyreceivemail.data;mail.messagedoesnotyet exist. Mutatemail.datafreely and calldone()when finished. Returning an error abortssendMail().\ncompile\nmail.data\nmail.message\nmail.data\ndone()\nsendMail()\ntext\nhtml\ntransporter.use(\"compile\",(mail,done)=>{if(!mail.data.text&&mail.data.html){mail.data.text=mail.data.html.replace(/<[^>]*>/g,\" \");}done();});\ntransporter.use(\"compile\",(mail,done)=>{if(!mail.data.text&&mail.data.html){mail.data.text=mail.data.html.replace(/<[^>]*>/g,\" \");}done();});\nstreamplugins‚Äã\nstream\nstreamplugins are invokedafterthe MIME tree is ready butbeforethe first byte is sent. You can:\nstream\nMutatemail.message(e.g. add headers)\nmail.message\nPipe the output through additional Transform streams viamail.message.transform()\nmail.message.transform()\nEditingmail.dataat this stage usually hasno effectunless your custom transport explicitly reads the changed property.\nmail.data\nExample ‚Äì replace all tabs with spaces in the outgoing stream‚Äã\nconst{Transform}=require(\"stream\");consttabToSpace=newTransform();tabToSpace._transform=function(chunk,_enc,cb){for(leti=0;i<chunk.length;++i){if(chunk[i]===0x09)chunk[i]=0x20;// 0x09 = TAB, 0x20 = space}this.push(chunk);cb();};transporter.use(\"stream\",(mail,done)=>{mail.message.transform(tabToSpace);done();});\nconst{Transform}=require(\"stream\");consttabToSpace=newTransform();tabToSpace._transform=function(chunk,_enc,cb){for(leti=0;i<chunk.length;++i){if(chunk[i]===0x09)chunk[i]=0x20;//",
        "source_url": "https://nodemailer.com/plugins/create",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "(\"stream\");consttabToSpace=newTransform();tabToSpace._transform=function(chunk,_enc,cb){for(leti=0;i<chunk.length;++i){if(chunk[i]===0x09)chunk[i]=0x20;// 0x09 = TAB, 0x20 = space}this.push(chunk);cb();};transporter.use(\"stream\",(mail,done)=>{mail.message.transform(tabToSpace);done();});\nExample ‚Äì log all address fields‚Äã\ntransporter.use(\"stream\",(mail,done)=>{consta=mail.message.getAddresses();console.log(\"From :\",JSON.stringify(a.from));console.log(\"To   :\",JSON.stringify(a.to));console.log(\"Cc   :\",JSON.stringify(a.cc));console.log(\"Bcc  :\",JSON.stringify(a.bcc));done();});\ntransporter.use(\"stream\",(mail,done)=>{consta=mail.message.getAddresses();console.log(\"From :\",JSON.stringify(a.from));console.log(\"To   :\",JSON.stringify(a.to));console.log(\"Cc   :\",JSON.stringify(a.cc));console.log(\"Bcc  :\",JSON.stringify(a.bcc));done();});\nmail.message.transform(transformStream)‚Äã\nmail.message.transform(transformStream)\nAdd astream.Transform(or a function returning one) through which the raw message is pipedbeforeit reaches the transport.\nstream.Transform\nmail.message.getAddresses()‚Äã\nmail.message.getAddresses()\nReturns an object containing parsed addresses fromFrom,Sender,Reply‚ÄëTo,To,Cc, andBccheaders. Each property is anarrayof{ name, address }. Absent fields are omitted.\n{ name, address }\nWriting a custom transport‚Äã\nA transport is simply an object withname,version, and asend(mail, done)method. Provide the object tonodemailer.createTransport()to create a usable transporter.\nname\nversion\nsend(mail, done)\nnodemailer.createTransport()\nconstnodemailer=require(\"nodemailer\");consttransport={name:require(\"./package.json\").name,// e.g. \"SMTP\"version:require(\"./package.json\").version,// e.g. \"1.0.0\"/*** Actually sends the message.*@param{Object}mail‚Äì the same `mail` object plugins receive*@param{Function}done‚Äì callback `(err, info)`*/send(mail,done){constinput=mail.message.createReadStream();constenvelope=mail.message.getEnvelope();constmessageId=mail.message.messageId();//",
        "source_url": "https://nodemailer.com/plugins/create",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "mail` object plugins receive*@param{Function}done‚Äì callback `(err, info)`*/send(mail,done){constinput=mail.message.createReadStream();constenvelope=mail.message.getEnvelope();constmessageId=mail.message.messageId();// For demo purposes we just pipe to stdoutinput.pipe(process.stdout);input.on(\"end\",()=>{done(null,{envelope,messageId,});});},/* Optional: close long‚Äëlived connections (e.g. pooled SMTP) */close(){// Clean‚Äëup resources here},/* Optional: report idling state (used by pooling)Should return `true` when the transport has capacity to send more messages. */isIdle(){returntrue;},};consttransporter=nodemailer.createTransport(transport);transporter.sendMail({from:\"sender@example.com\",to:\"receiver@example.com\",subject:\"Hello\",text:\"Hello world!\",},console.log);\nconstnodemailer=require(\"nodemailer\");consttransport={name:require(\"./package.json\").name,// e.g. \"SMTP\"version:require(\"./package.json\").version,// e.g. \"1.0.0\"/*** Actually sends the message.*@param{Object}mail‚Äì the same `mail` object plugins receive*@param{Function}done‚Äì callback `(err, info)`*/send(mail,done){constinput=mail.message.createReadStream();constenvelope=mail.message.getEnvelope();constmessageId=mail.message.messageId();// For demo purposes we just pipe to stdoutinput.pipe(process.stdout);input.on(\"end\",()=>{done(null,{envelope,messageId,});});},/* Optional: close long‚Äëlived connections (e.g. pooled SMTP) */close(){// Clean‚Äëup resources here},/* Optional: report idling state (used by pooling)Should return `true` when the transport has capacity to send more messages. */isIdle(){returntrue;},};consttransporter=nodemailer.createTransport(transport);transporter.sendMail({from:\"sender@example.com\",to:\"receiver@example.com\",subject:\"Hello\",text:\"Hello world!\",},console.log);\nSummary‚Äã\nDecide which stage (compile,stream, or customtransport) best suits your use‚Äëcase.\ncompile\nstream\nWrite a plugin function receiving(mail, done)and attach it withtransporter.use()(or implementtransport.send).\n(mail, done)\ntransporter.use()\ntransport.send\nAlways invokedone(err?)to signal completion or abort the",
        "source_url": "https://nodemailer.com/plugins/create",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": "case.\ncompile\nstream\nWrite a plugin function receiving(mail, done)and attach it withtransporter.use()(or implementtransport.send).\n(mail, done)\ntransporter.use()\ntransport.send\nAlways invokedone(err?)to signal completion or abort the send.\ndone(err?)\nHappy Hacking! üöÄ\nAttachingcompileandstreamplugins\ncompile\nstream\nPlugin APImailobjectmail.resolveContent(obj, key, callback)\nmailobject\nmail\nmail.resolveContent(obj, key, callback)\nmail.resolveContent(obj, key, callback)\ncompileplugins\ncompile\nstreampluginsExample ‚Äì replace all tabs with spaces in the outgoing streamExample ‚Äì log all address fieldsmail.message.transform(transformStream)mail.message.getAddresses()\nstream\nExample ‚Äì replace all tabs with spaces in the outgoing stream\nExample ‚Äì log all address fields\nmail.message.transform(transformStream)\nmail.message.transform(transformStream)\nmail.message.getAddresses()\nmail.message.getAddresses()\nWriting a custom transport\nSummary",
        "source_url": "https://nodemailer.com/plugins/create",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 196
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPluginsCreate plugins\nCreate plugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nPlugins\nCreate plugins\nCreate plugins\nNodemailer exposes three points in the e‚Äëmail delivery pipeline where you can attachplugins:\ncompile‚Äì triggered right after the originalsendMail()input has been received, before any MIME tree has been built. Modifymail.datahere (e.g. tweakhtmlcontents, add headers, etc.).\ncompile\nsendMail()\nmail.data\nhtml\nstream‚Äì triggered after Nodemailer has generated the complete MIME tree butbeforeit starts streaming the raw message. At this stage you can mutate themail.messageobject or inject transform streams that the message is piped through.\nstream\nmail.message\nTransport‚Äì the final step where the raw message stream is sent to its destination. Custom transports implement this stage themselves.\nAttachingcompileandstreamplugins‚Äã\ncompile\nstream\ntransporter.use(step,pluginFn);\ntransporter.use(step,pluginFn);\ntransporter\nObject\nnodemailer.createTransport()\nstep\nString\n'compile'\n'stream'\npluginFn\nFunction(mail, done)\nPlugin API‚Äã\nEvery plugin ‚Äë‚Äë including custom transports ‚Äë‚Äë receives two arguments:\nmail‚Äì¬†Details about the message being processed (see below)\nmail\ndone‚Äì¬†Callbackfunction (err?)whichmustbe invoked when your plugin finishes (pass anErrorto abort the send)\ndone\nfunction (err?)\nError\nmailobject‚Äã\nmail\ndata\ncompile\nstream\nsendMail()\nmessage\nstream\nMimeNode\nresolveContent\ncompile\nstream\nString\nBuffer\nmail.resolveContent(obj, key, callback)‚Äã\nmail.resolveContent(obj, key, callback)\nConvert anyNodemailer content type(file path, URL, Stream, Buffer, etc.) into a plainStringorBuffer.\nString\nBuffer\nmail.resolveContent(sourceObject,propertyName,(err,value)=>{if(err)returndone(err);// value is String or Buffer depending on the input type});\nmail.resolveContent(sourceObject,propertyName,(err,value)=>{if(err)returndone(err);// value is String or Buffer depending on the input type});\nfunctionplugin(mail,done){mail.resolveContent(mail.data,\"html\",(err,html)=>{if(err)returndone(err);console.log(\"HTML contents: %",
        "source_url": "https://nodemailer.com/plugins/create#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "ndone(err);// value is String or Buffer depending on the input type});\nfunctionplugin(mail,done){mail.resolveContent(mail.data,\"html\",(err,html)=>{if(err)returndone(err);console.log(\"HTML contents: %s\",html.toString());done();});}\nfunctionplugin(mail,done){mail.resolveContent(mail.data,\"html\",(err,html)=>{if(err)returndone(err);console.log(\"HTML contents: %s\",html.toString());done();});}\ncompileplugins‚Äã\ncompile\ncompilepluginsonlyreceivemail.data;mail.messagedoesnotyet exist. Mutatemail.datafreely and calldone()when finished. Returning an error abortssendMail().\ncompile\nmail.data\nmail.message\nmail.data\ndone()\nsendMail()\ntext\nhtml\ntransporter.use(\"compile\",(mail,done)=>{if(!mail.data.text&&mail.data.html){mail.data.text=mail.data.html.replace(/<[^>]*>/g,\" \");}done();});\ntransporter.use(\"compile\",(mail,done)=>{if(!mail.data.text&&mail.data.html){mail.data.text=mail.data.html.replace(/<[^>]*>/g,\" \");}done();});\nstreamplugins‚Äã\nstream\nstreamplugins are invokedafterthe MIME tree is ready butbeforethe first byte is sent. You can:\nstream\nMutatemail.message(e.g. add headers)\nmail.message\nPipe the output through additional Transform streams viamail.message.transform()\nmail.message.transform()\nEditingmail.dataat this stage usually hasno effectunless your custom transport explicitly reads the changed property.\nmail.data\nExample ‚Äì replace all tabs with spaces in the outgoing stream‚Äã\nconst{Transform}=require(\"stream\");consttabToSpace=newTransform();tabToSpace._transform=function(chunk,_enc,cb){for(leti=0;i<chunk.length;++i){if(chunk[i]===0x09)chunk[i]=0x20;// 0x09 = TAB, 0x20 = space}this.push(chunk);cb();};transporter.use(\"stream\",(mail,done)=>{mail.message.transform(tabToSpace);done();});\nconst{Transform}=require(\"stream\");consttabToSpace=newTransform();tabToSpace._transform=function(chunk,_enc,cb){for(leti=0;i<chunk.length;++i){if(chunk[i]===0x09)chunk[i]=0x20;//",
        "source_url": "https://nodemailer.com/plugins/create#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "(\"stream\");consttabToSpace=newTransform();tabToSpace._transform=function(chunk,_enc,cb){for(leti=0;i<chunk.length;++i){if(chunk[i]===0x09)chunk[i]=0x20;// 0x09 = TAB, 0x20 = space}this.push(chunk);cb();};transporter.use(\"stream\",(mail,done)=>{mail.message.transform(tabToSpace);done();});\nExample ‚Äì log all address fields‚Äã\ntransporter.use(\"stream\",(mail,done)=>{consta=mail.message.getAddresses();console.log(\"From :\",JSON.stringify(a.from));console.log(\"To   :\",JSON.stringify(a.to));console.log(\"Cc   :\",JSON.stringify(a.cc));console.log(\"Bcc  :\",JSON.stringify(a.bcc));done();});\ntransporter.use(\"stream\",(mail,done)=>{consta=mail.message.getAddresses();console.log(\"From :\",JSON.stringify(a.from));console.log(\"To   :\",JSON.stringify(a.to));console.log(\"Cc   :\",JSON.stringify(a.cc));console.log(\"Bcc  :\",JSON.stringify(a.bcc));done();});\nmail.message.transform(transformStream)‚Äã\nmail.message.transform(transformStream)\nAdd astream.Transform(or a function returning one) through which the raw message is pipedbeforeit reaches the transport.\nstream.Transform\nmail.message.getAddresses()‚Äã\nmail.message.getAddresses()\nReturns an object containing parsed addresses fromFrom,Sender,Reply‚ÄëTo,To,Cc, andBccheaders. Each property is anarrayof{ name, address }. Absent fields are omitted.\n{ name, address }\nWriting a custom transport‚Äã\nA transport is simply an object withname,version, and asend(mail, done)method. Provide the object tonodemailer.createTransport()to create a usable transporter.\nname\nversion\nsend(mail, done)\nnodemailer.createTransport()\nconstnodemailer=require(\"nodemailer\");consttransport={name:require(\"./package.json\").name,// e.g. \"SMTP\"version:require(\"./package.json\").version,// e.g. \"1.0.0\"/*** Actually sends the message.*@param{Object}mail‚Äì the same `mail` object plugins receive*@param{Function}done‚Äì callback `(err, info)`*/send(mail,done){constinput=mail.message.createReadStream();constenvelope=mail.message.getEnvelope();constmessageId=mail.message.messageId();//",
        "source_url": "https://nodemailer.com/plugins/create#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "mail` object plugins receive*@param{Function}done‚Äì callback `(err, info)`*/send(mail,done){constinput=mail.message.createReadStream();constenvelope=mail.message.getEnvelope();constmessageId=mail.message.messageId();// For demo purposes we just pipe to stdoutinput.pipe(process.stdout);input.on(\"end\",()=>{done(null,{envelope,messageId,});});},/* Optional: close long‚Äëlived connections (e.g. pooled SMTP) */close(){// Clean‚Äëup resources here},/* Optional: report idling state (used by pooling)Should return `true` when the transport has capacity to send more messages. */isIdle(){returntrue;},};consttransporter=nodemailer.createTransport(transport);transporter.sendMail({from:\"sender@example.com\",to:\"receiver@example.com\",subject:\"Hello\",text:\"Hello world!\",},console.log);\nconstnodemailer=require(\"nodemailer\");consttransport={name:require(\"./package.json\").name,// e.g. \"SMTP\"version:require(\"./package.json\").version,// e.g. \"1.0.0\"/*** Actually sends the message.*@param{Object}mail‚Äì the same `mail` object plugins receive*@param{Function}done‚Äì callback `(err, info)`*/send(mail,done){constinput=mail.message.createReadStream();constenvelope=mail.message.getEnvelope();constmessageId=mail.message.messageId();// For demo purposes we just pipe to stdoutinput.pipe(process.stdout);input.on(\"end\",()=>{done(null,{envelope,messageId,});});},/* Optional: close long‚Äëlived connections (e.g. pooled SMTP) */close(){// Clean‚Äëup resources here},/* Optional: report idling state (used by pooling)Should return `true` when the transport has capacity to send more messages. */isIdle(){returntrue;},};consttransporter=nodemailer.createTransport(transport);transporter.sendMail({from:\"sender@example.com\",to:\"receiver@example.com\",subject:\"Hello\",text:\"Hello world!\",},console.log);\nSummary‚Äã\nDecide which stage (compile,stream, or customtransport) best suits your use‚Äëcase.\ncompile\nstream\nWrite a plugin function receiving(mail, done)and attach it withtransporter.use()(or implementtransport.send).\n(mail, done)\ntransporter.use()\ntransport.send\nAlways invokedone(err?)to signal completion or abort the",
        "source_url": "https://nodemailer.com/plugins/create#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": "case.\ncompile\nstream\nWrite a plugin function receiving(mail, done)and attach it withtransporter.use()(or implementtransport.send).\n(mail, done)\ntransporter.use()\ntransport.send\nAlways invokedone(err?)to signal completion or abort the send.\ndone(err?)\nHappy Hacking! üöÄ\nAttachingcompileandstreamplugins\ncompile\nstream\nPlugin APImailobjectmail.resolveContent(obj, key, callback)\nmailobject\nmail\nmail.resolveContent(obj, key, callback)\nmail.resolveContent(obj, key, callback)\ncompileplugins\ncompile\nstreampluginsExample ‚Äì replace all tabs with spaces in the outgoing streamExample ‚Äì log all address fieldsmail.message.transform(transformStream)mail.message.getAddresses()\nstream\nExample ‚Äì replace all tabs with spaces in the outgoing stream\nExample ‚Äì log all address fields\nmail.message.transform(transformStream)\nmail.message.transform(transformStream)\nmail.message.getAddresses()\nmail.message.getAddresses()\nWriting a custom transport\nSummary",
        "source_url": "https://nodemailer.com/plugins/create#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 196
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nDKIM\nDKIM Signing\nDomainKeys Identified Mail (DKIM) adds a cryptographic signature to every\nout‚Äëgoing message, allowing receiving servers to verify that the message\nreally originates fromyourdomain and has not been altered in transit.\nNodemailer can sign messages with one or more DKIM keyswithoutany extra\ndependencies. In most cases signing is fast and fully in‚Äëmemory. For very large\nmessages you can optionally enable on‚Äëdisk caching so that only the firstcacheTresholdbytes are kept in RAM.\nConfiguration‚Äã\nDKIM can be configured either\nTransport‚Äëwide‚Äì every message sent through the transporter is signed\nwith the same key(s),or\nPer‚Äëmessage‚Äì pass adkimobject in theMailOptionsto override the\ntransport settings.\ndkim\nIf both are present themessage‚Äëlevel settings win.\nDKIM options‚Äã\ndomainName\nstring\nd=\nkeySelector\nstring\n<selector>._domainkey.<domain>\nprivateKey\nstring | Buffer\nkeys\nArray< {domainName, keySelector, privateKey} >\nhashAlgo\n'sha256' | 'sha1'\n'sha256'\nheaderFieldNames\nstring\nskipFields\nstring\nmessage-id:date\ncacheDir\nstring | false\nfalse\ncacheTreshold\nnumber\n131‚ÄØ072\ncacheDir\nThe optioncacheTresholdis intentionally misspelled to preserve backwards‚Äëcompatibility with older Nodemailer versions.\ncacheTreshold\nUsage examples‚Äã\nAll snippets assume at leastNode.js¬†v6and use CommonJS style:\nconstnodemailer=require(\"nodemailer\");\nconstnodemailer=require(\"nodemailer\");\n1¬†‚Äì Sign every message‚Äã\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,dkim:{domainName:\"example.com\",keySelector:\"2017\",privateKey:fs.readFileSync(\"./dkim-private.pem\",\"utf8\"),},});\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,dkim:{domainName:\"example.com\",keySelector:\"2017\",privateKey:fs.readFileSync(\"./dkim-private.pem\",\"utf8\"),},});\nCheck that the TXT record exists:\ndig TXT 201",
        "source_url": "https://nodemailer.com/dkim",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "\",port:465,secure:true,dkim:{domainName:\"example.com\",keySelector:\"2017\",privateKey:fs.readFileSync(\"./dkim-private.pem\",\"utf8\"),},});\nCheck that the TXT record exists:\ndig TXT 2017._domainkey.example.com\ndig TXT 2017._domainkey.example.com\n2¬†‚Äì Sign withmultiplekeys‚Äã\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,dkim:{keys:[{domainName:\"example.com\",keySelector:\"2017\",privateKey:fs.readFileSync(\"./dkim-2017.pem\",\"utf8\"),},{domainName:\"example.com\",keySelector:\"2016\",privateKey:fs.readFileSync(\"./dkim-2016.pem\",\"utf8\"),},],cacheDir:false,// disable disk caching},});\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,dkim:{keys:[{domainName:\"example.com\",keySelector:\"2017\",privateKey:fs.readFileSync(\"./dkim-2017.pem\",\"utf8\"),},{domainName:\"example.com\",keySelector:\"2016\",privateKey:fs.readFileSync(\"./dkim-2016.pem\",\"utf8\"),},],cacheDir:false,// disable disk caching},});\n3¬†‚Äì Signonespecific message‚Äã\nconsttransporter=nodemailer.createTransport({/* no global DKIM */});constinfo=awaittransporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Hello w/ DKIM\",text:\"I hope this message gets read!\",dkim:{domainName:\"example.com\",keySelector:\"2017\",privateKey:fs.readFileSync(\"./dkim-private.pem\",\"utf8\"),},});\nconsttransporter=nodemailer.createTransport({/* no global DKIM */});constinfo=awaittransporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Hello w/ DKIM\",text:\"I hope this message gets read!\",dkim:{domainName:\"example.com\",keySelector:\"2017\",privateKey:fs.readFileSync(\"./dkim-private.pem\",\"utf8\"),},});\n4¬†‚Äì Cache large messages on disk‚Äã\nconsttransporter=nodemailer.createTransport({/* ‚Ä¶SMTP details‚Ä¶ */dkim:{domainName:\"example.com\",keySelector:\"2017\",privateKey:fs.readFileSync(\"./dkim.pem\",\"utf8",
        "source_url": "https://nodemailer.com/dkim",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "‚Äì Cache large messages on disk‚Äã\nconsttransporter=nodemailer.createTransport({/* ‚Ä¶SMTP details‚Ä¶ */dkim:{domainName:\"example.com\",keySelector:\"2017\",privateKey:fs.readFileSync(\"./dkim.pem\",\"utf8\"),cacheDir:\"/tmp\",cacheTreshold:100*1024,// 100¬†kB},});\nconsttransporter=nodemailer.createTransport({/* ‚Ä¶SMTP details‚Ä¶ */dkim:{domainName:\"example.com\",keySelector:\"2017\",privateKey:fs.readFileSync(\"./dkim.pem\",\"utf8\"),cacheDir:\"/tmp\",cacheTreshold:100*1024,// 100¬†kB},});\n5¬†‚Äì Skip mutable headers‚Äã\nWhen sending through services such asAmazon SES,Message‚ÄëIDandDateare often replaced. Exclude these fields so the signature\nsurvives:\nMessage‚ÄëID\nDate\nconsttransporter=nodemailer.createTransport({/* ‚Ä¶SMTP details‚Ä¶ */dkim:{domainName:\"example.com\",keySelector:\"2017\",privateKey:fs.readFileSync(\"./dkim.pem\",\"utf8\"),skipFields:\"message-id:date\",},});\nconsttransporter=nodemailer.createTransport({/* ‚Ä¶SMTP details‚Ä¶ */dkim:{domainName:\"example.com\",keySelector:\"2017\",privateKey:fs.readFileSync(\"./dkim.pem\",\"utf8\"),skipFields:\"message-id:date\",},});\nTroubleshooting‚Äã\nSignature fails‚Äì Ensure the public key is published at<keySelector>._domainkey.<domainName>and isunder 1024‚ÄØchars(some DNS providers truncate long TXT records).\n<keySelector>._domainkey.<domainName>\nHeader fields mismatched‚Äì Add them toskipFieldsor re‚Äëorder your\nheaders to match exactly what is sent on the wire.\nskipFields\nStill stuck?Run a full test with tools such asdkimvalidator.comormail-tester.com.\ndkimvalidator.com\nmail-tester.com\nConfigurationDKIM options\nDKIM options\nUsage examples1¬†‚Äì Sign every message2¬†‚Äì Sign withmultiplekeys3¬†‚Äì Signonespecific message4¬†‚Äì Cache large messages on disk5¬†‚Äì Skip mutable headers\n1¬†‚Äì Sign every message\n2¬†‚Äì Sign withmultiplekeys\n3¬†‚Äì Signonespecific message\n4¬†‚Äì Cache large messages on disk\n5¬†‚Äì Skip mutable headers\nTroubleshooting",
        "source_url": "https://nodemailer.com/dkim",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 487
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": " message\n2¬†‚Äì Sign withmultiplekeys\n3¬†‚Äì Signonespecific message\n4¬†‚Äì Cache large messages on disk\n5¬†‚Äì Skip mutable headers\nTroubleshooting",
        "source_url": "https://nodemailer.com/dkim",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 37
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nDKIM\nDKIM Signing\nDomainKeys Identified Mail (DKIM) adds a cryptographic signature to every\nout‚Äëgoing message, allowing receiving servers to verify that the message\nreally originates fromyourdomain and has not been altered in transit.\nNodemailer can sign messages with one or more DKIM keyswithoutany extra\ndependencies. In most cases signing is fast and fully in‚Äëmemory. For very large\nmessages you can optionally enable on‚Äëdisk caching so that only the firstcacheTresholdbytes are kept in RAM.\nConfiguration‚Äã\nDKIM can be configured either\nTransport‚Äëwide‚Äì every message sent through the transporter is signed\nwith the same key(s),or\nPer‚Äëmessage‚Äì pass adkimobject in theMailOptionsto override the\ntransport settings.\ndkim\nIf both are present themessage‚Äëlevel settings win.\nDKIM options‚Äã\ndomainName\nstring\nd=\nkeySelector\nstring\n<selector>._domainkey.<domain>\nprivateKey\nstring | Buffer\nkeys\nArray< {domainName, keySelector, privateKey} >\nhashAlgo\n'sha256' | 'sha1'\n'sha256'\nheaderFieldNames\nstring\nskipFields\nstring\nmessage-id:date\ncacheDir\nstring | false\nfalse\ncacheTreshold\nnumber\n131‚ÄØ072\ncacheDir\nThe optioncacheTresholdis intentionally misspelled to preserve backwards‚Äëcompatibility with older Nodemailer versions.\ncacheTreshold\nUsage examples‚Äã\nAll snippets assume at leastNode.js¬†v6and use CommonJS style:\nconstnodemailer=require(\"nodemailer\");\nconstnodemailer=require(\"nodemailer\");\n1¬†‚Äì Sign every message‚Äã\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,dkim:{domainName:\"example.com\",keySelector:\"2017\",privateKey:fs.readFileSync(\"./dkim-private.pem\",\"utf8\"),},});\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,dkim:{domainName:\"example.com\",keySelector:\"2017\",privateKey:fs.readFileSync(\"./dkim-private.pem\",\"utf8\"),},});\nCheck that the TXT record exists:\ndig TXT 201",
        "source_url": "https://nodemailer.com/dkim#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "\",port:465,secure:true,dkim:{domainName:\"example.com\",keySelector:\"2017\",privateKey:fs.readFileSync(\"./dkim-private.pem\",\"utf8\"),},});\nCheck that the TXT record exists:\ndig TXT 2017._domainkey.example.com\ndig TXT 2017._domainkey.example.com\n2¬†‚Äì Sign withmultiplekeys‚Äã\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,dkim:{keys:[{domainName:\"example.com\",keySelector:\"2017\",privateKey:fs.readFileSync(\"./dkim-2017.pem\",\"utf8\"),},{domainName:\"example.com\",keySelector:\"2016\",privateKey:fs.readFileSync(\"./dkim-2016.pem\",\"utf8\"),},],cacheDir:false,// disable disk caching},});\nconsttransporter=nodemailer.createTransport({host:\"smtp.example.com\",port:465,secure:true,dkim:{keys:[{domainName:\"example.com\",keySelector:\"2017\",privateKey:fs.readFileSync(\"./dkim-2017.pem\",\"utf8\"),},{domainName:\"example.com\",keySelector:\"2016\",privateKey:fs.readFileSync(\"./dkim-2016.pem\",\"utf8\"),},],cacheDir:false,// disable disk caching},});\n3¬†‚Äì Signonespecific message‚Äã\nconsttransporter=nodemailer.createTransport({/* no global DKIM */});constinfo=awaittransporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Hello w/ DKIM\",text:\"I hope this message gets read!\",dkim:{domainName:\"example.com\",keySelector:\"2017\",privateKey:fs.readFileSync(\"./dkim-private.pem\",\"utf8\"),},});\nconsttransporter=nodemailer.createTransport({/* no global DKIM */});constinfo=awaittransporter.sendMail({from:\"sender@example.com\",to:\"recipient@example.com\",subject:\"Hello w/ DKIM\",text:\"I hope this message gets read!\",dkim:{domainName:\"example.com\",keySelector:\"2017\",privateKey:fs.readFileSync(\"./dkim-private.pem\",\"utf8\"),},});\n4¬†‚Äì Cache large messages on disk‚Äã\nconsttransporter=nodemailer.createTransport({/* ‚Ä¶SMTP details‚Ä¶ */dkim:{domainName:\"example.com\",keySelector:\"2017\",privateKey:fs.readFileSync(\"./dkim.pem\",\"utf8",
        "source_url": "https://nodemailer.com/dkim#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "‚Äì Cache large messages on disk‚Äã\nconsttransporter=nodemailer.createTransport({/* ‚Ä¶SMTP details‚Ä¶ */dkim:{domainName:\"example.com\",keySelector:\"2017\",privateKey:fs.readFileSync(\"./dkim.pem\",\"utf8\"),cacheDir:\"/tmp\",cacheTreshold:100*1024,// 100¬†kB},});\nconsttransporter=nodemailer.createTransport({/* ‚Ä¶SMTP details‚Ä¶ */dkim:{domainName:\"example.com\",keySelector:\"2017\",privateKey:fs.readFileSync(\"./dkim.pem\",\"utf8\"),cacheDir:\"/tmp\",cacheTreshold:100*1024,// 100¬†kB},});\n5¬†‚Äì Skip mutable headers‚Äã\nWhen sending through services such asAmazon SES,Message‚ÄëIDandDateare often replaced. Exclude these fields so the signature\nsurvives:\nMessage‚ÄëID\nDate\nconsttransporter=nodemailer.createTransport({/* ‚Ä¶SMTP details‚Ä¶ */dkim:{domainName:\"example.com\",keySelector:\"2017\",privateKey:fs.readFileSync(\"./dkim.pem\",\"utf8\"),skipFields:\"message-id:date\",},});\nconsttransporter=nodemailer.createTransport({/* ‚Ä¶SMTP details‚Ä¶ */dkim:{domainName:\"example.com\",keySelector:\"2017\",privateKey:fs.readFileSync(\"./dkim.pem\",\"utf8\"),skipFields:\"message-id:date\",},});\nTroubleshooting‚Äã\nSignature fails‚Äì Ensure the public key is published at<keySelector>._domainkey.<domainName>and isunder 1024‚ÄØchars(some DNS providers truncate long TXT records).\n<keySelector>._domainkey.<domainName>\nHeader fields mismatched‚Äì Add them toskipFieldsor re‚Äëorder your\nheaders to match exactly what is sent on the wire.\nskipFields\nStill stuck?Run a full test with tools such asdkimvalidator.comormail-tester.com.\ndkimvalidator.com\nmail-tester.com\nConfigurationDKIM options\nDKIM options\nUsage examples1¬†‚Äì Sign every message2¬†‚Äì Sign withmultiplekeys3¬†‚Äì Signonespecific message4¬†‚Äì Cache large messages on disk5¬†‚Äì Skip mutable headers\n1¬†‚Äì Sign every message\n2¬†‚Äì Sign withmultiplekeys\n3¬†‚Äì Signonespecific message\n4¬†‚Äì Cache large messages on disk\n5¬†‚Äì Skip mutable headers\nTroubleshooting",
        "source_url": "https://nodemailer.com/dkim#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 487
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": " message\n2¬†‚Äì Sign withmultiplekeys\n3¬†‚Äì Signonespecific message\n4¬†‚Äì Cache large messages on disk\n5¬†‚Äì Skip mutable headers\nTroubleshooting",
        "source_url": "https://nodemailer.com/dkim#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 37
    },
    {
        "chunk_id": "Nodemailer",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nExtra modules\nBeyond Nodemailer itself, a collection of companion libraries can help you receive, compose, parse, and preview e‚Äëmail inside your Node.js applications.\nOfficial companion libraries‚Äã\nsmtp-server‚Äì Accept inbound SMTP connections and build a custom SMTP server or test harness.\nsmtp-connection‚Äì Low‚Äëlevel SMTP client for establishing outbound SMTP connections; the building block used by Nodemailer‚Äôs SMTP transport.\nmailparser‚Äì Streaming parser that converts raw RFC‚ÄØ822 e‚Äëmail into a structured JavaScript object you can easily inspect.\nmailcomposer‚Äì Utility for generating RFC‚ÄØ822‚Äëcompliant message bodies from a JavaScript object. Handy when you need a MIME string but do not want to send it right away.\nRelated projects‚Äã\nEmailEngine‚Äì Self‚Äëhosted REST interface that exposes any IMAP mailbox over HTTP and sends mail over SMTP. Offers webhook push notifications for real‚Äëtime updates.\nImapFlow‚Äì Modern Promise‚Äëbased IMAP client designed for EmailEngine but fully usable on its own.\nmailauth‚Äì Validate and generate SPF, DKIM, DMARC, ARC, and BIMI records in Node.js.\nemail-templates‚Äì Framework for creating, previewing (browser/iOS Simulator), and sending custom e‚Äëmail templates.\npreview-email‚Äì Automatically opens your browser to preview e‚Äëmails generated with Nodemailer during development.\nNote:The first four packages are maintained within the Nodemailer GitHub organisation and follow the same release cadence as Nodemailer itself. The rest are separate open‚Äësource projects maintained by the wider community.\nOfficial companion libraries\nRelated projects",
        "source_url": "https://nodemailer.com/extras",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 382
    },
    {
        "chunk_id": "Nodemailer",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nExtra modules\nBeyond Nodemailer itself, a collection of companion libraries can help you receive, compose, parse, and preview e‚Äëmail inside your Node.js applications.\nOfficial companion libraries‚Äã\nsmtp-server‚Äì Accept inbound SMTP connections and build a custom SMTP server or test harness.\nsmtp-connection‚Äì Low‚Äëlevel SMTP client for establishing outbound SMTP connections; the building block used by Nodemailer‚Äôs SMTP transport.\nmailparser‚Äì Streaming parser that converts raw RFC‚ÄØ822 e‚Äëmail into a structured JavaScript object you can easily inspect.\nmailcomposer‚Äì Utility for generating RFC‚ÄØ822‚Äëcompliant message bodies from a JavaScript object. Handy when you need a MIME string but do not want to send it right away.\nRelated projects‚Äã\nEmailEngine‚Äì Self‚Äëhosted REST interface that exposes any IMAP mailbox over HTTP and sends mail over SMTP. Offers webhook push notifications for real‚Äëtime updates.\nImapFlow‚Äì Modern Promise‚Äëbased IMAP client designed for EmailEngine but fully usable on its own.\nmailauth‚Äì Validate and generate SPF, DKIM, DMARC, ARC, and BIMI records in Node.js.\nemail-templates‚Äì Framework for creating, previewing (browser/iOS Simulator), and sending custom e‚Äëmail templates.\npreview-email‚Äì Automatically opens your browser to preview e‚Äëmails generated with Nodemailer during development.\nNote:The first four packages are maintained within the Nodemailer GitHub organisation and follow the same release cadence as Nodemailer itself. The rest are separate open‚Äësource projects maintained by the wider community.\nOfficial companion libraries\nRelated projects",
        "source_url": "https://nodemailer.com/extras#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 382
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nSMTP Server\nSMTP Server\nCreate SMTP and LMTP server instances on the fly.smtp‚Äëserverisnota full‚Äëblown server application likeHarakabut a convenient way to add custom SMTP or LMTP listeners to your app. It is the successor of the server part of the now‚Äëdeprecatedsimplesmtpmodule. For a matching SMTP client, seesmtp‚Äëconnection.\nUsage‚Äã\n1¬†‚Äî¬†Install‚Äã\nnpm install smtp-server --save\nnpm install smtp-server --save\n2¬†‚Äî¬†Require in your script‚Äã\nconst{SMTPServer}=require(\"smtp-server\");\nconst{SMTPServer}=require(\"smtp-server\");\n3¬†‚Äî¬†Create a server instance‚Äã\nconstserver=newSMTPServer(options);\nconstserver=newSMTPServer(options);\n4¬†‚Äî¬†Start listening‚Äã\nserver.listen(port[,host][,callback]);\nserver.listen(port[,host][,callback]);\n5¬†‚Äî¬†Shut down‚Äã\nserver.close(callback);\nserver.close(callback);\nOptions reference‚Äã\nBoolean\nfalse\nSTARTTLS\nfalse\nString\nos.hostname()\nString\nNumber\n0\n0\nBoolean\nfalse\nstream.sizeExceeded\nString[]\n['PLAIN', 'LOGIN']\n'XOAUTH2'\n'CRAM-MD5'\nBoolean\nfalse\nString[]\n['AUTH']\nBoolean\nfalse\nBoolean\ntrue\nENHANCEDSTATUSCODES\nEHLO\nBoolean\ntrue\nDSN\nEHLO\nBoolean\nfalse\nBoolean\nfalse\nMap | Object\nBoolean | Object\nfalse\ntrue\nconsole\nNumber\nInfinity\nBoolean\nfalse\nBoolean\nfalse\nBoolean\nfalse\nNumber\n60_000\nNumber\n30_000\nclose()\nFunction\nObject\n.reverse\ndns\ndns.reverse\nYou may also pass anynet.createServeroptions and, whensecureistrue, anytls.createServeroptions.\nnet.createServer\nsecure\ntrue\ntls.createServer\nTLS and STARTTLS‚Äã\nIf you enable TLS (secure: true)orleaveSTARTTLSenabled, ship a proper certificate viakey,cert, and optionallyca. Otherwisesmtp‚Äëserverfalls back to a self‚Äësigned cert forlocalhost, which almost",
        "source_url": "https://nodemailer.com/extras/smtp-server",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "‚Äã\nIf you enable TLS (secure: true)orleaveSTARTTLSenabled, ship a proper certificate viakey,cert, and optionallyca. Otherwisesmtp‚Äëserverfalls back to a self‚Äësigned cert forlocalhost, which almost every client rejects.\nsecure: true\nSTARTTLS\nkey\ncert\nca\nlocalhost\nconstfs=require(\"fs\");constserver=newSMTPServer({secure:true,key:fs.readFileSync(\"private.key\"),cert:fs.readFileSync(\"server.crt\"),});server.listen(465);\nconstfs=require(\"fs\");constserver=newSMTPServer({secure:true,key:fs.readFileSync(\"private.key\"),cert:fs.readFileSync(\"server.crt\"),});server.listen(465);\nHandling errors‚Äã\nAttach anerrorlistener to surface server errors:\nerror\nserver.on(\"error\",(err)=>{console.error(\"SMTP Server error:\",err.message);});\nserver.on(\"error\",(err)=>{console.error(\"SMTP Server error:\",err.message);});\nHandling authentication (onAuth)‚Äã\nonAuth\nconstserver=newSMTPServer({onAuth(auth,session,callback){// auth.method ‚Üí 'PLAIN', 'LOGIN', 'XOAUTH2', or 'CRAM-MD5'// Return `callback(err)` to reject, `callback(null, response)` to accept},});\nconstserver=newSMTPServer({onAuth(auth,session,callback){// auth.method ‚Üí 'PLAIN', 'LOGIN', 'XOAUTH2', or 'CRAM-MD5'// Return `callback(err)` to reject, `callback(null, response)` to accept},});\nPassword‚Äëbased (PLAIN / LOGIN)‚Äã\nonAuth(auth,session,cb){if(auth.username!==\"alice\"||auth.password!==\"s3cr3t\"){returncb(newError(\"Invalid username or password\"));}cb(null,{user:auth.username});}\nonAuth(auth,session,cb){if(auth.username!==\"alice\"||auth.password!==\"s3cr3t\"){returncb(newError(\"Invalid username or password\"));}cb(null,{user:auth.username});}\nOAuth¬†2 (XOAUTH2)‚Äã\nXOAUTH2\nconstserver=newSMTPServer({authMethods:[\"XOAUTH2\"],onAuth(auth,session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth",
        "source_url": "https://nodemailer.com/extras/smtp-server",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": ",session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth.username});},});\nconstserver=newSMTPServer({authMethods:[\"XOAUTH2\"],onAuth(auth,session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth.username});},});\nValidating client connection (onConnect/onClose)‚Äã\nonConnect\nonClose\nconstserver=newSMTPServer({onConnect(session,cb){if(session.remoteAddress===\"127.0.0.1\"){returncb(newError(\"Connections from localhost are not allowed\"));}cb();// accept},onClose(session){console.log(`Connection from${session.remoteAddress}closed`);},});\nconstserver=newSMTPServer({onConnect(session,cb){if(session.remoteAddress===\"127.0.0.1\"){returncb(newError(\"Connections from localhost are not allowed\"));}cb();// accept},onClose(session){console.log(`Connection from${session.remoteAddress}closed`);},});\nValidating TLS information (onSecure)‚Äã\nonSecure\nonSecure(socket,session,cb){if(session.servername!==\"mail.example.com\"){returncb(newError(\"SNI mismatch\"));}cb();}\nonSecure(socket,session,cb){if(session.servername!==\"mail.example.com\"){returncb(newError(\"SNI mismatch\"));}cb();}\nValidating sender (onMailFrom)‚Äã\nonMailFrom\nonMailFrom(address,session,cb){if(!address.address.endsWith(\"@example.com\")){returncb(Object.assign(newError(\"Relay denied\"),{responseCode:553}));}cb();}\nonMailFrom(address,session,cb){if(!address.address.endsWith(\"@example.com\")){returncb(Object.assign(newError(\"Relay denied\"),{responseCode:553}));}cb();}\nValidating recipients (onRcptTo)‚Äã\nonRcptTo\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(new",
        "source_url": "https://nodemailer.com/extras/smtp-server",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "cptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nProcessing incoming messages (onData)‚Äã\nonData\nonData(stream,session,cb){constwrite=require(\"fs\").createWriteStream(\"/tmp/message.eml\");stream.pipe(write);stream.on(\"end\",()=>cb(null,\"Queued\"));}\nonData(stream,session,cb){constwrite=require(\"fs\").createWriteStream(\"/tmp/message.eml\");stream.pipe(write);stream.on(\"end\",()=>cb(null,\"Queued\"));}\nsmtp‚Äëserverstreams your messageverbatim‚Äî noReceived:header is added. Add one yourself if you need full RFC¬†5321 compliance.\nReceived:\nUsing the SIZE extension‚Äã\nSet thesizeoption to advertise a limit, then checkstream.sizeExceededinonData:\nsize\nstream.sizeExceeded\nonData\nconstserver=newSMTPServer({size:1024*1024,// 1¬†MiBonData(s,sess,cb){s.on(\"end\",()=>{if(s.sizeExceeded){consterr=Object.assign(newError(\"Message too large\"),{responseCode:552});returncb(err);}cb(null,\"OK\");});},});\nconstserver=newSMTPServer({size:1024*1024,// 1¬†MiBonData(s,sess,cb){s.on(\"end\",()=>{if(s.sizeExceeded){consterr=Object.assign(newError(\"Message too large\"),{responseCode:552});returncb(err);}cb(null,\"OK\");});},});\nUsing LMTP‚Äã\nconstserver=newSMTPServer({lmtp:true,onData(stream,session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):`<${rcpt.address}> accepted`));cb(null,replies);});},});\nconstserver=newSMTPServer({lmtp:true,onData(stream,session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):",
        "source_url": "https://nodemailer.com/extras/smtp-server",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": ",session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):`<${rcpt.address}> accepted`));cb(null,replies);});},});\nSession object‚Äã\nString\nString\nString\nremoteAddress\ndisableReverseLookup\n\"HELO\" | \"EHLO\" | \"LHLO\"\nString\nObject\nmailFrom\nrcptTo\ndsn\nany\nonAuth\nNumber\n\"SMTP\" | \"ESMTP\" | \"ESMTPA\" ‚Ä¶\nReceived:\nEnvelope object‚Äã\nThesession.envelopeobject contains transaction-specific data:\nsession.envelope\n{\"mailFrom\": {\"address\": \"sender@example.com\",\"args\": { \"SIZE\": \"12345\", \"RET\": \"HDRS\" },\"dsn\": { \"ret\": \"HDRS\", \"envid\": \"abc123\" }},\"rcptTo\": [{\"address\": \"user1@example.com\",\"args\": { \"NOTIFY\": \"SUCCESS,FAILURE\" },\"dsn\": { \"notify\": [\"SUCCESS\", \"FAILURE\"], \"orcpt\": \"rfc822;user1@example.com\" }}],\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\"}}\n{\"mailFrom\": {\"address\": \"sender@example.com\",\"args\": { \"SIZE\": \"12345\", \"RET\": \"HDRS\" },\"dsn\": { \"ret\": \"HDRS\", \"envid\": \"abc123\" }},\"rcptTo\": [{\"address\": \"user1@example.com\",\"args\": { \"NOTIFY\": \"SUCCESS,FAILURE\" },\"dsn\": { \"notify\": [\"SUCCESS\", \"FAILURE\"], \"orcpt\": \"rfc822;user1@example.com\" }}],\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\"}}\nObject\nObject[]\nObject\nAddress object‚Äã\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\":",
        "source_url": "https://nodemailer.com/extras/smtp-server",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part6",
        "text": "123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\nMAIL FROM:\nRCPT TO:\nDSN Object Properties‚Äã\nString\n'FULL'\n'HDRS'\nString\nString[]\nString\nEnhanced Status Codes (RFC 2034/3463)‚Äã\nsmtp‚ÄëserversupportsEnhanced Status Codesas defined in RFC 2034 and RFC 3463. When enabled, all SMTP responses include enhanced status codes in the formatX.Y.Z:\nX.Y.Z\n250 2.1.0 Accepted        ‚Üê Enhanced status code: 2.1.0550 5.1.1 Mailbox unavailable ‚Üê Enhanced status code: 5.1.1\n250 2.1.0 Accepted        ‚Üê Enhanced status code: 2.1.0550 5.1.1 Mailbox unavailable ‚Üê Enhanced status code: 5.1.1\nEnabling Enhanced Status Codes‚Äã\nTo enable enhanced status codes (they are disabled by default):\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:false,// Enable enhanced status codesonMailFrom(address,session,callback){callback();// Response: \"250 2.1.0 Accepted\" (with enhanced code)},});\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:false,// Enable enhanced status codesonMailFrom(address,session,callback){callback();// Response: \"250 2.1.0 Accepted\" (with enhanced code)},});\nDisabling Enhanced Status Codes‚Äã\nEnhanced status codes are disabled by default, but you can explicitly disable them:\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:true,// Explicitly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:true,// Explicitly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nEnhanced Status Code Examples‚Äã\n250\n2.0.0\n250\n2.",
        "source_url": "https://nodemailer.com/extras/smtp-server",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part7",
        "text": "ly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nEnhanced Status Code Examples‚Äã\n250\n2.0.0\n250\n2.1.0\n250\n2.1.5\n250\n2.6.0\n501\n5.5.4\n550\n5.1.1\n552\n5.2.2\nDSN (Delivery Status Notification) Support‚Äã\nsmtp‚Äëserverfully supportsDSN parametersas defined in RFC 3461, allowing clients to request delivery status notifications.\nDSN functionality requiresdelivery status notificationsto be enabled. Since delivery status notifications are disabled by default, you must sethideDSN: falseto use DSN features.\nhideDSN: false\nDSN Parameters‚Äã\nRET=FULLorRET=HDRS‚Äî Return full message or headers only in DSN\nRET=FULL\nRET=HDRS\nENVID=<envelope-id>‚Äî Envelope identifier for tracking\nENVID=<envelope-id>\n// Client sends: MAIL FROM:<sender@example.com> RET=FULL ENVID=abc123\n// Client sends: MAIL FROM:<sender@example.com> RET=FULL ENVID=abc123\nNOTIFY=SUCCESS,FAILURE,DELAY,NEVER‚Äî When to send DSN\nNOTIFY=SUCCESS,FAILURE,DELAY,NEVER\nORCPT=<original-recipient>‚Äî Original recipient for tracking\nORCPT=<original-recipient>\n// Client sends: RCPT TO:<user@example.com> NOTIFY=SUCCESS,FAILURE ORCPT=rfc822;user@example.com\n// Client sends: RCPT TO:<user@example.com> NOTIFY=SUCCESS,FAILURE ORCPT=rfc822;user@example.com\nAccessing DSN Parameters‚Äã\nDSN parameters are available in your callback handlers:\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){// Access DSN parameters from MAIL FROMconstret=session.envelope.dsn.ret;// 'FULL' or 'HDRS'constenvid=session.envelope.dsn.envid;// Envelope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE',",
        "source_url": "https://nodemailer.com/extras/smtp-server",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part8",
        "text": "velope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE', 'DELAY']constorcpt=address.dsn.orcpt;// Original recipientconsole.log(`NOTIFY:${notify.join(\",\")}, ORCPT:${orcpt}`);callback();},});\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){// Access DSN parameters from MAIL FROMconstret=session.envelope.dsn.ret;// 'FULL' or 'HDRS'constenvid=session.envelope.dsn.envid;// Envelope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE', 'DELAY']constorcpt=address.dsn.orcpt;// Original recipientconsole.log(`NOTIFY:${notify.join(\",\")}, ORCPT:${orcpt}`);callback();},});\nDSN Parameter Validation‚Äã\nsmtp‚Äëserverautomatically validates DSN parameters:\nRETmust beFULLorHDRS\nRET\nFULL\nHDRS\nNOTIFYmust beSUCCESS,FAILURE,DELAY, orNEVER\nNOTIFY\nSUCCESS\nFAILURE\nDELAY\nNEVER\nNOTIFY=NEVERcannot be combined with other values\nNOTIFY=NEVER\nInvalid parameters return appropriate error responses with enhanced status codes\nComplete DSN Example‚Äã\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){const{ret,envid}=session.envelope.dsn;console.log(`Mail from${address.address}, RET=${ret}, ENVID=${envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`Rcpt to${address.address}, NOTIFY=${notify.join(\",\")}, ORCPT=${orcpt}`);callback();},onData(stream,session,callback){// Process message with DSN contextconst{dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nconstserver=newSMTPServer({hide",
        "source_url": "https://nodemailer.com/extras/smtp-server",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part9",
        "text": "dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){const{ret,envid}=session.envelope.dsn;console.log(`Mail from${address.address}, RET=${ret}, ENVID=${envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`Rcpt to${address.address}, NOTIFY=${notify.join(\",\")}, ORCPT=${orcpt}`);callback();},onData(stream,session,callback){// Process message with DSN contextconst{dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nProduction DSN Implementation Example‚Äã\nHere's a complete example showing how to implement DSN notifications using nodemailer:\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransporter({host:\"smtp.example.com\",port:587,secure:false,auth:{user:\"dsn-sender@example.com\",pass:\"your-password\",},});// DSN notification generatorclassDSNNotifier{constructor(transporter){this.transporter=transporter;}asyncsendSuccessNotification(envelope,messageId,deliveryTime){// Only send if SUCCESS notification was requestedconstneedsSuccessNotification=envelope.rcptTo.some((rcpt)=>rcpt.dsn.notify&&rcpt.dsn.notify.includes(\"SUCCESS\"));if(!needsSuccessNotification||!envelope.mailFrom.address){return;}constdsnMessage=this.generateDSNMessage({action:\"delivered\",status:\"2.0.0\",envelope,messageId,deliveryTime,diagnosticCode:\"smtp; 250 2.0.0 Message accepted for delivery\",});awaitthis.transporter.sendMail({from:\"postmaster@example.com\",to:envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSN",
        "source_url": "https://nodemailer.com/extras/smtp-server",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part10",
        "text": ":envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSNMessage({action,status,envelope,messageId,deliveryTime,diagnosticCode}){const{dsn}=envelope;consttimestamp=deliveryTime||newDate().toISOString();// Generate RFC 3464 compliant delivery status notificationconsttext=`This is an automatically generated Delivery Status Notification.Original Message Details:- Message ID:${messageId}- Envelope ID:${dsn.envid||\"Not provided\"}- Sender:${envelope.mailFrom.address}- Recipients:${envelope.rcptTo.map((r)=>r.address).join(\", \")}- Action:${action}- Status:${status}- Time:${timestamp}${action===\"delivered\"?\"Your message has been successfully delivered to all recipients.\":\"Delivery failed for one or more recipients.\"}`;return{text};}}// Create DSN notifier instanceconstdsnNotifier=newDSNNotifier(dsnTransporter);// SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${address.address}, RET=${dsn.ret}, ENVID=${dsn.envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`RCPT TO:${address.address}, NOTIFY=${notify?.join(\",\")}, ORCPT=${orcpt}`);callback();},asynconData(stream,session,callback){constmessageId=`msg-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;stream.on(\"end\",async()=>{try{// Simulate message deliveryconstdeliveryTime=newDate();// Send DSN success notification if requestedawaitdsnNotifier.sendSuccessNotification(session.envelope,messageId,deliveryTime);callback(null,`Message${messageId}accepted for delivery`);}catch(error){callback(error);}});stream.resume();},});server.listen(2525,()=>{console.log(\"DSN-enabled SMTP server listening on port 2525\");});\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransport",
        "source_url": "https://nodemailer.com/extras/smtp-server",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part11",
        "text": "DSN-enabled SMTP server listening on port 2525\");});\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransporter({host:\"smtp.example.com\",port:587,secure:false,auth:{user:\"dsn-sender@example.com\",pass:\"your-password\",},});// DSN notification generatorclassDSNNotifier{constructor(transporter){this.transporter=transporter;}asyncsendSuccessNotification(envelope,messageId,deliveryTime){// Only send if SUCCESS notification was requestedconstneedsSuccessNotification=envelope.rcptTo.some((rcpt)=>rcpt.dsn.notify&&rcpt.dsn.notify.includes(\"SUCCESS\"));if(!needsSuccessNotification||!envelope.mailFrom.address){return;}constdsnMessage=this.generateDSNMessage({action:\"delivered\",status:\"2.0.0\",envelope,messageId,deliveryTime,diagnosticCode:\"smtp; 250 2.0.0 Message accepted for delivery\",});awaitthis.transporter.sendMail({from:\"postmaster@example.com\",to:envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSNMessage({action,status,envelope,messageId,deliveryTime,diagnosticCode}){const{dsn}=envelope;consttimestamp=deliveryTime||newDate().toISOString();// Generate RFC 3464 compliant delivery status notificationconsttext=`This is an automatically generated Delivery Status Notification.Original Message Details:- Message ID:${messageId}- Envelope ID:${dsn.envid||\"Not provided\"}- Sender:${envelope.mailFrom.address}- Recipients:${envelope.rcptTo.map((r)=>r.address).join(\", \")}- Action:${action}- Status:${status}- Time:${timestamp}${action===\"delivered\"?\"Your message has been successfully delivered to all recipients.\":\"Delivery failed for one or more recipients.\"}`;return{text};}}// Create DSN notifier instanceconstdsnNotifier=newDSNNotifier(dsnTransporter);// SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${",
        "source_url": "https://nodemailer.com/extras/smtp-server",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part12",
        "text": " SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${address.address}, RET=${dsn.ret}, ENVID=${dsn.envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`RCPT TO:${address.address}, NOTIFY=${notify?.join(\",\")}, ORCPT=${orcpt}`);callback();},asynconData(stream,session,callback){constmessageId=`msg-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;stream.on(\"end\",async()=>{try{// Simulate message deliveryconstdeliveryTime=newDate();// Send DSN success notification if requestedawaitdsnNotifier.sendSuccessNotification(session.envelope,messageId,deliveryTime);callback(null,`Message${messageId}accepted for delivery`);}catch(error){callback(error);}});stream.resume();},});server.listen(2525,()=>{console.log(\"DSN-enabled SMTP server listening on port 2525\");});\nThis example demonstrates:\nComplete DSN workflowfrom parameter parsing to notification sending\nRFC-compliant DSN messageswith proper headers and content\nConditional notificationsbased on NOTIFY parameters\nIntegration with nodemailerfor sending DSN notifications\nProduction-ready structurewith error handling\nSupported commands and extensions‚Äã\nCommands‚Äã\nEHLO/HELO\nEHLO\nHELO\nAUTHLOGIN¬∑PLAIN¬∑XOAUTH2‚Ä†¬†¬∑CRAM‚ÄëMD5‚Ä†\nAUTH\nLOGIN\nPLAIN\nXOAUTH2\nCRAM‚ÄëMD5\nMAIL/RCPT/DATA\nMAIL\nRCPT\nDATA\nRSET/NOOP/QUIT/VRFY\nRSET\nNOOP\nQUIT\nVRFY\nHELP(returns RFC¬†5321 URL)\nHELP\nSTARTTLS\nSTARTTLS\n‚Ä†XOAUTH2andCRAM‚ÄëMD5must be enabled viaauthMethods.\nXOAUTH2\nCRAM‚ÄëMD5\nauthMethods\nExtensions‚Äã\nPIPELINING\nPIPELINING\n8BITMIME\n8BITMIME\nSMTPUTF8\nSMTPUTF8\nSIZE\nSIZE\nDSN(RFC 3461)\nDSN\nENHANCEDSTATUSCODES(RFC 2034/3463)\nENH",
        "source_url": "https://nodemailer.com/extras/smtp-server",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part13",
        "text": "8BITMIME\n8BITMIME\nSMTPUTF8\nSMTPUTF8\nSIZE\nSIZE\nDSN(RFC 3461)\nDSN\nENHANCEDSTATUSCODES(RFC 2034/3463)\nENHANCEDSTATUSCODES\nTheCHUNKINGextension isnotimplemented.\nCHUNKING\nLicense‚Äã\nMIT\nUsage1¬†‚Äî¬†Install2¬†‚Äî¬†Require in your script3¬†‚Äî¬†Create a server instance4¬†‚Äî¬†Start listening5¬†‚Äî¬†Shut down\n1¬†‚Äî¬†Install\n2¬†‚Äî¬†Require in your script\n3¬†‚Äî¬†Create a server instance\n4¬†‚Äî¬†Start listening\n5¬†‚Äî¬†Shut down\nOptions reference\nTLS and STARTTLS\nHandling errors\nHandling authentication (onAuth)Password‚Äëbased (PLAIN / LOGIN)OAuth¬†2 (XOAUTH2)\nonAuth\nPassword‚Äëbased (PLAIN / LOGIN)\nOAuth¬†2 (XOAUTH2)\nXOAUTH2\nValidating client connection (onConnect/onClose)\nonConnect\nonClose\nValidating TLS information (onSecure)\nonSecure\nValidating sender (onMailFrom)\nonMailFrom\nValidating recipients (onRcptTo)\nonRcptTo\nProcessing incoming messages (onData)\nonData\nUsing the SIZE extension\nUsing LMTP\nSession object\nEnvelope object\nAddress objectDSN Object Properties\nDSN Object Properties\nEnhanced Status Codes (RFC 2034/3463)Enabling Enhanced Status CodesDisabling Enhanced Status CodesEnhanced Status Code Examples\nEnabling Enhanced Status Codes\nDisabling Enhanced Status Codes\nEnhanced Status Code Examples\nDSN (Delivery Status Notification) SupportDSN ParametersAccessing DSN ParametersDSN Parameter ValidationComplete DSN ExampleProduction DSN Implementation Example\nDSN Parameters\nAccessing DSN Parameters\nDSN Parameter Validation\nComplete DSN Example\nProduction DSN Implementation Example\nSupported commands and extensionsCommandsExtensions\nCommands\nExtensions\nLicense",
        "source_url": "https://nodemailer.com/extras/smtp-server",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 412
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nSMTP Server\nSMTP Server\nCreate SMTP and LMTP server instances on the fly.smtp‚Äëserverisnota full‚Äëblown server application likeHarakabut a convenient way to add custom SMTP or LMTP listeners to your app. It is the successor of the server part of the now‚Äëdeprecatedsimplesmtpmodule. For a matching SMTP client, seesmtp‚Äëconnection.\nUsage‚Äã\n1¬†‚Äî¬†Install‚Äã\nnpm install smtp-server --save\nnpm install smtp-server --save\n2¬†‚Äî¬†Require in your script‚Äã\nconst{SMTPServer}=require(\"smtp-server\");\nconst{SMTPServer}=require(\"smtp-server\");\n3¬†‚Äî¬†Create a server instance‚Äã\nconstserver=newSMTPServer(options);\nconstserver=newSMTPServer(options);\n4¬†‚Äî¬†Start listening‚Äã\nserver.listen(port[,host][,callback]);\nserver.listen(port[,host][,callback]);\n5¬†‚Äî¬†Shut down‚Äã\nserver.close(callback);\nserver.close(callback);\nOptions reference‚Äã\nBoolean\nfalse\nSTARTTLS\nfalse\nString\nos.hostname()\nString\nNumber\n0\n0\nBoolean\nfalse\nstream.sizeExceeded\nString[]\n['PLAIN', 'LOGIN']\n'XOAUTH2'\n'CRAM-MD5'\nBoolean\nfalse\nString[]\n['AUTH']\nBoolean\nfalse\nBoolean\ntrue\nENHANCEDSTATUSCODES\nEHLO\nBoolean\ntrue\nDSN\nEHLO\nBoolean\nfalse\nBoolean\nfalse\nMap | Object\nBoolean | Object\nfalse\ntrue\nconsole\nNumber\nInfinity\nBoolean\nfalse\nBoolean\nfalse\nBoolean\nfalse\nNumber\n60_000\nNumber\n30_000\nclose()\nFunction\nObject\n.reverse\ndns\ndns.reverse\nYou may also pass anynet.createServeroptions and, whensecureistrue, anytls.createServeroptions.\nnet.createServer\nsecure\ntrue\ntls.createServer\nTLS and STARTTLS‚Äã\nIf you enable TLS (secure: true)orleaveSTARTTLSenabled, ship a proper certificate viakey,cert, and optionallyca. Otherwisesmtp‚Äëserverfalls back to a self‚Äësigned cert forlocalhost, which almost",
        "source_url": "https://nodemailer.com/extras/smtp-server#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "‚Äã\nIf you enable TLS (secure: true)orleaveSTARTTLSenabled, ship a proper certificate viakey,cert, and optionallyca. Otherwisesmtp‚Äëserverfalls back to a self‚Äësigned cert forlocalhost, which almost every client rejects.\nsecure: true\nSTARTTLS\nkey\ncert\nca\nlocalhost\nconstfs=require(\"fs\");constserver=newSMTPServer({secure:true,key:fs.readFileSync(\"private.key\"),cert:fs.readFileSync(\"server.crt\"),});server.listen(465);\nconstfs=require(\"fs\");constserver=newSMTPServer({secure:true,key:fs.readFileSync(\"private.key\"),cert:fs.readFileSync(\"server.crt\"),});server.listen(465);\nHandling errors‚Äã\nAttach anerrorlistener to surface server errors:\nerror\nserver.on(\"error\",(err)=>{console.error(\"SMTP Server error:\",err.message);});\nserver.on(\"error\",(err)=>{console.error(\"SMTP Server error:\",err.message);});\nHandling authentication (onAuth)‚Äã\nonAuth\nconstserver=newSMTPServer({onAuth(auth,session,callback){// auth.method ‚Üí 'PLAIN', 'LOGIN', 'XOAUTH2', or 'CRAM-MD5'// Return `callback(err)` to reject, `callback(null, response)` to accept},});\nconstserver=newSMTPServer({onAuth(auth,session,callback){// auth.method ‚Üí 'PLAIN', 'LOGIN', 'XOAUTH2', or 'CRAM-MD5'// Return `callback(err)` to reject, `callback(null, response)` to accept},});\nPassword‚Äëbased (PLAIN / LOGIN)‚Äã\nonAuth(auth,session,cb){if(auth.username!==\"alice\"||auth.password!==\"s3cr3t\"){returncb(newError(\"Invalid username or password\"));}cb(null,{user:auth.username});}\nonAuth(auth,session,cb){if(auth.username!==\"alice\"||auth.password!==\"s3cr3t\"){returncb(newError(\"Invalid username or password\"));}cb(null,{user:auth.username});}\nOAuth¬†2 (XOAUTH2)‚Äã\nXOAUTH2\nconstserver=newSMTPServer({authMethods:[\"XOAUTH2\"],onAuth(auth,session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth",
        "source_url": "https://nodemailer.com/extras/smtp-server#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": ",session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth.username});},});\nconstserver=newSMTPServer({authMethods:[\"XOAUTH2\"],onAuth(auth,session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth.username});},});\nValidating client connection (onConnect/onClose)‚Äã\nonConnect\nonClose\nconstserver=newSMTPServer({onConnect(session,cb){if(session.remoteAddress===\"127.0.0.1\"){returncb(newError(\"Connections from localhost are not allowed\"));}cb();// accept},onClose(session){console.log(`Connection from${session.remoteAddress}closed`);},});\nconstserver=newSMTPServer({onConnect(session,cb){if(session.remoteAddress===\"127.0.0.1\"){returncb(newError(\"Connections from localhost are not allowed\"));}cb();// accept},onClose(session){console.log(`Connection from${session.remoteAddress}closed`);},});\nValidating TLS information (onSecure)‚Äã\nonSecure\nonSecure(socket,session,cb){if(session.servername!==\"mail.example.com\"){returncb(newError(\"SNI mismatch\"));}cb();}\nonSecure(socket,session,cb){if(session.servername!==\"mail.example.com\"){returncb(newError(\"SNI mismatch\"));}cb();}\nValidating sender (onMailFrom)‚Äã\nonMailFrom\nonMailFrom(address,session,cb){if(!address.address.endsWith(\"@example.com\")){returncb(Object.assign(newError(\"Relay denied\"),{responseCode:553}));}cb();}\nonMailFrom(address,session,cb){if(!address.address.endsWith(\"@example.com\")){returncb(Object.assign(newError(\"Relay denied\"),{responseCode:553}));}cb();}\nValidating recipients (onRcptTo)‚Äã\nonRcptTo\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(new",
        "source_url": "https://nodemailer.com/extras/smtp-server#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "cptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nProcessing incoming messages (onData)‚Äã\nonData\nonData(stream,session,cb){constwrite=require(\"fs\").createWriteStream(\"/tmp/message.eml\");stream.pipe(write);stream.on(\"end\",()=>cb(null,\"Queued\"));}\nonData(stream,session,cb){constwrite=require(\"fs\").createWriteStream(\"/tmp/message.eml\");stream.pipe(write);stream.on(\"end\",()=>cb(null,\"Queued\"));}\nsmtp‚Äëserverstreams your messageverbatim‚Äî noReceived:header is added. Add one yourself if you need full RFC¬†5321 compliance.\nReceived:\nUsing the SIZE extension‚Äã\nSet thesizeoption to advertise a limit, then checkstream.sizeExceededinonData:\nsize\nstream.sizeExceeded\nonData\nconstserver=newSMTPServer({size:1024*1024,// 1¬†MiBonData(s,sess,cb){s.on(\"end\",()=>{if(s.sizeExceeded){consterr=Object.assign(newError(\"Message too large\"),{responseCode:552});returncb(err);}cb(null,\"OK\");});},});\nconstserver=newSMTPServer({size:1024*1024,// 1¬†MiBonData(s,sess,cb){s.on(\"end\",()=>{if(s.sizeExceeded){consterr=Object.assign(newError(\"Message too large\"),{responseCode:552});returncb(err);}cb(null,\"OK\");});},});\nUsing LMTP‚Äã\nconstserver=newSMTPServer({lmtp:true,onData(stream,session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):`<${rcpt.address}> accepted`));cb(null,replies);});},});\nconstserver=newSMTPServer({lmtp:true,onData(stream,session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):",
        "source_url": "https://nodemailer.com/extras/smtp-server#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": ",session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):`<${rcpt.address}> accepted`));cb(null,replies);});},});\nSession object‚Äã\nString\nString\nString\nremoteAddress\ndisableReverseLookup\n\"HELO\" | \"EHLO\" | \"LHLO\"\nString\nObject\nmailFrom\nrcptTo\ndsn\nany\nonAuth\nNumber\n\"SMTP\" | \"ESMTP\" | \"ESMTPA\" ‚Ä¶\nReceived:\nEnvelope object‚Äã\nThesession.envelopeobject contains transaction-specific data:\nsession.envelope\n{\"mailFrom\": {\"address\": \"sender@example.com\",\"args\": { \"SIZE\": \"12345\", \"RET\": \"HDRS\" },\"dsn\": { \"ret\": \"HDRS\", \"envid\": \"abc123\" }},\"rcptTo\": [{\"address\": \"user1@example.com\",\"args\": { \"NOTIFY\": \"SUCCESS,FAILURE\" },\"dsn\": { \"notify\": [\"SUCCESS\", \"FAILURE\"], \"orcpt\": \"rfc822;user1@example.com\" }}],\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\"}}\n{\"mailFrom\": {\"address\": \"sender@example.com\",\"args\": { \"SIZE\": \"12345\", \"RET\": \"HDRS\" },\"dsn\": { \"ret\": \"HDRS\", \"envid\": \"abc123\" }},\"rcptTo\": [{\"address\": \"user1@example.com\",\"args\": { \"NOTIFY\": \"SUCCESS,FAILURE\" },\"dsn\": { \"notify\": [\"SUCCESS\", \"FAILURE\"], \"orcpt\": \"rfc822;user1@example.com\" }}],\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\"}}\nObject\nObject[]\nObject\nAddress object‚Äã\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\":",
        "source_url": "https://nodemailer.com/extras/smtp-server#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part6",
        "text": "123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\nMAIL FROM:\nRCPT TO:\nDSN Object Properties‚Äã\nString\n'FULL'\n'HDRS'\nString\nString[]\nString\nEnhanced Status Codes (RFC 2034/3463)‚Äã\nsmtp‚ÄëserversupportsEnhanced Status Codesas defined in RFC 2034 and RFC 3463. When enabled, all SMTP responses include enhanced status codes in the formatX.Y.Z:\nX.Y.Z\n250 2.1.0 Accepted        ‚Üê Enhanced status code: 2.1.0550 5.1.1 Mailbox unavailable ‚Üê Enhanced status code: 5.1.1\n250 2.1.0 Accepted        ‚Üê Enhanced status code: 2.1.0550 5.1.1 Mailbox unavailable ‚Üê Enhanced status code: 5.1.1\nEnabling Enhanced Status Codes‚Äã\nTo enable enhanced status codes (they are disabled by default):\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:false,// Enable enhanced status codesonMailFrom(address,session,callback){callback();// Response: \"250 2.1.0 Accepted\" (with enhanced code)},});\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:false,// Enable enhanced status codesonMailFrom(address,session,callback){callback();// Response: \"250 2.1.0 Accepted\" (with enhanced code)},});\nDisabling Enhanced Status Codes‚Äã\nEnhanced status codes are disabled by default, but you can explicitly disable them:\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:true,// Explicitly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:true,// Explicitly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nEnhanced Status Code Examples‚Äã\n250\n2.0.0\n250\n2.",
        "source_url": "https://nodemailer.com/extras/smtp-server#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part7",
        "text": "ly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nEnhanced Status Code Examples‚Äã\n250\n2.0.0\n250\n2.1.0\n250\n2.1.5\n250\n2.6.0\n501\n5.5.4\n550\n5.1.1\n552\n5.2.2\nDSN (Delivery Status Notification) Support‚Äã\nsmtp‚Äëserverfully supportsDSN parametersas defined in RFC 3461, allowing clients to request delivery status notifications.\nDSN functionality requiresdelivery status notificationsto be enabled. Since delivery status notifications are disabled by default, you must sethideDSN: falseto use DSN features.\nhideDSN: false\nDSN Parameters‚Äã\nRET=FULLorRET=HDRS‚Äî Return full message or headers only in DSN\nRET=FULL\nRET=HDRS\nENVID=<envelope-id>‚Äî Envelope identifier for tracking\nENVID=<envelope-id>\n// Client sends: MAIL FROM:<sender@example.com> RET=FULL ENVID=abc123\n// Client sends: MAIL FROM:<sender@example.com> RET=FULL ENVID=abc123\nNOTIFY=SUCCESS,FAILURE,DELAY,NEVER‚Äî When to send DSN\nNOTIFY=SUCCESS,FAILURE,DELAY,NEVER\nORCPT=<original-recipient>‚Äî Original recipient for tracking\nORCPT=<original-recipient>\n// Client sends: RCPT TO:<user@example.com> NOTIFY=SUCCESS,FAILURE ORCPT=rfc822;user@example.com\n// Client sends: RCPT TO:<user@example.com> NOTIFY=SUCCESS,FAILURE ORCPT=rfc822;user@example.com\nAccessing DSN Parameters‚Äã\nDSN parameters are available in your callback handlers:\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){// Access DSN parameters from MAIL FROMconstret=session.envelope.dsn.ret;// 'FULL' or 'HDRS'constenvid=session.envelope.dsn.envid;// Envelope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE',",
        "source_url": "https://nodemailer.com/extras/smtp-server#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part8",
        "text": "velope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE', 'DELAY']constorcpt=address.dsn.orcpt;// Original recipientconsole.log(`NOTIFY:${notify.join(\",\")}, ORCPT:${orcpt}`);callback();},});\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){// Access DSN parameters from MAIL FROMconstret=session.envelope.dsn.ret;// 'FULL' or 'HDRS'constenvid=session.envelope.dsn.envid;// Envelope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE', 'DELAY']constorcpt=address.dsn.orcpt;// Original recipientconsole.log(`NOTIFY:${notify.join(\",\")}, ORCPT:${orcpt}`);callback();},});\nDSN Parameter Validation‚Äã\nsmtp‚Äëserverautomatically validates DSN parameters:\nRETmust beFULLorHDRS\nRET\nFULL\nHDRS\nNOTIFYmust beSUCCESS,FAILURE,DELAY, orNEVER\nNOTIFY\nSUCCESS\nFAILURE\nDELAY\nNEVER\nNOTIFY=NEVERcannot be combined with other values\nNOTIFY=NEVER\nInvalid parameters return appropriate error responses with enhanced status codes\nComplete DSN Example‚Äã\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){const{ret,envid}=session.envelope.dsn;console.log(`Mail from${address.address}, RET=${ret}, ENVID=${envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`Rcpt to${address.address}, NOTIFY=${notify.join(\",\")}, ORCPT=${orcpt}`);callback();},onData(stream,session,callback){// Process message with DSN contextconst{dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nconstserver=newSMTPServer({hide",
        "source_url": "https://nodemailer.com/extras/smtp-server#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part9",
        "text": "dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){const{ret,envid}=session.envelope.dsn;console.log(`Mail from${address.address}, RET=${ret}, ENVID=${envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`Rcpt to${address.address}, NOTIFY=${notify.join(\",\")}, ORCPT=${orcpt}`);callback();},onData(stream,session,callback){// Process message with DSN contextconst{dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nProduction DSN Implementation Example‚Äã\nHere's a complete example showing how to implement DSN notifications using nodemailer:\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransporter({host:\"smtp.example.com\",port:587,secure:false,auth:{user:\"dsn-sender@example.com\",pass:\"your-password\",},});// DSN notification generatorclassDSNNotifier{constructor(transporter){this.transporter=transporter;}asyncsendSuccessNotification(envelope,messageId,deliveryTime){// Only send if SUCCESS notification was requestedconstneedsSuccessNotification=envelope.rcptTo.some((rcpt)=>rcpt.dsn.notify&&rcpt.dsn.notify.includes(\"SUCCESS\"));if(!needsSuccessNotification||!envelope.mailFrom.address){return;}constdsnMessage=this.generateDSNMessage({action:\"delivered\",status:\"2.0.0\",envelope,messageId,deliveryTime,diagnosticCode:\"smtp; 250 2.0.0 Message accepted for delivery\",});awaitthis.transporter.sendMail({from:\"postmaster@example.com\",to:envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSN",
        "source_url": "https://nodemailer.com/extras/smtp-server#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part10",
        "text": ":envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSNMessage({action,status,envelope,messageId,deliveryTime,diagnosticCode}){const{dsn}=envelope;consttimestamp=deliveryTime||newDate().toISOString();// Generate RFC 3464 compliant delivery status notificationconsttext=`This is an automatically generated Delivery Status Notification.Original Message Details:- Message ID:${messageId}- Envelope ID:${dsn.envid||\"Not provided\"}- Sender:${envelope.mailFrom.address}- Recipients:${envelope.rcptTo.map((r)=>r.address).join(\", \")}- Action:${action}- Status:${status}- Time:${timestamp}${action===\"delivered\"?\"Your message has been successfully delivered to all recipients.\":\"Delivery failed for one or more recipients.\"}`;return{text};}}// Create DSN notifier instanceconstdsnNotifier=newDSNNotifier(dsnTransporter);// SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${address.address}, RET=${dsn.ret}, ENVID=${dsn.envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`RCPT TO:${address.address}, NOTIFY=${notify?.join(\",\")}, ORCPT=${orcpt}`);callback();},asynconData(stream,session,callback){constmessageId=`msg-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;stream.on(\"end\",async()=>{try{// Simulate message deliveryconstdeliveryTime=newDate();// Send DSN success notification if requestedawaitdsnNotifier.sendSuccessNotification(session.envelope,messageId,deliveryTime);callback(null,`Message${messageId}accepted for delivery`);}catch(error){callback(error);}});stream.resume();},});server.listen(2525,()=>{console.log(\"DSN-enabled SMTP server listening on port 2525\");});\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransport",
        "source_url": "https://nodemailer.com/extras/smtp-server#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part11",
        "text": "DSN-enabled SMTP server listening on port 2525\");});\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransporter({host:\"smtp.example.com\",port:587,secure:false,auth:{user:\"dsn-sender@example.com\",pass:\"your-password\",},});// DSN notification generatorclassDSNNotifier{constructor(transporter){this.transporter=transporter;}asyncsendSuccessNotification(envelope,messageId,deliveryTime){// Only send if SUCCESS notification was requestedconstneedsSuccessNotification=envelope.rcptTo.some((rcpt)=>rcpt.dsn.notify&&rcpt.dsn.notify.includes(\"SUCCESS\"));if(!needsSuccessNotification||!envelope.mailFrom.address){return;}constdsnMessage=this.generateDSNMessage({action:\"delivered\",status:\"2.0.0\",envelope,messageId,deliveryTime,diagnosticCode:\"smtp; 250 2.0.0 Message accepted for delivery\",});awaitthis.transporter.sendMail({from:\"postmaster@example.com\",to:envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSNMessage({action,status,envelope,messageId,deliveryTime,diagnosticCode}){const{dsn}=envelope;consttimestamp=deliveryTime||newDate().toISOString();// Generate RFC 3464 compliant delivery status notificationconsttext=`This is an automatically generated Delivery Status Notification.Original Message Details:- Message ID:${messageId}- Envelope ID:${dsn.envid||\"Not provided\"}- Sender:${envelope.mailFrom.address}- Recipients:${envelope.rcptTo.map((r)=>r.address).join(\", \")}- Action:${action}- Status:${status}- Time:${timestamp}${action===\"delivered\"?\"Your message has been successfully delivered to all recipients.\":\"Delivery failed for one or more recipients.\"}`;return{text};}}// Create DSN notifier instanceconstdsnNotifier=newDSNNotifier(dsnTransporter);// SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${",
        "source_url": "https://nodemailer.com/extras/smtp-server#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part12",
        "text": " SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${address.address}, RET=${dsn.ret}, ENVID=${dsn.envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`RCPT TO:${address.address}, NOTIFY=${notify?.join(\",\")}, ORCPT=${orcpt}`);callback();},asynconData(stream,session,callback){constmessageId=`msg-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;stream.on(\"end\",async()=>{try{// Simulate message deliveryconstdeliveryTime=newDate();// Send DSN success notification if requestedawaitdsnNotifier.sendSuccessNotification(session.envelope,messageId,deliveryTime);callback(null,`Message${messageId}accepted for delivery`);}catch(error){callback(error);}});stream.resume();},});server.listen(2525,()=>{console.log(\"DSN-enabled SMTP server listening on port 2525\");});\nThis example demonstrates:\nComplete DSN workflowfrom parameter parsing to notification sending\nRFC-compliant DSN messageswith proper headers and content\nConditional notificationsbased on NOTIFY parameters\nIntegration with nodemailerfor sending DSN notifications\nProduction-ready structurewith error handling\nSupported commands and extensions‚Äã\nCommands‚Äã\nEHLO/HELO\nEHLO\nHELO\nAUTHLOGIN¬∑PLAIN¬∑XOAUTH2‚Ä†¬†¬∑CRAM‚ÄëMD5‚Ä†\nAUTH\nLOGIN\nPLAIN\nXOAUTH2\nCRAM‚ÄëMD5\nMAIL/RCPT/DATA\nMAIL\nRCPT\nDATA\nRSET/NOOP/QUIT/VRFY\nRSET\nNOOP\nQUIT\nVRFY\nHELP(returns RFC¬†5321 URL)\nHELP\nSTARTTLS\nSTARTTLS\n‚Ä†XOAUTH2andCRAM‚ÄëMD5must be enabled viaauthMethods.\nXOAUTH2\nCRAM‚ÄëMD5\nauthMethods\nExtensions‚Äã\nPIPELINING\nPIPELINING\n8BITMIME\n8BITMIME\nSMTPUTF8\nSMTPUTF8\nSIZE\nSIZE\nDSN(RFC 3461)\nDSN\nENHANCEDSTATUSCODES(RFC 2034/3463)\nENH",
        "source_url": "https://nodemailer.com/extras/smtp-server#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part13",
        "text": "8BITMIME\n8BITMIME\nSMTPUTF8\nSMTPUTF8\nSIZE\nSIZE\nDSN(RFC 3461)\nDSN\nENHANCEDSTATUSCODES(RFC 2034/3463)\nENHANCEDSTATUSCODES\nTheCHUNKINGextension isnotimplemented.\nCHUNKING\nLicense‚Äã\nMIT\nUsage1¬†‚Äî¬†Install2¬†‚Äî¬†Require in your script3¬†‚Äî¬†Create a server instance4¬†‚Äî¬†Start listening5¬†‚Äî¬†Shut down\n1¬†‚Äî¬†Install\n2¬†‚Äî¬†Require in your script\n3¬†‚Äî¬†Create a server instance\n4¬†‚Äî¬†Start listening\n5¬†‚Äî¬†Shut down\nOptions reference\nTLS and STARTTLS\nHandling errors\nHandling authentication (onAuth)Password‚Äëbased (PLAIN / LOGIN)OAuth¬†2 (XOAUTH2)\nonAuth\nPassword‚Äëbased (PLAIN / LOGIN)\nOAuth¬†2 (XOAUTH2)\nXOAUTH2\nValidating client connection (onConnect/onClose)\nonConnect\nonClose\nValidating TLS information (onSecure)\nonSecure\nValidating sender (onMailFrom)\nonMailFrom\nValidating recipients (onRcptTo)\nonRcptTo\nProcessing incoming messages (onData)\nonData\nUsing the SIZE extension\nUsing LMTP\nSession object\nEnvelope object\nAddress objectDSN Object Properties\nDSN Object Properties\nEnhanced Status Codes (RFC 2034/3463)Enabling Enhanced Status CodesDisabling Enhanced Status CodesEnhanced Status Code Examples\nEnabling Enhanced Status Codes\nDisabling Enhanced Status Codes\nEnhanced Status Code Examples\nDSN (Delivery Status Notification) SupportDSN ParametersAccessing DSN ParametersDSN Parameter ValidationComplete DSN ExampleProduction DSN Implementation Example\nDSN Parameters\nAccessing DSN Parameters\nDSN Parameter Validation\nComplete DSN Example\nProduction DSN Implementation Example\nSupported commands and extensionsCommandsExtensions\nCommands\nExtensions\nLicense",
        "source_url": "https://nodemailer.com/extras/smtp-server#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 412
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailParser\nMailParser\nStreaming e‚Äëmail parser for Node.js¬†that can handle very large messages with minimal memory overhead.\nMailParser offers two ways to consume a message:\nsimpleParser‚Äì convenience helper that buffers the whole message (including attachments) in memory and returns a singlemail object. Great for simple use‚Äëcases and tests.\nsimpleParser\nMailParserclass‚Äì a lower‚ÄëlevelTransformstream that emits message parts and attachmentstreamsas they become available, letting you process huge messages without blowing up memory.\nMailParser\nTransform\nInstallation‚Äã\nnpm install mailparser\nnpm install mailparser\nsimpleParser()‚Äã\nsimpleParser()\nconst{simpleParser}=require(\"mailparser\");// Callback stylesimpleParser(source,options,(err,mail)=>{if(err)throwerr;console.log(mail.subject);});// Promise stylesimpleParser(source,options).then((mail)=>console.log(mail.subject)).catch(console.error);// async/awaitconstmail=awaitsimpleParser(source,options);\nconst{simpleParser}=require(\"mailparser\");// Callback stylesimpleParser(source,options,(err,mail)=>{if(err)throwerr;console.log(mail.subject);});// Promise stylesimpleParser(source,options).then((mail)=>console.log(mail.subject)).catch(console.error);// async/awaitconstmail=awaitsimpleParser(source,options);\nParameters‚Äã\nsource‚Äì aBuffer,String, orreadable streamcontaining the RFC‚ÄØ822 message.\nsource\nBuffer\nString\noptions‚Äì optional configuration (seeOptions).\noptions\nReturnedmail object‚Äã\nThe resolvedmailobject aggregates every piece of the message:\nmail\nheaders\nMap\nsubject\nString\nheaders.get('subject')\nfrom\nto\ncc\nbcc\nreply-to\ndate\nDate\nmessageId\nString\ninReplyTo\nString\nreferences\nString[] | String\nhtml\ntext\ntextAsHtml\ntext\nattachments\nAttachment[]\nNo sanitisation is performed. If you displayhtml, make sure to run it through a trusted HTML‚Äësanitiser first.\nhtml\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span",
        "source_url": "https://nodemailer.com/extras/mailparser",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": ", make sure to run it through a trusted HTML‚Äësanitiser first.\nhtml\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span> &lt;<a href=\\\"mailto:jane@example.com\\\" class=\\\"mp_address_email\\\">jane@example.com</a>&gt;\",\"text\":\"Jane Doe <jane@example.com>\"}\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span> &lt;<a href=\\\"mailto:jane@example.com\\\" class=\\\"mp_address_email\\\">jane@example.com</a>&gt;\",\"text\":\"Jane Doe <jane@example.com>\"}\nvalue‚Äì array of individual addresses (or groups)\nvalue\ntext‚Äì formatted for plaintext context\ntext\nhtml‚Äì formatted for HTML context\nhtml\nFor a deep dive into address objects see theMessage¬†‚Üí Addressessection.\nheaders\nMost headers resolve tostrings(single header) orstring[](multiple occurrences). The following are parsed into richer structures for convenience:\nAddress headers‚Üí address objects (from,to,cc,bcc,sender,reply-to,delivered-to,return-path).\nfrom\nto\ncc\nbcc\nsender\nreply-to\ndelivered-to\nreturn-path\nPriority headers(x-priority,importance, ‚Ä¶) are normalised to a singleprioritykey with values\"high\" | \"normal\" | \"low\".\nx-priority\nimportance\npriority\n\"high\" | \"normal\" | \"low\"\nreferences‚ÜíString|String[].\nreferences\nString\nString[]\ndate‚ÜíDate.\ndate\nDate\nStructured headers(content-type,content-disposition,dkim-signature) ‚Üí{ value: String, params: Object }.\ncontent-type\ncontent-disposition\ndkim-signature\n{ value: String, params: Object }\nAttachment object (simpleParser)‚Äã\nfilename\nundefined\ncontentType\ncontentDisposition\n\"attachment\"\nchecksum\ncontent\nsize\nheaders\nMap\ncontent\nBuffer\ncontentId\ncid\nrelated\ntrue\nMailParser(stream API)‚Äã\nMailParser\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nMailParseris aTransformstream in",
        "source_url": "https://nodemailer.com/extras/mailparser",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nMailParseris aTransformstream inobject modethat emits two kinds of objects via the'data'event:\nMailParser\nTransform\n'data'\n{ type: 'headers', headers: Map }‚Äì once, after the headers are parsed.\n{ type: 'headers', headers: Map }\n{ type: 'attachment', ... }‚Äì for every attachment (see below).\nThecontentproperty is aReadable¬†stream.\n{ type: 'attachment', ... }\ncontent\n{ type: 'text', html, text, textAsHtml }‚Äì once, containing the message bodies.\n{ type: 'text', html, text, textAsHtml }\nStream options‚Äã\nskipHtmlToText\nfalse\ntext\nmaxHtmlLengthToParse\nInfinity\nformatDateString\nundefined\nskipImageLinks\nfalse\nskipTextToHtml\nfalse\ntextAsHtml\nskipTextLinks\nfalse\ntext\nkeepDeliveryStatus\nfalse\nmessage/delivery-status\nIconv\niconv-lite\nkeepCidLinks\nfalse\nskipImageLinks: true\nAttachment stream object (type === 'attachment')‚Äã\ntype === 'attachment'\nIdentical shape to the buffered object shown earlier, except:\ncontentis aReadable stream.\ncontent\nYoumustcallattachment.release()when you are done. Parsing pauses until every attachment is released.\nattachment.release()\nrelatedis only availableafterparsing ends.\nrelated\nparser.on(\"data\",(part)=>{if(part.type===\"attachment\"){console.log(\"Attachment:\",part.filename);part.content.pipe(fs.createWriteStream(part.filename)).on(\"finish\",part.release);}});\nparser.on(\"data\",(part)=>{if(part.type===\"attachment\"){console.log(\"Attachment:\",part.filename);part.content.pipe(fs.createWriteStream(part.filename)).on(\"finish\",part.release);}});\nCharacter set decoding‚Äã\nMailParser relies oniconv‚Äëlitefor charset conversion, except forISO‚Äë2022‚ÄëJPandEUC‚ÄëJPwhich are handled byencoding‚Äëjapanese.\nIf you prefernode-iconv, inject it:\nnode-iconv\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nconst{Iconv}=",
        "source_url": "https://nodemailer.com/extras/mailparser",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": ", inject it:\nnode-iconv\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nLicense‚Äã\nDual‚Äëlicensed under theMIT LicenseorEUPL‚ÄØv1.1‚ÄØ+.\nInstallation\nsimpleParser()ParametersReturnedmail objectAttachment object (simpleParser)\nsimpleParser()\nParameters\nReturnedmail object\nAttachment object (simpleParser)\nMailParser(stream API)Stream optionsAttachment stream object (type === 'attachment')\nMailParser\nStream options\nAttachment stream object (type === 'attachment')\ntype === 'attachment'\nCharacter set decoding\nLicense",
        "source_url": "https://nodemailer.com/extras/mailparser",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 176
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailParser\nMailParser\nStreaming e‚Äëmail parser for Node.js¬†that can handle very large messages with minimal memory overhead.\nMailParser offers two ways to consume a message:\nsimpleParser‚Äì convenience helper that buffers the whole message (including attachments) in memory and returns a singlemail object. Great for simple use‚Äëcases and tests.\nsimpleParser\nMailParserclass‚Äì a lower‚ÄëlevelTransformstream that emits message parts and attachmentstreamsas they become available, letting you process huge messages without blowing up memory.\nMailParser\nTransform\nInstallation‚Äã\nnpm install mailparser\nnpm install mailparser\nsimpleParser()‚Äã\nsimpleParser()\nconst{simpleParser}=require(\"mailparser\");// Callback stylesimpleParser(source,options,(err,mail)=>{if(err)throwerr;console.log(mail.subject);});// Promise stylesimpleParser(source,options).then((mail)=>console.log(mail.subject)).catch(console.error);// async/awaitconstmail=awaitsimpleParser(source,options);\nconst{simpleParser}=require(\"mailparser\");// Callback stylesimpleParser(source,options,(err,mail)=>{if(err)throwerr;console.log(mail.subject);});// Promise stylesimpleParser(source,options).then((mail)=>console.log(mail.subject)).catch(console.error);// async/awaitconstmail=awaitsimpleParser(source,options);\nParameters‚Äã\nsource‚Äì aBuffer,String, orreadable streamcontaining the RFC‚ÄØ822 message.\nsource\nBuffer\nString\noptions‚Äì optional configuration (seeOptions).\noptions\nReturnedmail object‚Äã\nThe resolvedmailobject aggregates every piece of the message:\nmail\nheaders\nMap\nsubject\nString\nheaders.get('subject')\nfrom\nto\ncc\nbcc\nreply-to\ndate\nDate\nmessageId\nString\ninReplyTo\nString\nreferences\nString[] | String\nhtml\ntext\ntextAsHtml\ntext\nattachments\nAttachment[]\nNo sanitisation is performed. If you displayhtml, make sure to run it through a trusted HTML‚Äësanitiser first.\nhtml\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span",
        "source_url": "https://nodemailer.com/extras/mailparser#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": ", make sure to run it through a trusted HTML‚Äësanitiser first.\nhtml\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span> &lt;<a href=\\\"mailto:jane@example.com\\\" class=\\\"mp_address_email\\\">jane@example.com</a>&gt;\",\"text\":\"Jane Doe <jane@example.com>\"}\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span> &lt;<a href=\\\"mailto:jane@example.com\\\" class=\\\"mp_address_email\\\">jane@example.com</a>&gt;\",\"text\":\"Jane Doe <jane@example.com>\"}\nvalue‚Äì array of individual addresses (or groups)\nvalue\ntext‚Äì formatted for plaintext context\ntext\nhtml‚Äì formatted for HTML context\nhtml\nFor a deep dive into address objects see theMessage¬†‚Üí Addressessection.\nheaders\nMost headers resolve tostrings(single header) orstring[](multiple occurrences). The following are parsed into richer structures for convenience:\nAddress headers‚Üí address objects (from,to,cc,bcc,sender,reply-to,delivered-to,return-path).\nfrom\nto\ncc\nbcc\nsender\nreply-to\ndelivered-to\nreturn-path\nPriority headers(x-priority,importance, ‚Ä¶) are normalised to a singleprioritykey with values\"high\" | \"normal\" | \"low\".\nx-priority\nimportance\npriority\n\"high\" | \"normal\" | \"low\"\nreferences‚ÜíString|String[].\nreferences\nString\nString[]\ndate‚ÜíDate.\ndate\nDate\nStructured headers(content-type,content-disposition,dkim-signature) ‚Üí{ value: String, params: Object }.\ncontent-type\ncontent-disposition\ndkim-signature\n{ value: String, params: Object }\nAttachment object (simpleParser)‚Äã\nfilename\nundefined\ncontentType\ncontentDisposition\n\"attachment\"\nchecksum\ncontent\nsize\nheaders\nMap\ncontent\nBuffer\ncontentId\ncid\nrelated\ntrue\nMailParser(stream API)‚Äã\nMailParser\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nMailParseris aTransformstream in",
        "source_url": "https://nodemailer.com/extras/mailparser#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nMailParseris aTransformstream inobject modethat emits two kinds of objects via the'data'event:\nMailParser\nTransform\n'data'\n{ type: 'headers', headers: Map }‚Äì once, after the headers are parsed.\n{ type: 'headers', headers: Map }\n{ type: 'attachment', ... }‚Äì for every attachment (see below).\nThecontentproperty is aReadable¬†stream.\n{ type: 'attachment', ... }\ncontent\n{ type: 'text', html, text, textAsHtml }‚Äì once, containing the message bodies.\n{ type: 'text', html, text, textAsHtml }\nStream options‚Äã\nskipHtmlToText\nfalse\ntext\nmaxHtmlLengthToParse\nInfinity\nformatDateString\nundefined\nskipImageLinks\nfalse\nskipTextToHtml\nfalse\ntextAsHtml\nskipTextLinks\nfalse\ntext\nkeepDeliveryStatus\nfalse\nmessage/delivery-status\nIconv\niconv-lite\nkeepCidLinks\nfalse\nskipImageLinks: true\nAttachment stream object (type === 'attachment')‚Äã\ntype === 'attachment'\nIdentical shape to the buffered object shown earlier, except:\ncontentis aReadable stream.\ncontent\nYoumustcallattachment.release()when you are done. Parsing pauses until every attachment is released.\nattachment.release()\nrelatedis only availableafterparsing ends.\nrelated\nparser.on(\"data\",(part)=>{if(part.type===\"attachment\"){console.log(\"Attachment:\",part.filename);part.content.pipe(fs.createWriteStream(part.filename)).on(\"finish\",part.release);}});\nparser.on(\"data\",(part)=>{if(part.type===\"attachment\"){console.log(\"Attachment:\",part.filename);part.content.pipe(fs.createWriteStream(part.filename)).on(\"finish\",part.release);}});\nCharacter set decoding‚Äã\nMailParser relies oniconv‚Äëlitefor charset conversion, except forISO‚Äë2022‚ÄëJPandEUC‚ÄëJPwhich are handled byencoding‚Äëjapanese.\nIf you prefernode-iconv, inject it:\nnode-iconv\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nconst{Iconv}=",
        "source_url": "https://nodemailer.com/extras/mailparser#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": ", inject it:\nnode-iconv\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nLicense‚Äã\nDual‚Äëlicensed under theMIT LicenseorEUPL‚ÄØv1.1‚ÄØ+.\nInstallation\nsimpleParser()ParametersReturnedmail objectAttachment object (simpleParser)\nsimpleParser()\nParameters\nReturnedmail object\nAttachment object (simpleParser)\nMailParser(stream API)Stream optionsAttachment stream object (type === 'attachment')\nMailParser\nStream options\nAttachment stream object (type === 'attachment')\ntype === 'attachment'\nCharacter set decoding\nLicense",
        "source_url": "https://nodemailer.com/extras/mailparser#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 176
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailcomposer\nMailcomposer\nGenerate RFC‚ÄØ822‚Äìformatted email messages that you can stream directly to an SMTP connection or save to disk.\nMailcomposer is shipped with Nodemailer ‚Äì you donothave to install anything else.\nUsage‚Äã\n1¬†¬∑¬†Install Nodemailer‚Äã\nnpm install nodemailer\nnpm install nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code‚Äã\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\n3¬†¬∑¬†Create aMailComposerinstance‚Äã\nconstmail=newMailComposer(mailOptions);\nconstmail=newMailComposer(mailOptions);\nmailOptionsis an object that describes your message. See the full option reference below.\nmailOptions\nAPI‚Äã\ncreateReadStream()‚Äã\ncreateReadStream()\nCreate a readable stream that emits the raw RFC‚ÄØ822 message:\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nbuild(callback)‚Äã\nbuild(callback)\nGenerate the message and receive it as aBufferin a callback:\nBuffer\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nMessage fields‚Äã\n'sender@server.com'\n'Sender¬†Name¬†<sender@server.com>'\nMessage‚ÄëID\nMessage‚ÄëID\nstring\nBuffer\nStream\n{ path: '‚Ä¶' }\ntext/html\n{ method: 'REQUEST', content: icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue",
        "source_url": "https://nodemailer.com/extras/mailcomposer",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue\n\\r\\n\n\\n\nAll textual content is treated as UTF‚Äë8. Attachments are streamed as binary.\nAttachments‚Äã\nAttachment objects support the following properties:\nfalse\ncid:\ncontentDisposition: 'inline'\nmultipart/related\nstring\nBuffer\nStream\ncontent\nBuffer\nbase64\nhex\nquoted-printable\nbase64\nattachment\ninline\n{ 'X-My-Header': 'value' }\nstring\nBuffer\nStream\nExample‚Äã\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet",
        "source_url": "https://nodemailer.com/extras/mailcomposer",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": " from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nAlternatives‚Äã\nBesidestextandhtml, you can include any data as analternativepart ‚Äì for example, a Markdown or OpenDocument version of the same content. The email client picks the best‚Äësuited alternative to display. Calendar events are commonly attached this way.\nAlternative objects use thesame optionsasattachments, but are placed into themultipart/alternativesection of the message instead ofmultipart/mixed/multipart/related.\nmultipart/alternative\nmultipart/mixed\nmultipart/related\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nAddress formatting‚Äã\nYou can supply addresses in any of the following forms:\nrecipient@example.com\"Display Name\" <recipient@example.com>\nrecipient@example.com\"Display Name\" <recipient@example.com>\nOr as an object (no need to quote anything):\n{name:'Display Name',address:'recipient@example.com'}\n{name:'Display Name',address:'recipient@example.com'}\nEvery address field ‚Äì evenfrom‚Äì acceptsone or manyaddresses, in any mix of formats:\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com",
        "source_url": "https://nodemailer.com/extras/mailcomposer",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\nInternationalized domain names (IDN) are automatically converted to punycode:\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\nSMTP envelope‚Äã\nBy default the SMTP envelope is generated from the address headers. If you need something different ‚Äì for example, VERP or black‚Äëholefrom‚Äì you can setenvelopeexplicitly:\nfrom\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nSome transports (e.g. AWS¬†SES) ignoreenvelopeand instead use the header addresses.\nenvelope\nUsing embedded images‚Äã\nSetcidon an attachment and reference it in the HTML with thecid:protocol:\ncid\ncid:\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nBCC‚Äã\nMailComposer removes theBcc:header by default to keep recipient addresses private. If you need the header to remain, enablekeepBccaftercallingcompile():\nkeepBcc\ncompile()\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepB",
        "source_url": "https://nodemailer.com/extras/mailcomposer",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": "\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nLicense‚Äã\nMIT\nUsage1¬†¬∑¬†Install Nodemailer2¬†¬∑¬†Requiremailcomposerin your code3¬†¬∑¬†Create aMailComposerinstance\n1¬†¬∑¬†Install Nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code\n3¬†¬∑¬†Create aMailComposerinstance\nAPIcreateReadStream()build(callback)\ncreateReadStream()\ncreateReadStream()\nbuild(callback)\nbuild(callback)\nMessage fields\nAttachmentsExample\nExample\nAlternatives\nAddress formatting\nSMTP envelope\nUsing embedded images\nBCC\nLicense",
        "source_url": "https://nodemailer.com/extras/mailcomposer",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 180
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailcomposer\nMailcomposer\nGenerate RFC‚ÄØ822‚Äìformatted email messages that you can stream directly to an SMTP connection or save to disk.\nMailcomposer is shipped with Nodemailer ‚Äì you donothave to install anything else.\nUsage‚Äã\n1¬†¬∑¬†Install Nodemailer‚Äã\nnpm install nodemailer\nnpm install nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code‚Äã\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\n3¬†¬∑¬†Create aMailComposerinstance‚Äã\nconstmail=newMailComposer(mailOptions);\nconstmail=newMailComposer(mailOptions);\nmailOptionsis an object that describes your message. See the full option reference below.\nmailOptions\nAPI‚Äã\ncreateReadStream()‚Äã\ncreateReadStream()\nCreate a readable stream that emits the raw RFC‚ÄØ822 message:\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nbuild(callback)‚Äã\nbuild(callback)\nGenerate the message and receive it as aBufferin a callback:\nBuffer\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nMessage fields‚Äã\n'sender@server.com'\n'Sender¬†Name¬†<sender@server.com>'\nMessage‚ÄëID\nMessage‚ÄëID\nstring\nBuffer\nStream\n{ path: '‚Ä¶' }\ntext/html\n{ method: 'REQUEST', content: icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue",
        "source_url": "https://nodemailer.com/extras/mailcomposer#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue\n\\r\\n\n\\n\nAll textual content is treated as UTF‚Äë8. Attachments are streamed as binary.\nAttachments‚Äã\nAttachment objects support the following properties:\nfalse\ncid:\ncontentDisposition: 'inline'\nmultipart/related\nstring\nBuffer\nStream\ncontent\nBuffer\nbase64\nhex\nquoted-printable\nbase64\nattachment\ninline\n{ 'X-My-Header': 'value' }\nstring\nBuffer\nStream\nExample‚Äã\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet",
        "source_url": "https://nodemailer.com/extras/mailcomposer#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": " from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nAlternatives‚Äã\nBesidestextandhtml, you can include any data as analternativepart ‚Äì for example, a Markdown or OpenDocument version of the same content. The email client picks the best‚Äësuited alternative to display. Calendar events are commonly attached this way.\nAlternative objects use thesame optionsasattachments, but are placed into themultipart/alternativesection of the message instead ofmultipart/mixed/multipart/related.\nmultipart/alternative\nmultipart/mixed\nmultipart/related\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nAddress formatting‚Äã\nYou can supply addresses in any of the following forms:\nrecipient@example.com\"Display Name\" <recipient@example.com>\nrecipient@example.com\"Display Name\" <recipient@example.com>\nOr as an object (no need to quote anything):\n{name:'Display Name',address:'recipient@example.com'}\n{name:'Display Name',address:'recipient@example.com'}\nEvery address field ‚Äì evenfrom‚Äì acceptsone or manyaddresses, in any mix of formats:\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com",
        "source_url": "https://nodemailer.com/extras/mailcomposer#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\nInternationalized domain names (IDN) are automatically converted to punycode:\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\nSMTP envelope‚Äã\nBy default the SMTP envelope is generated from the address headers. If you need something different ‚Äì for example, VERP or black‚Äëholefrom‚Äì you can setenvelopeexplicitly:\nfrom\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nSome transports (e.g. AWS¬†SES) ignoreenvelopeand instead use the header addresses.\nenvelope\nUsing embedded images‚Äã\nSetcidon an attachment and reference it in the HTML with thecid:protocol:\ncid\ncid:\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nBCC‚Äã\nMailComposer removes theBcc:header by default to keep recipient addresses private. If you need the header to remain, enablekeepBccaftercallingcompile():\nkeepBcc\ncompile()\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepB",
        "source_url": "https://nodemailer.com/extras/mailcomposer#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": "\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nLicense‚Äã\nMIT\nUsage1¬†¬∑¬†Install Nodemailer2¬†¬∑¬†Requiremailcomposerin your code3¬†¬∑¬†Create aMailComposerinstance\n1¬†¬∑¬†Install Nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code\n3¬†¬∑¬†Create aMailComposerinstance\nAPIcreateReadStream()build(callback)\ncreateReadStream()\ncreateReadStream()\nbuild(callback)\nbuild(callback)\nMessage fields\nAttachmentsExample\nExample\nAlternatives\nAddress formatting\nSMTP envelope\nUsing embedded images\nBCC\nLicense",
        "source_url": "https://nodemailer.com/extras/mailcomposer#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 180
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nTesting SMTP\nTesting SMTP\nWhen you need to exercise the email‚Äësending paths of your application in a development or continuous‚Äëintegration environment, youmust notaccidentally spam real inboxes. Instead of routing all mail to a single hard‚Äëcoded test address, point your code at amail‚Äëcatcherservice: it accepts messages over SMTP exactly like a production provider, butneverdelivers them. It just stores the messages so that you can open or download them later.\nNodemailer ships with first‚Äëclass support forEthereal Email‚Äì a free, open‚Äësource mail‚Äëcatcher designed for test environments. You can either\nprovision an account on the flywithcreateTestAccount, or\ncreateTestAccount\ncreate a persistent test mailboxfrom the Ethereal dashboard.\nIf you would rather stay completely offline you can preview messages locally withforwardemail/email‚Äëtemplates(it renders every message in your browser and iOS simulator viapreview-email).\nQuick‚Äëstart‚Äã\nInstall Nodemailer if you have not done so yet:\nnpm install nodemailer\nnpm install nodemailer\n1. Spin up a throw‚Äëaway Ethereal account‚Äã\n// ./mail.jsconstnodemailer=require(\"nodemailer\");nodemailer.createTestAccount((err,account)=>{if(err){console.error(\"Failed to create a testing account. \"+err.message);return;}// 1Ô∏è‚É£  Configure a transporter that talks to Etherealconsttransporter=nodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,// upgrade later with STARTTLSauth:{user:account.user,// generated userpass:account.pass,// generated password},});// 2Ô∏è‚É£  Send a messagetransporter.sendMail({from:\"Example app <no-reply@example.com>\",to:\"user@example.com\",subject:\"Hello from tests ‚úî\",text:\"This message was sent from a Node.js integration test.\",}).then((info)=>{console.log(\"Message sent: %s\",info.messageId);// Preview the stored message in Ethereal‚Äôs web UIconsole.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));}).catch(console.error",
        "source_url": "https://nodemailer.com/extras/smtp-connection",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "}).then((info)=>{console.log(\"Message sent: %s\",info.messageId);// Preview the stored message in Ethereal‚Äôs web UIconsole.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));}).catch(console.error);});\n// ./mail.jsconstnodemailer=require(\"nodemailer\");nodemailer.createTestAccount((err,account)=>{if(err){console.error(\"Failed to create a testing account. \"+err.message);return;}// 1Ô∏è‚É£  Configure a transporter that talks to Etherealconsttransporter=nodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,// upgrade later with STARTTLSauth:{user:account.user,// generated userpass:account.pass,// generated password},});// 2Ô∏è‚É£  Send a messagetransporter.sendMail({from:\"Example app <no-reply@example.com>\",to:\"user@example.com\",subject:\"Hello from tests ‚úî\",text:\"This message was sent from a Node.js integration test.\",}).then((info)=>{console.log(\"Message sent: %s\",info.messageId);// Preview the stored message in Ethereal‚Äôs web UIconsole.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));}).catch(console.error);});\nEthereal automatically deletes an account after48¬†hours of inactivity. Save the generated credentials somewhere if you want to inspect the messages later via the dashboard.\n2. Switch transports per environment‚Äã\nYou only need one place in your code base that knows which SMTP credentials to use. Everything else just callscreateTransport().\ncreateTransport()\n// ./mail‚Äëtransport.jsconstnodemailer=require(\"nodemailer\");functioncreateTransport(){if(process.env.NODE_ENV===\"production\"){// üöÄ  Real emailsreturnnodemailer.createTransport({host:\"smtp.sendgrid.net\",port:587,secure:false,auth:{user:process.env.SMTP_USERNAME,pass:process.env.SMTP_PASSWORD,},});}// üß™  Captured by Etherealreturnnodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,auth:{user:process.env.ETHEREAL_USERNAME,pass:process.env.ETHEREAL_PASSWORD,},});}module.exports=createTransport;\n// ./mail‚Äëtransport.jsconstnodemailer=require(\"nodemailer\");functioncreateTransport(){if(process.env.NODE_ENV===\"production\"){// üöÄ  Real emailsreturnnodemailer.createTransport",
        "source_url": "https://nodemailer.com/extras/smtp-connection",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "HEREAL_PASSWORD,},});}module.exports=createTransport;\n// ./mail‚Äëtransport.jsconstnodemailer=require(\"nodemailer\");functioncreateTransport(){if(process.env.NODE_ENV===\"production\"){// üöÄ  Real emailsreturnnodemailer.createTransport({host:\"smtp.sendgrid.net\",port:587,secure:false,auth:{user:process.env.SMTP_USERNAME,pass:process.env.SMTP_PASSWORD,},});}// üß™  Captured by Etherealreturnnodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,auth:{user:process.env.ETHEREAL_USERNAME,pass:process.env.ETHEREAL_PASSWORD,},});}module.exports=createTransport;\nYour application code can treat the transporter as a black box:\nconstcreateTransport=require('./mail-transport');consttransporter=createTransport();awaittransporter.sendMail({...});\nconstcreateTransport=require('./mail-transport');consttransporter=createTransport();awaittransporter.sendMail({...});\n3. Inspect the message‚Äã\nWhensendMailresolves (or its callback fires), the returnedinfoobject contains everything you need to locate the message inside Ethereal:\nsendMail\ninfo\nconstinfo=awaittransporter.sendMail(message);console.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));// ‚Üí https://ethereal.email/message/WaQKMgKddxQDoou\nconstinfo=awaittransporter.sendMail(message);console.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));// ‚Üí https://ethereal.email/message/WaQKMgKddxQDoou\nYou can also openMessages¬†‚Üí Inboxin Ethereal‚Äôs dashboard and browse around.\nBelow is what a captured message looks like in the Ethereal UI.\nQuick‚Äëstart1. Spin up a throw‚Äëaway Ethereal account2. Switch transports per environment3. Inspect the message\n1. Spin up a throw‚Äëaway Ethereal account\n2. Switch transports per environment\n3. Inspect the message",
        "source_url": "https://nodemailer.com/extras/smtp-connection",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 417
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nTesting SMTP\nTesting SMTP\nWhen you need to exercise the email‚Äësending paths of your application in a development or continuous‚Äëintegration environment, youmust notaccidentally spam real inboxes. Instead of routing all mail to a single hard‚Äëcoded test address, point your code at amail‚Äëcatcherservice: it accepts messages over SMTP exactly like a production provider, butneverdelivers them. It just stores the messages so that you can open or download them later.\nNodemailer ships with first‚Äëclass support forEthereal Email‚Äì a free, open‚Äësource mail‚Äëcatcher designed for test environments. You can either\nprovision an account on the flywithcreateTestAccount, or\ncreateTestAccount\ncreate a persistent test mailboxfrom the Ethereal dashboard.\nIf you would rather stay completely offline you can preview messages locally withforwardemail/email‚Äëtemplates(it renders every message in your browser and iOS simulator viapreview-email).\nQuick‚Äëstart‚Äã\nInstall Nodemailer if you have not done so yet:\nnpm install nodemailer\nnpm install nodemailer\n1. Spin up a throw‚Äëaway Ethereal account‚Äã\n// ./mail.jsconstnodemailer=require(\"nodemailer\");nodemailer.createTestAccount((err,account)=>{if(err){console.error(\"Failed to create a testing account. \"+err.message);return;}// 1Ô∏è‚É£  Configure a transporter that talks to Etherealconsttransporter=nodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,// upgrade later with STARTTLSauth:{user:account.user,// generated userpass:account.pass,// generated password},});// 2Ô∏è‚É£  Send a messagetransporter.sendMail({from:\"Example app <no-reply@example.com>\",to:\"user@example.com\",subject:\"Hello from tests ‚úî\",text:\"This message was sent from a Node.js integration test.\",}).then((info)=>{console.log(\"Message sent: %s\",info.messageId);// Preview the stored message in Ethereal‚Äôs web UIconsole.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));}).catch(console.error",
        "source_url": "https://nodemailer.com/extras/smtp-connection#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "}).then((info)=>{console.log(\"Message sent: %s\",info.messageId);// Preview the stored message in Ethereal‚Äôs web UIconsole.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));}).catch(console.error);});\n// ./mail.jsconstnodemailer=require(\"nodemailer\");nodemailer.createTestAccount((err,account)=>{if(err){console.error(\"Failed to create a testing account. \"+err.message);return;}// 1Ô∏è‚É£  Configure a transporter that talks to Etherealconsttransporter=nodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,// upgrade later with STARTTLSauth:{user:account.user,// generated userpass:account.pass,// generated password},});// 2Ô∏è‚É£  Send a messagetransporter.sendMail({from:\"Example app <no-reply@example.com>\",to:\"user@example.com\",subject:\"Hello from tests ‚úî\",text:\"This message was sent from a Node.js integration test.\",}).then((info)=>{console.log(\"Message sent: %s\",info.messageId);// Preview the stored message in Ethereal‚Äôs web UIconsole.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));}).catch(console.error);});\nEthereal automatically deletes an account after48¬†hours of inactivity. Save the generated credentials somewhere if you want to inspect the messages later via the dashboard.\n2. Switch transports per environment‚Äã\nYou only need one place in your code base that knows which SMTP credentials to use. Everything else just callscreateTransport().\ncreateTransport()\n// ./mail‚Äëtransport.jsconstnodemailer=require(\"nodemailer\");functioncreateTransport(){if(process.env.NODE_ENV===\"production\"){// üöÄ  Real emailsreturnnodemailer.createTransport({host:\"smtp.sendgrid.net\",port:587,secure:false,auth:{user:process.env.SMTP_USERNAME,pass:process.env.SMTP_PASSWORD,},});}// üß™  Captured by Etherealreturnnodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,auth:{user:process.env.ETHEREAL_USERNAME,pass:process.env.ETHEREAL_PASSWORD,},});}module.exports=createTransport;\n// ./mail‚Äëtransport.jsconstnodemailer=require(\"nodemailer\");functioncreateTransport(){if(process.env.NODE_ENV===\"production\"){// üöÄ  Real emailsreturnnodemailer.createTransport",
        "source_url": "https://nodemailer.com/extras/smtp-connection#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "HEREAL_PASSWORD,},});}module.exports=createTransport;\n// ./mail‚Äëtransport.jsconstnodemailer=require(\"nodemailer\");functioncreateTransport(){if(process.env.NODE_ENV===\"production\"){// üöÄ  Real emailsreturnnodemailer.createTransport({host:\"smtp.sendgrid.net\",port:587,secure:false,auth:{user:process.env.SMTP_USERNAME,pass:process.env.SMTP_PASSWORD,},});}// üß™  Captured by Etherealreturnnodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,auth:{user:process.env.ETHEREAL_USERNAME,pass:process.env.ETHEREAL_PASSWORD,},});}module.exports=createTransport;\nYour application code can treat the transporter as a black box:\nconstcreateTransport=require('./mail-transport');consttransporter=createTransport();awaittransporter.sendMail({...});\nconstcreateTransport=require('./mail-transport');consttransporter=createTransport();awaittransporter.sendMail({...});\n3. Inspect the message‚Äã\nWhensendMailresolves (or its callback fires), the returnedinfoobject contains everything you need to locate the message inside Ethereal:\nsendMail\ninfo\nconstinfo=awaittransporter.sendMail(message);console.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));// ‚Üí https://ethereal.email/message/WaQKMgKddxQDoou\nconstinfo=awaittransporter.sendMail(message);console.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));// ‚Üí https://ethereal.email/message/WaQKMgKddxQDoou\nYou can also openMessages¬†‚Üí Inboxin Ethereal‚Äôs dashboard and browse around.\nBelow is what a captured message looks like in the Ethereal UI.\nQuick‚Äëstart1. Spin up a throw‚Äëaway Ethereal account2. Switch transports per environment3. Inspect the message\n1. Spin up a throw‚Äëaway Ethereal account\n2. Switch transports per environment\n3. Inspect the message",
        "source_url": "https://nodemailer.com/extras/smtp-connection#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 417
    },
    {
        "chunk_id": "Nodemailer",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nLicense\nLicense\nNodemailer is licensed under the\"MIT No Attribution\"(MIT-0) License\nVersion 3 of Nodemailer was licensed under theEuropean Union Public License 1.1 (EUPL), which is acopyleftlicense. For more details on the decision to use EUPL for Nodemailer v3, you can refer to theNodemailer blog. However, after a two-month experiment, I decided to revert Nodemailer back to the MIT license and canceled all active subscriptions.\nUsing a restrictive license for a lower-level infrastructure module like Nodemailer proved to be more problematic than beneficial. Even I had to use older versions of Nodemailer to avoid licensing issues for client work. Additionally, there wasn‚Äôt a significant interest in paid subscriptions or services, and most users continued using the copyleft-licensed Nodemailer in their commercial projects, with little concern for the licensing terms. Without a feasible way to enforce the copyleft license, the decision was made to return to the more permissive MIT license.\nSupport Nodemailer‚Äã\nIf you appreciate Nodemailer or if your business profits from its use, I would greatly appreciate any support. You can donate via Bitcoin or PayPal, or become a sponsor on GitHub.\nNodemailer Bitcoin wallet:15Z8ADxhssKUiwP3jbbqJwA21744KMCfTM\n15Z8ADxhssKUiwP3jbbqJwA21744KMCfTM\nDonate via PayPal\nBecome a sponsor onGitHub\nSupport Nodemailer",
        "source_url": "https://nodemailer.com/license",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 362
    },
    {
        "chunk_id": "Nodemailer",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nLicense\nLicense\nNodemailer is licensed under the\"MIT No Attribution\"(MIT-0) License\nVersion 3 of Nodemailer was licensed under theEuropean Union Public License 1.1 (EUPL), which is acopyleftlicense. For more details on the decision to use EUPL for Nodemailer v3, you can refer to theNodemailer blog. However, after a two-month experiment, I decided to revert Nodemailer back to the MIT license and canceled all active subscriptions.\nUsing a restrictive license for a lower-level infrastructure module like Nodemailer proved to be more problematic than beneficial. Even I had to use older versions of Nodemailer to avoid licensing issues for client work. Additionally, there wasn‚Äôt a significant interest in paid subscriptions or services, and most users continued using the copyleft-licensed Nodemailer in their commercial projects, with little concern for the licensing terms. Without a feasible way to enforce the copyleft license, the decision was made to return to the more permissive MIT license.\nSupport Nodemailer‚Äã\nIf you appreciate Nodemailer or if your business profits from its use, I would greatly appreciate any support. You can donate via Bitcoin or PayPal, or become a sponsor on GitHub.\nNodemailer Bitcoin wallet:15Z8ADxhssKUiwP3jbbqJwA21744KMCfTM\n15Z8ADxhssKUiwP3jbbqJwA21744KMCfTM\nDonate via PayPal\nBecome a sponsor onGitHub\nSupport Nodemailer",
        "source_url": "https://nodemailer.com/license#__docusaurus_skipToContent_fallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 362
    },
    {
        "chunk_id": "Nodemailer",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modules\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nLicense\nLicense\nNodemailer is licensed under the\"MIT No Attribution\"(MIT-0) License\nVersion 3 of Nodemailer was licensed under theEuropean Union Public License 1.1 (EUPL), which is acopyleftlicense. For more details on the decision to use EUPL for Nodemailer v3, you can refer to theNodemailer blog. However, after a two-month experiment, I decided to revert Nodemailer back to the MIT license and canceled all active subscriptions.\nUsing a restrictive license for a lower-level infrastructure module like Nodemailer proved to be more problematic than beneficial. Even I had to use older versions of Nodemailer to avoid licensing issues for client work. Additionally, there wasn‚Äôt a significant interest in paid subscriptions or services, and most users continued using the copyleft-licensed Nodemailer in their commercial projects, with little concern for the licensing terms. Without a feasible way to enforce the copyleft license, the decision was made to return to the more permissive MIT license.\nSupport Nodemailer‚Äã\nIf you appreciate Nodemailer or if your business profits from its use, I would greatly appreciate any support. You can donate via Bitcoin or PayPal, or become a sponsor on GitHub.\nNodemailer Bitcoin wallet:15Z8ADxhssKUiwP3jbbqJwA21744KMCfTM\n15Z8ADxhssKUiwP3jbbqJwA21744KMCfTM\nDonate via PayPal\nBecome a sponsor onGitHub\nSupport Nodemailer",
        "source_url": "https://nodemailer.com/license#support-nodemailer",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 362
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nTesting SMTP\nTesting SMTP\nWhen you need to exercise the email‚Äësending paths of your application in a development or continuous‚Äëintegration environment, youmust notaccidentally spam real inboxes. Instead of routing all mail to a single hard‚Äëcoded test address, point your code at amail‚Äëcatcherservice: it accepts messages over SMTP exactly like a production provider, butneverdelivers them. It just stores the messages so that you can open or download them later.\nNodemailer ships with first‚Äëclass support forEthereal Email‚Äì a free, open‚Äësource mail‚Äëcatcher designed for test environments. You can either\nprovision an account on the flywithcreateTestAccount, or\ncreateTestAccount\ncreate a persistent test mailboxfrom the Ethereal dashboard.\nIf you would rather stay completely offline you can preview messages locally withforwardemail/email‚Äëtemplates(it renders every message in your browser and iOS simulator viapreview-email).\nQuick‚Äëstart‚Äã\nInstall Nodemailer if you have not done so yet:\nnpm install nodemailer\nnpm install nodemailer\n1. Spin up a throw‚Äëaway Ethereal account‚Äã\n// ./mail.jsconstnodemailer=require(\"nodemailer\");nodemailer.createTestAccount((err,account)=>{if(err){console.error(\"Failed to create a testing account. \"+err.message);return;}// 1Ô∏è‚É£  Configure a transporter that talks to Etherealconsttransporter=nodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,// upgrade later with STARTTLSauth:{user:account.user,// generated userpass:account.pass,// generated password},});// 2Ô∏è‚É£  Send a messagetransporter.sendMail({from:\"Example app <no-reply@example.com>\",to:\"user@example.com\",subject:\"Hello from tests ‚úî\",text:\"This message was sent from a Node.js integration test.\",}).then((info)=>{console.log(\"Message sent: %s\",info.messageId);// Preview the stored message in Ethereal‚Äôs web UIconsole.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));}).catch(console.error",
        "source_url": "https://nodemailer.com/extras/smtp-connection#quickstart",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "}).then((info)=>{console.log(\"Message sent: %s\",info.messageId);// Preview the stored message in Ethereal‚Äôs web UIconsole.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));}).catch(console.error);});\n// ./mail.jsconstnodemailer=require(\"nodemailer\");nodemailer.createTestAccount((err,account)=>{if(err){console.error(\"Failed to create a testing account. \"+err.message);return;}// 1Ô∏è‚É£  Configure a transporter that talks to Etherealconsttransporter=nodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,// upgrade later with STARTTLSauth:{user:account.user,// generated userpass:account.pass,// generated password},});// 2Ô∏è‚É£  Send a messagetransporter.sendMail({from:\"Example app <no-reply@example.com>\",to:\"user@example.com\",subject:\"Hello from tests ‚úî\",text:\"This message was sent from a Node.js integration test.\",}).then((info)=>{console.log(\"Message sent: %s\",info.messageId);// Preview the stored message in Ethereal‚Äôs web UIconsole.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));}).catch(console.error);});\nEthereal automatically deletes an account after48¬†hours of inactivity. Save the generated credentials somewhere if you want to inspect the messages later via the dashboard.\n2. Switch transports per environment‚Äã\nYou only need one place in your code base that knows which SMTP credentials to use. Everything else just callscreateTransport().\ncreateTransport()\n// ./mail‚Äëtransport.jsconstnodemailer=require(\"nodemailer\");functioncreateTransport(){if(process.env.NODE_ENV===\"production\"){// üöÄ  Real emailsreturnnodemailer.createTransport({host:\"smtp.sendgrid.net\",port:587,secure:false,auth:{user:process.env.SMTP_USERNAME,pass:process.env.SMTP_PASSWORD,},});}// üß™  Captured by Etherealreturnnodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,auth:{user:process.env.ETHEREAL_USERNAME,pass:process.env.ETHEREAL_PASSWORD,},});}module.exports=createTransport;\n// ./mail‚Äëtransport.jsconstnodemailer=require(\"nodemailer\");functioncreateTransport(){if(process.env.NODE_ENV===\"production\"){// üöÄ  Real emailsreturnnodemailer.createTransport",
        "source_url": "https://nodemailer.com/extras/smtp-connection#quickstart",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "HEREAL_PASSWORD,},});}module.exports=createTransport;\n// ./mail‚Äëtransport.jsconstnodemailer=require(\"nodemailer\");functioncreateTransport(){if(process.env.NODE_ENV===\"production\"){// üöÄ  Real emailsreturnnodemailer.createTransport({host:\"smtp.sendgrid.net\",port:587,secure:false,auth:{user:process.env.SMTP_USERNAME,pass:process.env.SMTP_PASSWORD,},});}// üß™  Captured by Etherealreturnnodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,auth:{user:process.env.ETHEREAL_USERNAME,pass:process.env.ETHEREAL_PASSWORD,},});}module.exports=createTransport;\nYour application code can treat the transporter as a black box:\nconstcreateTransport=require('./mail-transport');consttransporter=createTransport();awaittransporter.sendMail({...});\nconstcreateTransport=require('./mail-transport');consttransporter=createTransport();awaittransporter.sendMail({...});\n3. Inspect the message‚Äã\nWhensendMailresolves (or its callback fires), the returnedinfoobject contains everything you need to locate the message inside Ethereal:\nsendMail\ninfo\nconstinfo=awaittransporter.sendMail(message);console.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));// ‚Üí https://ethereal.email/message/WaQKMgKddxQDoou\nconstinfo=awaittransporter.sendMail(message);console.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));// ‚Üí https://ethereal.email/message/WaQKMgKddxQDoou\nYou can also openMessages¬†‚Üí Inboxin Ethereal‚Äôs dashboard and browse around.\nBelow is what a captured message looks like in the Ethereal UI.\nQuick‚Äëstart1. Spin up a throw‚Äëaway Ethereal account2. Switch transports per environment3. Inspect the message\n1. Spin up a throw‚Äëaway Ethereal account\n2. Switch transports per environment\n3. Inspect the message",
        "source_url": "https://nodemailer.com/extras/smtp-connection#quickstart",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 417
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nTesting SMTP\nTesting SMTP\nWhen you need to exercise the email‚Äësending paths of your application in a development or continuous‚Äëintegration environment, youmust notaccidentally spam real inboxes. Instead of routing all mail to a single hard‚Äëcoded test address, point your code at amail‚Äëcatcherservice: it accepts messages over SMTP exactly like a production provider, butneverdelivers them. It just stores the messages so that you can open or download them later.\nNodemailer ships with first‚Äëclass support forEthereal Email‚Äì a free, open‚Äësource mail‚Äëcatcher designed for test environments. You can either\nprovision an account on the flywithcreateTestAccount, or\ncreateTestAccount\ncreate a persistent test mailboxfrom the Ethereal dashboard.\nIf you would rather stay completely offline you can preview messages locally withforwardemail/email‚Äëtemplates(it renders every message in your browser and iOS simulator viapreview-email).\nQuick‚Äëstart‚Äã\nInstall Nodemailer if you have not done so yet:\nnpm install nodemailer\nnpm install nodemailer\n1. Spin up a throw‚Äëaway Ethereal account‚Äã\n// ./mail.jsconstnodemailer=require(\"nodemailer\");nodemailer.createTestAccount((err,account)=>{if(err){console.error(\"Failed to create a testing account. \"+err.message);return;}// 1Ô∏è‚É£  Configure a transporter that talks to Etherealconsttransporter=nodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,// upgrade later with STARTTLSauth:{user:account.user,// generated userpass:account.pass,// generated password},});// 2Ô∏è‚É£  Send a messagetransporter.sendMail({from:\"Example app <no-reply@example.com>\",to:\"user@example.com\",subject:\"Hello from tests ‚úî\",text:\"This message was sent from a Node.js integration test.\",}).then((info)=>{console.log(\"Message sent: %s\",info.messageId);// Preview the stored message in Ethereal‚Äôs web UIconsole.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));}).catch(console.error",
        "source_url": "https://nodemailer.com/extras/smtp-connection#1-spin-up-a-throwaway-ethereal-account",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "}).then((info)=>{console.log(\"Message sent: %s\",info.messageId);// Preview the stored message in Ethereal‚Äôs web UIconsole.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));}).catch(console.error);});\n// ./mail.jsconstnodemailer=require(\"nodemailer\");nodemailer.createTestAccount((err,account)=>{if(err){console.error(\"Failed to create a testing account. \"+err.message);return;}// 1Ô∏è‚É£  Configure a transporter that talks to Etherealconsttransporter=nodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,// upgrade later with STARTTLSauth:{user:account.user,// generated userpass:account.pass,// generated password},});// 2Ô∏è‚É£  Send a messagetransporter.sendMail({from:\"Example app <no-reply@example.com>\",to:\"user@example.com\",subject:\"Hello from tests ‚úî\",text:\"This message was sent from a Node.js integration test.\",}).then((info)=>{console.log(\"Message sent: %s\",info.messageId);// Preview the stored message in Ethereal‚Äôs web UIconsole.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));}).catch(console.error);});\nEthereal automatically deletes an account after48¬†hours of inactivity. Save the generated credentials somewhere if you want to inspect the messages later via the dashboard.\n2. Switch transports per environment‚Äã\nYou only need one place in your code base that knows which SMTP credentials to use. Everything else just callscreateTransport().\ncreateTransport()\n// ./mail‚Äëtransport.jsconstnodemailer=require(\"nodemailer\");functioncreateTransport(){if(process.env.NODE_ENV===\"production\"){// üöÄ  Real emailsreturnnodemailer.createTransport({host:\"smtp.sendgrid.net\",port:587,secure:false,auth:{user:process.env.SMTP_USERNAME,pass:process.env.SMTP_PASSWORD,},});}// üß™  Captured by Etherealreturnnodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,auth:{user:process.env.ETHEREAL_USERNAME,pass:process.env.ETHEREAL_PASSWORD,},});}module.exports=createTransport;\n// ./mail‚Äëtransport.jsconstnodemailer=require(\"nodemailer\");functioncreateTransport(){if(process.env.NODE_ENV===\"production\"){// üöÄ  Real emailsreturnnodemailer.createTransport",
        "source_url": "https://nodemailer.com/extras/smtp-connection#1-spin-up-a-throwaway-ethereal-account",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "HEREAL_PASSWORD,},});}module.exports=createTransport;\n// ./mail‚Äëtransport.jsconstnodemailer=require(\"nodemailer\");functioncreateTransport(){if(process.env.NODE_ENV===\"production\"){// üöÄ  Real emailsreturnnodemailer.createTransport({host:\"smtp.sendgrid.net\",port:587,secure:false,auth:{user:process.env.SMTP_USERNAME,pass:process.env.SMTP_PASSWORD,},});}// üß™  Captured by Etherealreturnnodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,auth:{user:process.env.ETHEREAL_USERNAME,pass:process.env.ETHEREAL_PASSWORD,},});}module.exports=createTransport;\nYour application code can treat the transporter as a black box:\nconstcreateTransport=require('./mail-transport');consttransporter=createTransport();awaittransporter.sendMail({...});\nconstcreateTransport=require('./mail-transport');consttransporter=createTransport();awaittransporter.sendMail({...});\n3. Inspect the message‚Äã\nWhensendMailresolves (or its callback fires), the returnedinfoobject contains everything you need to locate the message inside Ethereal:\nsendMail\ninfo\nconstinfo=awaittransporter.sendMail(message);console.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));// ‚Üí https://ethereal.email/message/WaQKMgKddxQDoou\nconstinfo=awaittransporter.sendMail(message);console.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));// ‚Üí https://ethereal.email/message/WaQKMgKddxQDoou\nYou can also openMessages¬†‚Üí Inboxin Ethereal‚Äôs dashboard and browse around.\nBelow is what a captured message looks like in the Ethereal UI.\nQuick‚Äëstart1. Spin up a throw‚Äëaway Ethereal account2. Switch transports per environment3. Inspect the message\n1. Spin up a throw‚Äëaway Ethereal account\n2. Switch transports per environment\n3. Inspect the message",
        "source_url": "https://nodemailer.com/extras/smtp-connection#1-spin-up-a-throwaway-ethereal-account",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 417
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nTesting SMTP\nTesting SMTP\nWhen you need to exercise the email‚Äësending paths of your application in a development or continuous‚Äëintegration environment, youmust notaccidentally spam real inboxes. Instead of routing all mail to a single hard‚Äëcoded test address, point your code at amail‚Äëcatcherservice: it accepts messages over SMTP exactly like a production provider, butneverdelivers them. It just stores the messages so that you can open or download them later.\nNodemailer ships with first‚Äëclass support forEthereal Email‚Äì a free, open‚Äësource mail‚Äëcatcher designed for test environments. You can either\nprovision an account on the flywithcreateTestAccount, or\ncreateTestAccount\ncreate a persistent test mailboxfrom the Ethereal dashboard.\nIf you would rather stay completely offline you can preview messages locally withforwardemail/email‚Äëtemplates(it renders every message in your browser and iOS simulator viapreview-email).\nQuick‚Äëstart‚Äã\nInstall Nodemailer if you have not done so yet:\nnpm install nodemailer\nnpm install nodemailer\n1. Spin up a throw‚Äëaway Ethereal account‚Äã\n// ./mail.jsconstnodemailer=require(\"nodemailer\");nodemailer.createTestAccount((err,account)=>{if(err){console.error(\"Failed to create a testing account. \"+err.message);return;}// 1Ô∏è‚É£  Configure a transporter that talks to Etherealconsttransporter=nodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,// upgrade later with STARTTLSauth:{user:account.user,// generated userpass:account.pass,// generated password},});// 2Ô∏è‚É£  Send a messagetransporter.sendMail({from:\"Example app <no-reply@example.com>\",to:\"user@example.com\",subject:\"Hello from tests ‚úî\",text:\"This message was sent from a Node.js integration test.\",}).then((info)=>{console.log(\"Message sent: %s\",info.messageId);// Preview the stored message in Ethereal‚Äôs web UIconsole.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));}).catch(console.error",
        "source_url": "https://nodemailer.com/extras/smtp-connection#2-switch-transports-per-environment",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "}).then((info)=>{console.log(\"Message sent: %s\",info.messageId);// Preview the stored message in Ethereal‚Äôs web UIconsole.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));}).catch(console.error);});\n// ./mail.jsconstnodemailer=require(\"nodemailer\");nodemailer.createTestAccount((err,account)=>{if(err){console.error(\"Failed to create a testing account. \"+err.message);return;}// 1Ô∏è‚É£  Configure a transporter that talks to Etherealconsttransporter=nodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,// upgrade later with STARTTLSauth:{user:account.user,// generated userpass:account.pass,// generated password},});// 2Ô∏è‚É£  Send a messagetransporter.sendMail({from:\"Example app <no-reply@example.com>\",to:\"user@example.com\",subject:\"Hello from tests ‚úî\",text:\"This message was sent from a Node.js integration test.\",}).then((info)=>{console.log(\"Message sent: %s\",info.messageId);// Preview the stored message in Ethereal‚Äôs web UIconsole.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));}).catch(console.error);});\nEthereal automatically deletes an account after48¬†hours of inactivity. Save the generated credentials somewhere if you want to inspect the messages later via the dashboard.\n2. Switch transports per environment‚Äã\nYou only need one place in your code base that knows which SMTP credentials to use. Everything else just callscreateTransport().\ncreateTransport()\n// ./mail‚Äëtransport.jsconstnodemailer=require(\"nodemailer\");functioncreateTransport(){if(process.env.NODE_ENV===\"production\"){// üöÄ  Real emailsreturnnodemailer.createTransport({host:\"smtp.sendgrid.net\",port:587,secure:false,auth:{user:process.env.SMTP_USERNAME,pass:process.env.SMTP_PASSWORD,},});}// üß™  Captured by Etherealreturnnodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,auth:{user:process.env.ETHEREAL_USERNAME,pass:process.env.ETHEREAL_PASSWORD,},});}module.exports=createTransport;\n// ./mail‚Äëtransport.jsconstnodemailer=require(\"nodemailer\");functioncreateTransport(){if(process.env.NODE_ENV===\"production\"){// üöÄ  Real emailsreturnnodemailer.createTransport",
        "source_url": "https://nodemailer.com/extras/smtp-connection#2-switch-transports-per-environment",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "HEREAL_PASSWORD,},});}module.exports=createTransport;\n// ./mail‚Äëtransport.jsconstnodemailer=require(\"nodemailer\");functioncreateTransport(){if(process.env.NODE_ENV===\"production\"){// üöÄ  Real emailsreturnnodemailer.createTransport({host:\"smtp.sendgrid.net\",port:587,secure:false,auth:{user:process.env.SMTP_USERNAME,pass:process.env.SMTP_PASSWORD,},});}// üß™  Captured by Etherealreturnnodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,auth:{user:process.env.ETHEREAL_USERNAME,pass:process.env.ETHEREAL_PASSWORD,},});}module.exports=createTransport;\nYour application code can treat the transporter as a black box:\nconstcreateTransport=require('./mail-transport');consttransporter=createTransport();awaittransporter.sendMail({...});\nconstcreateTransport=require('./mail-transport');consttransporter=createTransport();awaittransporter.sendMail({...});\n3. Inspect the message‚Äã\nWhensendMailresolves (or its callback fires), the returnedinfoobject contains everything you need to locate the message inside Ethereal:\nsendMail\ninfo\nconstinfo=awaittransporter.sendMail(message);console.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));// ‚Üí https://ethereal.email/message/WaQKMgKddxQDoou\nconstinfo=awaittransporter.sendMail(message);console.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));// ‚Üí https://ethereal.email/message/WaQKMgKddxQDoou\nYou can also openMessages¬†‚Üí Inboxin Ethereal‚Äôs dashboard and browse around.\nBelow is what a captured message looks like in the Ethereal UI.\nQuick‚Äëstart1. Spin up a throw‚Äëaway Ethereal account2. Switch transports per environment3. Inspect the message\n1. Spin up a throw‚Äëaway Ethereal account\n2. Switch transports per environment\n3. Inspect the message",
        "source_url": "https://nodemailer.com/extras/smtp-connection#2-switch-transports-per-environment",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 417
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nTesting SMTP\nTesting SMTP\nWhen you need to exercise the email‚Äësending paths of your application in a development or continuous‚Äëintegration environment, youmust notaccidentally spam real inboxes. Instead of routing all mail to a single hard‚Äëcoded test address, point your code at amail‚Äëcatcherservice: it accepts messages over SMTP exactly like a production provider, butneverdelivers them. It just stores the messages so that you can open or download them later.\nNodemailer ships with first‚Äëclass support forEthereal Email‚Äì a free, open‚Äësource mail‚Äëcatcher designed for test environments. You can either\nprovision an account on the flywithcreateTestAccount, or\ncreateTestAccount\ncreate a persistent test mailboxfrom the Ethereal dashboard.\nIf you would rather stay completely offline you can preview messages locally withforwardemail/email‚Äëtemplates(it renders every message in your browser and iOS simulator viapreview-email).\nQuick‚Äëstart‚Äã\nInstall Nodemailer if you have not done so yet:\nnpm install nodemailer\nnpm install nodemailer\n1. Spin up a throw‚Äëaway Ethereal account‚Äã\n// ./mail.jsconstnodemailer=require(\"nodemailer\");nodemailer.createTestAccount((err,account)=>{if(err){console.error(\"Failed to create a testing account. \"+err.message);return;}// 1Ô∏è‚É£  Configure a transporter that talks to Etherealconsttransporter=nodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,// upgrade later with STARTTLSauth:{user:account.user,// generated userpass:account.pass,// generated password},});// 2Ô∏è‚É£  Send a messagetransporter.sendMail({from:\"Example app <no-reply@example.com>\",to:\"user@example.com\",subject:\"Hello from tests ‚úî\",text:\"This message was sent from a Node.js integration test.\",}).then((info)=>{console.log(\"Message sent: %s\",info.messageId);// Preview the stored message in Ethereal‚Äôs web UIconsole.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));}).catch(console.error",
        "source_url": "https://nodemailer.com/extras/smtp-connection#3-inspect-the-message",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "}).then((info)=>{console.log(\"Message sent: %s\",info.messageId);// Preview the stored message in Ethereal‚Äôs web UIconsole.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));}).catch(console.error);});\n// ./mail.jsconstnodemailer=require(\"nodemailer\");nodemailer.createTestAccount((err,account)=>{if(err){console.error(\"Failed to create a testing account. \"+err.message);return;}// 1Ô∏è‚É£  Configure a transporter that talks to Etherealconsttransporter=nodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,// upgrade later with STARTTLSauth:{user:account.user,// generated userpass:account.pass,// generated password},});// 2Ô∏è‚É£  Send a messagetransporter.sendMail({from:\"Example app <no-reply@example.com>\",to:\"user@example.com\",subject:\"Hello from tests ‚úî\",text:\"This message was sent from a Node.js integration test.\",}).then((info)=>{console.log(\"Message sent: %s\",info.messageId);// Preview the stored message in Ethereal‚Äôs web UIconsole.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));}).catch(console.error);});\nEthereal automatically deletes an account after48¬†hours of inactivity. Save the generated credentials somewhere if you want to inspect the messages later via the dashboard.\n2. Switch transports per environment‚Äã\nYou only need one place in your code base that knows which SMTP credentials to use. Everything else just callscreateTransport().\ncreateTransport()\n// ./mail‚Äëtransport.jsconstnodemailer=require(\"nodemailer\");functioncreateTransport(){if(process.env.NODE_ENV===\"production\"){// üöÄ  Real emailsreturnnodemailer.createTransport({host:\"smtp.sendgrid.net\",port:587,secure:false,auth:{user:process.env.SMTP_USERNAME,pass:process.env.SMTP_PASSWORD,},});}// üß™  Captured by Etherealreturnnodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,auth:{user:process.env.ETHEREAL_USERNAME,pass:process.env.ETHEREAL_PASSWORD,},});}module.exports=createTransport;\n// ./mail‚Äëtransport.jsconstnodemailer=require(\"nodemailer\");functioncreateTransport(){if(process.env.NODE_ENV===\"production\"){// üöÄ  Real emailsreturnnodemailer.createTransport",
        "source_url": "https://nodemailer.com/extras/smtp-connection#3-inspect-the-message",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "HEREAL_PASSWORD,},});}module.exports=createTransport;\n// ./mail‚Äëtransport.jsconstnodemailer=require(\"nodemailer\");functioncreateTransport(){if(process.env.NODE_ENV===\"production\"){// üöÄ  Real emailsreturnnodemailer.createTransport({host:\"smtp.sendgrid.net\",port:587,secure:false,auth:{user:process.env.SMTP_USERNAME,pass:process.env.SMTP_PASSWORD,},});}// üß™  Captured by Etherealreturnnodemailer.createTransport({host:\"smtp.ethereal.email\",port:587,secure:false,auth:{user:process.env.ETHEREAL_USERNAME,pass:process.env.ETHEREAL_PASSWORD,},});}module.exports=createTransport;\nYour application code can treat the transporter as a black box:\nconstcreateTransport=require('./mail-transport');consttransporter=createTransport();awaittransporter.sendMail({...});\nconstcreateTransport=require('./mail-transport');consttransporter=createTransport();awaittransporter.sendMail({...});\n3. Inspect the message‚Äã\nWhensendMailresolves (or its callback fires), the returnedinfoobject contains everything you need to locate the message inside Ethereal:\nsendMail\ninfo\nconstinfo=awaittransporter.sendMail(message);console.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));// ‚Üí https://ethereal.email/message/WaQKMgKddxQDoou\nconstinfo=awaittransporter.sendMail(message);console.log(\"Preview URL: %s\",nodemailer.getTestMessageUrl(info));// ‚Üí https://ethereal.email/message/WaQKMgKddxQDoou\nYou can also openMessages¬†‚Üí Inboxin Ethereal‚Äôs dashboard and browse around.\nBelow is what a captured message looks like in the Ethereal UI.\nQuick‚Äëstart1. Spin up a throw‚Äëaway Ethereal account2. Switch transports per environment3. Inspect the message\n1. Spin up a throw‚Äëaway Ethereal account\n2. Switch transports per environment\n3. Inspect the message",
        "source_url": "https://nodemailer.com/extras/smtp-connection#3-inspect-the-message",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 417
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailcomposer\nMailcomposer\nGenerate RFC‚ÄØ822‚Äìformatted email messages that you can stream directly to an SMTP connection or save to disk.\nMailcomposer is shipped with Nodemailer ‚Äì you donothave to install anything else.\nUsage‚Äã\n1¬†¬∑¬†Install Nodemailer‚Äã\nnpm install nodemailer\nnpm install nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code‚Äã\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\n3¬†¬∑¬†Create aMailComposerinstance‚Äã\nconstmail=newMailComposer(mailOptions);\nconstmail=newMailComposer(mailOptions);\nmailOptionsis an object that describes your message. See the full option reference below.\nmailOptions\nAPI‚Äã\ncreateReadStream()‚Äã\ncreateReadStream()\nCreate a readable stream that emits the raw RFC‚ÄØ822 message:\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nbuild(callback)‚Äã\nbuild(callback)\nGenerate the message and receive it as aBufferin a callback:\nBuffer\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nMessage fields‚Äã\n'sender@server.com'\n'Sender¬†Name¬†<sender@server.com>'\nMessage‚ÄëID\nMessage‚ÄëID\nstring\nBuffer\nStream\n{ path: '‚Ä¶' }\ntext/html\n{ method: 'REQUEST', content: icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue",
        "source_url": "https://nodemailer.com/extras/mailcomposer#usage",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue\n\\r\\n\n\\n\nAll textual content is treated as UTF‚Äë8. Attachments are streamed as binary.\nAttachments‚Äã\nAttachment objects support the following properties:\nfalse\ncid:\ncontentDisposition: 'inline'\nmultipart/related\nstring\nBuffer\nStream\ncontent\nBuffer\nbase64\nhex\nquoted-printable\nbase64\nattachment\ninline\n{ 'X-My-Header': 'value' }\nstring\nBuffer\nStream\nExample‚Äã\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet",
        "source_url": "https://nodemailer.com/extras/mailcomposer#usage",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": " from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nAlternatives‚Äã\nBesidestextandhtml, you can include any data as analternativepart ‚Äì for example, a Markdown or OpenDocument version of the same content. The email client picks the best‚Äësuited alternative to display. Calendar events are commonly attached this way.\nAlternative objects use thesame optionsasattachments, but are placed into themultipart/alternativesection of the message instead ofmultipart/mixed/multipart/related.\nmultipart/alternative\nmultipart/mixed\nmultipart/related\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nAddress formatting‚Äã\nYou can supply addresses in any of the following forms:\nrecipient@example.com\"Display Name\" <recipient@example.com>\nrecipient@example.com\"Display Name\" <recipient@example.com>\nOr as an object (no need to quote anything):\n{name:'Display Name',address:'recipient@example.com'}\n{name:'Display Name',address:'recipient@example.com'}\nEvery address field ‚Äì evenfrom‚Äì acceptsone or manyaddresses, in any mix of formats:\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com",
        "source_url": "https://nodemailer.com/extras/mailcomposer#usage",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\nInternationalized domain names (IDN) are automatically converted to punycode:\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\nSMTP envelope‚Äã\nBy default the SMTP envelope is generated from the address headers. If you need something different ‚Äì for example, VERP or black‚Äëholefrom‚Äì you can setenvelopeexplicitly:\nfrom\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nSome transports (e.g. AWS¬†SES) ignoreenvelopeand instead use the header addresses.\nenvelope\nUsing embedded images‚Äã\nSetcidon an attachment and reference it in the HTML with thecid:protocol:\ncid\ncid:\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nBCC‚Äã\nMailComposer removes theBcc:header by default to keep recipient addresses private. If you need the header to remain, enablekeepBccaftercallingcompile():\nkeepBcc\ncompile()\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepB",
        "source_url": "https://nodemailer.com/extras/mailcomposer#usage",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": "\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nLicense‚Äã\nMIT\nUsage1¬†¬∑¬†Install Nodemailer2¬†¬∑¬†Requiremailcomposerin your code3¬†¬∑¬†Create aMailComposerinstance\n1¬†¬∑¬†Install Nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code\n3¬†¬∑¬†Create aMailComposerinstance\nAPIcreateReadStream()build(callback)\ncreateReadStream()\ncreateReadStream()\nbuild(callback)\nbuild(callback)\nMessage fields\nAttachmentsExample\nExample\nAlternatives\nAddress formatting\nSMTP envelope\nUsing embedded images\nBCC\nLicense",
        "source_url": "https://nodemailer.com/extras/mailcomposer#usage",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 180
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailcomposer\nMailcomposer\nGenerate RFC‚ÄØ822‚Äìformatted email messages that you can stream directly to an SMTP connection or save to disk.\nMailcomposer is shipped with Nodemailer ‚Äì you donothave to install anything else.\nUsage‚Äã\n1¬†¬∑¬†Install Nodemailer‚Äã\nnpm install nodemailer\nnpm install nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code‚Äã\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\n3¬†¬∑¬†Create aMailComposerinstance‚Äã\nconstmail=newMailComposer(mailOptions);\nconstmail=newMailComposer(mailOptions);\nmailOptionsis an object that describes your message. See the full option reference below.\nmailOptions\nAPI‚Äã\ncreateReadStream()‚Äã\ncreateReadStream()\nCreate a readable stream that emits the raw RFC‚ÄØ822 message:\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nbuild(callback)‚Äã\nbuild(callback)\nGenerate the message and receive it as aBufferin a callback:\nBuffer\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nMessage fields‚Äã\n'sender@server.com'\n'Sender¬†Name¬†<sender@server.com>'\nMessage‚ÄëID\nMessage‚ÄëID\nstring\nBuffer\nStream\n{ path: '‚Ä¶' }\ntext/html\n{ method: 'REQUEST', content: icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue",
        "source_url": "https://nodemailer.com/extras/mailcomposer#1install-nodemailer",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue\n\\r\\n\n\\n\nAll textual content is treated as UTF‚Äë8. Attachments are streamed as binary.\nAttachments‚Äã\nAttachment objects support the following properties:\nfalse\ncid:\ncontentDisposition: 'inline'\nmultipart/related\nstring\nBuffer\nStream\ncontent\nBuffer\nbase64\nhex\nquoted-printable\nbase64\nattachment\ninline\n{ 'X-My-Header': 'value' }\nstring\nBuffer\nStream\nExample‚Äã\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet",
        "source_url": "https://nodemailer.com/extras/mailcomposer#1install-nodemailer",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": " from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nAlternatives‚Äã\nBesidestextandhtml, you can include any data as analternativepart ‚Äì for example, a Markdown or OpenDocument version of the same content. The email client picks the best‚Äësuited alternative to display. Calendar events are commonly attached this way.\nAlternative objects use thesame optionsasattachments, but are placed into themultipart/alternativesection of the message instead ofmultipart/mixed/multipart/related.\nmultipart/alternative\nmultipart/mixed\nmultipart/related\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nAddress formatting‚Äã\nYou can supply addresses in any of the following forms:\nrecipient@example.com\"Display Name\" <recipient@example.com>\nrecipient@example.com\"Display Name\" <recipient@example.com>\nOr as an object (no need to quote anything):\n{name:'Display Name',address:'recipient@example.com'}\n{name:'Display Name',address:'recipient@example.com'}\nEvery address field ‚Äì evenfrom‚Äì acceptsone or manyaddresses, in any mix of formats:\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com",
        "source_url": "https://nodemailer.com/extras/mailcomposer#1install-nodemailer",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\nInternationalized domain names (IDN) are automatically converted to punycode:\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\nSMTP envelope‚Äã\nBy default the SMTP envelope is generated from the address headers. If you need something different ‚Äì for example, VERP or black‚Äëholefrom‚Äì you can setenvelopeexplicitly:\nfrom\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nSome transports (e.g. AWS¬†SES) ignoreenvelopeand instead use the header addresses.\nenvelope\nUsing embedded images‚Äã\nSetcidon an attachment and reference it in the HTML with thecid:protocol:\ncid\ncid:\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nBCC‚Äã\nMailComposer removes theBcc:header by default to keep recipient addresses private. If you need the header to remain, enablekeepBccaftercallingcompile():\nkeepBcc\ncompile()\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepB",
        "source_url": "https://nodemailer.com/extras/mailcomposer#1install-nodemailer",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": "\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nLicense‚Äã\nMIT\nUsage1¬†¬∑¬†Install Nodemailer2¬†¬∑¬†Requiremailcomposerin your code3¬†¬∑¬†Create aMailComposerinstance\n1¬†¬∑¬†Install Nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code\n3¬†¬∑¬†Create aMailComposerinstance\nAPIcreateReadStream()build(callback)\ncreateReadStream()\ncreateReadStream()\nbuild(callback)\nbuild(callback)\nMessage fields\nAttachmentsExample\nExample\nAlternatives\nAddress formatting\nSMTP envelope\nUsing embedded images\nBCC\nLicense",
        "source_url": "https://nodemailer.com/extras/mailcomposer#1install-nodemailer",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 180
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailcomposer\nMailcomposer\nGenerate RFC‚ÄØ822‚Äìformatted email messages that you can stream directly to an SMTP connection or save to disk.\nMailcomposer is shipped with Nodemailer ‚Äì you donothave to install anything else.\nUsage‚Äã\n1¬†¬∑¬†Install Nodemailer‚Äã\nnpm install nodemailer\nnpm install nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code‚Äã\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\n3¬†¬∑¬†Create aMailComposerinstance‚Äã\nconstmail=newMailComposer(mailOptions);\nconstmail=newMailComposer(mailOptions);\nmailOptionsis an object that describes your message. See the full option reference below.\nmailOptions\nAPI‚Äã\ncreateReadStream()‚Äã\ncreateReadStream()\nCreate a readable stream that emits the raw RFC‚ÄØ822 message:\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nbuild(callback)‚Äã\nbuild(callback)\nGenerate the message and receive it as aBufferin a callback:\nBuffer\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nMessage fields‚Äã\n'sender@server.com'\n'Sender¬†Name¬†<sender@server.com>'\nMessage‚ÄëID\nMessage‚ÄëID\nstring\nBuffer\nStream\n{ path: '‚Ä¶' }\ntext/html\n{ method: 'REQUEST', content: icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue",
        "source_url": "https://nodemailer.com/extras/mailcomposer#2require-mailcomposer-in-your-code",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue\n\\r\\n\n\\n\nAll textual content is treated as UTF‚Äë8. Attachments are streamed as binary.\nAttachments‚Äã\nAttachment objects support the following properties:\nfalse\ncid:\ncontentDisposition: 'inline'\nmultipart/related\nstring\nBuffer\nStream\ncontent\nBuffer\nbase64\nhex\nquoted-printable\nbase64\nattachment\ninline\n{ 'X-My-Header': 'value' }\nstring\nBuffer\nStream\nExample‚Äã\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet",
        "source_url": "https://nodemailer.com/extras/mailcomposer#2require-mailcomposer-in-your-code",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": " from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nAlternatives‚Äã\nBesidestextandhtml, you can include any data as analternativepart ‚Äì for example, a Markdown or OpenDocument version of the same content. The email client picks the best‚Äësuited alternative to display. Calendar events are commonly attached this way.\nAlternative objects use thesame optionsasattachments, but are placed into themultipart/alternativesection of the message instead ofmultipart/mixed/multipart/related.\nmultipart/alternative\nmultipart/mixed\nmultipart/related\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nAddress formatting‚Äã\nYou can supply addresses in any of the following forms:\nrecipient@example.com\"Display Name\" <recipient@example.com>\nrecipient@example.com\"Display Name\" <recipient@example.com>\nOr as an object (no need to quote anything):\n{name:'Display Name',address:'recipient@example.com'}\n{name:'Display Name',address:'recipient@example.com'}\nEvery address field ‚Äì evenfrom‚Äì acceptsone or manyaddresses, in any mix of formats:\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com",
        "source_url": "https://nodemailer.com/extras/mailcomposer#2require-mailcomposer-in-your-code",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\nInternationalized domain names (IDN) are automatically converted to punycode:\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\nSMTP envelope‚Äã\nBy default the SMTP envelope is generated from the address headers. If you need something different ‚Äì for example, VERP or black‚Äëholefrom‚Äì you can setenvelopeexplicitly:\nfrom\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nSome transports (e.g. AWS¬†SES) ignoreenvelopeand instead use the header addresses.\nenvelope\nUsing embedded images‚Äã\nSetcidon an attachment and reference it in the HTML with thecid:protocol:\ncid\ncid:\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nBCC‚Äã\nMailComposer removes theBcc:header by default to keep recipient addresses private. If you need the header to remain, enablekeepBccaftercallingcompile():\nkeepBcc\ncompile()\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepB",
        "source_url": "https://nodemailer.com/extras/mailcomposer#2require-mailcomposer-in-your-code",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": "\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nLicense‚Äã\nMIT\nUsage1¬†¬∑¬†Install Nodemailer2¬†¬∑¬†Requiremailcomposerin your code3¬†¬∑¬†Create aMailComposerinstance\n1¬†¬∑¬†Install Nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code\n3¬†¬∑¬†Create aMailComposerinstance\nAPIcreateReadStream()build(callback)\ncreateReadStream()\ncreateReadStream()\nbuild(callback)\nbuild(callback)\nMessage fields\nAttachmentsExample\nExample\nAlternatives\nAddress formatting\nSMTP envelope\nUsing embedded images\nBCC\nLicense",
        "source_url": "https://nodemailer.com/extras/mailcomposer#2require-mailcomposer-in-your-code",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 180
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailcomposer\nMailcomposer\nGenerate RFC‚ÄØ822‚Äìformatted email messages that you can stream directly to an SMTP connection or save to disk.\nMailcomposer is shipped with Nodemailer ‚Äì you donothave to install anything else.\nUsage‚Äã\n1¬†¬∑¬†Install Nodemailer‚Äã\nnpm install nodemailer\nnpm install nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code‚Äã\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\n3¬†¬∑¬†Create aMailComposerinstance‚Äã\nconstmail=newMailComposer(mailOptions);\nconstmail=newMailComposer(mailOptions);\nmailOptionsis an object that describes your message. See the full option reference below.\nmailOptions\nAPI‚Äã\ncreateReadStream()‚Äã\ncreateReadStream()\nCreate a readable stream that emits the raw RFC‚ÄØ822 message:\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nbuild(callback)‚Äã\nbuild(callback)\nGenerate the message and receive it as aBufferin a callback:\nBuffer\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nMessage fields‚Äã\n'sender@server.com'\n'Sender¬†Name¬†<sender@server.com>'\nMessage‚ÄëID\nMessage‚ÄëID\nstring\nBuffer\nStream\n{ path: '‚Ä¶' }\ntext/html\n{ method: 'REQUEST', content: icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue",
        "source_url": "https://nodemailer.com/extras/mailcomposer#3create-a-mailcomposer-instance",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue\n\\r\\n\n\\n\nAll textual content is treated as UTF‚Äë8. Attachments are streamed as binary.\nAttachments‚Äã\nAttachment objects support the following properties:\nfalse\ncid:\ncontentDisposition: 'inline'\nmultipart/related\nstring\nBuffer\nStream\ncontent\nBuffer\nbase64\nhex\nquoted-printable\nbase64\nattachment\ninline\n{ 'X-My-Header': 'value' }\nstring\nBuffer\nStream\nExample‚Äã\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet",
        "source_url": "https://nodemailer.com/extras/mailcomposer#3create-a-mailcomposer-instance",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": " from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nAlternatives‚Äã\nBesidestextandhtml, you can include any data as analternativepart ‚Äì for example, a Markdown or OpenDocument version of the same content. The email client picks the best‚Äësuited alternative to display. Calendar events are commonly attached this way.\nAlternative objects use thesame optionsasattachments, but are placed into themultipart/alternativesection of the message instead ofmultipart/mixed/multipart/related.\nmultipart/alternative\nmultipart/mixed\nmultipart/related\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nAddress formatting‚Äã\nYou can supply addresses in any of the following forms:\nrecipient@example.com\"Display Name\" <recipient@example.com>\nrecipient@example.com\"Display Name\" <recipient@example.com>\nOr as an object (no need to quote anything):\n{name:'Display Name',address:'recipient@example.com'}\n{name:'Display Name',address:'recipient@example.com'}\nEvery address field ‚Äì evenfrom‚Äì acceptsone or manyaddresses, in any mix of formats:\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com",
        "source_url": "https://nodemailer.com/extras/mailcomposer#3create-a-mailcomposer-instance",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\nInternationalized domain names (IDN) are automatically converted to punycode:\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\nSMTP envelope‚Äã\nBy default the SMTP envelope is generated from the address headers. If you need something different ‚Äì for example, VERP or black‚Äëholefrom‚Äì you can setenvelopeexplicitly:\nfrom\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nSome transports (e.g. AWS¬†SES) ignoreenvelopeand instead use the header addresses.\nenvelope\nUsing embedded images‚Äã\nSetcidon an attachment and reference it in the HTML with thecid:protocol:\ncid\ncid:\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nBCC‚Äã\nMailComposer removes theBcc:header by default to keep recipient addresses private. If you need the header to remain, enablekeepBccaftercallingcompile():\nkeepBcc\ncompile()\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepB",
        "source_url": "https://nodemailer.com/extras/mailcomposer#3create-a-mailcomposer-instance",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": "\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nLicense‚Äã\nMIT\nUsage1¬†¬∑¬†Install Nodemailer2¬†¬∑¬†Requiremailcomposerin your code3¬†¬∑¬†Create aMailComposerinstance\n1¬†¬∑¬†Install Nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code\n3¬†¬∑¬†Create aMailComposerinstance\nAPIcreateReadStream()build(callback)\ncreateReadStream()\ncreateReadStream()\nbuild(callback)\nbuild(callback)\nMessage fields\nAttachmentsExample\nExample\nAlternatives\nAddress formatting\nSMTP envelope\nUsing embedded images\nBCC\nLicense",
        "source_url": "https://nodemailer.com/extras/mailcomposer#3create-a-mailcomposer-instance",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 180
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailcomposer\nMailcomposer\nGenerate RFC‚ÄØ822‚Äìformatted email messages that you can stream directly to an SMTP connection or save to disk.\nMailcomposer is shipped with Nodemailer ‚Äì you donothave to install anything else.\nUsage‚Äã\n1¬†¬∑¬†Install Nodemailer‚Äã\nnpm install nodemailer\nnpm install nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code‚Äã\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\n3¬†¬∑¬†Create aMailComposerinstance‚Äã\nconstmail=newMailComposer(mailOptions);\nconstmail=newMailComposer(mailOptions);\nmailOptionsis an object that describes your message. See the full option reference below.\nmailOptions\nAPI‚Äã\ncreateReadStream()‚Äã\ncreateReadStream()\nCreate a readable stream that emits the raw RFC‚ÄØ822 message:\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nbuild(callback)‚Äã\nbuild(callback)\nGenerate the message and receive it as aBufferin a callback:\nBuffer\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nMessage fields‚Äã\n'sender@server.com'\n'Sender¬†Name¬†<sender@server.com>'\nMessage‚ÄëID\nMessage‚ÄëID\nstring\nBuffer\nStream\n{ path: '‚Ä¶' }\ntext/html\n{ method: 'REQUEST', content: icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue",
        "source_url": "https://nodemailer.com/extras/mailcomposer#api",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue\n\\r\\n\n\\n\nAll textual content is treated as UTF‚Äë8. Attachments are streamed as binary.\nAttachments‚Äã\nAttachment objects support the following properties:\nfalse\ncid:\ncontentDisposition: 'inline'\nmultipart/related\nstring\nBuffer\nStream\ncontent\nBuffer\nbase64\nhex\nquoted-printable\nbase64\nattachment\ninline\n{ 'X-My-Header': 'value' }\nstring\nBuffer\nStream\nExample‚Äã\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet",
        "source_url": "https://nodemailer.com/extras/mailcomposer#api",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": " from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nAlternatives‚Äã\nBesidestextandhtml, you can include any data as analternativepart ‚Äì for example, a Markdown or OpenDocument version of the same content. The email client picks the best‚Äësuited alternative to display. Calendar events are commonly attached this way.\nAlternative objects use thesame optionsasattachments, but are placed into themultipart/alternativesection of the message instead ofmultipart/mixed/multipart/related.\nmultipart/alternative\nmultipart/mixed\nmultipart/related\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nAddress formatting‚Äã\nYou can supply addresses in any of the following forms:\nrecipient@example.com\"Display Name\" <recipient@example.com>\nrecipient@example.com\"Display Name\" <recipient@example.com>\nOr as an object (no need to quote anything):\n{name:'Display Name',address:'recipient@example.com'}\n{name:'Display Name',address:'recipient@example.com'}\nEvery address field ‚Äì evenfrom‚Äì acceptsone or manyaddresses, in any mix of formats:\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com",
        "source_url": "https://nodemailer.com/extras/mailcomposer#api",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\nInternationalized domain names (IDN) are automatically converted to punycode:\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\nSMTP envelope‚Äã\nBy default the SMTP envelope is generated from the address headers. If you need something different ‚Äì for example, VERP or black‚Äëholefrom‚Äì you can setenvelopeexplicitly:\nfrom\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nSome transports (e.g. AWS¬†SES) ignoreenvelopeand instead use the header addresses.\nenvelope\nUsing embedded images‚Äã\nSetcidon an attachment and reference it in the HTML with thecid:protocol:\ncid\ncid:\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nBCC‚Äã\nMailComposer removes theBcc:header by default to keep recipient addresses private. If you need the header to remain, enablekeepBccaftercallingcompile():\nkeepBcc\ncompile()\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepB",
        "source_url": "https://nodemailer.com/extras/mailcomposer#api",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": "\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nLicense‚Äã\nMIT\nUsage1¬†¬∑¬†Install Nodemailer2¬†¬∑¬†Requiremailcomposerin your code3¬†¬∑¬†Create aMailComposerinstance\n1¬†¬∑¬†Install Nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code\n3¬†¬∑¬†Create aMailComposerinstance\nAPIcreateReadStream()build(callback)\ncreateReadStream()\ncreateReadStream()\nbuild(callback)\nbuild(callback)\nMessage fields\nAttachmentsExample\nExample\nAlternatives\nAddress formatting\nSMTP envelope\nUsing embedded images\nBCC\nLicense",
        "source_url": "https://nodemailer.com/extras/mailcomposer#api",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 180
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailcomposer\nMailcomposer\nGenerate RFC‚ÄØ822‚Äìformatted email messages that you can stream directly to an SMTP connection or save to disk.\nMailcomposer is shipped with Nodemailer ‚Äì you donothave to install anything else.\nUsage‚Äã\n1¬†¬∑¬†Install Nodemailer‚Äã\nnpm install nodemailer\nnpm install nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code‚Äã\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\n3¬†¬∑¬†Create aMailComposerinstance‚Äã\nconstmail=newMailComposer(mailOptions);\nconstmail=newMailComposer(mailOptions);\nmailOptionsis an object that describes your message. See the full option reference below.\nmailOptions\nAPI‚Äã\ncreateReadStream()‚Äã\ncreateReadStream()\nCreate a readable stream that emits the raw RFC‚ÄØ822 message:\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nbuild(callback)‚Äã\nbuild(callback)\nGenerate the message and receive it as aBufferin a callback:\nBuffer\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nMessage fields‚Äã\n'sender@server.com'\n'Sender¬†Name¬†<sender@server.com>'\nMessage‚ÄëID\nMessage‚ÄëID\nstring\nBuffer\nStream\n{ path: '‚Ä¶' }\ntext/html\n{ method: 'REQUEST', content: icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue",
        "source_url": "https://nodemailer.com/extras/mailcomposer#createreadstream",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue\n\\r\\n\n\\n\nAll textual content is treated as UTF‚Äë8. Attachments are streamed as binary.\nAttachments‚Äã\nAttachment objects support the following properties:\nfalse\ncid:\ncontentDisposition: 'inline'\nmultipart/related\nstring\nBuffer\nStream\ncontent\nBuffer\nbase64\nhex\nquoted-printable\nbase64\nattachment\ninline\n{ 'X-My-Header': 'value' }\nstring\nBuffer\nStream\nExample‚Äã\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet",
        "source_url": "https://nodemailer.com/extras/mailcomposer#createreadstream",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": " from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nAlternatives‚Äã\nBesidestextandhtml, you can include any data as analternativepart ‚Äì for example, a Markdown or OpenDocument version of the same content. The email client picks the best‚Äësuited alternative to display. Calendar events are commonly attached this way.\nAlternative objects use thesame optionsasattachments, but are placed into themultipart/alternativesection of the message instead ofmultipart/mixed/multipart/related.\nmultipart/alternative\nmultipart/mixed\nmultipart/related\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nAddress formatting‚Äã\nYou can supply addresses in any of the following forms:\nrecipient@example.com\"Display Name\" <recipient@example.com>\nrecipient@example.com\"Display Name\" <recipient@example.com>\nOr as an object (no need to quote anything):\n{name:'Display Name',address:'recipient@example.com'}\n{name:'Display Name',address:'recipient@example.com'}\nEvery address field ‚Äì evenfrom‚Äì acceptsone or manyaddresses, in any mix of formats:\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com",
        "source_url": "https://nodemailer.com/extras/mailcomposer#createreadstream",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\nInternationalized domain names (IDN) are automatically converted to punycode:\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\nSMTP envelope‚Äã\nBy default the SMTP envelope is generated from the address headers. If you need something different ‚Äì for example, VERP or black‚Äëholefrom‚Äì you can setenvelopeexplicitly:\nfrom\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nSome transports (e.g. AWS¬†SES) ignoreenvelopeand instead use the header addresses.\nenvelope\nUsing embedded images‚Äã\nSetcidon an attachment and reference it in the HTML with thecid:protocol:\ncid\ncid:\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nBCC‚Äã\nMailComposer removes theBcc:header by default to keep recipient addresses private. If you need the header to remain, enablekeepBccaftercallingcompile():\nkeepBcc\ncompile()\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepB",
        "source_url": "https://nodemailer.com/extras/mailcomposer#createreadstream",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": "\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nLicense‚Äã\nMIT\nUsage1¬†¬∑¬†Install Nodemailer2¬†¬∑¬†Requiremailcomposerin your code3¬†¬∑¬†Create aMailComposerinstance\n1¬†¬∑¬†Install Nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code\n3¬†¬∑¬†Create aMailComposerinstance\nAPIcreateReadStream()build(callback)\ncreateReadStream()\ncreateReadStream()\nbuild(callback)\nbuild(callback)\nMessage fields\nAttachmentsExample\nExample\nAlternatives\nAddress formatting\nSMTP envelope\nUsing embedded images\nBCC\nLicense",
        "source_url": "https://nodemailer.com/extras/mailcomposer#createreadstream",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 180
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailcomposer\nMailcomposer\nGenerate RFC‚ÄØ822‚Äìformatted email messages that you can stream directly to an SMTP connection or save to disk.\nMailcomposer is shipped with Nodemailer ‚Äì you donothave to install anything else.\nUsage‚Äã\n1¬†¬∑¬†Install Nodemailer‚Äã\nnpm install nodemailer\nnpm install nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code‚Äã\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\n3¬†¬∑¬†Create aMailComposerinstance‚Äã\nconstmail=newMailComposer(mailOptions);\nconstmail=newMailComposer(mailOptions);\nmailOptionsis an object that describes your message. See the full option reference below.\nmailOptions\nAPI‚Äã\ncreateReadStream()‚Äã\ncreateReadStream()\nCreate a readable stream that emits the raw RFC‚ÄØ822 message:\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nbuild(callback)‚Äã\nbuild(callback)\nGenerate the message and receive it as aBufferin a callback:\nBuffer\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nMessage fields‚Äã\n'sender@server.com'\n'Sender¬†Name¬†<sender@server.com>'\nMessage‚ÄëID\nMessage‚ÄëID\nstring\nBuffer\nStream\n{ path: '‚Ä¶' }\ntext/html\n{ method: 'REQUEST', content: icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue",
        "source_url": "https://nodemailer.com/extras/mailcomposer#buildcallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue\n\\r\\n\n\\n\nAll textual content is treated as UTF‚Äë8. Attachments are streamed as binary.\nAttachments‚Äã\nAttachment objects support the following properties:\nfalse\ncid:\ncontentDisposition: 'inline'\nmultipart/related\nstring\nBuffer\nStream\ncontent\nBuffer\nbase64\nhex\nquoted-printable\nbase64\nattachment\ninline\n{ 'X-My-Header': 'value' }\nstring\nBuffer\nStream\nExample‚Äã\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet",
        "source_url": "https://nodemailer.com/extras/mailcomposer#buildcallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": " from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nAlternatives‚Äã\nBesidestextandhtml, you can include any data as analternativepart ‚Äì for example, a Markdown or OpenDocument version of the same content. The email client picks the best‚Äësuited alternative to display. Calendar events are commonly attached this way.\nAlternative objects use thesame optionsasattachments, but are placed into themultipart/alternativesection of the message instead ofmultipart/mixed/multipart/related.\nmultipart/alternative\nmultipart/mixed\nmultipart/related\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nAddress formatting‚Äã\nYou can supply addresses in any of the following forms:\nrecipient@example.com\"Display Name\" <recipient@example.com>\nrecipient@example.com\"Display Name\" <recipient@example.com>\nOr as an object (no need to quote anything):\n{name:'Display Name',address:'recipient@example.com'}\n{name:'Display Name',address:'recipient@example.com'}\nEvery address field ‚Äì evenfrom‚Äì acceptsone or manyaddresses, in any mix of formats:\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com",
        "source_url": "https://nodemailer.com/extras/mailcomposer#buildcallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\nInternationalized domain names (IDN) are automatically converted to punycode:\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\nSMTP envelope‚Äã\nBy default the SMTP envelope is generated from the address headers. If you need something different ‚Äì for example, VERP or black‚Äëholefrom‚Äì you can setenvelopeexplicitly:\nfrom\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nSome transports (e.g. AWS¬†SES) ignoreenvelopeand instead use the header addresses.\nenvelope\nUsing embedded images‚Äã\nSetcidon an attachment and reference it in the HTML with thecid:protocol:\ncid\ncid:\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nBCC‚Äã\nMailComposer removes theBcc:header by default to keep recipient addresses private. If you need the header to remain, enablekeepBccaftercallingcompile():\nkeepBcc\ncompile()\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepB",
        "source_url": "https://nodemailer.com/extras/mailcomposer#buildcallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": "\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nLicense‚Äã\nMIT\nUsage1¬†¬∑¬†Install Nodemailer2¬†¬∑¬†Requiremailcomposerin your code3¬†¬∑¬†Create aMailComposerinstance\n1¬†¬∑¬†Install Nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code\n3¬†¬∑¬†Create aMailComposerinstance\nAPIcreateReadStream()build(callback)\ncreateReadStream()\ncreateReadStream()\nbuild(callback)\nbuild(callback)\nMessage fields\nAttachmentsExample\nExample\nAlternatives\nAddress formatting\nSMTP envelope\nUsing embedded images\nBCC\nLicense",
        "source_url": "https://nodemailer.com/extras/mailcomposer#buildcallback",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 180
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailcomposer\nMailcomposer\nGenerate RFC‚ÄØ822‚Äìformatted email messages that you can stream directly to an SMTP connection or save to disk.\nMailcomposer is shipped with Nodemailer ‚Äì you donothave to install anything else.\nUsage‚Äã\n1¬†¬∑¬†Install Nodemailer‚Äã\nnpm install nodemailer\nnpm install nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code‚Äã\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\n3¬†¬∑¬†Create aMailComposerinstance‚Äã\nconstmail=newMailComposer(mailOptions);\nconstmail=newMailComposer(mailOptions);\nmailOptionsis an object that describes your message. See the full option reference below.\nmailOptions\nAPI‚Äã\ncreateReadStream()‚Äã\ncreateReadStream()\nCreate a readable stream that emits the raw RFC‚ÄØ822 message:\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nbuild(callback)‚Äã\nbuild(callback)\nGenerate the message and receive it as aBufferin a callback:\nBuffer\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nMessage fields‚Äã\n'sender@server.com'\n'Sender¬†Name¬†<sender@server.com>'\nMessage‚ÄëID\nMessage‚ÄëID\nstring\nBuffer\nStream\n{ path: '‚Ä¶' }\ntext/html\n{ method: 'REQUEST', content: icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue",
        "source_url": "https://nodemailer.com/extras/mailcomposer#message-fields",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue\n\\r\\n\n\\n\nAll textual content is treated as UTF‚Äë8. Attachments are streamed as binary.\nAttachments‚Äã\nAttachment objects support the following properties:\nfalse\ncid:\ncontentDisposition: 'inline'\nmultipart/related\nstring\nBuffer\nStream\ncontent\nBuffer\nbase64\nhex\nquoted-printable\nbase64\nattachment\ninline\n{ 'X-My-Header': 'value' }\nstring\nBuffer\nStream\nExample‚Äã\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet",
        "source_url": "https://nodemailer.com/extras/mailcomposer#message-fields",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": " from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nAlternatives‚Äã\nBesidestextandhtml, you can include any data as analternativepart ‚Äì for example, a Markdown or OpenDocument version of the same content. The email client picks the best‚Äësuited alternative to display. Calendar events are commonly attached this way.\nAlternative objects use thesame optionsasattachments, but are placed into themultipart/alternativesection of the message instead ofmultipart/mixed/multipart/related.\nmultipart/alternative\nmultipart/mixed\nmultipart/related\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nAddress formatting‚Äã\nYou can supply addresses in any of the following forms:\nrecipient@example.com\"Display Name\" <recipient@example.com>\nrecipient@example.com\"Display Name\" <recipient@example.com>\nOr as an object (no need to quote anything):\n{name:'Display Name',address:'recipient@example.com'}\n{name:'Display Name',address:'recipient@example.com'}\nEvery address field ‚Äì evenfrom‚Äì acceptsone or manyaddresses, in any mix of formats:\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com",
        "source_url": "https://nodemailer.com/extras/mailcomposer#message-fields",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\nInternationalized domain names (IDN) are automatically converted to punycode:\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\nSMTP envelope‚Äã\nBy default the SMTP envelope is generated from the address headers. If you need something different ‚Äì for example, VERP or black‚Äëholefrom‚Äì you can setenvelopeexplicitly:\nfrom\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nSome transports (e.g. AWS¬†SES) ignoreenvelopeand instead use the header addresses.\nenvelope\nUsing embedded images‚Äã\nSetcidon an attachment and reference it in the HTML with thecid:protocol:\ncid\ncid:\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nBCC‚Äã\nMailComposer removes theBcc:header by default to keep recipient addresses private. If you need the header to remain, enablekeepBccaftercallingcompile():\nkeepBcc\ncompile()\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepB",
        "source_url": "https://nodemailer.com/extras/mailcomposer#message-fields",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": "\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nLicense‚Äã\nMIT\nUsage1¬†¬∑¬†Install Nodemailer2¬†¬∑¬†Requiremailcomposerin your code3¬†¬∑¬†Create aMailComposerinstance\n1¬†¬∑¬†Install Nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code\n3¬†¬∑¬†Create aMailComposerinstance\nAPIcreateReadStream()build(callback)\ncreateReadStream()\ncreateReadStream()\nbuild(callback)\nbuild(callback)\nMessage fields\nAttachmentsExample\nExample\nAlternatives\nAddress formatting\nSMTP envelope\nUsing embedded images\nBCC\nLicense",
        "source_url": "https://nodemailer.com/extras/mailcomposer#message-fields",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 180
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailcomposer\nMailcomposer\nGenerate RFC‚ÄØ822‚Äìformatted email messages that you can stream directly to an SMTP connection or save to disk.\nMailcomposer is shipped with Nodemailer ‚Äì you donothave to install anything else.\nUsage‚Äã\n1¬†¬∑¬†Install Nodemailer‚Äã\nnpm install nodemailer\nnpm install nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code‚Äã\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\n3¬†¬∑¬†Create aMailComposerinstance‚Äã\nconstmail=newMailComposer(mailOptions);\nconstmail=newMailComposer(mailOptions);\nmailOptionsis an object that describes your message. See the full option reference below.\nmailOptions\nAPI‚Äã\ncreateReadStream()‚Äã\ncreateReadStream()\nCreate a readable stream that emits the raw RFC‚ÄØ822 message:\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nbuild(callback)‚Äã\nbuild(callback)\nGenerate the message and receive it as aBufferin a callback:\nBuffer\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nMessage fields‚Äã\n'sender@server.com'\n'Sender¬†Name¬†<sender@server.com>'\nMessage‚ÄëID\nMessage‚ÄëID\nstring\nBuffer\nStream\n{ path: '‚Ä¶' }\ntext/html\n{ method: 'REQUEST', content: icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue",
        "source_url": "https://nodemailer.com/extras/mailcomposer#address-formatting",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue\n\\r\\n\n\\n\nAll textual content is treated as UTF‚Äë8. Attachments are streamed as binary.\nAttachments‚Äã\nAttachment objects support the following properties:\nfalse\ncid:\ncontentDisposition: 'inline'\nmultipart/related\nstring\nBuffer\nStream\ncontent\nBuffer\nbase64\nhex\nquoted-printable\nbase64\nattachment\ninline\n{ 'X-My-Header': 'value' }\nstring\nBuffer\nStream\nExample‚Äã\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet",
        "source_url": "https://nodemailer.com/extras/mailcomposer#address-formatting",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": " from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nAlternatives‚Äã\nBesidestextandhtml, you can include any data as analternativepart ‚Äì for example, a Markdown or OpenDocument version of the same content. The email client picks the best‚Äësuited alternative to display. Calendar events are commonly attached this way.\nAlternative objects use thesame optionsasattachments, but are placed into themultipart/alternativesection of the message instead ofmultipart/mixed/multipart/related.\nmultipart/alternative\nmultipart/mixed\nmultipart/related\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nAddress formatting‚Äã\nYou can supply addresses in any of the following forms:\nrecipient@example.com\"Display Name\" <recipient@example.com>\nrecipient@example.com\"Display Name\" <recipient@example.com>\nOr as an object (no need to quote anything):\n{name:'Display Name',address:'recipient@example.com'}\n{name:'Display Name',address:'recipient@example.com'}\nEvery address field ‚Äì evenfrom‚Äì acceptsone or manyaddresses, in any mix of formats:\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com",
        "source_url": "https://nodemailer.com/extras/mailcomposer#address-formatting",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\nInternationalized domain names (IDN) are automatically converted to punycode:\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\nSMTP envelope‚Äã\nBy default the SMTP envelope is generated from the address headers. If you need something different ‚Äì for example, VERP or black‚Äëholefrom‚Äì you can setenvelopeexplicitly:\nfrom\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nSome transports (e.g. AWS¬†SES) ignoreenvelopeand instead use the header addresses.\nenvelope\nUsing embedded images‚Äã\nSetcidon an attachment and reference it in the HTML with thecid:protocol:\ncid\ncid:\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nBCC‚Äã\nMailComposer removes theBcc:header by default to keep recipient addresses private. If you need the header to remain, enablekeepBccaftercallingcompile():\nkeepBcc\ncompile()\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepB",
        "source_url": "https://nodemailer.com/extras/mailcomposer#address-formatting",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": "\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nLicense‚Äã\nMIT\nUsage1¬†¬∑¬†Install Nodemailer2¬†¬∑¬†Requiremailcomposerin your code3¬†¬∑¬†Create aMailComposerinstance\n1¬†¬∑¬†Install Nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code\n3¬†¬∑¬†Create aMailComposerinstance\nAPIcreateReadStream()build(callback)\ncreateReadStream()\ncreateReadStream()\nbuild(callback)\nbuild(callback)\nMessage fields\nAttachmentsExample\nExample\nAlternatives\nAddress formatting\nSMTP envelope\nUsing embedded images\nBCC\nLicense",
        "source_url": "https://nodemailer.com/extras/mailcomposer#address-formatting",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 180
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailcomposer\nMailcomposer\nGenerate RFC‚ÄØ822‚Äìformatted email messages that you can stream directly to an SMTP connection or save to disk.\nMailcomposer is shipped with Nodemailer ‚Äì you donothave to install anything else.\nUsage‚Äã\n1¬†¬∑¬†Install Nodemailer‚Äã\nnpm install nodemailer\nnpm install nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code‚Äã\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\n3¬†¬∑¬†Create aMailComposerinstance‚Äã\nconstmail=newMailComposer(mailOptions);\nconstmail=newMailComposer(mailOptions);\nmailOptionsis an object that describes your message. See the full option reference below.\nmailOptions\nAPI‚Äã\ncreateReadStream()‚Äã\ncreateReadStream()\nCreate a readable stream that emits the raw RFC‚ÄØ822 message:\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nbuild(callback)‚Äã\nbuild(callback)\nGenerate the message and receive it as aBufferin a callback:\nBuffer\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nMessage fields‚Äã\n'sender@server.com'\n'Sender¬†Name¬†<sender@server.com>'\nMessage‚ÄëID\nMessage‚ÄëID\nstring\nBuffer\nStream\n{ path: '‚Ä¶' }\ntext/html\n{ method: 'REQUEST', content: icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue",
        "source_url": "https://nodemailer.com/extras/mailcomposer#bcc",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue\n\\r\\n\n\\n\nAll textual content is treated as UTF‚Äë8. Attachments are streamed as binary.\nAttachments‚Äã\nAttachment objects support the following properties:\nfalse\ncid:\ncontentDisposition: 'inline'\nmultipart/related\nstring\nBuffer\nStream\ncontent\nBuffer\nbase64\nhex\nquoted-printable\nbase64\nattachment\ninline\n{ 'X-My-Header': 'value' }\nstring\nBuffer\nStream\nExample‚Äã\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet",
        "source_url": "https://nodemailer.com/extras/mailcomposer#bcc",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": " from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nAlternatives‚Äã\nBesidestextandhtml, you can include any data as analternativepart ‚Äì for example, a Markdown or OpenDocument version of the same content. The email client picks the best‚Äësuited alternative to display. Calendar events are commonly attached this way.\nAlternative objects use thesame optionsasattachments, but are placed into themultipart/alternativesection of the message instead ofmultipart/mixed/multipart/related.\nmultipart/alternative\nmultipart/mixed\nmultipart/related\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nAddress formatting‚Äã\nYou can supply addresses in any of the following forms:\nrecipient@example.com\"Display Name\" <recipient@example.com>\nrecipient@example.com\"Display Name\" <recipient@example.com>\nOr as an object (no need to quote anything):\n{name:'Display Name',address:'recipient@example.com'}\n{name:'Display Name',address:'recipient@example.com'}\nEvery address field ‚Äì evenfrom‚Äì acceptsone or manyaddresses, in any mix of formats:\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com",
        "source_url": "https://nodemailer.com/extras/mailcomposer#bcc",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\nInternationalized domain names (IDN) are automatically converted to punycode:\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\nSMTP envelope‚Äã\nBy default the SMTP envelope is generated from the address headers. If you need something different ‚Äì for example, VERP or black‚Äëholefrom‚Äì you can setenvelopeexplicitly:\nfrom\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nSome transports (e.g. AWS¬†SES) ignoreenvelopeand instead use the header addresses.\nenvelope\nUsing embedded images‚Äã\nSetcidon an attachment and reference it in the HTML with thecid:protocol:\ncid\ncid:\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nBCC‚Äã\nMailComposer removes theBcc:header by default to keep recipient addresses private. If you need the header to remain, enablekeepBccaftercallingcompile():\nkeepBcc\ncompile()\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepB",
        "source_url": "https://nodemailer.com/extras/mailcomposer#bcc",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": "\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nLicense‚Äã\nMIT\nUsage1¬†¬∑¬†Install Nodemailer2¬†¬∑¬†Requiremailcomposerin your code3¬†¬∑¬†Create aMailComposerinstance\n1¬†¬∑¬†Install Nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code\n3¬†¬∑¬†Create aMailComposerinstance\nAPIcreateReadStream()build(callback)\ncreateReadStream()\ncreateReadStream()\nbuild(callback)\nbuild(callback)\nMessage fields\nAttachmentsExample\nExample\nAlternatives\nAddress formatting\nSMTP envelope\nUsing embedded images\nBCC\nLicense",
        "source_url": "https://nodemailer.com/extras/mailcomposer#bcc",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 180
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailcomposer\nMailcomposer\nGenerate RFC‚ÄØ822‚Äìformatted email messages that you can stream directly to an SMTP connection or save to disk.\nMailcomposer is shipped with Nodemailer ‚Äì you donothave to install anything else.\nUsage‚Äã\n1¬†¬∑¬†Install Nodemailer‚Äã\nnpm install nodemailer\nnpm install nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code‚Äã\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\n3¬†¬∑¬†Create aMailComposerinstance‚Äã\nconstmail=newMailComposer(mailOptions);\nconstmail=newMailComposer(mailOptions);\nmailOptionsis an object that describes your message. See the full option reference below.\nmailOptions\nAPI‚Äã\ncreateReadStream()‚Äã\ncreateReadStream()\nCreate a readable stream that emits the raw RFC‚ÄØ822 message:\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nbuild(callback)‚Äã\nbuild(callback)\nGenerate the message and receive it as aBufferin a callback:\nBuffer\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nMessage fields‚Äã\n'sender@server.com'\n'Sender¬†Name¬†<sender@server.com>'\nMessage‚ÄëID\nMessage‚ÄëID\nstring\nBuffer\nStream\n{ path: '‚Ä¶' }\ntext/html\n{ method: 'REQUEST', content: icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue",
        "source_url": "https://nodemailer.com/extras/mailcomposer#attachments",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue\n\\r\\n\n\\n\nAll textual content is treated as UTF‚Äë8. Attachments are streamed as binary.\nAttachments‚Äã\nAttachment objects support the following properties:\nfalse\ncid:\ncontentDisposition: 'inline'\nmultipart/related\nstring\nBuffer\nStream\ncontent\nBuffer\nbase64\nhex\nquoted-printable\nbase64\nattachment\ninline\n{ 'X-My-Header': 'value' }\nstring\nBuffer\nStream\nExample‚Äã\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet",
        "source_url": "https://nodemailer.com/extras/mailcomposer#attachments",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": " from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nAlternatives‚Äã\nBesidestextandhtml, you can include any data as analternativepart ‚Äì for example, a Markdown or OpenDocument version of the same content. The email client picks the best‚Äësuited alternative to display. Calendar events are commonly attached this way.\nAlternative objects use thesame optionsasattachments, but are placed into themultipart/alternativesection of the message instead ofmultipart/mixed/multipart/related.\nmultipart/alternative\nmultipart/mixed\nmultipart/related\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nAddress formatting‚Äã\nYou can supply addresses in any of the following forms:\nrecipient@example.com\"Display Name\" <recipient@example.com>\nrecipient@example.com\"Display Name\" <recipient@example.com>\nOr as an object (no need to quote anything):\n{name:'Display Name',address:'recipient@example.com'}\n{name:'Display Name',address:'recipient@example.com'}\nEvery address field ‚Äì evenfrom‚Äì acceptsone or manyaddresses, in any mix of formats:\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com",
        "source_url": "https://nodemailer.com/extras/mailcomposer#attachments",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\nInternationalized domain names (IDN) are automatically converted to punycode:\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\nSMTP envelope‚Äã\nBy default the SMTP envelope is generated from the address headers. If you need something different ‚Äì for example, VERP or black‚Äëholefrom‚Äì you can setenvelopeexplicitly:\nfrom\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nSome transports (e.g. AWS¬†SES) ignoreenvelopeand instead use the header addresses.\nenvelope\nUsing embedded images‚Äã\nSetcidon an attachment and reference it in the HTML with thecid:protocol:\ncid\ncid:\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nBCC‚Äã\nMailComposer removes theBcc:header by default to keep recipient addresses private. If you need the header to remain, enablekeepBccaftercallingcompile():\nkeepBcc\ncompile()\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepB",
        "source_url": "https://nodemailer.com/extras/mailcomposer#attachments",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": "\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nLicense‚Äã\nMIT\nUsage1¬†¬∑¬†Install Nodemailer2¬†¬∑¬†Requiremailcomposerin your code3¬†¬∑¬†Create aMailComposerinstance\n1¬†¬∑¬†Install Nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code\n3¬†¬∑¬†Create aMailComposerinstance\nAPIcreateReadStream()build(callback)\ncreateReadStream()\ncreateReadStream()\nbuild(callback)\nbuild(callback)\nMessage fields\nAttachmentsExample\nExample\nAlternatives\nAddress formatting\nSMTP envelope\nUsing embedded images\nBCC\nLicense",
        "source_url": "https://nodemailer.com/extras/mailcomposer#attachments",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 180
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailcomposer\nMailcomposer\nGenerate RFC‚ÄØ822‚Äìformatted email messages that you can stream directly to an SMTP connection or save to disk.\nMailcomposer is shipped with Nodemailer ‚Äì you donothave to install anything else.\nUsage‚Äã\n1¬†¬∑¬†Install Nodemailer‚Äã\nnpm install nodemailer\nnpm install nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code‚Äã\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\n3¬†¬∑¬†Create aMailComposerinstance‚Äã\nconstmail=newMailComposer(mailOptions);\nconstmail=newMailComposer(mailOptions);\nmailOptionsis an object that describes your message. See the full option reference below.\nmailOptions\nAPI‚Äã\ncreateReadStream()‚Äã\ncreateReadStream()\nCreate a readable stream that emits the raw RFC‚ÄØ822 message:\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nbuild(callback)‚Äã\nbuild(callback)\nGenerate the message and receive it as aBufferin a callback:\nBuffer\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nMessage fields‚Äã\n'sender@server.com'\n'Sender¬†Name¬†<sender@server.com>'\nMessage‚ÄëID\nMessage‚ÄëID\nstring\nBuffer\nStream\n{ path: '‚Ä¶' }\ntext/html\n{ method: 'REQUEST', content: icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue",
        "source_url": "https://nodemailer.com/extras/mailcomposer#alternatives",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue\n\\r\\n\n\\n\nAll textual content is treated as UTF‚Äë8. Attachments are streamed as binary.\nAttachments‚Äã\nAttachment objects support the following properties:\nfalse\ncid:\ncontentDisposition: 'inline'\nmultipart/related\nstring\nBuffer\nStream\ncontent\nBuffer\nbase64\nhex\nquoted-printable\nbase64\nattachment\ninline\n{ 'X-My-Header': 'value' }\nstring\nBuffer\nStream\nExample‚Äã\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet",
        "source_url": "https://nodemailer.com/extras/mailcomposer#alternatives",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": " from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nAlternatives‚Äã\nBesidestextandhtml, you can include any data as analternativepart ‚Äì for example, a Markdown or OpenDocument version of the same content. The email client picks the best‚Äësuited alternative to display. Calendar events are commonly attached this way.\nAlternative objects use thesame optionsasattachments, but are placed into themultipart/alternativesection of the message instead ofmultipart/mixed/multipart/related.\nmultipart/alternative\nmultipart/mixed\nmultipart/related\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nAddress formatting‚Äã\nYou can supply addresses in any of the following forms:\nrecipient@example.com\"Display Name\" <recipient@example.com>\nrecipient@example.com\"Display Name\" <recipient@example.com>\nOr as an object (no need to quote anything):\n{name:'Display Name',address:'recipient@example.com'}\n{name:'Display Name',address:'recipient@example.com'}\nEvery address field ‚Äì evenfrom‚Äì acceptsone or manyaddresses, in any mix of formats:\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com",
        "source_url": "https://nodemailer.com/extras/mailcomposer#alternatives",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\nInternationalized domain names (IDN) are automatically converted to punycode:\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\nSMTP envelope‚Äã\nBy default the SMTP envelope is generated from the address headers. If you need something different ‚Äì for example, VERP or black‚Äëholefrom‚Äì you can setenvelopeexplicitly:\nfrom\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nSome transports (e.g. AWS¬†SES) ignoreenvelopeand instead use the header addresses.\nenvelope\nUsing embedded images‚Äã\nSetcidon an attachment and reference it in the HTML with thecid:protocol:\ncid\ncid:\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nBCC‚Äã\nMailComposer removes theBcc:header by default to keep recipient addresses private. If you need the header to remain, enablekeepBccaftercallingcompile():\nkeepBcc\ncompile()\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepB",
        "source_url": "https://nodemailer.com/extras/mailcomposer#alternatives",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": "\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nLicense‚Äã\nMIT\nUsage1¬†¬∑¬†Install Nodemailer2¬†¬∑¬†Requiremailcomposerin your code3¬†¬∑¬†Create aMailComposerinstance\n1¬†¬∑¬†Install Nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code\n3¬†¬∑¬†Create aMailComposerinstance\nAPIcreateReadStream()build(callback)\ncreateReadStream()\ncreateReadStream()\nbuild(callback)\nbuild(callback)\nMessage fields\nAttachmentsExample\nExample\nAlternatives\nAddress formatting\nSMTP envelope\nUsing embedded images\nBCC\nLicense",
        "source_url": "https://nodemailer.com/extras/mailcomposer#alternatives",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 180
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailcomposer\nMailcomposer\nGenerate RFC‚ÄØ822‚Äìformatted email messages that you can stream directly to an SMTP connection or save to disk.\nMailcomposer is shipped with Nodemailer ‚Äì you donothave to install anything else.\nUsage‚Äã\n1¬†¬∑¬†Install Nodemailer‚Äã\nnpm install nodemailer\nnpm install nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code‚Äã\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\n3¬†¬∑¬†Create aMailComposerinstance‚Äã\nconstmail=newMailComposer(mailOptions);\nconstmail=newMailComposer(mailOptions);\nmailOptionsis an object that describes your message. See the full option reference below.\nmailOptions\nAPI‚Äã\ncreateReadStream()‚Äã\ncreateReadStream()\nCreate a readable stream that emits the raw RFC‚ÄØ822 message:\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nbuild(callback)‚Äã\nbuild(callback)\nGenerate the message and receive it as aBufferin a callback:\nBuffer\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nMessage fields‚Äã\n'sender@server.com'\n'Sender¬†Name¬†<sender@server.com>'\nMessage‚ÄëID\nMessage‚ÄëID\nstring\nBuffer\nStream\n{ path: '‚Ä¶' }\ntext/html\n{ method: 'REQUEST', content: icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue",
        "source_url": "https://nodemailer.com/extras/mailcomposer#smtp-envelope",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue\n\\r\\n\n\\n\nAll textual content is treated as UTF‚Äë8. Attachments are streamed as binary.\nAttachments‚Äã\nAttachment objects support the following properties:\nfalse\ncid:\ncontentDisposition: 'inline'\nmultipart/related\nstring\nBuffer\nStream\ncontent\nBuffer\nbase64\nhex\nquoted-printable\nbase64\nattachment\ninline\n{ 'X-My-Header': 'value' }\nstring\nBuffer\nStream\nExample‚Äã\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet",
        "source_url": "https://nodemailer.com/extras/mailcomposer#smtp-envelope",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": " from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nAlternatives‚Äã\nBesidestextandhtml, you can include any data as analternativepart ‚Äì for example, a Markdown or OpenDocument version of the same content. The email client picks the best‚Äësuited alternative to display. Calendar events are commonly attached this way.\nAlternative objects use thesame optionsasattachments, but are placed into themultipart/alternativesection of the message instead ofmultipart/mixed/multipart/related.\nmultipart/alternative\nmultipart/mixed\nmultipart/related\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nAddress formatting‚Äã\nYou can supply addresses in any of the following forms:\nrecipient@example.com\"Display Name\" <recipient@example.com>\nrecipient@example.com\"Display Name\" <recipient@example.com>\nOr as an object (no need to quote anything):\n{name:'Display Name',address:'recipient@example.com'}\n{name:'Display Name',address:'recipient@example.com'}\nEvery address field ‚Äì evenfrom‚Äì acceptsone or manyaddresses, in any mix of formats:\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com",
        "source_url": "https://nodemailer.com/extras/mailcomposer#smtp-envelope",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\nInternationalized domain names (IDN) are automatically converted to punycode:\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\nSMTP envelope‚Äã\nBy default the SMTP envelope is generated from the address headers. If you need something different ‚Äì for example, VERP or black‚Äëholefrom‚Äì you can setenvelopeexplicitly:\nfrom\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nSome transports (e.g. AWS¬†SES) ignoreenvelopeand instead use the header addresses.\nenvelope\nUsing embedded images‚Äã\nSetcidon an attachment and reference it in the HTML with thecid:protocol:\ncid\ncid:\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nBCC‚Äã\nMailComposer removes theBcc:header by default to keep recipient addresses private. If you need the header to remain, enablekeepBccaftercallingcompile():\nkeepBcc\ncompile()\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepB",
        "source_url": "https://nodemailer.com/extras/mailcomposer#smtp-envelope",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": "\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nLicense‚Äã\nMIT\nUsage1¬†¬∑¬†Install Nodemailer2¬†¬∑¬†Requiremailcomposerin your code3¬†¬∑¬†Create aMailComposerinstance\n1¬†¬∑¬†Install Nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code\n3¬†¬∑¬†Create aMailComposerinstance\nAPIcreateReadStream()build(callback)\ncreateReadStream()\ncreateReadStream()\nbuild(callback)\nbuild(callback)\nMessage fields\nAttachmentsExample\nExample\nAlternatives\nAddress formatting\nSMTP envelope\nUsing embedded images\nBCC\nLicense",
        "source_url": "https://nodemailer.com/extras/mailcomposer#smtp-envelope",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 180
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailcomposer\nMailcomposer\nGenerate RFC‚ÄØ822‚Äìformatted email messages that you can stream directly to an SMTP connection or save to disk.\nMailcomposer is shipped with Nodemailer ‚Äì you donothave to install anything else.\nUsage‚Äã\n1¬†¬∑¬†Install Nodemailer‚Äã\nnpm install nodemailer\nnpm install nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code‚Äã\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\n3¬†¬∑¬†Create aMailComposerinstance‚Äã\nconstmail=newMailComposer(mailOptions);\nconstmail=newMailComposer(mailOptions);\nmailOptionsis an object that describes your message. See the full option reference below.\nmailOptions\nAPI‚Äã\ncreateReadStream()‚Äã\ncreateReadStream()\nCreate a readable stream that emits the raw RFC‚ÄØ822 message:\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nbuild(callback)‚Äã\nbuild(callback)\nGenerate the message and receive it as aBufferin a callback:\nBuffer\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nMessage fields‚Äã\n'sender@server.com'\n'Sender¬†Name¬†<sender@server.com>'\nMessage‚ÄëID\nMessage‚ÄëID\nstring\nBuffer\nStream\n{ path: '‚Ä¶' }\ntext/html\n{ method: 'REQUEST', content: icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue",
        "source_url": "https://nodemailer.com/extras/mailcomposer#example",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue\n\\r\\n\n\\n\nAll textual content is treated as UTF‚Äë8. Attachments are streamed as binary.\nAttachments‚Äã\nAttachment objects support the following properties:\nfalse\ncid:\ncontentDisposition: 'inline'\nmultipart/related\nstring\nBuffer\nStream\ncontent\nBuffer\nbase64\nhex\nquoted-printable\nbase64\nattachment\ninline\n{ 'X-My-Header': 'value' }\nstring\nBuffer\nStream\nExample‚Äã\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet",
        "source_url": "https://nodemailer.com/extras/mailcomposer#example",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": " from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nAlternatives‚Äã\nBesidestextandhtml, you can include any data as analternativepart ‚Äì for example, a Markdown or OpenDocument version of the same content. The email client picks the best‚Äësuited alternative to display. Calendar events are commonly attached this way.\nAlternative objects use thesame optionsasattachments, but are placed into themultipart/alternativesection of the message instead ofmultipart/mixed/multipart/related.\nmultipart/alternative\nmultipart/mixed\nmultipart/related\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nAddress formatting‚Äã\nYou can supply addresses in any of the following forms:\nrecipient@example.com\"Display Name\" <recipient@example.com>\nrecipient@example.com\"Display Name\" <recipient@example.com>\nOr as an object (no need to quote anything):\n{name:'Display Name',address:'recipient@example.com'}\n{name:'Display Name',address:'recipient@example.com'}\nEvery address field ‚Äì evenfrom‚Äì acceptsone or manyaddresses, in any mix of formats:\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com",
        "source_url": "https://nodemailer.com/extras/mailcomposer#example",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\nInternationalized domain names (IDN) are automatically converted to punycode:\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\nSMTP envelope‚Äã\nBy default the SMTP envelope is generated from the address headers. If you need something different ‚Äì for example, VERP or black‚Äëholefrom‚Äì you can setenvelopeexplicitly:\nfrom\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nSome transports (e.g. AWS¬†SES) ignoreenvelopeand instead use the header addresses.\nenvelope\nUsing embedded images‚Äã\nSetcidon an attachment and reference it in the HTML with thecid:protocol:\ncid\ncid:\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nBCC‚Äã\nMailComposer removes theBcc:header by default to keep recipient addresses private. If you need the header to remain, enablekeepBccaftercallingcompile():\nkeepBcc\ncompile()\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepB",
        "source_url": "https://nodemailer.com/extras/mailcomposer#example",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": "\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nLicense‚Äã\nMIT\nUsage1¬†¬∑¬†Install Nodemailer2¬†¬∑¬†Requiremailcomposerin your code3¬†¬∑¬†Create aMailComposerinstance\n1¬†¬∑¬†Install Nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code\n3¬†¬∑¬†Create aMailComposerinstance\nAPIcreateReadStream()build(callback)\ncreateReadStream()\ncreateReadStream()\nbuild(callback)\nbuild(callback)\nMessage fields\nAttachmentsExample\nExample\nAlternatives\nAddress formatting\nSMTP envelope\nUsing embedded images\nBCC\nLicense",
        "source_url": "https://nodemailer.com/extras/mailcomposer#example",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 180
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailcomposer\nMailcomposer\nGenerate RFC‚ÄØ822‚Äìformatted email messages that you can stream directly to an SMTP connection or save to disk.\nMailcomposer is shipped with Nodemailer ‚Äì you donothave to install anything else.\nUsage‚Äã\n1¬†¬∑¬†Install Nodemailer‚Äã\nnpm install nodemailer\nnpm install nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code‚Äã\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\n3¬†¬∑¬†Create aMailComposerinstance‚Äã\nconstmail=newMailComposer(mailOptions);\nconstmail=newMailComposer(mailOptions);\nmailOptionsis an object that describes your message. See the full option reference below.\nmailOptions\nAPI‚Äã\ncreateReadStream()‚Äã\ncreateReadStream()\nCreate a readable stream that emits the raw RFC‚ÄØ822 message:\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nbuild(callback)‚Äã\nbuild(callback)\nGenerate the message and receive it as aBufferin a callback:\nBuffer\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nMessage fields‚Äã\n'sender@server.com'\n'Sender¬†Name¬†<sender@server.com>'\nMessage‚ÄëID\nMessage‚ÄëID\nstring\nBuffer\nStream\n{ path: '‚Ä¶' }\ntext/html\n{ method: 'REQUEST', content: icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue",
        "source_url": "https://nodemailer.com/extras/mailcomposer#using-embedded-images",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue\n\\r\\n\n\\n\nAll textual content is treated as UTF‚Äë8. Attachments are streamed as binary.\nAttachments‚Äã\nAttachment objects support the following properties:\nfalse\ncid:\ncontentDisposition: 'inline'\nmultipart/related\nstring\nBuffer\nStream\ncontent\nBuffer\nbase64\nhex\nquoted-printable\nbase64\nattachment\ninline\n{ 'X-My-Header': 'value' }\nstring\nBuffer\nStream\nExample‚Äã\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet",
        "source_url": "https://nodemailer.com/extras/mailcomposer#using-embedded-images",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": " from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nAlternatives‚Äã\nBesidestextandhtml, you can include any data as analternativepart ‚Äì for example, a Markdown or OpenDocument version of the same content. The email client picks the best‚Äësuited alternative to display. Calendar events are commonly attached this way.\nAlternative objects use thesame optionsasattachments, but are placed into themultipart/alternativesection of the message instead ofmultipart/mixed/multipart/related.\nmultipart/alternative\nmultipart/mixed\nmultipart/related\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nAddress formatting‚Äã\nYou can supply addresses in any of the following forms:\nrecipient@example.com\"Display Name\" <recipient@example.com>\nrecipient@example.com\"Display Name\" <recipient@example.com>\nOr as an object (no need to quote anything):\n{name:'Display Name',address:'recipient@example.com'}\n{name:'Display Name',address:'recipient@example.com'}\nEvery address field ‚Äì evenfrom‚Äì acceptsone or manyaddresses, in any mix of formats:\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com",
        "source_url": "https://nodemailer.com/extras/mailcomposer#using-embedded-images",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\nInternationalized domain names (IDN) are automatically converted to punycode:\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\nSMTP envelope‚Äã\nBy default the SMTP envelope is generated from the address headers. If you need something different ‚Äì for example, VERP or black‚Äëholefrom‚Äì you can setenvelopeexplicitly:\nfrom\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nSome transports (e.g. AWS¬†SES) ignoreenvelopeand instead use the header addresses.\nenvelope\nUsing embedded images‚Äã\nSetcidon an attachment and reference it in the HTML with thecid:protocol:\ncid\ncid:\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nBCC‚Äã\nMailComposer removes theBcc:header by default to keep recipient addresses private. If you need the header to remain, enablekeepBccaftercallingcompile():\nkeepBcc\ncompile()\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepB",
        "source_url": "https://nodemailer.com/extras/mailcomposer#using-embedded-images",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": "\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nLicense‚Äã\nMIT\nUsage1¬†¬∑¬†Install Nodemailer2¬†¬∑¬†Requiremailcomposerin your code3¬†¬∑¬†Create aMailComposerinstance\n1¬†¬∑¬†Install Nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code\n3¬†¬∑¬†Create aMailComposerinstance\nAPIcreateReadStream()build(callback)\ncreateReadStream()\ncreateReadStream()\nbuild(callback)\nbuild(callback)\nMessage fields\nAttachmentsExample\nExample\nAlternatives\nAddress formatting\nSMTP envelope\nUsing embedded images\nBCC\nLicense",
        "source_url": "https://nodemailer.com/extras/mailcomposer#using-embedded-images",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 180
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailcomposer\nMailcomposer\nGenerate RFC‚ÄØ822‚Äìformatted email messages that you can stream directly to an SMTP connection or save to disk.\nMailcomposer is shipped with Nodemailer ‚Äì you donothave to install anything else.\nUsage‚Äã\n1¬†¬∑¬†Install Nodemailer‚Äã\nnpm install nodemailer\nnpm install nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code‚Äã\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\nconstMailComposer=require(\"nodemailer/lib/mail-composer\");\n3¬†¬∑¬†Create aMailComposerinstance‚Äã\nconstmail=newMailComposer(mailOptions);\nconstmail=newMailComposer(mailOptions);\nmailOptionsis an object that describes your message. See the full option reference below.\nmailOptions\nAPI‚Äã\ncreateReadStream()‚Äã\ncreateReadStream()\nCreate a readable stream that emits the raw RFC‚ÄØ822 message:\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});conststream=mail.compile().createReadStream();stream.pipe(process.stdout);\nbuild(callback)‚Äã\nbuild(callback)\nGenerate the message and receive it as aBufferin a callback:\nBuffer\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({from:\"you@example.com\"/* ‚Ä¶ */});mail.compile().build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nMessage fields‚Äã\n'sender@server.com'\n'Sender¬†Name¬†<sender@server.com>'\nMessage‚ÄëID\nMessage‚ÄëID\nstring\nBuffer\nStream\n{ path: '‚Ä¶' }\ntext/html\n{ method: 'REQUEST', content: icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue",
        "source_url": "https://nodemailer.com/extras/mailcomposer#license",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "icsString }\nPUBLISH\n{ 'X-Key': 'value' }\n[{ key: 'X-Key', value: 'v1' }]\nmultipart/alternative\nMessage‚ÄëID\nDate\nquoted‚Äëprintable\nbase64\ntrue\ntrue\n\\r\\n\n\\n\nAll textual content is treated as UTF‚Äë8. Attachments are streamed as binary.\nAttachments‚Äã\nAttachment objects support the following properties:\nfalse\ncid:\ncontentDisposition: 'inline'\nmultipart/related\nstring\nBuffer\nStream\ncontent\nBuffer\nbase64\nhex\nquoted-printable\nbase64\nattachment\ninline\n{ 'X-My-Header': 'value' }\nstring\nBuffer\nStream\nExample‚Äã\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nconstfs=require(\"fs\");constmailOptions={/* ‚Ä¶other fields‚Ä¶ */attachments:[// UTF‚Äë8 string{filename:\"hello.txt\",content:\"hello world!\"},// Binary Buffer{filename:\"buffer.txt\",content:Buffer.from(\"hello world!\",\"utf‚Äë8\")},// File on disk (streams the file){filename:\"file.txt\",path:\"/path/to/file.txt\"},// Derive filename & contentType from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet",
        "source_url": "https://nodemailer.com/extras/mailcomposer#license",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": " from path{path:\"/path/to/logo.png\"},// Readable stream{filename:\"stream.txt\",content:fs.createReadStream(\"file.txt\")},// Custom content type{filename:\"data.bin\",content:\"hello world!\",contentType:\"application/octet-stream\"},// Remote URL{filename:\"license.txt\",path:\"https://raw.githubusercontent.com/nodemailer/nodemailer/master/LICENSE\"},// Base64‚Äëencoded string{filename:\"base64.txt\",content:\"aGVsbG8gd29ybGQh\",encoding:\"base64\"},// Data URI{path:\"data:text/plain;base64,aGVsbG8gd29ybGQ=\"},],};\nAlternatives‚Äã\nBesidestextandhtml, you can include any data as analternativepart ‚Äì for example, a Markdown or OpenDocument version of the same content. The email client picks the best‚Äësuited alternative to display. Calendar events are commonly attached this way.\nAlternative objects use thesame optionsasattachments, but are placed into themultipart/alternativesection of the message instead ofmultipart/mixed/multipart/related.\nmultipart/alternative\nmultipart/mixed\nmultipart/related\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nconstmailOptions={html:\"<b>Hello world!</b>\",alternatives:[{contentType:\"text/x-web-markdown\",content:\"**Hello world!**\",},],};\nAddress formatting‚Äã\nYou can supply addresses in any of the following forms:\nrecipient@example.com\"Display Name\" <recipient@example.com>\nrecipient@example.com\"Display Name\" <recipient@example.com>\nOr as an object (no need to quote anything):\n{name:'Display Name',address:'recipient@example.com'}\n{name:'Display Name',address:'recipient@example.com'}\nEvery address field ‚Äì evenfrom‚Äì acceptsone or manyaddresses, in any mix of formats:\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\n{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com",
        "source_url": "https://nodemailer.com/extras/mailcomposer#license",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "{to:'user1@example.com, \"User¬†Two\" <user2@example.com>',cc:['user3@example.com','\"User¬†Four\" <user4@example.com>',{name:'User¬†Five',address:'user5@example.com'}]}\nInternationalized domain names (IDN) are automatically converted to punycode:\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\n\"Unicode¬†Domain\" <info@m√ºriaad-pol√ºteism.info>\nSMTP envelope‚Äã\nBy default the SMTP envelope is generated from the address headers. If you need something different ‚Äì for example, VERP or black‚Äëholefrom‚Äì you can setenvelopeexplicitly:\nfrom\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nconstmailOptions={from:\"mailer@example.com\",to:\"daemon@example.com\",envelope:{from:\"Daemon <daemon@example.com>\",to:'mailer@example.com, \"Mailer¬†Two\" <mailer2@example.com>',},};\nSome transports (e.g. AWS¬†SES) ignoreenvelopeand instead use the header addresses.\nenvelope\nUsing embedded images‚Äã\nSetcidon an attachment and reference it in the HTML with thecid:protocol:\ncid\ncid:\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nconstmailOptions={html:'Embedded image: <img src=\"cid:unique@nodemailer\" />',attachments:[{filename:\"image.png\",path:\"/path/to/image.png\",cid:\"unique@nodemailer\",// must match the src above},],};\nBCC‚Äã\nMailComposer removes theBcc:header by default to keep recipient addresses private. If you need the header to remain, enablekeepBccaftercallingcompile():\nkeepBcc\ncompile()\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepB",
        "source_url": "https://nodemailer.com/extras/mailcomposer#license",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": "\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nconstmail=newMailComposer({/* ‚Ä¶ */bcc:\"bcc@example.com\",}).compile();mail.keepBcc=true;mail.build((err,message)=>{if(err)throwerr;process.stdout.write(message);});\nLicense‚Äã\nMIT\nUsage1¬†¬∑¬†Install Nodemailer2¬†¬∑¬†Requiremailcomposerin your code3¬†¬∑¬†Create aMailComposerinstance\n1¬†¬∑¬†Install Nodemailer\n2¬†¬∑¬†Requiremailcomposerin your code\n3¬†¬∑¬†Create aMailComposerinstance\nAPIcreateReadStream()build(callback)\ncreateReadStream()\ncreateReadStream()\nbuild(callback)\nbuild(callback)\nMessage fields\nAttachmentsExample\nExample\nAlternatives\nAddress formatting\nSMTP envelope\nUsing embedded images\nBCC\nLicense",
        "source_url": "https://nodemailer.com/extras/mailcomposer#license",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 180
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailParser\nMailParser\nStreaming e‚Äëmail parser for Node.js¬†that can handle very large messages with minimal memory overhead.\nMailParser offers two ways to consume a message:\nsimpleParser‚Äì convenience helper that buffers the whole message (including attachments) in memory and returns a singlemail object. Great for simple use‚Äëcases and tests.\nsimpleParser\nMailParserclass‚Äì a lower‚ÄëlevelTransformstream that emits message parts and attachmentstreamsas they become available, letting you process huge messages without blowing up memory.\nMailParser\nTransform\nInstallation‚Äã\nnpm install mailparser\nnpm install mailparser\nsimpleParser()‚Äã\nsimpleParser()\nconst{simpleParser}=require(\"mailparser\");// Callback stylesimpleParser(source,options,(err,mail)=>{if(err)throwerr;console.log(mail.subject);});// Promise stylesimpleParser(source,options).then((mail)=>console.log(mail.subject)).catch(console.error);// async/awaitconstmail=awaitsimpleParser(source,options);\nconst{simpleParser}=require(\"mailparser\");// Callback stylesimpleParser(source,options,(err,mail)=>{if(err)throwerr;console.log(mail.subject);});// Promise stylesimpleParser(source,options).then((mail)=>console.log(mail.subject)).catch(console.error);// async/awaitconstmail=awaitsimpleParser(source,options);\nParameters‚Äã\nsource‚Äì aBuffer,String, orreadable streamcontaining the RFC‚ÄØ822 message.\nsource\nBuffer\nString\noptions‚Äì optional configuration (seeOptions).\noptions\nReturnedmail object‚Äã\nThe resolvedmailobject aggregates every piece of the message:\nmail\nheaders\nMap\nsubject\nString\nheaders.get('subject')\nfrom\nto\ncc\nbcc\nreply-to\ndate\nDate\nmessageId\nString\ninReplyTo\nString\nreferences\nString[] | String\nhtml\ntext\ntextAsHtml\ntext\nattachments\nAttachment[]\nNo sanitisation is performed. If you displayhtml, make sure to run it through a trusted HTML‚Äësanitiser first.\nhtml\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span",
        "source_url": "https://nodemailer.com/extras/mailparser#installation",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": ", make sure to run it through a trusted HTML‚Äësanitiser first.\nhtml\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span> &lt;<a href=\\\"mailto:jane@example.com\\\" class=\\\"mp_address_email\\\">jane@example.com</a>&gt;\",\"text\":\"Jane Doe <jane@example.com>\"}\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span> &lt;<a href=\\\"mailto:jane@example.com\\\" class=\\\"mp_address_email\\\">jane@example.com</a>&gt;\",\"text\":\"Jane Doe <jane@example.com>\"}\nvalue‚Äì array of individual addresses (or groups)\nvalue\ntext‚Äì formatted for plaintext context\ntext\nhtml‚Äì formatted for HTML context\nhtml\nFor a deep dive into address objects see theMessage¬†‚Üí Addressessection.\nheaders\nMost headers resolve tostrings(single header) orstring[](multiple occurrences). The following are parsed into richer structures for convenience:\nAddress headers‚Üí address objects (from,to,cc,bcc,sender,reply-to,delivered-to,return-path).\nfrom\nto\ncc\nbcc\nsender\nreply-to\ndelivered-to\nreturn-path\nPriority headers(x-priority,importance, ‚Ä¶) are normalised to a singleprioritykey with values\"high\" | \"normal\" | \"low\".\nx-priority\nimportance\npriority\n\"high\" | \"normal\" | \"low\"\nreferences‚ÜíString|String[].\nreferences\nString\nString[]\ndate‚ÜíDate.\ndate\nDate\nStructured headers(content-type,content-disposition,dkim-signature) ‚Üí{ value: String, params: Object }.\ncontent-type\ncontent-disposition\ndkim-signature\n{ value: String, params: Object }\nAttachment object (simpleParser)‚Äã\nfilename\nundefined\ncontentType\ncontentDisposition\n\"attachment\"\nchecksum\ncontent\nsize\nheaders\nMap\ncontent\nBuffer\ncontentId\ncid\nrelated\ntrue\nMailParser(stream API)‚Äã\nMailParser\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nMailParseris aTransformstream in",
        "source_url": "https://nodemailer.com/extras/mailparser#installation",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nMailParseris aTransformstream inobject modethat emits two kinds of objects via the'data'event:\nMailParser\nTransform\n'data'\n{ type: 'headers', headers: Map }‚Äì once, after the headers are parsed.\n{ type: 'headers', headers: Map }\n{ type: 'attachment', ... }‚Äì for every attachment (see below).\nThecontentproperty is aReadable¬†stream.\n{ type: 'attachment', ... }\ncontent\n{ type: 'text', html, text, textAsHtml }‚Äì once, containing the message bodies.\n{ type: 'text', html, text, textAsHtml }\nStream options‚Äã\nskipHtmlToText\nfalse\ntext\nmaxHtmlLengthToParse\nInfinity\nformatDateString\nundefined\nskipImageLinks\nfalse\nskipTextToHtml\nfalse\ntextAsHtml\nskipTextLinks\nfalse\ntext\nkeepDeliveryStatus\nfalse\nmessage/delivery-status\nIconv\niconv-lite\nkeepCidLinks\nfalse\nskipImageLinks: true\nAttachment stream object (type === 'attachment')‚Äã\ntype === 'attachment'\nIdentical shape to the buffered object shown earlier, except:\ncontentis aReadable stream.\ncontent\nYoumustcallattachment.release()when you are done. Parsing pauses until every attachment is released.\nattachment.release()\nrelatedis only availableafterparsing ends.\nrelated\nparser.on(\"data\",(part)=>{if(part.type===\"attachment\"){console.log(\"Attachment:\",part.filename);part.content.pipe(fs.createWriteStream(part.filename)).on(\"finish\",part.release);}});\nparser.on(\"data\",(part)=>{if(part.type===\"attachment\"){console.log(\"Attachment:\",part.filename);part.content.pipe(fs.createWriteStream(part.filename)).on(\"finish\",part.release);}});\nCharacter set decoding‚Äã\nMailParser relies oniconv‚Äëlitefor charset conversion, except forISO‚Äë2022‚ÄëJPandEUC‚ÄëJPwhich are handled byencoding‚Äëjapanese.\nIf you prefernode-iconv, inject it:\nnode-iconv\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nconst{Iconv}=",
        "source_url": "https://nodemailer.com/extras/mailparser#installation",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": ", inject it:\nnode-iconv\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nLicense‚Äã\nDual‚Äëlicensed under theMIT LicenseorEUPL‚ÄØv1.1‚ÄØ+.\nInstallation\nsimpleParser()ParametersReturnedmail objectAttachment object (simpleParser)\nsimpleParser()\nParameters\nReturnedmail object\nAttachment object (simpleParser)\nMailParser(stream API)Stream optionsAttachment stream object (type === 'attachment')\nMailParser\nStream options\nAttachment stream object (type === 'attachment')\ntype === 'attachment'\nCharacter set decoding\nLicense",
        "source_url": "https://nodemailer.com/extras/mailparser#installation",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 176
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailParser\nMailParser\nStreaming e‚Äëmail parser for Node.js¬†that can handle very large messages with minimal memory overhead.\nMailParser offers two ways to consume a message:\nsimpleParser‚Äì convenience helper that buffers the whole message (including attachments) in memory and returns a singlemail object. Great for simple use‚Äëcases and tests.\nsimpleParser\nMailParserclass‚Äì a lower‚ÄëlevelTransformstream that emits message parts and attachmentstreamsas they become available, letting you process huge messages without blowing up memory.\nMailParser\nTransform\nInstallation‚Äã\nnpm install mailparser\nnpm install mailparser\nsimpleParser()‚Äã\nsimpleParser()\nconst{simpleParser}=require(\"mailparser\");// Callback stylesimpleParser(source,options,(err,mail)=>{if(err)throwerr;console.log(mail.subject);});// Promise stylesimpleParser(source,options).then((mail)=>console.log(mail.subject)).catch(console.error);// async/awaitconstmail=awaitsimpleParser(source,options);\nconst{simpleParser}=require(\"mailparser\");// Callback stylesimpleParser(source,options,(err,mail)=>{if(err)throwerr;console.log(mail.subject);});// Promise stylesimpleParser(source,options).then((mail)=>console.log(mail.subject)).catch(console.error);// async/awaitconstmail=awaitsimpleParser(source,options);\nParameters‚Äã\nsource‚Äì aBuffer,String, orreadable streamcontaining the RFC‚ÄØ822 message.\nsource\nBuffer\nString\noptions‚Äì optional configuration (seeOptions).\noptions\nReturnedmail object‚Äã\nThe resolvedmailobject aggregates every piece of the message:\nmail\nheaders\nMap\nsubject\nString\nheaders.get('subject')\nfrom\nto\ncc\nbcc\nreply-to\ndate\nDate\nmessageId\nString\ninReplyTo\nString\nreferences\nString[] | String\nhtml\ntext\ntextAsHtml\ntext\nattachments\nAttachment[]\nNo sanitisation is performed. If you displayhtml, make sure to run it through a trusted HTML‚Äësanitiser first.\nhtml\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span",
        "source_url": "https://nodemailer.com/extras/mailparser#simpleparser",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": ", make sure to run it through a trusted HTML‚Äësanitiser first.\nhtml\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span> &lt;<a href=\\\"mailto:jane@example.com\\\" class=\\\"mp_address_email\\\">jane@example.com</a>&gt;\",\"text\":\"Jane Doe <jane@example.com>\"}\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span> &lt;<a href=\\\"mailto:jane@example.com\\\" class=\\\"mp_address_email\\\">jane@example.com</a>&gt;\",\"text\":\"Jane Doe <jane@example.com>\"}\nvalue‚Äì array of individual addresses (or groups)\nvalue\ntext‚Äì formatted for plaintext context\ntext\nhtml‚Äì formatted for HTML context\nhtml\nFor a deep dive into address objects see theMessage¬†‚Üí Addressessection.\nheaders\nMost headers resolve tostrings(single header) orstring[](multiple occurrences). The following are parsed into richer structures for convenience:\nAddress headers‚Üí address objects (from,to,cc,bcc,sender,reply-to,delivered-to,return-path).\nfrom\nto\ncc\nbcc\nsender\nreply-to\ndelivered-to\nreturn-path\nPriority headers(x-priority,importance, ‚Ä¶) are normalised to a singleprioritykey with values\"high\" | \"normal\" | \"low\".\nx-priority\nimportance\npriority\n\"high\" | \"normal\" | \"low\"\nreferences‚ÜíString|String[].\nreferences\nString\nString[]\ndate‚ÜíDate.\ndate\nDate\nStructured headers(content-type,content-disposition,dkim-signature) ‚Üí{ value: String, params: Object }.\ncontent-type\ncontent-disposition\ndkim-signature\n{ value: String, params: Object }\nAttachment object (simpleParser)‚Äã\nfilename\nundefined\ncontentType\ncontentDisposition\n\"attachment\"\nchecksum\ncontent\nsize\nheaders\nMap\ncontent\nBuffer\ncontentId\ncid\nrelated\ntrue\nMailParser(stream API)‚Äã\nMailParser\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nMailParseris aTransformstream in",
        "source_url": "https://nodemailer.com/extras/mailparser#simpleparser",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nMailParseris aTransformstream inobject modethat emits two kinds of objects via the'data'event:\nMailParser\nTransform\n'data'\n{ type: 'headers', headers: Map }‚Äì once, after the headers are parsed.\n{ type: 'headers', headers: Map }\n{ type: 'attachment', ... }‚Äì for every attachment (see below).\nThecontentproperty is aReadable¬†stream.\n{ type: 'attachment', ... }\ncontent\n{ type: 'text', html, text, textAsHtml }‚Äì once, containing the message bodies.\n{ type: 'text', html, text, textAsHtml }\nStream options‚Äã\nskipHtmlToText\nfalse\ntext\nmaxHtmlLengthToParse\nInfinity\nformatDateString\nundefined\nskipImageLinks\nfalse\nskipTextToHtml\nfalse\ntextAsHtml\nskipTextLinks\nfalse\ntext\nkeepDeliveryStatus\nfalse\nmessage/delivery-status\nIconv\niconv-lite\nkeepCidLinks\nfalse\nskipImageLinks: true\nAttachment stream object (type === 'attachment')‚Äã\ntype === 'attachment'\nIdentical shape to the buffered object shown earlier, except:\ncontentis aReadable stream.\ncontent\nYoumustcallattachment.release()when you are done. Parsing pauses until every attachment is released.\nattachment.release()\nrelatedis only availableafterparsing ends.\nrelated\nparser.on(\"data\",(part)=>{if(part.type===\"attachment\"){console.log(\"Attachment:\",part.filename);part.content.pipe(fs.createWriteStream(part.filename)).on(\"finish\",part.release);}});\nparser.on(\"data\",(part)=>{if(part.type===\"attachment\"){console.log(\"Attachment:\",part.filename);part.content.pipe(fs.createWriteStream(part.filename)).on(\"finish\",part.release);}});\nCharacter set decoding‚Äã\nMailParser relies oniconv‚Äëlitefor charset conversion, except forISO‚Äë2022‚ÄëJPandEUC‚ÄëJPwhich are handled byencoding‚Äëjapanese.\nIf you prefernode-iconv, inject it:\nnode-iconv\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nconst{Iconv}=",
        "source_url": "https://nodemailer.com/extras/mailparser#simpleparser",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": ", inject it:\nnode-iconv\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nLicense‚Äã\nDual‚Äëlicensed under theMIT LicenseorEUPL‚ÄØv1.1‚ÄØ+.\nInstallation\nsimpleParser()ParametersReturnedmail objectAttachment object (simpleParser)\nsimpleParser()\nParameters\nReturnedmail object\nAttachment object (simpleParser)\nMailParser(stream API)Stream optionsAttachment stream object (type === 'attachment')\nMailParser\nStream options\nAttachment stream object (type === 'attachment')\ntype === 'attachment'\nCharacter set decoding\nLicense",
        "source_url": "https://nodemailer.com/extras/mailparser#simpleparser",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 176
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailParser\nMailParser\nStreaming e‚Äëmail parser for Node.js¬†that can handle very large messages with minimal memory overhead.\nMailParser offers two ways to consume a message:\nsimpleParser‚Äì convenience helper that buffers the whole message (including attachments) in memory and returns a singlemail object. Great for simple use‚Äëcases and tests.\nsimpleParser\nMailParserclass‚Äì a lower‚ÄëlevelTransformstream that emits message parts and attachmentstreamsas they become available, letting you process huge messages without blowing up memory.\nMailParser\nTransform\nInstallation‚Äã\nnpm install mailparser\nnpm install mailparser\nsimpleParser()‚Äã\nsimpleParser()\nconst{simpleParser}=require(\"mailparser\");// Callback stylesimpleParser(source,options,(err,mail)=>{if(err)throwerr;console.log(mail.subject);});// Promise stylesimpleParser(source,options).then((mail)=>console.log(mail.subject)).catch(console.error);// async/awaitconstmail=awaitsimpleParser(source,options);\nconst{simpleParser}=require(\"mailparser\");// Callback stylesimpleParser(source,options,(err,mail)=>{if(err)throwerr;console.log(mail.subject);});// Promise stylesimpleParser(source,options).then((mail)=>console.log(mail.subject)).catch(console.error);// async/awaitconstmail=awaitsimpleParser(source,options);\nParameters‚Äã\nsource‚Äì aBuffer,String, orreadable streamcontaining the RFC‚ÄØ822 message.\nsource\nBuffer\nString\noptions‚Äì optional configuration (seeOptions).\noptions\nReturnedmail object‚Äã\nThe resolvedmailobject aggregates every piece of the message:\nmail\nheaders\nMap\nsubject\nString\nheaders.get('subject')\nfrom\nto\ncc\nbcc\nreply-to\ndate\nDate\nmessageId\nString\ninReplyTo\nString\nreferences\nString[] | String\nhtml\ntext\ntextAsHtml\ntext\nattachments\nAttachment[]\nNo sanitisation is performed. If you displayhtml, make sure to run it through a trusted HTML‚Äësanitiser first.\nhtml\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span",
        "source_url": "https://nodemailer.com/extras/mailparser#parameters",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": ", make sure to run it through a trusted HTML‚Äësanitiser first.\nhtml\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span> &lt;<a href=\\\"mailto:jane@example.com\\\" class=\\\"mp_address_email\\\">jane@example.com</a>&gt;\",\"text\":\"Jane Doe <jane@example.com>\"}\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span> &lt;<a href=\\\"mailto:jane@example.com\\\" class=\\\"mp_address_email\\\">jane@example.com</a>&gt;\",\"text\":\"Jane Doe <jane@example.com>\"}\nvalue‚Äì array of individual addresses (or groups)\nvalue\ntext‚Äì formatted for plaintext context\ntext\nhtml‚Äì formatted for HTML context\nhtml\nFor a deep dive into address objects see theMessage¬†‚Üí Addressessection.\nheaders\nMost headers resolve tostrings(single header) orstring[](multiple occurrences). The following are parsed into richer structures for convenience:\nAddress headers‚Üí address objects (from,to,cc,bcc,sender,reply-to,delivered-to,return-path).\nfrom\nto\ncc\nbcc\nsender\nreply-to\ndelivered-to\nreturn-path\nPriority headers(x-priority,importance, ‚Ä¶) are normalised to a singleprioritykey with values\"high\" | \"normal\" | \"low\".\nx-priority\nimportance\npriority\n\"high\" | \"normal\" | \"low\"\nreferences‚ÜíString|String[].\nreferences\nString\nString[]\ndate‚ÜíDate.\ndate\nDate\nStructured headers(content-type,content-disposition,dkim-signature) ‚Üí{ value: String, params: Object }.\ncontent-type\ncontent-disposition\ndkim-signature\n{ value: String, params: Object }\nAttachment object (simpleParser)‚Äã\nfilename\nundefined\ncontentType\ncontentDisposition\n\"attachment\"\nchecksum\ncontent\nsize\nheaders\nMap\ncontent\nBuffer\ncontentId\ncid\nrelated\ntrue\nMailParser(stream API)‚Äã\nMailParser\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nMailParseris aTransformstream in",
        "source_url": "https://nodemailer.com/extras/mailparser#parameters",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nMailParseris aTransformstream inobject modethat emits two kinds of objects via the'data'event:\nMailParser\nTransform\n'data'\n{ type: 'headers', headers: Map }‚Äì once, after the headers are parsed.\n{ type: 'headers', headers: Map }\n{ type: 'attachment', ... }‚Äì for every attachment (see below).\nThecontentproperty is aReadable¬†stream.\n{ type: 'attachment', ... }\ncontent\n{ type: 'text', html, text, textAsHtml }‚Äì once, containing the message bodies.\n{ type: 'text', html, text, textAsHtml }\nStream options‚Äã\nskipHtmlToText\nfalse\ntext\nmaxHtmlLengthToParse\nInfinity\nformatDateString\nundefined\nskipImageLinks\nfalse\nskipTextToHtml\nfalse\ntextAsHtml\nskipTextLinks\nfalse\ntext\nkeepDeliveryStatus\nfalse\nmessage/delivery-status\nIconv\niconv-lite\nkeepCidLinks\nfalse\nskipImageLinks: true\nAttachment stream object (type === 'attachment')‚Äã\ntype === 'attachment'\nIdentical shape to the buffered object shown earlier, except:\ncontentis aReadable stream.\ncontent\nYoumustcallattachment.release()when you are done. Parsing pauses until every attachment is released.\nattachment.release()\nrelatedis only availableafterparsing ends.\nrelated\nparser.on(\"data\",(part)=>{if(part.type===\"attachment\"){console.log(\"Attachment:\",part.filename);part.content.pipe(fs.createWriteStream(part.filename)).on(\"finish\",part.release);}});\nparser.on(\"data\",(part)=>{if(part.type===\"attachment\"){console.log(\"Attachment:\",part.filename);part.content.pipe(fs.createWriteStream(part.filename)).on(\"finish\",part.release);}});\nCharacter set decoding‚Äã\nMailParser relies oniconv‚Äëlitefor charset conversion, except forISO‚Äë2022‚ÄëJPandEUC‚ÄëJPwhich are handled byencoding‚Äëjapanese.\nIf you prefernode-iconv, inject it:\nnode-iconv\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nconst{Iconv}=",
        "source_url": "https://nodemailer.com/extras/mailparser#parameters",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": ", inject it:\nnode-iconv\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nLicense‚Äã\nDual‚Äëlicensed under theMIT LicenseorEUPL‚ÄØv1.1‚ÄØ+.\nInstallation\nsimpleParser()ParametersReturnedmail objectAttachment object (simpleParser)\nsimpleParser()\nParameters\nReturnedmail object\nAttachment object (simpleParser)\nMailParser(stream API)Stream optionsAttachment stream object (type === 'attachment')\nMailParser\nStream options\nAttachment stream object (type === 'attachment')\ntype === 'attachment'\nCharacter set decoding\nLicense",
        "source_url": "https://nodemailer.com/extras/mailparser#parameters",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 176
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailParser\nMailParser\nStreaming e‚Äëmail parser for Node.js¬†that can handle very large messages with minimal memory overhead.\nMailParser offers two ways to consume a message:\nsimpleParser‚Äì convenience helper that buffers the whole message (including attachments) in memory and returns a singlemail object. Great for simple use‚Äëcases and tests.\nsimpleParser\nMailParserclass‚Äì a lower‚ÄëlevelTransformstream that emits message parts and attachmentstreamsas they become available, letting you process huge messages without blowing up memory.\nMailParser\nTransform\nInstallation‚Äã\nnpm install mailparser\nnpm install mailparser\nsimpleParser()‚Äã\nsimpleParser()\nconst{simpleParser}=require(\"mailparser\");// Callback stylesimpleParser(source,options,(err,mail)=>{if(err)throwerr;console.log(mail.subject);});// Promise stylesimpleParser(source,options).then((mail)=>console.log(mail.subject)).catch(console.error);// async/awaitconstmail=awaitsimpleParser(source,options);\nconst{simpleParser}=require(\"mailparser\");// Callback stylesimpleParser(source,options,(err,mail)=>{if(err)throwerr;console.log(mail.subject);});// Promise stylesimpleParser(source,options).then((mail)=>console.log(mail.subject)).catch(console.error);// async/awaitconstmail=awaitsimpleParser(source,options);\nParameters‚Äã\nsource‚Äì aBuffer,String, orreadable streamcontaining the RFC‚ÄØ822 message.\nsource\nBuffer\nString\noptions‚Äì optional configuration (seeOptions).\noptions\nReturnedmail object‚Äã\nThe resolvedmailobject aggregates every piece of the message:\nmail\nheaders\nMap\nsubject\nString\nheaders.get('subject')\nfrom\nto\ncc\nbcc\nreply-to\ndate\nDate\nmessageId\nString\ninReplyTo\nString\nreferences\nString[] | String\nhtml\ntext\ntextAsHtml\ntext\nattachments\nAttachment[]\nNo sanitisation is performed. If you displayhtml, make sure to run it through a trusted HTML‚Äësanitiser first.\nhtml\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span",
        "source_url": "https://nodemailer.com/extras/mailparser#options",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": ", make sure to run it through a trusted HTML‚Äësanitiser first.\nhtml\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span> &lt;<a href=\\\"mailto:jane@example.com\\\" class=\\\"mp_address_email\\\">jane@example.com</a>&gt;\",\"text\":\"Jane Doe <jane@example.com>\"}\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span> &lt;<a href=\\\"mailto:jane@example.com\\\" class=\\\"mp_address_email\\\">jane@example.com</a>&gt;\",\"text\":\"Jane Doe <jane@example.com>\"}\nvalue‚Äì array of individual addresses (or groups)\nvalue\ntext‚Äì formatted for plaintext context\ntext\nhtml‚Äì formatted for HTML context\nhtml\nFor a deep dive into address objects see theMessage¬†‚Üí Addressessection.\nheaders\nMost headers resolve tostrings(single header) orstring[](multiple occurrences). The following are parsed into richer structures for convenience:\nAddress headers‚Üí address objects (from,to,cc,bcc,sender,reply-to,delivered-to,return-path).\nfrom\nto\ncc\nbcc\nsender\nreply-to\ndelivered-to\nreturn-path\nPriority headers(x-priority,importance, ‚Ä¶) are normalised to a singleprioritykey with values\"high\" | \"normal\" | \"low\".\nx-priority\nimportance\npriority\n\"high\" | \"normal\" | \"low\"\nreferences‚ÜíString|String[].\nreferences\nString\nString[]\ndate‚ÜíDate.\ndate\nDate\nStructured headers(content-type,content-disposition,dkim-signature) ‚Üí{ value: String, params: Object }.\ncontent-type\ncontent-disposition\ndkim-signature\n{ value: String, params: Object }\nAttachment object (simpleParser)‚Äã\nfilename\nundefined\ncontentType\ncontentDisposition\n\"attachment\"\nchecksum\ncontent\nsize\nheaders\nMap\ncontent\nBuffer\ncontentId\ncid\nrelated\ntrue\nMailParser(stream API)‚Äã\nMailParser\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nMailParseris aTransformstream in",
        "source_url": "https://nodemailer.com/extras/mailparser#options",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nMailParseris aTransformstream inobject modethat emits two kinds of objects via the'data'event:\nMailParser\nTransform\n'data'\n{ type: 'headers', headers: Map }‚Äì once, after the headers are parsed.\n{ type: 'headers', headers: Map }\n{ type: 'attachment', ... }‚Äì for every attachment (see below).\nThecontentproperty is aReadable¬†stream.\n{ type: 'attachment', ... }\ncontent\n{ type: 'text', html, text, textAsHtml }‚Äì once, containing the message bodies.\n{ type: 'text', html, text, textAsHtml }\nStream options‚Äã\nskipHtmlToText\nfalse\ntext\nmaxHtmlLengthToParse\nInfinity\nformatDateString\nundefined\nskipImageLinks\nfalse\nskipTextToHtml\nfalse\ntextAsHtml\nskipTextLinks\nfalse\ntext\nkeepDeliveryStatus\nfalse\nmessage/delivery-status\nIconv\niconv-lite\nkeepCidLinks\nfalse\nskipImageLinks: true\nAttachment stream object (type === 'attachment')‚Äã\ntype === 'attachment'\nIdentical shape to the buffered object shown earlier, except:\ncontentis aReadable stream.\ncontent\nYoumustcallattachment.release()when you are done. Parsing pauses until every attachment is released.\nattachment.release()\nrelatedis only availableafterparsing ends.\nrelated\nparser.on(\"data\",(part)=>{if(part.type===\"attachment\"){console.log(\"Attachment:\",part.filename);part.content.pipe(fs.createWriteStream(part.filename)).on(\"finish\",part.release);}});\nparser.on(\"data\",(part)=>{if(part.type===\"attachment\"){console.log(\"Attachment:\",part.filename);part.content.pipe(fs.createWriteStream(part.filename)).on(\"finish\",part.release);}});\nCharacter set decoding‚Äã\nMailParser relies oniconv‚Äëlitefor charset conversion, except forISO‚Äë2022‚ÄëJPandEUC‚ÄëJPwhich are handled byencoding‚Äëjapanese.\nIf you prefernode-iconv, inject it:\nnode-iconv\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nconst{Iconv}=",
        "source_url": "https://nodemailer.com/extras/mailparser#options",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": ", inject it:\nnode-iconv\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nLicense‚Äã\nDual‚Äëlicensed under theMIT LicenseorEUPL‚ÄØv1.1‚ÄØ+.\nInstallation\nsimpleParser()ParametersReturnedmail objectAttachment object (simpleParser)\nsimpleParser()\nParameters\nReturnedmail object\nAttachment object (simpleParser)\nMailParser(stream API)Stream optionsAttachment stream object (type === 'attachment')\nMailParser\nStream options\nAttachment stream object (type === 'attachment')\ntype === 'attachment'\nCharacter set decoding\nLicense",
        "source_url": "https://nodemailer.com/extras/mailparser#options",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 176
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailParser\nMailParser\nStreaming e‚Äëmail parser for Node.js¬†that can handle very large messages with minimal memory overhead.\nMailParser offers two ways to consume a message:\nsimpleParser‚Äì convenience helper that buffers the whole message (including attachments) in memory and returns a singlemail object. Great for simple use‚Äëcases and tests.\nsimpleParser\nMailParserclass‚Äì a lower‚ÄëlevelTransformstream that emits message parts and attachmentstreamsas they become available, letting you process huge messages without blowing up memory.\nMailParser\nTransform\nInstallation‚Äã\nnpm install mailparser\nnpm install mailparser\nsimpleParser()‚Äã\nsimpleParser()\nconst{simpleParser}=require(\"mailparser\");// Callback stylesimpleParser(source,options,(err,mail)=>{if(err)throwerr;console.log(mail.subject);});// Promise stylesimpleParser(source,options).then((mail)=>console.log(mail.subject)).catch(console.error);// async/awaitconstmail=awaitsimpleParser(source,options);\nconst{simpleParser}=require(\"mailparser\");// Callback stylesimpleParser(source,options,(err,mail)=>{if(err)throwerr;console.log(mail.subject);});// Promise stylesimpleParser(source,options).then((mail)=>console.log(mail.subject)).catch(console.error);// async/awaitconstmail=awaitsimpleParser(source,options);\nParameters‚Äã\nsource‚Äì aBuffer,String, orreadable streamcontaining the RFC‚ÄØ822 message.\nsource\nBuffer\nString\noptions‚Äì optional configuration (seeOptions).\noptions\nReturnedmail object‚Äã\nThe resolvedmailobject aggregates every piece of the message:\nmail\nheaders\nMap\nsubject\nString\nheaders.get('subject')\nfrom\nto\ncc\nbcc\nreply-to\ndate\nDate\nmessageId\nString\ninReplyTo\nString\nreferences\nString[] | String\nhtml\ntext\ntextAsHtml\ntext\nattachments\nAttachment[]\nNo sanitisation is performed. If you displayhtml, make sure to run it through a trusted HTML‚Äësanitiser first.\nhtml\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span",
        "source_url": "https://nodemailer.com/extras/mailparser#returned-mail-object",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": ", make sure to run it through a trusted HTML‚Äësanitiser first.\nhtml\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span> &lt;<a href=\\\"mailto:jane@example.com\\\" class=\\\"mp_address_email\\\">jane@example.com</a>&gt;\",\"text\":\"Jane Doe <jane@example.com>\"}\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span> &lt;<a href=\\\"mailto:jane@example.com\\\" class=\\\"mp_address_email\\\">jane@example.com</a>&gt;\",\"text\":\"Jane Doe <jane@example.com>\"}\nvalue‚Äì array of individual addresses (or groups)\nvalue\ntext‚Äì formatted for plaintext context\ntext\nhtml‚Äì formatted for HTML context\nhtml\nFor a deep dive into address objects see theMessage¬†‚Üí Addressessection.\nheaders\nMost headers resolve tostrings(single header) orstring[](multiple occurrences). The following are parsed into richer structures for convenience:\nAddress headers‚Üí address objects (from,to,cc,bcc,sender,reply-to,delivered-to,return-path).\nfrom\nto\ncc\nbcc\nsender\nreply-to\ndelivered-to\nreturn-path\nPriority headers(x-priority,importance, ‚Ä¶) are normalised to a singleprioritykey with values\"high\" | \"normal\" | \"low\".\nx-priority\nimportance\npriority\n\"high\" | \"normal\" | \"low\"\nreferences‚ÜíString|String[].\nreferences\nString\nString[]\ndate‚ÜíDate.\ndate\nDate\nStructured headers(content-type,content-disposition,dkim-signature) ‚Üí{ value: String, params: Object }.\ncontent-type\ncontent-disposition\ndkim-signature\n{ value: String, params: Object }\nAttachment object (simpleParser)‚Äã\nfilename\nundefined\ncontentType\ncontentDisposition\n\"attachment\"\nchecksum\ncontent\nsize\nheaders\nMap\ncontent\nBuffer\ncontentId\ncid\nrelated\ntrue\nMailParser(stream API)‚Äã\nMailParser\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nMailParseris aTransformstream in",
        "source_url": "https://nodemailer.com/extras/mailparser#returned-mail-object",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nMailParseris aTransformstream inobject modethat emits two kinds of objects via the'data'event:\nMailParser\nTransform\n'data'\n{ type: 'headers', headers: Map }‚Äì once, after the headers are parsed.\n{ type: 'headers', headers: Map }\n{ type: 'attachment', ... }‚Äì for every attachment (see below).\nThecontentproperty is aReadable¬†stream.\n{ type: 'attachment', ... }\ncontent\n{ type: 'text', html, text, textAsHtml }‚Äì once, containing the message bodies.\n{ type: 'text', html, text, textAsHtml }\nStream options‚Äã\nskipHtmlToText\nfalse\ntext\nmaxHtmlLengthToParse\nInfinity\nformatDateString\nundefined\nskipImageLinks\nfalse\nskipTextToHtml\nfalse\ntextAsHtml\nskipTextLinks\nfalse\ntext\nkeepDeliveryStatus\nfalse\nmessage/delivery-status\nIconv\niconv-lite\nkeepCidLinks\nfalse\nskipImageLinks: true\nAttachment stream object (type === 'attachment')‚Äã\ntype === 'attachment'\nIdentical shape to the buffered object shown earlier, except:\ncontentis aReadable stream.\ncontent\nYoumustcallattachment.release()when you are done. Parsing pauses until every attachment is released.\nattachment.release()\nrelatedis only availableafterparsing ends.\nrelated\nparser.on(\"data\",(part)=>{if(part.type===\"attachment\"){console.log(\"Attachment:\",part.filename);part.content.pipe(fs.createWriteStream(part.filename)).on(\"finish\",part.release);}});\nparser.on(\"data\",(part)=>{if(part.type===\"attachment\"){console.log(\"Attachment:\",part.filename);part.content.pipe(fs.createWriteStream(part.filename)).on(\"finish\",part.release);}});\nCharacter set decoding‚Äã\nMailParser relies oniconv‚Äëlitefor charset conversion, except forISO‚Äë2022‚ÄëJPandEUC‚ÄëJPwhich are handled byencoding‚Äëjapanese.\nIf you prefernode-iconv, inject it:\nnode-iconv\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nconst{Iconv}=",
        "source_url": "https://nodemailer.com/extras/mailparser#returned-mail-object",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": ", inject it:\nnode-iconv\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nLicense‚Äã\nDual‚Äëlicensed under theMIT LicenseorEUPL‚ÄØv1.1‚ÄØ+.\nInstallation\nsimpleParser()ParametersReturnedmail objectAttachment object (simpleParser)\nsimpleParser()\nParameters\nReturnedmail object\nAttachment object (simpleParser)\nMailParser(stream API)Stream optionsAttachment stream object (type === 'attachment')\nMailParser\nStream options\nAttachment stream object (type === 'attachment')\ntype === 'attachment'\nCharacter set decoding\nLicense",
        "source_url": "https://nodemailer.com/extras/mailparser#returned-mail-object",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 176
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailParser\nMailParser\nStreaming e‚Äëmail parser for Node.js¬†that can handle very large messages with minimal memory overhead.\nMailParser offers two ways to consume a message:\nsimpleParser‚Äì convenience helper that buffers the whole message (including attachments) in memory and returns a singlemail object. Great for simple use‚Äëcases and tests.\nsimpleParser\nMailParserclass‚Äì a lower‚ÄëlevelTransformstream that emits message parts and attachmentstreamsas they become available, letting you process huge messages without blowing up memory.\nMailParser\nTransform\nInstallation‚Äã\nnpm install mailparser\nnpm install mailparser\nsimpleParser()‚Äã\nsimpleParser()\nconst{simpleParser}=require(\"mailparser\");// Callback stylesimpleParser(source,options,(err,mail)=>{if(err)throwerr;console.log(mail.subject);});// Promise stylesimpleParser(source,options).then((mail)=>console.log(mail.subject)).catch(console.error);// async/awaitconstmail=awaitsimpleParser(source,options);\nconst{simpleParser}=require(\"mailparser\");// Callback stylesimpleParser(source,options,(err,mail)=>{if(err)throwerr;console.log(mail.subject);});// Promise stylesimpleParser(source,options).then((mail)=>console.log(mail.subject)).catch(console.error);// async/awaitconstmail=awaitsimpleParser(source,options);\nParameters‚Äã\nsource‚Äì aBuffer,String, orreadable streamcontaining the RFC‚ÄØ822 message.\nsource\nBuffer\nString\noptions‚Äì optional configuration (seeOptions).\noptions\nReturnedmail object‚Äã\nThe resolvedmailobject aggregates every piece of the message:\nmail\nheaders\nMap\nsubject\nString\nheaders.get('subject')\nfrom\nto\ncc\nbcc\nreply-to\ndate\nDate\nmessageId\nString\ninReplyTo\nString\nreferences\nString[] | String\nhtml\ntext\ntextAsHtml\ntext\nattachments\nAttachment[]\nNo sanitisation is performed. If you displayhtml, make sure to run it through a trusted HTML‚Äësanitiser first.\nhtml\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span",
        "source_url": "https://nodemailer.com/extras/mailparser#address-object",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": ", make sure to run it through a trusted HTML‚Äësanitiser first.\nhtml\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span> &lt;<a href=\\\"mailto:jane@example.com\\\" class=\\\"mp_address_email\\\">jane@example.com</a>&gt;\",\"text\":\"Jane Doe <jane@example.com>\"}\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span> &lt;<a href=\\\"mailto:jane@example.com\\\" class=\\\"mp_address_email\\\">jane@example.com</a>&gt;\",\"text\":\"Jane Doe <jane@example.com>\"}\nvalue‚Äì array of individual addresses (or groups)\nvalue\ntext‚Äì formatted for plaintext context\ntext\nhtml‚Äì formatted for HTML context\nhtml\nFor a deep dive into address objects see theMessage¬†‚Üí Addressessection.\nheaders\nMost headers resolve tostrings(single header) orstring[](multiple occurrences). The following are parsed into richer structures for convenience:\nAddress headers‚Üí address objects (from,to,cc,bcc,sender,reply-to,delivered-to,return-path).\nfrom\nto\ncc\nbcc\nsender\nreply-to\ndelivered-to\nreturn-path\nPriority headers(x-priority,importance, ‚Ä¶) are normalised to a singleprioritykey with values\"high\" | \"normal\" | \"low\".\nx-priority\nimportance\npriority\n\"high\" | \"normal\" | \"low\"\nreferences‚ÜíString|String[].\nreferences\nString\nString[]\ndate‚ÜíDate.\ndate\nDate\nStructured headers(content-type,content-disposition,dkim-signature) ‚Üí{ value: String, params: Object }.\ncontent-type\ncontent-disposition\ndkim-signature\n{ value: String, params: Object }\nAttachment object (simpleParser)‚Äã\nfilename\nundefined\ncontentType\ncontentDisposition\n\"attachment\"\nchecksum\ncontent\nsize\nheaders\nMap\ncontent\nBuffer\ncontentId\ncid\nrelated\ntrue\nMailParser(stream API)‚Äã\nMailParser\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nMailParseris aTransformstream in",
        "source_url": "https://nodemailer.com/extras/mailparser#address-object",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nMailParseris aTransformstream inobject modethat emits two kinds of objects via the'data'event:\nMailParser\nTransform\n'data'\n{ type: 'headers', headers: Map }‚Äì once, after the headers are parsed.\n{ type: 'headers', headers: Map }\n{ type: 'attachment', ... }‚Äì for every attachment (see below).\nThecontentproperty is aReadable¬†stream.\n{ type: 'attachment', ... }\ncontent\n{ type: 'text', html, text, textAsHtml }‚Äì once, containing the message bodies.\n{ type: 'text', html, text, textAsHtml }\nStream options‚Äã\nskipHtmlToText\nfalse\ntext\nmaxHtmlLengthToParse\nInfinity\nformatDateString\nundefined\nskipImageLinks\nfalse\nskipTextToHtml\nfalse\ntextAsHtml\nskipTextLinks\nfalse\ntext\nkeepDeliveryStatus\nfalse\nmessage/delivery-status\nIconv\niconv-lite\nkeepCidLinks\nfalse\nskipImageLinks: true\nAttachment stream object (type === 'attachment')‚Äã\ntype === 'attachment'\nIdentical shape to the buffered object shown earlier, except:\ncontentis aReadable stream.\ncontent\nYoumustcallattachment.release()when you are done. Parsing pauses until every attachment is released.\nattachment.release()\nrelatedis only availableafterparsing ends.\nrelated\nparser.on(\"data\",(part)=>{if(part.type===\"attachment\"){console.log(\"Attachment:\",part.filename);part.content.pipe(fs.createWriteStream(part.filename)).on(\"finish\",part.release);}});\nparser.on(\"data\",(part)=>{if(part.type===\"attachment\"){console.log(\"Attachment:\",part.filename);part.content.pipe(fs.createWriteStream(part.filename)).on(\"finish\",part.release);}});\nCharacter set decoding‚Äã\nMailParser relies oniconv‚Äëlitefor charset conversion, except forISO‚Äë2022‚ÄëJPandEUC‚ÄëJPwhich are handled byencoding‚Äëjapanese.\nIf you prefernode-iconv, inject it:\nnode-iconv\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nconst{Iconv}=",
        "source_url": "https://nodemailer.com/extras/mailparser#address-object",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": ", inject it:\nnode-iconv\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nLicense‚Äã\nDual‚Äëlicensed under theMIT LicenseorEUPL‚ÄØv1.1‚ÄØ+.\nInstallation\nsimpleParser()ParametersReturnedmail objectAttachment object (simpleParser)\nsimpleParser()\nParameters\nReturnedmail object\nAttachment object (simpleParser)\nMailParser(stream API)Stream optionsAttachment stream object (type === 'attachment')\nMailParser\nStream options\nAttachment stream object (type === 'attachment')\ntype === 'attachment'\nCharacter set decoding\nLicense",
        "source_url": "https://nodemailer.com/extras/mailparser#address-object",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 176
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailParser\nMailParser\nStreaming e‚Äëmail parser for Node.js¬†that can handle very large messages with minimal memory overhead.\nMailParser offers two ways to consume a message:\nsimpleParser‚Äì convenience helper that buffers the whole message (including attachments) in memory and returns a singlemail object. Great for simple use‚Äëcases and tests.\nsimpleParser\nMailParserclass‚Äì a lower‚ÄëlevelTransformstream that emits message parts and attachmentstreamsas they become available, letting you process huge messages without blowing up memory.\nMailParser\nTransform\nInstallation‚Äã\nnpm install mailparser\nnpm install mailparser\nsimpleParser()‚Äã\nsimpleParser()\nconst{simpleParser}=require(\"mailparser\");// Callback stylesimpleParser(source,options,(err,mail)=>{if(err)throwerr;console.log(mail.subject);});// Promise stylesimpleParser(source,options).then((mail)=>console.log(mail.subject)).catch(console.error);// async/awaitconstmail=awaitsimpleParser(source,options);\nconst{simpleParser}=require(\"mailparser\");// Callback stylesimpleParser(source,options,(err,mail)=>{if(err)throwerr;console.log(mail.subject);});// Promise stylesimpleParser(source,options).then((mail)=>console.log(mail.subject)).catch(console.error);// async/awaitconstmail=awaitsimpleParser(source,options);\nParameters‚Äã\nsource‚Äì aBuffer,String, orreadable streamcontaining the RFC‚ÄØ822 message.\nsource\nBuffer\nString\noptions‚Äì optional configuration (seeOptions).\noptions\nReturnedmail object‚Äã\nThe resolvedmailobject aggregates every piece of the message:\nmail\nheaders\nMap\nsubject\nString\nheaders.get('subject')\nfrom\nto\ncc\nbcc\nreply-to\ndate\nDate\nmessageId\nString\ninReplyTo\nString\nreferences\nString[] | String\nhtml\ntext\ntextAsHtml\ntext\nattachments\nAttachment[]\nNo sanitisation is performed. If you displayhtml, make sure to run it through a trusted HTML‚Äësanitiser first.\nhtml\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span",
        "source_url": "https://nodemailer.com/extras/mailparser#headersmap-quirks",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": ", make sure to run it through a trusted HTML‚Äësanitiser first.\nhtml\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span> &lt;<a href=\\\"mailto:jane@example.com\\\" class=\\\"mp_address_email\\\">jane@example.com</a>&gt;\",\"text\":\"Jane Doe <jane@example.com>\"}\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span> &lt;<a href=\\\"mailto:jane@example.com\\\" class=\\\"mp_address_email\\\">jane@example.com</a>&gt;\",\"text\":\"Jane Doe <jane@example.com>\"}\nvalue‚Äì array of individual addresses (or groups)\nvalue\ntext‚Äì formatted for plaintext context\ntext\nhtml‚Äì formatted for HTML context\nhtml\nFor a deep dive into address objects see theMessage¬†‚Üí Addressessection.\nheaders\nMost headers resolve tostrings(single header) orstring[](multiple occurrences). The following are parsed into richer structures for convenience:\nAddress headers‚Üí address objects (from,to,cc,bcc,sender,reply-to,delivered-to,return-path).\nfrom\nto\ncc\nbcc\nsender\nreply-to\ndelivered-to\nreturn-path\nPriority headers(x-priority,importance, ‚Ä¶) are normalised to a singleprioritykey with values\"high\" | \"normal\" | \"low\".\nx-priority\nimportance\npriority\n\"high\" | \"normal\" | \"low\"\nreferences‚ÜíString|String[].\nreferences\nString\nString[]\ndate‚ÜíDate.\ndate\nDate\nStructured headers(content-type,content-disposition,dkim-signature) ‚Üí{ value: String, params: Object }.\ncontent-type\ncontent-disposition\ndkim-signature\n{ value: String, params: Object }\nAttachment object (simpleParser)‚Äã\nfilename\nundefined\ncontentType\ncontentDisposition\n\"attachment\"\nchecksum\ncontent\nsize\nheaders\nMap\ncontent\nBuffer\ncontentId\ncid\nrelated\ntrue\nMailParser(stream API)‚Äã\nMailParser\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nMailParseris aTransformstream in",
        "source_url": "https://nodemailer.com/extras/mailparser#headersmap-quirks",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nMailParseris aTransformstream inobject modethat emits two kinds of objects via the'data'event:\nMailParser\nTransform\n'data'\n{ type: 'headers', headers: Map }‚Äì once, after the headers are parsed.\n{ type: 'headers', headers: Map }\n{ type: 'attachment', ... }‚Äì for every attachment (see below).\nThecontentproperty is aReadable¬†stream.\n{ type: 'attachment', ... }\ncontent\n{ type: 'text', html, text, textAsHtml }‚Äì once, containing the message bodies.\n{ type: 'text', html, text, textAsHtml }\nStream options‚Äã\nskipHtmlToText\nfalse\ntext\nmaxHtmlLengthToParse\nInfinity\nformatDateString\nundefined\nskipImageLinks\nfalse\nskipTextToHtml\nfalse\ntextAsHtml\nskipTextLinks\nfalse\ntext\nkeepDeliveryStatus\nfalse\nmessage/delivery-status\nIconv\niconv-lite\nkeepCidLinks\nfalse\nskipImageLinks: true\nAttachment stream object (type === 'attachment')‚Äã\ntype === 'attachment'\nIdentical shape to the buffered object shown earlier, except:\ncontentis aReadable stream.\ncontent\nYoumustcallattachment.release()when you are done. Parsing pauses until every attachment is released.\nattachment.release()\nrelatedis only availableafterparsing ends.\nrelated\nparser.on(\"data\",(part)=>{if(part.type===\"attachment\"){console.log(\"Attachment:\",part.filename);part.content.pipe(fs.createWriteStream(part.filename)).on(\"finish\",part.release);}});\nparser.on(\"data\",(part)=>{if(part.type===\"attachment\"){console.log(\"Attachment:\",part.filename);part.content.pipe(fs.createWriteStream(part.filename)).on(\"finish\",part.release);}});\nCharacter set decoding‚Äã\nMailParser relies oniconv‚Äëlitefor charset conversion, except forISO‚Äë2022‚ÄëJPandEUC‚ÄëJPwhich are handled byencoding‚Äëjapanese.\nIf you prefernode-iconv, inject it:\nnode-iconv\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nconst{Iconv}=",
        "source_url": "https://nodemailer.com/extras/mailparser#headersmap-quirks",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": ", inject it:\nnode-iconv\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nLicense‚Äã\nDual‚Äëlicensed under theMIT LicenseorEUPL‚ÄØv1.1‚ÄØ+.\nInstallation\nsimpleParser()ParametersReturnedmail objectAttachment object (simpleParser)\nsimpleParser()\nParameters\nReturnedmail object\nAttachment object (simpleParser)\nMailParser(stream API)Stream optionsAttachment stream object (type === 'attachment')\nMailParser\nStream options\nAttachment stream object (type === 'attachment')\ntype === 'attachment'\nCharacter set decoding\nLicense",
        "source_url": "https://nodemailer.com/extras/mailparser#headersmap-quirks",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 176
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailParser\nMailParser\nStreaming e‚Äëmail parser for Node.js¬†that can handle very large messages with minimal memory overhead.\nMailParser offers two ways to consume a message:\nsimpleParser‚Äì convenience helper that buffers the whole message (including attachments) in memory and returns a singlemail object. Great for simple use‚Äëcases and tests.\nsimpleParser\nMailParserclass‚Äì a lower‚ÄëlevelTransformstream that emits message parts and attachmentstreamsas they become available, letting you process huge messages without blowing up memory.\nMailParser\nTransform\nInstallation‚Äã\nnpm install mailparser\nnpm install mailparser\nsimpleParser()‚Äã\nsimpleParser()\nconst{simpleParser}=require(\"mailparser\");// Callback stylesimpleParser(source,options,(err,mail)=>{if(err)throwerr;console.log(mail.subject);});// Promise stylesimpleParser(source,options).then((mail)=>console.log(mail.subject)).catch(console.error);// async/awaitconstmail=awaitsimpleParser(source,options);\nconst{simpleParser}=require(\"mailparser\");// Callback stylesimpleParser(source,options,(err,mail)=>{if(err)throwerr;console.log(mail.subject);});// Promise stylesimpleParser(source,options).then((mail)=>console.log(mail.subject)).catch(console.error);// async/awaitconstmail=awaitsimpleParser(source,options);\nParameters‚Äã\nsource‚Äì aBuffer,String, orreadable streamcontaining the RFC‚ÄØ822 message.\nsource\nBuffer\nString\noptions‚Äì optional configuration (seeOptions).\noptions\nReturnedmail object‚Äã\nThe resolvedmailobject aggregates every piece of the message:\nmail\nheaders\nMap\nsubject\nString\nheaders.get('subject')\nfrom\nto\ncc\nbcc\nreply-to\ndate\nDate\nmessageId\nString\ninReplyTo\nString\nreferences\nString[] | String\nhtml\ntext\ntextAsHtml\ntext\nattachments\nAttachment[]\nNo sanitisation is performed. If you displayhtml, make sure to run it through a trusted HTML‚Äësanitiser first.\nhtml\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span",
        "source_url": "https://nodemailer.com/extras/mailparser#attachment-object-simpleparser",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": ", make sure to run it through a trusted HTML‚Äësanitiser first.\nhtml\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span> &lt;<a href=\\\"mailto:jane@example.com\\\" class=\\\"mp_address_email\\\">jane@example.com</a>&gt;\",\"text\":\"Jane Doe <jane@example.com>\"}\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span> &lt;<a href=\\\"mailto:jane@example.com\\\" class=\\\"mp_address_email\\\">jane@example.com</a>&gt;\",\"text\":\"Jane Doe <jane@example.com>\"}\nvalue‚Äì array of individual addresses (or groups)\nvalue\ntext‚Äì formatted for plaintext context\ntext\nhtml‚Äì formatted for HTML context\nhtml\nFor a deep dive into address objects see theMessage¬†‚Üí Addressessection.\nheaders\nMost headers resolve tostrings(single header) orstring[](multiple occurrences). The following are parsed into richer structures for convenience:\nAddress headers‚Üí address objects (from,to,cc,bcc,sender,reply-to,delivered-to,return-path).\nfrom\nto\ncc\nbcc\nsender\nreply-to\ndelivered-to\nreturn-path\nPriority headers(x-priority,importance, ‚Ä¶) are normalised to a singleprioritykey with values\"high\" | \"normal\" | \"low\".\nx-priority\nimportance\npriority\n\"high\" | \"normal\" | \"low\"\nreferences‚ÜíString|String[].\nreferences\nString\nString[]\ndate‚ÜíDate.\ndate\nDate\nStructured headers(content-type,content-disposition,dkim-signature) ‚Üí{ value: String, params: Object }.\ncontent-type\ncontent-disposition\ndkim-signature\n{ value: String, params: Object }\nAttachment object (simpleParser)‚Äã\nfilename\nundefined\ncontentType\ncontentDisposition\n\"attachment\"\nchecksum\ncontent\nsize\nheaders\nMap\ncontent\nBuffer\ncontentId\ncid\nrelated\ntrue\nMailParser(stream API)‚Äã\nMailParser\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nMailParseris aTransformstream in",
        "source_url": "https://nodemailer.com/extras/mailparser#attachment-object-simpleparser",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nMailParseris aTransformstream inobject modethat emits two kinds of objects via the'data'event:\nMailParser\nTransform\n'data'\n{ type: 'headers', headers: Map }‚Äì once, after the headers are parsed.\n{ type: 'headers', headers: Map }\n{ type: 'attachment', ... }‚Äì for every attachment (see below).\nThecontentproperty is aReadable¬†stream.\n{ type: 'attachment', ... }\ncontent\n{ type: 'text', html, text, textAsHtml }‚Äì once, containing the message bodies.\n{ type: 'text', html, text, textAsHtml }\nStream options‚Äã\nskipHtmlToText\nfalse\ntext\nmaxHtmlLengthToParse\nInfinity\nformatDateString\nundefined\nskipImageLinks\nfalse\nskipTextToHtml\nfalse\ntextAsHtml\nskipTextLinks\nfalse\ntext\nkeepDeliveryStatus\nfalse\nmessage/delivery-status\nIconv\niconv-lite\nkeepCidLinks\nfalse\nskipImageLinks: true\nAttachment stream object (type === 'attachment')‚Äã\ntype === 'attachment'\nIdentical shape to the buffered object shown earlier, except:\ncontentis aReadable stream.\ncontent\nYoumustcallattachment.release()when you are done. Parsing pauses until every attachment is released.\nattachment.release()\nrelatedis only availableafterparsing ends.\nrelated\nparser.on(\"data\",(part)=>{if(part.type===\"attachment\"){console.log(\"Attachment:\",part.filename);part.content.pipe(fs.createWriteStream(part.filename)).on(\"finish\",part.release);}});\nparser.on(\"data\",(part)=>{if(part.type===\"attachment\"){console.log(\"Attachment:\",part.filename);part.content.pipe(fs.createWriteStream(part.filename)).on(\"finish\",part.release);}});\nCharacter set decoding‚Äã\nMailParser relies oniconv‚Äëlitefor charset conversion, except forISO‚Äë2022‚ÄëJPandEUC‚ÄëJPwhich are handled byencoding‚Äëjapanese.\nIf you prefernode-iconv, inject it:\nnode-iconv\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nconst{Iconv}=",
        "source_url": "https://nodemailer.com/extras/mailparser#attachment-object-simpleparser",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": ", inject it:\nnode-iconv\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nLicense‚Äã\nDual‚Äëlicensed under theMIT LicenseorEUPL‚ÄØv1.1‚ÄØ+.\nInstallation\nsimpleParser()ParametersReturnedmail objectAttachment object (simpleParser)\nsimpleParser()\nParameters\nReturnedmail object\nAttachment object (simpleParser)\nMailParser(stream API)Stream optionsAttachment stream object (type === 'attachment')\nMailParser\nStream options\nAttachment stream object (type === 'attachment')\ntype === 'attachment'\nCharacter set decoding\nLicense",
        "source_url": "https://nodemailer.com/extras/mailparser#attachment-object-simpleparser",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 176
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailParser\nMailParser\nStreaming e‚Äëmail parser for Node.js¬†that can handle very large messages with minimal memory overhead.\nMailParser offers two ways to consume a message:\nsimpleParser‚Äì convenience helper that buffers the whole message (including attachments) in memory and returns a singlemail object. Great for simple use‚Äëcases and tests.\nsimpleParser\nMailParserclass‚Äì a lower‚ÄëlevelTransformstream that emits message parts and attachmentstreamsas they become available, letting you process huge messages without blowing up memory.\nMailParser\nTransform\nInstallation‚Äã\nnpm install mailparser\nnpm install mailparser\nsimpleParser()‚Äã\nsimpleParser()\nconst{simpleParser}=require(\"mailparser\");// Callback stylesimpleParser(source,options,(err,mail)=>{if(err)throwerr;console.log(mail.subject);});// Promise stylesimpleParser(source,options).then((mail)=>console.log(mail.subject)).catch(console.error);// async/awaitconstmail=awaitsimpleParser(source,options);\nconst{simpleParser}=require(\"mailparser\");// Callback stylesimpleParser(source,options,(err,mail)=>{if(err)throwerr;console.log(mail.subject);});// Promise stylesimpleParser(source,options).then((mail)=>console.log(mail.subject)).catch(console.error);// async/awaitconstmail=awaitsimpleParser(source,options);\nParameters‚Äã\nsource‚Äì aBuffer,String, orreadable streamcontaining the RFC‚ÄØ822 message.\nsource\nBuffer\nString\noptions‚Äì optional configuration (seeOptions).\noptions\nReturnedmail object‚Äã\nThe resolvedmailobject aggregates every piece of the message:\nmail\nheaders\nMap\nsubject\nString\nheaders.get('subject')\nfrom\nto\ncc\nbcc\nreply-to\ndate\nDate\nmessageId\nString\ninReplyTo\nString\nreferences\nString[] | String\nhtml\ntext\ntextAsHtml\ntext\nattachments\nAttachment[]\nNo sanitisation is performed. If you displayhtml, make sure to run it through a trusted HTML‚Äësanitiser first.\nhtml\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span",
        "source_url": "https://nodemailer.com/extras/mailparser#mailparser-stream-api",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": ", make sure to run it through a trusted HTML‚Äësanitiser first.\nhtml\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span> &lt;<a href=\\\"mailto:jane@example.com\\\" class=\\\"mp_address_email\\\">jane@example.com</a>&gt;\",\"text\":\"Jane Doe <jane@example.com>\"}\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span> &lt;<a href=\\\"mailto:jane@example.com\\\" class=\\\"mp_address_email\\\">jane@example.com</a>&gt;\",\"text\":\"Jane Doe <jane@example.com>\"}\nvalue‚Äì array of individual addresses (or groups)\nvalue\ntext‚Äì formatted for plaintext context\ntext\nhtml‚Äì formatted for HTML context\nhtml\nFor a deep dive into address objects see theMessage¬†‚Üí Addressessection.\nheaders\nMost headers resolve tostrings(single header) orstring[](multiple occurrences). The following are parsed into richer structures for convenience:\nAddress headers‚Üí address objects (from,to,cc,bcc,sender,reply-to,delivered-to,return-path).\nfrom\nto\ncc\nbcc\nsender\nreply-to\ndelivered-to\nreturn-path\nPriority headers(x-priority,importance, ‚Ä¶) are normalised to a singleprioritykey with values\"high\" | \"normal\" | \"low\".\nx-priority\nimportance\npriority\n\"high\" | \"normal\" | \"low\"\nreferences‚ÜíString|String[].\nreferences\nString\nString[]\ndate‚ÜíDate.\ndate\nDate\nStructured headers(content-type,content-disposition,dkim-signature) ‚Üí{ value: String, params: Object }.\ncontent-type\ncontent-disposition\ndkim-signature\n{ value: String, params: Object }\nAttachment object (simpleParser)‚Äã\nfilename\nundefined\ncontentType\ncontentDisposition\n\"attachment\"\nchecksum\ncontent\nsize\nheaders\nMap\ncontent\nBuffer\ncontentId\ncid\nrelated\ntrue\nMailParser(stream API)‚Äã\nMailParser\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nMailParseris aTransformstream in",
        "source_url": "https://nodemailer.com/extras/mailparser#mailparser-stream-api",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nMailParseris aTransformstream inobject modethat emits two kinds of objects via the'data'event:\nMailParser\nTransform\n'data'\n{ type: 'headers', headers: Map }‚Äì once, after the headers are parsed.\n{ type: 'headers', headers: Map }\n{ type: 'attachment', ... }‚Äì for every attachment (see below).\nThecontentproperty is aReadable¬†stream.\n{ type: 'attachment', ... }\ncontent\n{ type: 'text', html, text, textAsHtml }‚Äì once, containing the message bodies.\n{ type: 'text', html, text, textAsHtml }\nStream options‚Äã\nskipHtmlToText\nfalse\ntext\nmaxHtmlLengthToParse\nInfinity\nformatDateString\nundefined\nskipImageLinks\nfalse\nskipTextToHtml\nfalse\ntextAsHtml\nskipTextLinks\nfalse\ntext\nkeepDeliveryStatus\nfalse\nmessage/delivery-status\nIconv\niconv-lite\nkeepCidLinks\nfalse\nskipImageLinks: true\nAttachment stream object (type === 'attachment')‚Äã\ntype === 'attachment'\nIdentical shape to the buffered object shown earlier, except:\ncontentis aReadable stream.\ncontent\nYoumustcallattachment.release()when you are done. Parsing pauses until every attachment is released.\nattachment.release()\nrelatedis only availableafterparsing ends.\nrelated\nparser.on(\"data\",(part)=>{if(part.type===\"attachment\"){console.log(\"Attachment:\",part.filename);part.content.pipe(fs.createWriteStream(part.filename)).on(\"finish\",part.release);}});\nparser.on(\"data\",(part)=>{if(part.type===\"attachment\"){console.log(\"Attachment:\",part.filename);part.content.pipe(fs.createWriteStream(part.filename)).on(\"finish\",part.release);}});\nCharacter set decoding‚Äã\nMailParser relies oniconv‚Äëlitefor charset conversion, except forISO‚Äë2022‚ÄëJPandEUC‚ÄëJPwhich are handled byencoding‚Äëjapanese.\nIf you prefernode-iconv, inject it:\nnode-iconv\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nconst{Iconv}=",
        "source_url": "https://nodemailer.com/extras/mailparser#mailparser-stream-api",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": ", inject it:\nnode-iconv\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nLicense‚Äã\nDual‚Äëlicensed under theMIT LicenseorEUPL‚ÄØv1.1‚ÄØ+.\nInstallation\nsimpleParser()ParametersReturnedmail objectAttachment object (simpleParser)\nsimpleParser()\nParameters\nReturnedmail object\nAttachment object (simpleParser)\nMailParser(stream API)Stream optionsAttachment stream object (type === 'attachment')\nMailParser\nStream options\nAttachment stream object (type === 'attachment')\ntype === 'attachment'\nCharacter set decoding\nLicense",
        "source_url": "https://nodemailer.com/extras/mailparser#mailparser-stream-api",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 176
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailParser\nMailParser\nStreaming e‚Äëmail parser for Node.js¬†that can handle very large messages with minimal memory overhead.\nMailParser offers two ways to consume a message:\nsimpleParser‚Äì convenience helper that buffers the whole message (including attachments) in memory and returns a singlemail object. Great for simple use‚Äëcases and tests.\nsimpleParser\nMailParserclass‚Äì a lower‚ÄëlevelTransformstream that emits message parts and attachmentstreamsas they become available, letting you process huge messages without blowing up memory.\nMailParser\nTransform\nInstallation‚Äã\nnpm install mailparser\nnpm install mailparser\nsimpleParser()‚Äã\nsimpleParser()\nconst{simpleParser}=require(\"mailparser\");// Callback stylesimpleParser(source,options,(err,mail)=>{if(err)throwerr;console.log(mail.subject);});// Promise stylesimpleParser(source,options).then((mail)=>console.log(mail.subject)).catch(console.error);// async/awaitconstmail=awaitsimpleParser(source,options);\nconst{simpleParser}=require(\"mailparser\");// Callback stylesimpleParser(source,options,(err,mail)=>{if(err)throwerr;console.log(mail.subject);});// Promise stylesimpleParser(source,options).then((mail)=>console.log(mail.subject)).catch(console.error);// async/awaitconstmail=awaitsimpleParser(source,options);\nParameters‚Äã\nsource‚Äì aBuffer,String, orreadable streamcontaining the RFC‚ÄØ822 message.\nsource\nBuffer\nString\noptions‚Äì optional configuration (seeOptions).\noptions\nReturnedmail object‚Äã\nThe resolvedmailobject aggregates every piece of the message:\nmail\nheaders\nMap\nsubject\nString\nheaders.get('subject')\nfrom\nto\ncc\nbcc\nreply-to\ndate\nDate\nmessageId\nString\ninReplyTo\nString\nreferences\nString[] | String\nhtml\ntext\ntextAsHtml\ntext\nattachments\nAttachment[]\nNo sanitisation is performed. If you displayhtml, make sure to run it through a trusted HTML‚Äësanitiser first.\nhtml\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span",
        "source_url": "https://nodemailer.com/extras/mailparser#attachment-stream-object-type--attachment",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": ", make sure to run it through a trusted HTML‚Äësanitiser first.\nhtml\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span> &lt;<a href=\\\"mailto:jane@example.com\\\" class=\\\"mp_address_email\\\">jane@example.com</a>&gt;\",\"text\":\"Jane Doe <jane@example.com>\"}\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span> &lt;<a href=\\\"mailto:jane@example.com\\\" class=\\\"mp_address_email\\\">jane@example.com</a>&gt;\",\"text\":\"Jane Doe <jane@example.com>\"}\nvalue‚Äì array of individual addresses (or groups)\nvalue\ntext‚Äì formatted for plaintext context\ntext\nhtml‚Äì formatted for HTML context\nhtml\nFor a deep dive into address objects see theMessage¬†‚Üí Addressessection.\nheaders\nMost headers resolve tostrings(single header) orstring[](multiple occurrences). The following are parsed into richer structures for convenience:\nAddress headers‚Üí address objects (from,to,cc,bcc,sender,reply-to,delivered-to,return-path).\nfrom\nto\ncc\nbcc\nsender\nreply-to\ndelivered-to\nreturn-path\nPriority headers(x-priority,importance, ‚Ä¶) are normalised to a singleprioritykey with values\"high\" | \"normal\" | \"low\".\nx-priority\nimportance\npriority\n\"high\" | \"normal\" | \"low\"\nreferences‚ÜíString|String[].\nreferences\nString\nString[]\ndate‚ÜíDate.\ndate\nDate\nStructured headers(content-type,content-disposition,dkim-signature) ‚Üí{ value: String, params: Object }.\ncontent-type\ncontent-disposition\ndkim-signature\n{ value: String, params: Object }\nAttachment object (simpleParser)‚Äã\nfilename\nundefined\ncontentType\ncontentDisposition\n\"attachment\"\nchecksum\ncontent\nsize\nheaders\nMap\ncontent\nBuffer\ncontentId\ncid\nrelated\ntrue\nMailParser(stream API)‚Äã\nMailParser\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nMailParseris aTransformstream in",
        "source_url": "https://nodemailer.com/extras/mailparser#attachment-stream-object-type--attachment",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nMailParseris aTransformstream inobject modethat emits two kinds of objects via the'data'event:\nMailParser\nTransform\n'data'\n{ type: 'headers', headers: Map }‚Äì once, after the headers are parsed.\n{ type: 'headers', headers: Map }\n{ type: 'attachment', ... }‚Äì for every attachment (see below).\nThecontentproperty is aReadable¬†stream.\n{ type: 'attachment', ... }\ncontent\n{ type: 'text', html, text, textAsHtml }‚Äì once, containing the message bodies.\n{ type: 'text', html, text, textAsHtml }\nStream options‚Äã\nskipHtmlToText\nfalse\ntext\nmaxHtmlLengthToParse\nInfinity\nformatDateString\nundefined\nskipImageLinks\nfalse\nskipTextToHtml\nfalse\ntextAsHtml\nskipTextLinks\nfalse\ntext\nkeepDeliveryStatus\nfalse\nmessage/delivery-status\nIconv\niconv-lite\nkeepCidLinks\nfalse\nskipImageLinks: true\nAttachment stream object (type === 'attachment')‚Äã\ntype === 'attachment'\nIdentical shape to the buffered object shown earlier, except:\ncontentis aReadable stream.\ncontent\nYoumustcallattachment.release()when you are done. Parsing pauses until every attachment is released.\nattachment.release()\nrelatedis only availableafterparsing ends.\nrelated\nparser.on(\"data\",(part)=>{if(part.type===\"attachment\"){console.log(\"Attachment:\",part.filename);part.content.pipe(fs.createWriteStream(part.filename)).on(\"finish\",part.release);}});\nparser.on(\"data\",(part)=>{if(part.type===\"attachment\"){console.log(\"Attachment:\",part.filename);part.content.pipe(fs.createWriteStream(part.filename)).on(\"finish\",part.release);}});\nCharacter set decoding‚Äã\nMailParser relies oniconv‚Äëlitefor charset conversion, except forISO‚Äë2022‚ÄëJPandEUC‚ÄëJPwhich are handled byencoding‚Äëjapanese.\nIf you prefernode-iconv, inject it:\nnode-iconv\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nconst{Iconv}=",
        "source_url": "https://nodemailer.com/extras/mailparser#attachment-stream-object-type--attachment",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": ", inject it:\nnode-iconv\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nLicense‚Äã\nDual‚Äëlicensed under theMIT LicenseorEUPL‚ÄØv1.1‚ÄØ+.\nInstallation\nsimpleParser()ParametersReturnedmail objectAttachment object (simpleParser)\nsimpleParser()\nParameters\nReturnedmail object\nAttachment object (simpleParser)\nMailParser(stream API)Stream optionsAttachment stream object (type === 'attachment')\nMailParser\nStream options\nAttachment stream object (type === 'attachment')\ntype === 'attachment'\nCharacter set decoding\nLicense",
        "source_url": "https://nodemailer.com/extras/mailparser#attachment-stream-object-type--attachment",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 176
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailParser\nMailParser\nStreaming e‚Äëmail parser for Node.js¬†that can handle very large messages with minimal memory overhead.\nMailParser offers two ways to consume a message:\nsimpleParser‚Äì convenience helper that buffers the whole message (including attachments) in memory and returns a singlemail object. Great for simple use‚Äëcases and tests.\nsimpleParser\nMailParserclass‚Äì a lower‚ÄëlevelTransformstream that emits message parts and attachmentstreamsas they become available, letting you process huge messages without blowing up memory.\nMailParser\nTransform\nInstallation‚Äã\nnpm install mailparser\nnpm install mailparser\nsimpleParser()‚Äã\nsimpleParser()\nconst{simpleParser}=require(\"mailparser\");// Callback stylesimpleParser(source,options,(err,mail)=>{if(err)throwerr;console.log(mail.subject);});// Promise stylesimpleParser(source,options).then((mail)=>console.log(mail.subject)).catch(console.error);// async/awaitconstmail=awaitsimpleParser(source,options);\nconst{simpleParser}=require(\"mailparser\");// Callback stylesimpleParser(source,options,(err,mail)=>{if(err)throwerr;console.log(mail.subject);});// Promise stylesimpleParser(source,options).then((mail)=>console.log(mail.subject)).catch(console.error);// async/awaitconstmail=awaitsimpleParser(source,options);\nParameters‚Äã\nsource‚Äì aBuffer,String, orreadable streamcontaining the RFC‚ÄØ822 message.\nsource\nBuffer\nString\noptions‚Äì optional configuration (seeOptions).\noptions\nReturnedmail object‚Äã\nThe resolvedmailobject aggregates every piece of the message:\nmail\nheaders\nMap\nsubject\nString\nheaders.get('subject')\nfrom\nto\ncc\nbcc\nreply-to\ndate\nDate\nmessageId\nString\ninReplyTo\nString\nreferences\nString[] | String\nhtml\ntext\ntextAsHtml\ntext\nattachments\nAttachment[]\nNo sanitisation is performed. If you displayhtml, make sure to run it through a trusted HTML‚Äësanitiser first.\nhtml\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span",
        "source_url": "https://nodemailer.com/extras/mailparser#character-set-decoding",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": ", make sure to run it through a trusted HTML‚Äësanitiser first.\nhtml\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span> &lt;<a href=\\\"mailto:jane@example.com\\\" class=\\\"mp_address_email\\\">jane@example.com</a>&gt;\",\"text\":\"Jane Doe <jane@example.com>\"}\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span> &lt;<a href=\\\"mailto:jane@example.com\\\" class=\\\"mp_address_email\\\">jane@example.com</a>&gt;\",\"text\":\"Jane Doe <jane@example.com>\"}\nvalue‚Äì array of individual addresses (or groups)\nvalue\ntext‚Äì formatted for plaintext context\ntext\nhtml‚Äì formatted for HTML context\nhtml\nFor a deep dive into address objects see theMessage¬†‚Üí Addressessection.\nheaders\nMost headers resolve tostrings(single header) orstring[](multiple occurrences). The following are parsed into richer structures for convenience:\nAddress headers‚Üí address objects (from,to,cc,bcc,sender,reply-to,delivered-to,return-path).\nfrom\nto\ncc\nbcc\nsender\nreply-to\ndelivered-to\nreturn-path\nPriority headers(x-priority,importance, ‚Ä¶) are normalised to a singleprioritykey with values\"high\" | \"normal\" | \"low\".\nx-priority\nimportance\npriority\n\"high\" | \"normal\" | \"low\"\nreferences‚ÜíString|String[].\nreferences\nString\nString[]\ndate‚ÜíDate.\ndate\nDate\nStructured headers(content-type,content-disposition,dkim-signature) ‚Üí{ value: String, params: Object }.\ncontent-type\ncontent-disposition\ndkim-signature\n{ value: String, params: Object }\nAttachment object (simpleParser)‚Äã\nfilename\nundefined\ncontentType\ncontentDisposition\n\"attachment\"\nchecksum\ncontent\nsize\nheaders\nMap\ncontent\nBuffer\ncontentId\ncid\nrelated\ntrue\nMailParser(stream API)‚Äã\nMailParser\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nMailParseris aTransformstream in",
        "source_url": "https://nodemailer.com/extras/mailparser#character-set-decoding",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nMailParseris aTransformstream inobject modethat emits two kinds of objects via the'data'event:\nMailParser\nTransform\n'data'\n{ type: 'headers', headers: Map }‚Äì once, after the headers are parsed.\n{ type: 'headers', headers: Map }\n{ type: 'attachment', ... }‚Äì for every attachment (see below).\nThecontentproperty is aReadable¬†stream.\n{ type: 'attachment', ... }\ncontent\n{ type: 'text', html, text, textAsHtml }‚Äì once, containing the message bodies.\n{ type: 'text', html, text, textAsHtml }\nStream options‚Äã\nskipHtmlToText\nfalse\ntext\nmaxHtmlLengthToParse\nInfinity\nformatDateString\nundefined\nskipImageLinks\nfalse\nskipTextToHtml\nfalse\ntextAsHtml\nskipTextLinks\nfalse\ntext\nkeepDeliveryStatus\nfalse\nmessage/delivery-status\nIconv\niconv-lite\nkeepCidLinks\nfalse\nskipImageLinks: true\nAttachment stream object (type === 'attachment')‚Äã\ntype === 'attachment'\nIdentical shape to the buffered object shown earlier, except:\ncontentis aReadable stream.\ncontent\nYoumustcallattachment.release()when you are done. Parsing pauses until every attachment is released.\nattachment.release()\nrelatedis only availableafterparsing ends.\nrelated\nparser.on(\"data\",(part)=>{if(part.type===\"attachment\"){console.log(\"Attachment:\",part.filename);part.content.pipe(fs.createWriteStream(part.filename)).on(\"finish\",part.release);}});\nparser.on(\"data\",(part)=>{if(part.type===\"attachment\"){console.log(\"Attachment:\",part.filename);part.content.pipe(fs.createWriteStream(part.filename)).on(\"finish\",part.release);}});\nCharacter set decoding‚Äã\nMailParser relies oniconv‚Äëlitefor charset conversion, except forISO‚Äë2022‚ÄëJPandEUC‚ÄëJPwhich are handled byencoding‚Äëjapanese.\nIf you prefernode-iconv, inject it:\nnode-iconv\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nconst{Iconv}=",
        "source_url": "https://nodemailer.com/extras/mailparser#character-set-decoding",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": ", inject it:\nnode-iconv\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nLicense‚Äã\nDual‚Äëlicensed under theMIT LicenseorEUPL‚ÄØv1.1‚ÄØ+.\nInstallation\nsimpleParser()ParametersReturnedmail objectAttachment object (simpleParser)\nsimpleParser()\nParameters\nReturnedmail object\nAttachment object (simpleParser)\nMailParser(stream API)Stream optionsAttachment stream object (type === 'attachment')\nMailParser\nStream options\nAttachment stream object (type === 'attachment')\ntype === 'attachment'\nCharacter set decoding\nLicense",
        "source_url": "https://nodemailer.com/extras/mailparser#character-set-decoding",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 176
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nMailParser\nMailParser\nStreaming e‚Äëmail parser for Node.js¬†that can handle very large messages with minimal memory overhead.\nMailParser offers two ways to consume a message:\nsimpleParser‚Äì convenience helper that buffers the whole message (including attachments) in memory and returns a singlemail object. Great for simple use‚Äëcases and tests.\nsimpleParser\nMailParserclass‚Äì a lower‚ÄëlevelTransformstream that emits message parts and attachmentstreamsas they become available, letting you process huge messages without blowing up memory.\nMailParser\nTransform\nInstallation‚Äã\nnpm install mailparser\nnpm install mailparser\nsimpleParser()‚Äã\nsimpleParser()\nconst{simpleParser}=require(\"mailparser\");// Callback stylesimpleParser(source,options,(err,mail)=>{if(err)throwerr;console.log(mail.subject);});// Promise stylesimpleParser(source,options).then((mail)=>console.log(mail.subject)).catch(console.error);// async/awaitconstmail=awaitsimpleParser(source,options);\nconst{simpleParser}=require(\"mailparser\");// Callback stylesimpleParser(source,options,(err,mail)=>{if(err)throwerr;console.log(mail.subject);});// Promise stylesimpleParser(source,options).then((mail)=>console.log(mail.subject)).catch(console.error);// async/awaitconstmail=awaitsimpleParser(source,options);\nParameters‚Äã\nsource‚Äì aBuffer,String, orreadable streamcontaining the RFC‚ÄØ822 message.\nsource\nBuffer\nString\noptions‚Äì optional configuration (seeOptions).\noptions\nReturnedmail object‚Äã\nThe resolvedmailobject aggregates every piece of the message:\nmail\nheaders\nMap\nsubject\nString\nheaders.get('subject')\nfrom\nto\ncc\nbcc\nreply-to\ndate\nDate\nmessageId\nString\ninReplyTo\nString\nreferences\nString[] | String\nhtml\ntext\ntextAsHtml\ntext\nattachments\nAttachment[]\nNo sanitisation is performed. If you displayhtml, make sure to run it through a trusted HTML‚Äësanitiser first.\nhtml\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span",
        "source_url": "https://nodemailer.com/extras/mailparser#license",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": ", make sure to run it through a trusted HTML‚Äësanitiser first.\nhtml\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span> &lt;<a href=\\\"mailto:jane@example.com\\\" class=\\\"mp_address_email\\\">jane@example.com</a>&gt;\",\"text\":\"Jane Doe <jane@example.com>\"}\n{\"value\":[{\"name\":\"Jane Doe\",\"address\":\"jane@example.com\"}],\"html\":\"<span class=\\\"mp_address_name\\\">Jane¬†Doe</span> &lt;<a href=\\\"mailto:jane@example.com\\\" class=\\\"mp_address_email\\\">jane@example.com</a>&gt;\",\"text\":\"Jane Doe <jane@example.com>\"}\nvalue‚Äì array of individual addresses (or groups)\nvalue\ntext‚Äì formatted for plaintext context\ntext\nhtml‚Äì formatted for HTML context\nhtml\nFor a deep dive into address objects see theMessage¬†‚Üí Addressessection.\nheaders\nMost headers resolve tostrings(single header) orstring[](multiple occurrences). The following are parsed into richer structures for convenience:\nAddress headers‚Üí address objects (from,to,cc,bcc,sender,reply-to,delivered-to,return-path).\nfrom\nto\ncc\nbcc\nsender\nreply-to\ndelivered-to\nreturn-path\nPriority headers(x-priority,importance, ‚Ä¶) are normalised to a singleprioritykey with values\"high\" | \"normal\" | \"low\".\nx-priority\nimportance\npriority\n\"high\" | \"normal\" | \"low\"\nreferences‚ÜíString|String[].\nreferences\nString\nString[]\ndate‚ÜíDate.\ndate\nDate\nStructured headers(content-type,content-disposition,dkim-signature) ‚Üí{ value: String, params: Object }.\ncontent-type\ncontent-disposition\ndkim-signature\n{ value: String, params: Object }\nAttachment object (simpleParser)‚Äã\nfilename\nundefined\ncontentType\ncontentDisposition\n\"attachment\"\nchecksum\ncontent\nsize\nheaders\nMap\ncontent\nBuffer\ncontentId\ncid\nrelated\ntrue\nMailParser(stream API)‚Äã\nMailParser\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nMailParseris aTransformstream in",
        "source_url": "https://nodemailer.com/extras/mailparser#license",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": "{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nconst{MailParser}=require(\"mailparser\");constparser=newMailParser(options);sourceStream.pipe(parser);\nMailParseris aTransformstream inobject modethat emits two kinds of objects via the'data'event:\nMailParser\nTransform\n'data'\n{ type: 'headers', headers: Map }‚Äì once, after the headers are parsed.\n{ type: 'headers', headers: Map }\n{ type: 'attachment', ... }‚Äì for every attachment (see below).\nThecontentproperty is aReadable¬†stream.\n{ type: 'attachment', ... }\ncontent\n{ type: 'text', html, text, textAsHtml }‚Äì once, containing the message bodies.\n{ type: 'text', html, text, textAsHtml }\nStream options‚Äã\nskipHtmlToText\nfalse\ntext\nmaxHtmlLengthToParse\nInfinity\nformatDateString\nundefined\nskipImageLinks\nfalse\nskipTextToHtml\nfalse\ntextAsHtml\nskipTextLinks\nfalse\ntext\nkeepDeliveryStatus\nfalse\nmessage/delivery-status\nIconv\niconv-lite\nkeepCidLinks\nfalse\nskipImageLinks: true\nAttachment stream object (type === 'attachment')‚Äã\ntype === 'attachment'\nIdentical shape to the buffered object shown earlier, except:\ncontentis aReadable stream.\ncontent\nYoumustcallattachment.release()when you are done. Parsing pauses until every attachment is released.\nattachment.release()\nrelatedis only availableafterparsing ends.\nrelated\nparser.on(\"data\",(part)=>{if(part.type===\"attachment\"){console.log(\"Attachment:\",part.filename);part.content.pipe(fs.createWriteStream(part.filename)).on(\"finish\",part.release);}});\nparser.on(\"data\",(part)=>{if(part.type===\"attachment\"){console.log(\"Attachment:\",part.filename);part.content.pipe(fs.createWriteStream(part.filename)).on(\"finish\",part.release);}});\nCharacter set decoding‚Äã\nMailParser relies oniconv‚Äëlitefor charset conversion, except forISO‚Äë2022‚ÄëJPandEUC‚ÄëJPwhich are handled byencoding‚Äëjapanese.\nIf you prefernode-iconv, inject it:\nnode-iconv\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nconst{Iconv}=",
        "source_url": "https://nodemailer.com/extras/mailparser#license",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": ", inject it:\nnode-iconv\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nconst{Iconv}=require('iconv');const{simpleParser}=require('mailparser');simpleParser(rfc822Message,{Iconv}).then(mail=>/* ‚Ä¶ */);\nLicense‚Äã\nDual‚Äëlicensed under theMIT LicenseorEUPL‚ÄØv1.1‚ÄØ+.\nInstallation\nsimpleParser()ParametersReturnedmail objectAttachment object (simpleParser)\nsimpleParser()\nParameters\nReturnedmail object\nAttachment object (simpleParser)\nMailParser(stream API)Stream optionsAttachment stream object (type === 'attachment')\nMailParser\nStream options\nAttachment stream object (type === 'attachment')\ntype === 'attachment'\nCharacter set decoding\nLicense",
        "source_url": "https://nodemailer.com/extras/mailparser#license",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 176
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nSMTP Server\nSMTP Server\nCreate SMTP and LMTP server instances on the fly.smtp‚Äëserverisnota full‚Äëblown server application likeHarakabut a convenient way to add custom SMTP or LMTP listeners to your app. It is the successor of the server part of the now‚Äëdeprecatedsimplesmtpmodule. For a matching SMTP client, seesmtp‚Äëconnection.\nUsage‚Äã\n1¬†‚Äî¬†Install‚Äã\nnpm install smtp-server --save\nnpm install smtp-server --save\n2¬†‚Äî¬†Require in your script‚Äã\nconst{SMTPServer}=require(\"smtp-server\");\nconst{SMTPServer}=require(\"smtp-server\");\n3¬†‚Äî¬†Create a server instance‚Äã\nconstserver=newSMTPServer(options);\nconstserver=newSMTPServer(options);\n4¬†‚Äî¬†Start listening‚Äã\nserver.listen(port[,host][,callback]);\nserver.listen(port[,host][,callback]);\n5¬†‚Äî¬†Shut down‚Äã\nserver.close(callback);\nserver.close(callback);\nOptions reference‚Äã\nBoolean\nfalse\nSTARTTLS\nfalse\nString\nos.hostname()\nString\nNumber\n0\n0\nBoolean\nfalse\nstream.sizeExceeded\nString[]\n['PLAIN', 'LOGIN']\n'XOAUTH2'\n'CRAM-MD5'\nBoolean\nfalse\nString[]\n['AUTH']\nBoolean\nfalse\nBoolean\ntrue\nENHANCEDSTATUSCODES\nEHLO\nBoolean\ntrue\nDSN\nEHLO\nBoolean\nfalse\nBoolean\nfalse\nMap | Object\nBoolean | Object\nfalse\ntrue\nconsole\nNumber\nInfinity\nBoolean\nfalse\nBoolean\nfalse\nBoolean\nfalse\nNumber\n60_000\nNumber\n30_000\nclose()\nFunction\nObject\n.reverse\ndns\ndns.reverse\nYou may also pass anynet.createServeroptions and, whensecureistrue, anytls.createServeroptions.\nnet.createServer\nsecure\ntrue\ntls.createServer\nTLS and STARTTLS‚Äã\nIf you enable TLS (secure: true)orleaveSTARTTLSenabled, ship a proper certificate viakey,cert, and optionallyca. Otherwisesmtp‚Äëserverfalls back to a self‚Äësigned cert forlocalhost, which almost",
        "source_url": "https://nodemailer.com/extras/smtp-server#usage",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "‚Äã\nIf you enable TLS (secure: true)orleaveSTARTTLSenabled, ship a proper certificate viakey,cert, and optionallyca. Otherwisesmtp‚Äëserverfalls back to a self‚Äësigned cert forlocalhost, which almost every client rejects.\nsecure: true\nSTARTTLS\nkey\ncert\nca\nlocalhost\nconstfs=require(\"fs\");constserver=newSMTPServer({secure:true,key:fs.readFileSync(\"private.key\"),cert:fs.readFileSync(\"server.crt\"),});server.listen(465);\nconstfs=require(\"fs\");constserver=newSMTPServer({secure:true,key:fs.readFileSync(\"private.key\"),cert:fs.readFileSync(\"server.crt\"),});server.listen(465);\nHandling errors‚Äã\nAttach anerrorlistener to surface server errors:\nerror\nserver.on(\"error\",(err)=>{console.error(\"SMTP Server error:\",err.message);});\nserver.on(\"error\",(err)=>{console.error(\"SMTP Server error:\",err.message);});\nHandling authentication (onAuth)‚Äã\nonAuth\nconstserver=newSMTPServer({onAuth(auth,session,callback){// auth.method ‚Üí 'PLAIN', 'LOGIN', 'XOAUTH2', or 'CRAM-MD5'// Return `callback(err)` to reject, `callback(null, response)` to accept},});\nconstserver=newSMTPServer({onAuth(auth,session,callback){// auth.method ‚Üí 'PLAIN', 'LOGIN', 'XOAUTH2', or 'CRAM-MD5'// Return `callback(err)` to reject, `callback(null, response)` to accept},});\nPassword‚Äëbased (PLAIN / LOGIN)‚Äã\nonAuth(auth,session,cb){if(auth.username!==\"alice\"||auth.password!==\"s3cr3t\"){returncb(newError(\"Invalid username or password\"));}cb(null,{user:auth.username});}\nonAuth(auth,session,cb){if(auth.username!==\"alice\"||auth.password!==\"s3cr3t\"){returncb(newError(\"Invalid username or password\"));}cb(null,{user:auth.username});}\nOAuth¬†2 (XOAUTH2)‚Äã\nXOAUTH2\nconstserver=newSMTPServer({authMethods:[\"XOAUTH2\"],onAuth(auth,session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth",
        "source_url": "https://nodemailer.com/extras/smtp-server#usage",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": ",session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth.username});},});\nconstserver=newSMTPServer({authMethods:[\"XOAUTH2\"],onAuth(auth,session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth.username});},});\nValidating client connection (onConnect/onClose)‚Äã\nonConnect\nonClose\nconstserver=newSMTPServer({onConnect(session,cb){if(session.remoteAddress===\"127.0.0.1\"){returncb(newError(\"Connections from localhost are not allowed\"));}cb();// accept},onClose(session){console.log(`Connection from${session.remoteAddress}closed`);},});\nconstserver=newSMTPServer({onConnect(session,cb){if(session.remoteAddress===\"127.0.0.1\"){returncb(newError(\"Connections from localhost are not allowed\"));}cb();// accept},onClose(session){console.log(`Connection from${session.remoteAddress}closed`);},});\nValidating TLS information (onSecure)‚Äã\nonSecure\nonSecure(socket,session,cb){if(session.servername!==\"mail.example.com\"){returncb(newError(\"SNI mismatch\"));}cb();}\nonSecure(socket,session,cb){if(session.servername!==\"mail.example.com\"){returncb(newError(\"SNI mismatch\"));}cb();}\nValidating sender (onMailFrom)‚Äã\nonMailFrom\nonMailFrom(address,session,cb){if(!address.address.endsWith(\"@example.com\")){returncb(Object.assign(newError(\"Relay denied\"),{responseCode:553}));}cb();}\nonMailFrom(address,session,cb){if(!address.address.endsWith(\"@example.com\")){returncb(Object.assign(newError(\"Relay denied\"),{responseCode:553}));}cb();}\nValidating recipients (onRcptTo)‚Äã\nonRcptTo\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(new",
        "source_url": "https://nodemailer.com/extras/smtp-server#usage",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "cptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nProcessing incoming messages (onData)‚Äã\nonData\nonData(stream,session,cb){constwrite=require(\"fs\").createWriteStream(\"/tmp/message.eml\");stream.pipe(write);stream.on(\"end\",()=>cb(null,\"Queued\"));}\nonData(stream,session,cb){constwrite=require(\"fs\").createWriteStream(\"/tmp/message.eml\");stream.pipe(write);stream.on(\"end\",()=>cb(null,\"Queued\"));}\nsmtp‚Äëserverstreams your messageverbatim‚Äî noReceived:header is added. Add one yourself if you need full RFC¬†5321 compliance.\nReceived:\nUsing the SIZE extension‚Äã\nSet thesizeoption to advertise a limit, then checkstream.sizeExceededinonData:\nsize\nstream.sizeExceeded\nonData\nconstserver=newSMTPServer({size:1024*1024,// 1¬†MiBonData(s,sess,cb){s.on(\"end\",()=>{if(s.sizeExceeded){consterr=Object.assign(newError(\"Message too large\"),{responseCode:552});returncb(err);}cb(null,\"OK\");});},});\nconstserver=newSMTPServer({size:1024*1024,// 1¬†MiBonData(s,sess,cb){s.on(\"end\",()=>{if(s.sizeExceeded){consterr=Object.assign(newError(\"Message too large\"),{responseCode:552});returncb(err);}cb(null,\"OK\");});},});\nUsing LMTP‚Äã\nconstserver=newSMTPServer({lmtp:true,onData(stream,session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):`<${rcpt.address}> accepted`));cb(null,replies);});},});\nconstserver=newSMTPServer({lmtp:true,onData(stream,session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):",
        "source_url": "https://nodemailer.com/extras/smtp-server#usage",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": ",session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):`<${rcpt.address}> accepted`));cb(null,replies);});},});\nSession object‚Äã\nString\nString\nString\nremoteAddress\ndisableReverseLookup\n\"HELO\" | \"EHLO\" | \"LHLO\"\nString\nObject\nmailFrom\nrcptTo\ndsn\nany\nonAuth\nNumber\n\"SMTP\" | \"ESMTP\" | \"ESMTPA\" ‚Ä¶\nReceived:\nEnvelope object‚Äã\nThesession.envelopeobject contains transaction-specific data:\nsession.envelope\n{\"mailFrom\": {\"address\": \"sender@example.com\",\"args\": { \"SIZE\": \"12345\", \"RET\": \"HDRS\" },\"dsn\": { \"ret\": \"HDRS\", \"envid\": \"abc123\" }},\"rcptTo\": [{\"address\": \"user1@example.com\",\"args\": { \"NOTIFY\": \"SUCCESS,FAILURE\" },\"dsn\": { \"notify\": [\"SUCCESS\", \"FAILURE\"], \"orcpt\": \"rfc822;user1@example.com\" }}],\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\"}}\n{\"mailFrom\": {\"address\": \"sender@example.com\",\"args\": { \"SIZE\": \"12345\", \"RET\": \"HDRS\" },\"dsn\": { \"ret\": \"HDRS\", \"envid\": \"abc123\" }},\"rcptTo\": [{\"address\": \"user1@example.com\",\"args\": { \"NOTIFY\": \"SUCCESS,FAILURE\" },\"dsn\": { \"notify\": [\"SUCCESS\", \"FAILURE\"], \"orcpt\": \"rfc822;user1@example.com\" }}],\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\"}}\nObject\nObject[]\nObject\nAddress object‚Äã\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\":",
        "source_url": "https://nodemailer.com/extras/smtp-server#usage",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part6",
        "text": "123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\nMAIL FROM:\nRCPT TO:\nDSN Object Properties‚Äã\nString\n'FULL'\n'HDRS'\nString\nString[]\nString\nEnhanced Status Codes (RFC 2034/3463)‚Äã\nsmtp‚ÄëserversupportsEnhanced Status Codesas defined in RFC 2034 and RFC 3463. When enabled, all SMTP responses include enhanced status codes in the formatX.Y.Z:\nX.Y.Z\n250 2.1.0 Accepted        ‚Üê Enhanced status code: 2.1.0550 5.1.1 Mailbox unavailable ‚Üê Enhanced status code: 5.1.1\n250 2.1.0 Accepted        ‚Üê Enhanced status code: 2.1.0550 5.1.1 Mailbox unavailable ‚Üê Enhanced status code: 5.1.1\nEnabling Enhanced Status Codes‚Äã\nTo enable enhanced status codes (they are disabled by default):\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:false,// Enable enhanced status codesonMailFrom(address,session,callback){callback();// Response: \"250 2.1.0 Accepted\" (with enhanced code)},});\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:false,// Enable enhanced status codesonMailFrom(address,session,callback){callback();// Response: \"250 2.1.0 Accepted\" (with enhanced code)},});\nDisabling Enhanced Status Codes‚Äã\nEnhanced status codes are disabled by default, but you can explicitly disable them:\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:true,// Explicitly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:true,// Explicitly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nEnhanced Status Code Examples‚Äã\n250\n2.0.0\n250\n2.",
        "source_url": "https://nodemailer.com/extras/smtp-server#usage",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part7",
        "text": "ly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nEnhanced Status Code Examples‚Äã\n250\n2.0.0\n250\n2.1.0\n250\n2.1.5\n250\n2.6.0\n501\n5.5.4\n550\n5.1.1\n552\n5.2.2\nDSN (Delivery Status Notification) Support‚Äã\nsmtp‚Äëserverfully supportsDSN parametersas defined in RFC 3461, allowing clients to request delivery status notifications.\nDSN functionality requiresdelivery status notificationsto be enabled. Since delivery status notifications are disabled by default, you must sethideDSN: falseto use DSN features.\nhideDSN: false\nDSN Parameters‚Äã\nRET=FULLorRET=HDRS‚Äî Return full message or headers only in DSN\nRET=FULL\nRET=HDRS\nENVID=<envelope-id>‚Äî Envelope identifier for tracking\nENVID=<envelope-id>\n// Client sends: MAIL FROM:<sender@example.com> RET=FULL ENVID=abc123\n// Client sends: MAIL FROM:<sender@example.com> RET=FULL ENVID=abc123\nNOTIFY=SUCCESS,FAILURE,DELAY,NEVER‚Äî When to send DSN\nNOTIFY=SUCCESS,FAILURE,DELAY,NEVER\nORCPT=<original-recipient>‚Äî Original recipient for tracking\nORCPT=<original-recipient>\n// Client sends: RCPT TO:<user@example.com> NOTIFY=SUCCESS,FAILURE ORCPT=rfc822;user@example.com\n// Client sends: RCPT TO:<user@example.com> NOTIFY=SUCCESS,FAILURE ORCPT=rfc822;user@example.com\nAccessing DSN Parameters‚Äã\nDSN parameters are available in your callback handlers:\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){// Access DSN parameters from MAIL FROMconstret=session.envelope.dsn.ret;// 'FULL' or 'HDRS'constenvid=session.envelope.dsn.envid;// Envelope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE',",
        "source_url": "https://nodemailer.com/extras/smtp-server#usage",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part8",
        "text": "velope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE', 'DELAY']constorcpt=address.dsn.orcpt;// Original recipientconsole.log(`NOTIFY:${notify.join(\",\")}, ORCPT:${orcpt}`);callback();},});\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){// Access DSN parameters from MAIL FROMconstret=session.envelope.dsn.ret;// 'FULL' or 'HDRS'constenvid=session.envelope.dsn.envid;// Envelope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE', 'DELAY']constorcpt=address.dsn.orcpt;// Original recipientconsole.log(`NOTIFY:${notify.join(\",\")}, ORCPT:${orcpt}`);callback();},});\nDSN Parameter Validation‚Äã\nsmtp‚Äëserverautomatically validates DSN parameters:\nRETmust beFULLorHDRS\nRET\nFULL\nHDRS\nNOTIFYmust beSUCCESS,FAILURE,DELAY, orNEVER\nNOTIFY\nSUCCESS\nFAILURE\nDELAY\nNEVER\nNOTIFY=NEVERcannot be combined with other values\nNOTIFY=NEVER\nInvalid parameters return appropriate error responses with enhanced status codes\nComplete DSN Example‚Äã\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){const{ret,envid}=session.envelope.dsn;console.log(`Mail from${address.address}, RET=${ret}, ENVID=${envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`Rcpt to${address.address}, NOTIFY=${notify.join(\",\")}, ORCPT=${orcpt}`);callback();},onData(stream,session,callback){// Process message with DSN contextconst{dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nconstserver=newSMTPServer({hide",
        "source_url": "https://nodemailer.com/extras/smtp-server#usage",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part9",
        "text": "dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){const{ret,envid}=session.envelope.dsn;console.log(`Mail from${address.address}, RET=${ret}, ENVID=${envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`Rcpt to${address.address}, NOTIFY=${notify.join(\",\")}, ORCPT=${orcpt}`);callback();},onData(stream,session,callback){// Process message with DSN contextconst{dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nProduction DSN Implementation Example‚Äã\nHere's a complete example showing how to implement DSN notifications using nodemailer:\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransporter({host:\"smtp.example.com\",port:587,secure:false,auth:{user:\"dsn-sender@example.com\",pass:\"your-password\",},});// DSN notification generatorclassDSNNotifier{constructor(transporter){this.transporter=transporter;}asyncsendSuccessNotification(envelope,messageId,deliveryTime){// Only send if SUCCESS notification was requestedconstneedsSuccessNotification=envelope.rcptTo.some((rcpt)=>rcpt.dsn.notify&&rcpt.dsn.notify.includes(\"SUCCESS\"));if(!needsSuccessNotification||!envelope.mailFrom.address){return;}constdsnMessage=this.generateDSNMessage({action:\"delivered\",status:\"2.0.0\",envelope,messageId,deliveryTime,diagnosticCode:\"smtp; 250 2.0.0 Message accepted for delivery\",});awaitthis.transporter.sendMail({from:\"postmaster@example.com\",to:envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSN",
        "source_url": "https://nodemailer.com/extras/smtp-server#usage",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part10",
        "text": ":envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSNMessage({action,status,envelope,messageId,deliveryTime,diagnosticCode}){const{dsn}=envelope;consttimestamp=deliveryTime||newDate().toISOString();// Generate RFC 3464 compliant delivery status notificationconsttext=`This is an automatically generated Delivery Status Notification.Original Message Details:- Message ID:${messageId}- Envelope ID:${dsn.envid||\"Not provided\"}- Sender:${envelope.mailFrom.address}- Recipients:${envelope.rcptTo.map((r)=>r.address).join(\", \")}- Action:${action}- Status:${status}- Time:${timestamp}${action===\"delivered\"?\"Your message has been successfully delivered to all recipients.\":\"Delivery failed for one or more recipients.\"}`;return{text};}}// Create DSN notifier instanceconstdsnNotifier=newDSNNotifier(dsnTransporter);// SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${address.address}, RET=${dsn.ret}, ENVID=${dsn.envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`RCPT TO:${address.address}, NOTIFY=${notify?.join(\",\")}, ORCPT=${orcpt}`);callback();},asynconData(stream,session,callback){constmessageId=`msg-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;stream.on(\"end\",async()=>{try{// Simulate message deliveryconstdeliveryTime=newDate();// Send DSN success notification if requestedawaitdsnNotifier.sendSuccessNotification(session.envelope,messageId,deliveryTime);callback(null,`Message${messageId}accepted for delivery`);}catch(error){callback(error);}});stream.resume();},});server.listen(2525,()=>{console.log(\"DSN-enabled SMTP server listening on port 2525\");});\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransport",
        "source_url": "https://nodemailer.com/extras/smtp-server#usage",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part11",
        "text": "DSN-enabled SMTP server listening on port 2525\");});\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransporter({host:\"smtp.example.com\",port:587,secure:false,auth:{user:\"dsn-sender@example.com\",pass:\"your-password\",},});// DSN notification generatorclassDSNNotifier{constructor(transporter){this.transporter=transporter;}asyncsendSuccessNotification(envelope,messageId,deliveryTime){// Only send if SUCCESS notification was requestedconstneedsSuccessNotification=envelope.rcptTo.some((rcpt)=>rcpt.dsn.notify&&rcpt.dsn.notify.includes(\"SUCCESS\"));if(!needsSuccessNotification||!envelope.mailFrom.address){return;}constdsnMessage=this.generateDSNMessage({action:\"delivered\",status:\"2.0.0\",envelope,messageId,deliveryTime,diagnosticCode:\"smtp; 250 2.0.0 Message accepted for delivery\",});awaitthis.transporter.sendMail({from:\"postmaster@example.com\",to:envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSNMessage({action,status,envelope,messageId,deliveryTime,diagnosticCode}){const{dsn}=envelope;consttimestamp=deliveryTime||newDate().toISOString();// Generate RFC 3464 compliant delivery status notificationconsttext=`This is an automatically generated Delivery Status Notification.Original Message Details:- Message ID:${messageId}- Envelope ID:${dsn.envid||\"Not provided\"}- Sender:${envelope.mailFrom.address}- Recipients:${envelope.rcptTo.map((r)=>r.address).join(\", \")}- Action:${action}- Status:${status}- Time:${timestamp}${action===\"delivered\"?\"Your message has been successfully delivered to all recipients.\":\"Delivery failed for one or more recipients.\"}`;return{text};}}// Create DSN notifier instanceconstdsnNotifier=newDSNNotifier(dsnTransporter);// SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${",
        "source_url": "https://nodemailer.com/extras/smtp-server#usage",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part12",
        "text": " SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${address.address}, RET=${dsn.ret}, ENVID=${dsn.envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`RCPT TO:${address.address}, NOTIFY=${notify?.join(\",\")}, ORCPT=${orcpt}`);callback();},asynconData(stream,session,callback){constmessageId=`msg-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;stream.on(\"end\",async()=>{try{// Simulate message deliveryconstdeliveryTime=newDate();// Send DSN success notification if requestedawaitdsnNotifier.sendSuccessNotification(session.envelope,messageId,deliveryTime);callback(null,`Message${messageId}accepted for delivery`);}catch(error){callback(error);}});stream.resume();},});server.listen(2525,()=>{console.log(\"DSN-enabled SMTP server listening on port 2525\");});\nThis example demonstrates:\nComplete DSN workflowfrom parameter parsing to notification sending\nRFC-compliant DSN messageswith proper headers and content\nConditional notificationsbased on NOTIFY parameters\nIntegration with nodemailerfor sending DSN notifications\nProduction-ready structurewith error handling\nSupported commands and extensions‚Äã\nCommands‚Äã\nEHLO/HELO\nEHLO\nHELO\nAUTHLOGIN¬∑PLAIN¬∑XOAUTH2‚Ä†¬†¬∑CRAM‚ÄëMD5‚Ä†\nAUTH\nLOGIN\nPLAIN\nXOAUTH2\nCRAM‚ÄëMD5\nMAIL/RCPT/DATA\nMAIL\nRCPT\nDATA\nRSET/NOOP/QUIT/VRFY\nRSET\nNOOP\nQUIT\nVRFY\nHELP(returns RFC¬†5321 URL)\nHELP\nSTARTTLS\nSTARTTLS\n‚Ä†XOAUTH2andCRAM‚ÄëMD5must be enabled viaauthMethods.\nXOAUTH2\nCRAM‚ÄëMD5\nauthMethods\nExtensions‚Äã\nPIPELINING\nPIPELINING\n8BITMIME\n8BITMIME\nSMTPUTF8\nSMTPUTF8\nSIZE\nSIZE\nDSN(RFC 3461)\nDSN\nENHANCEDSTATUSCODES(RFC 2034/3463)\nENH",
        "source_url": "https://nodemailer.com/extras/smtp-server#usage",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part13",
        "text": "8BITMIME\n8BITMIME\nSMTPUTF8\nSMTPUTF8\nSIZE\nSIZE\nDSN(RFC 3461)\nDSN\nENHANCEDSTATUSCODES(RFC 2034/3463)\nENHANCEDSTATUSCODES\nTheCHUNKINGextension isnotimplemented.\nCHUNKING\nLicense‚Äã\nMIT\nUsage1¬†‚Äî¬†Install2¬†‚Äî¬†Require in your script3¬†‚Äî¬†Create a server instance4¬†‚Äî¬†Start listening5¬†‚Äî¬†Shut down\n1¬†‚Äî¬†Install\n2¬†‚Äî¬†Require in your script\n3¬†‚Äî¬†Create a server instance\n4¬†‚Äî¬†Start listening\n5¬†‚Äî¬†Shut down\nOptions reference\nTLS and STARTTLS\nHandling errors\nHandling authentication (onAuth)Password‚Äëbased (PLAIN / LOGIN)OAuth¬†2 (XOAUTH2)\nonAuth\nPassword‚Äëbased (PLAIN / LOGIN)\nOAuth¬†2 (XOAUTH2)\nXOAUTH2\nValidating client connection (onConnect/onClose)\nonConnect\nonClose\nValidating TLS information (onSecure)\nonSecure\nValidating sender (onMailFrom)\nonMailFrom\nValidating recipients (onRcptTo)\nonRcptTo\nProcessing incoming messages (onData)\nonData\nUsing the SIZE extension\nUsing LMTP\nSession object\nEnvelope object\nAddress objectDSN Object Properties\nDSN Object Properties\nEnhanced Status Codes (RFC 2034/3463)Enabling Enhanced Status CodesDisabling Enhanced Status CodesEnhanced Status Code Examples\nEnabling Enhanced Status Codes\nDisabling Enhanced Status Codes\nEnhanced Status Code Examples\nDSN (Delivery Status Notification) SupportDSN ParametersAccessing DSN ParametersDSN Parameter ValidationComplete DSN ExampleProduction DSN Implementation Example\nDSN Parameters\nAccessing DSN Parameters\nDSN Parameter Validation\nComplete DSN Example\nProduction DSN Implementation Example\nSupported commands and extensionsCommandsExtensions\nCommands\nExtensions\nLicense",
        "source_url": "https://nodemailer.com/extras/smtp-server#usage",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 412
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nSMTP Server\nSMTP Server\nCreate SMTP and LMTP server instances on the fly.smtp‚Äëserverisnota full‚Äëblown server application likeHarakabut a convenient way to add custom SMTP or LMTP listeners to your app. It is the successor of the server part of the now‚Äëdeprecatedsimplesmtpmodule. For a matching SMTP client, seesmtp‚Äëconnection.\nUsage‚Äã\n1¬†‚Äî¬†Install‚Äã\nnpm install smtp-server --save\nnpm install smtp-server --save\n2¬†‚Äî¬†Require in your script‚Äã\nconst{SMTPServer}=require(\"smtp-server\");\nconst{SMTPServer}=require(\"smtp-server\");\n3¬†‚Äî¬†Create a server instance‚Äã\nconstserver=newSMTPServer(options);\nconstserver=newSMTPServer(options);\n4¬†‚Äî¬†Start listening‚Äã\nserver.listen(port[,host][,callback]);\nserver.listen(port[,host][,callback]);\n5¬†‚Äî¬†Shut down‚Äã\nserver.close(callback);\nserver.close(callback);\nOptions reference‚Äã\nBoolean\nfalse\nSTARTTLS\nfalse\nString\nos.hostname()\nString\nNumber\n0\n0\nBoolean\nfalse\nstream.sizeExceeded\nString[]\n['PLAIN', 'LOGIN']\n'XOAUTH2'\n'CRAM-MD5'\nBoolean\nfalse\nString[]\n['AUTH']\nBoolean\nfalse\nBoolean\ntrue\nENHANCEDSTATUSCODES\nEHLO\nBoolean\ntrue\nDSN\nEHLO\nBoolean\nfalse\nBoolean\nfalse\nMap | Object\nBoolean | Object\nfalse\ntrue\nconsole\nNumber\nInfinity\nBoolean\nfalse\nBoolean\nfalse\nBoolean\nfalse\nNumber\n60_000\nNumber\n30_000\nclose()\nFunction\nObject\n.reverse\ndns\ndns.reverse\nYou may also pass anynet.createServeroptions and, whensecureistrue, anytls.createServeroptions.\nnet.createServer\nsecure\ntrue\ntls.createServer\nTLS and STARTTLS‚Äã\nIf you enable TLS (secure: true)orleaveSTARTTLSenabled, ship a proper certificate viakey,cert, and optionallyca. Otherwisesmtp‚Äëserverfalls back to a self‚Äësigned cert forlocalhost, which almost",
        "source_url": "https://nodemailer.com/extras/smtp-server#1install",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "‚Äã\nIf you enable TLS (secure: true)orleaveSTARTTLSenabled, ship a proper certificate viakey,cert, and optionallyca. Otherwisesmtp‚Äëserverfalls back to a self‚Äësigned cert forlocalhost, which almost every client rejects.\nsecure: true\nSTARTTLS\nkey\ncert\nca\nlocalhost\nconstfs=require(\"fs\");constserver=newSMTPServer({secure:true,key:fs.readFileSync(\"private.key\"),cert:fs.readFileSync(\"server.crt\"),});server.listen(465);\nconstfs=require(\"fs\");constserver=newSMTPServer({secure:true,key:fs.readFileSync(\"private.key\"),cert:fs.readFileSync(\"server.crt\"),});server.listen(465);\nHandling errors‚Äã\nAttach anerrorlistener to surface server errors:\nerror\nserver.on(\"error\",(err)=>{console.error(\"SMTP Server error:\",err.message);});\nserver.on(\"error\",(err)=>{console.error(\"SMTP Server error:\",err.message);});\nHandling authentication (onAuth)‚Äã\nonAuth\nconstserver=newSMTPServer({onAuth(auth,session,callback){// auth.method ‚Üí 'PLAIN', 'LOGIN', 'XOAUTH2', or 'CRAM-MD5'// Return `callback(err)` to reject, `callback(null, response)` to accept},});\nconstserver=newSMTPServer({onAuth(auth,session,callback){// auth.method ‚Üí 'PLAIN', 'LOGIN', 'XOAUTH2', or 'CRAM-MD5'// Return `callback(err)` to reject, `callback(null, response)` to accept},});\nPassword‚Äëbased (PLAIN / LOGIN)‚Äã\nonAuth(auth,session,cb){if(auth.username!==\"alice\"||auth.password!==\"s3cr3t\"){returncb(newError(\"Invalid username or password\"));}cb(null,{user:auth.username});}\nonAuth(auth,session,cb){if(auth.username!==\"alice\"||auth.password!==\"s3cr3t\"){returncb(newError(\"Invalid username or password\"));}cb(null,{user:auth.username});}\nOAuth¬†2 (XOAUTH2)‚Äã\nXOAUTH2\nconstserver=newSMTPServer({authMethods:[\"XOAUTH2\"],onAuth(auth,session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth",
        "source_url": "https://nodemailer.com/extras/smtp-server#1install",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": ",session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth.username});},});\nconstserver=newSMTPServer({authMethods:[\"XOAUTH2\"],onAuth(auth,session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth.username});},});\nValidating client connection (onConnect/onClose)‚Äã\nonConnect\nonClose\nconstserver=newSMTPServer({onConnect(session,cb){if(session.remoteAddress===\"127.0.0.1\"){returncb(newError(\"Connections from localhost are not allowed\"));}cb();// accept},onClose(session){console.log(`Connection from${session.remoteAddress}closed`);},});\nconstserver=newSMTPServer({onConnect(session,cb){if(session.remoteAddress===\"127.0.0.1\"){returncb(newError(\"Connections from localhost are not allowed\"));}cb();// accept},onClose(session){console.log(`Connection from${session.remoteAddress}closed`);},});\nValidating TLS information (onSecure)‚Äã\nonSecure\nonSecure(socket,session,cb){if(session.servername!==\"mail.example.com\"){returncb(newError(\"SNI mismatch\"));}cb();}\nonSecure(socket,session,cb){if(session.servername!==\"mail.example.com\"){returncb(newError(\"SNI mismatch\"));}cb();}\nValidating sender (onMailFrom)‚Äã\nonMailFrom\nonMailFrom(address,session,cb){if(!address.address.endsWith(\"@example.com\")){returncb(Object.assign(newError(\"Relay denied\"),{responseCode:553}));}cb();}\nonMailFrom(address,session,cb){if(!address.address.endsWith(\"@example.com\")){returncb(Object.assign(newError(\"Relay denied\"),{responseCode:553}));}cb();}\nValidating recipients (onRcptTo)‚Äã\nonRcptTo\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(new",
        "source_url": "https://nodemailer.com/extras/smtp-server#1install",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "cptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nProcessing incoming messages (onData)‚Äã\nonData\nonData(stream,session,cb){constwrite=require(\"fs\").createWriteStream(\"/tmp/message.eml\");stream.pipe(write);stream.on(\"end\",()=>cb(null,\"Queued\"));}\nonData(stream,session,cb){constwrite=require(\"fs\").createWriteStream(\"/tmp/message.eml\");stream.pipe(write);stream.on(\"end\",()=>cb(null,\"Queued\"));}\nsmtp‚Äëserverstreams your messageverbatim‚Äî noReceived:header is added. Add one yourself if you need full RFC¬†5321 compliance.\nReceived:\nUsing the SIZE extension‚Äã\nSet thesizeoption to advertise a limit, then checkstream.sizeExceededinonData:\nsize\nstream.sizeExceeded\nonData\nconstserver=newSMTPServer({size:1024*1024,// 1¬†MiBonData(s,sess,cb){s.on(\"end\",()=>{if(s.sizeExceeded){consterr=Object.assign(newError(\"Message too large\"),{responseCode:552});returncb(err);}cb(null,\"OK\");});},});\nconstserver=newSMTPServer({size:1024*1024,// 1¬†MiBonData(s,sess,cb){s.on(\"end\",()=>{if(s.sizeExceeded){consterr=Object.assign(newError(\"Message too large\"),{responseCode:552});returncb(err);}cb(null,\"OK\");});},});\nUsing LMTP‚Äã\nconstserver=newSMTPServer({lmtp:true,onData(stream,session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):`<${rcpt.address}> accepted`));cb(null,replies);});},});\nconstserver=newSMTPServer({lmtp:true,onData(stream,session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):",
        "source_url": "https://nodemailer.com/extras/smtp-server#1install",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": ",session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):`<${rcpt.address}> accepted`));cb(null,replies);});},});\nSession object‚Äã\nString\nString\nString\nremoteAddress\ndisableReverseLookup\n\"HELO\" | \"EHLO\" | \"LHLO\"\nString\nObject\nmailFrom\nrcptTo\ndsn\nany\nonAuth\nNumber\n\"SMTP\" | \"ESMTP\" | \"ESMTPA\" ‚Ä¶\nReceived:\nEnvelope object‚Äã\nThesession.envelopeobject contains transaction-specific data:\nsession.envelope\n{\"mailFrom\": {\"address\": \"sender@example.com\",\"args\": { \"SIZE\": \"12345\", \"RET\": \"HDRS\" },\"dsn\": { \"ret\": \"HDRS\", \"envid\": \"abc123\" }},\"rcptTo\": [{\"address\": \"user1@example.com\",\"args\": { \"NOTIFY\": \"SUCCESS,FAILURE\" },\"dsn\": { \"notify\": [\"SUCCESS\", \"FAILURE\"], \"orcpt\": \"rfc822;user1@example.com\" }}],\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\"}}\n{\"mailFrom\": {\"address\": \"sender@example.com\",\"args\": { \"SIZE\": \"12345\", \"RET\": \"HDRS\" },\"dsn\": { \"ret\": \"HDRS\", \"envid\": \"abc123\" }},\"rcptTo\": [{\"address\": \"user1@example.com\",\"args\": { \"NOTIFY\": \"SUCCESS,FAILURE\" },\"dsn\": { \"notify\": [\"SUCCESS\", \"FAILURE\"], \"orcpt\": \"rfc822;user1@example.com\" }}],\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\"}}\nObject\nObject[]\nObject\nAddress object‚Äã\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\":",
        "source_url": "https://nodemailer.com/extras/smtp-server#1install",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part6",
        "text": "123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\nMAIL FROM:\nRCPT TO:\nDSN Object Properties‚Äã\nString\n'FULL'\n'HDRS'\nString\nString[]\nString\nEnhanced Status Codes (RFC 2034/3463)‚Äã\nsmtp‚ÄëserversupportsEnhanced Status Codesas defined in RFC 2034 and RFC 3463. When enabled, all SMTP responses include enhanced status codes in the formatX.Y.Z:\nX.Y.Z\n250 2.1.0 Accepted        ‚Üê Enhanced status code: 2.1.0550 5.1.1 Mailbox unavailable ‚Üê Enhanced status code: 5.1.1\n250 2.1.0 Accepted        ‚Üê Enhanced status code: 2.1.0550 5.1.1 Mailbox unavailable ‚Üê Enhanced status code: 5.1.1\nEnabling Enhanced Status Codes‚Äã\nTo enable enhanced status codes (they are disabled by default):\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:false,// Enable enhanced status codesonMailFrom(address,session,callback){callback();// Response: \"250 2.1.0 Accepted\" (with enhanced code)},});\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:false,// Enable enhanced status codesonMailFrom(address,session,callback){callback();// Response: \"250 2.1.0 Accepted\" (with enhanced code)},});\nDisabling Enhanced Status Codes‚Äã\nEnhanced status codes are disabled by default, but you can explicitly disable them:\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:true,// Explicitly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:true,// Explicitly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nEnhanced Status Code Examples‚Äã\n250\n2.0.0\n250\n2.",
        "source_url": "https://nodemailer.com/extras/smtp-server#1install",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part7",
        "text": "ly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nEnhanced Status Code Examples‚Äã\n250\n2.0.0\n250\n2.1.0\n250\n2.1.5\n250\n2.6.0\n501\n5.5.4\n550\n5.1.1\n552\n5.2.2\nDSN (Delivery Status Notification) Support‚Äã\nsmtp‚Äëserverfully supportsDSN parametersas defined in RFC 3461, allowing clients to request delivery status notifications.\nDSN functionality requiresdelivery status notificationsto be enabled. Since delivery status notifications are disabled by default, you must sethideDSN: falseto use DSN features.\nhideDSN: false\nDSN Parameters‚Äã\nRET=FULLorRET=HDRS‚Äî Return full message or headers only in DSN\nRET=FULL\nRET=HDRS\nENVID=<envelope-id>‚Äî Envelope identifier for tracking\nENVID=<envelope-id>\n// Client sends: MAIL FROM:<sender@example.com> RET=FULL ENVID=abc123\n// Client sends: MAIL FROM:<sender@example.com> RET=FULL ENVID=abc123\nNOTIFY=SUCCESS,FAILURE,DELAY,NEVER‚Äî When to send DSN\nNOTIFY=SUCCESS,FAILURE,DELAY,NEVER\nORCPT=<original-recipient>‚Äî Original recipient for tracking\nORCPT=<original-recipient>\n// Client sends: RCPT TO:<user@example.com> NOTIFY=SUCCESS,FAILURE ORCPT=rfc822;user@example.com\n// Client sends: RCPT TO:<user@example.com> NOTIFY=SUCCESS,FAILURE ORCPT=rfc822;user@example.com\nAccessing DSN Parameters‚Äã\nDSN parameters are available in your callback handlers:\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){// Access DSN parameters from MAIL FROMconstret=session.envelope.dsn.ret;// 'FULL' or 'HDRS'constenvid=session.envelope.dsn.envid;// Envelope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE',",
        "source_url": "https://nodemailer.com/extras/smtp-server#1install",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part8",
        "text": "velope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE', 'DELAY']constorcpt=address.dsn.orcpt;// Original recipientconsole.log(`NOTIFY:${notify.join(\",\")}, ORCPT:${orcpt}`);callback();},});\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){// Access DSN parameters from MAIL FROMconstret=session.envelope.dsn.ret;// 'FULL' or 'HDRS'constenvid=session.envelope.dsn.envid;// Envelope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE', 'DELAY']constorcpt=address.dsn.orcpt;// Original recipientconsole.log(`NOTIFY:${notify.join(\",\")}, ORCPT:${orcpt}`);callback();},});\nDSN Parameter Validation‚Äã\nsmtp‚Äëserverautomatically validates DSN parameters:\nRETmust beFULLorHDRS\nRET\nFULL\nHDRS\nNOTIFYmust beSUCCESS,FAILURE,DELAY, orNEVER\nNOTIFY\nSUCCESS\nFAILURE\nDELAY\nNEVER\nNOTIFY=NEVERcannot be combined with other values\nNOTIFY=NEVER\nInvalid parameters return appropriate error responses with enhanced status codes\nComplete DSN Example‚Äã\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){const{ret,envid}=session.envelope.dsn;console.log(`Mail from${address.address}, RET=${ret}, ENVID=${envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`Rcpt to${address.address}, NOTIFY=${notify.join(\",\")}, ORCPT=${orcpt}`);callback();},onData(stream,session,callback){// Process message with DSN contextconst{dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nconstserver=newSMTPServer({hide",
        "source_url": "https://nodemailer.com/extras/smtp-server#1install",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part9",
        "text": "dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){const{ret,envid}=session.envelope.dsn;console.log(`Mail from${address.address}, RET=${ret}, ENVID=${envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`Rcpt to${address.address}, NOTIFY=${notify.join(\",\")}, ORCPT=${orcpt}`);callback();},onData(stream,session,callback){// Process message with DSN contextconst{dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nProduction DSN Implementation Example‚Äã\nHere's a complete example showing how to implement DSN notifications using nodemailer:\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransporter({host:\"smtp.example.com\",port:587,secure:false,auth:{user:\"dsn-sender@example.com\",pass:\"your-password\",},});// DSN notification generatorclassDSNNotifier{constructor(transporter){this.transporter=transporter;}asyncsendSuccessNotification(envelope,messageId,deliveryTime){// Only send if SUCCESS notification was requestedconstneedsSuccessNotification=envelope.rcptTo.some((rcpt)=>rcpt.dsn.notify&&rcpt.dsn.notify.includes(\"SUCCESS\"));if(!needsSuccessNotification||!envelope.mailFrom.address){return;}constdsnMessage=this.generateDSNMessage({action:\"delivered\",status:\"2.0.0\",envelope,messageId,deliveryTime,diagnosticCode:\"smtp; 250 2.0.0 Message accepted for delivery\",});awaitthis.transporter.sendMail({from:\"postmaster@example.com\",to:envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSN",
        "source_url": "https://nodemailer.com/extras/smtp-server#1install",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part10",
        "text": ":envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSNMessage({action,status,envelope,messageId,deliveryTime,diagnosticCode}){const{dsn}=envelope;consttimestamp=deliveryTime||newDate().toISOString();// Generate RFC 3464 compliant delivery status notificationconsttext=`This is an automatically generated Delivery Status Notification.Original Message Details:- Message ID:${messageId}- Envelope ID:${dsn.envid||\"Not provided\"}- Sender:${envelope.mailFrom.address}- Recipients:${envelope.rcptTo.map((r)=>r.address).join(\", \")}- Action:${action}- Status:${status}- Time:${timestamp}${action===\"delivered\"?\"Your message has been successfully delivered to all recipients.\":\"Delivery failed for one or more recipients.\"}`;return{text};}}// Create DSN notifier instanceconstdsnNotifier=newDSNNotifier(dsnTransporter);// SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${address.address}, RET=${dsn.ret}, ENVID=${dsn.envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`RCPT TO:${address.address}, NOTIFY=${notify?.join(\",\")}, ORCPT=${orcpt}`);callback();},asynconData(stream,session,callback){constmessageId=`msg-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;stream.on(\"end\",async()=>{try{// Simulate message deliveryconstdeliveryTime=newDate();// Send DSN success notification if requestedawaitdsnNotifier.sendSuccessNotification(session.envelope,messageId,deliveryTime);callback(null,`Message${messageId}accepted for delivery`);}catch(error){callback(error);}});stream.resume();},});server.listen(2525,()=>{console.log(\"DSN-enabled SMTP server listening on port 2525\");});\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransport",
        "source_url": "https://nodemailer.com/extras/smtp-server#1install",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part11",
        "text": "DSN-enabled SMTP server listening on port 2525\");});\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransporter({host:\"smtp.example.com\",port:587,secure:false,auth:{user:\"dsn-sender@example.com\",pass:\"your-password\",},});// DSN notification generatorclassDSNNotifier{constructor(transporter){this.transporter=transporter;}asyncsendSuccessNotification(envelope,messageId,deliveryTime){// Only send if SUCCESS notification was requestedconstneedsSuccessNotification=envelope.rcptTo.some((rcpt)=>rcpt.dsn.notify&&rcpt.dsn.notify.includes(\"SUCCESS\"));if(!needsSuccessNotification||!envelope.mailFrom.address){return;}constdsnMessage=this.generateDSNMessage({action:\"delivered\",status:\"2.0.0\",envelope,messageId,deliveryTime,diagnosticCode:\"smtp; 250 2.0.0 Message accepted for delivery\",});awaitthis.transporter.sendMail({from:\"postmaster@example.com\",to:envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSNMessage({action,status,envelope,messageId,deliveryTime,diagnosticCode}){const{dsn}=envelope;consttimestamp=deliveryTime||newDate().toISOString();// Generate RFC 3464 compliant delivery status notificationconsttext=`This is an automatically generated Delivery Status Notification.Original Message Details:- Message ID:${messageId}- Envelope ID:${dsn.envid||\"Not provided\"}- Sender:${envelope.mailFrom.address}- Recipients:${envelope.rcptTo.map((r)=>r.address).join(\", \")}- Action:${action}- Status:${status}- Time:${timestamp}${action===\"delivered\"?\"Your message has been successfully delivered to all recipients.\":\"Delivery failed for one or more recipients.\"}`;return{text};}}// Create DSN notifier instanceconstdsnNotifier=newDSNNotifier(dsnTransporter);// SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${",
        "source_url": "https://nodemailer.com/extras/smtp-server#1install",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part12",
        "text": " SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${address.address}, RET=${dsn.ret}, ENVID=${dsn.envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`RCPT TO:${address.address}, NOTIFY=${notify?.join(\",\")}, ORCPT=${orcpt}`);callback();},asynconData(stream,session,callback){constmessageId=`msg-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;stream.on(\"end\",async()=>{try{// Simulate message deliveryconstdeliveryTime=newDate();// Send DSN success notification if requestedawaitdsnNotifier.sendSuccessNotification(session.envelope,messageId,deliveryTime);callback(null,`Message${messageId}accepted for delivery`);}catch(error){callback(error);}});stream.resume();},});server.listen(2525,()=>{console.log(\"DSN-enabled SMTP server listening on port 2525\");});\nThis example demonstrates:\nComplete DSN workflowfrom parameter parsing to notification sending\nRFC-compliant DSN messageswith proper headers and content\nConditional notificationsbased on NOTIFY parameters\nIntegration with nodemailerfor sending DSN notifications\nProduction-ready structurewith error handling\nSupported commands and extensions‚Äã\nCommands‚Äã\nEHLO/HELO\nEHLO\nHELO\nAUTHLOGIN¬∑PLAIN¬∑XOAUTH2‚Ä†¬†¬∑CRAM‚ÄëMD5‚Ä†\nAUTH\nLOGIN\nPLAIN\nXOAUTH2\nCRAM‚ÄëMD5\nMAIL/RCPT/DATA\nMAIL\nRCPT\nDATA\nRSET/NOOP/QUIT/VRFY\nRSET\nNOOP\nQUIT\nVRFY\nHELP(returns RFC¬†5321 URL)\nHELP\nSTARTTLS\nSTARTTLS\n‚Ä†XOAUTH2andCRAM‚ÄëMD5must be enabled viaauthMethods.\nXOAUTH2\nCRAM‚ÄëMD5\nauthMethods\nExtensions‚Äã\nPIPELINING\nPIPELINING\n8BITMIME\n8BITMIME\nSMTPUTF8\nSMTPUTF8\nSIZE\nSIZE\nDSN(RFC 3461)\nDSN\nENHANCEDSTATUSCODES(RFC 2034/3463)\nENH",
        "source_url": "https://nodemailer.com/extras/smtp-server#1install",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part13",
        "text": "8BITMIME\n8BITMIME\nSMTPUTF8\nSMTPUTF8\nSIZE\nSIZE\nDSN(RFC 3461)\nDSN\nENHANCEDSTATUSCODES(RFC 2034/3463)\nENHANCEDSTATUSCODES\nTheCHUNKINGextension isnotimplemented.\nCHUNKING\nLicense‚Äã\nMIT\nUsage1¬†‚Äî¬†Install2¬†‚Äî¬†Require in your script3¬†‚Äî¬†Create a server instance4¬†‚Äî¬†Start listening5¬†‚Äî¬†Shut down\n1¬†‚Äî¬†Install\n2¬†‚Äî¬†Require in your script\n3¬†‚Äî¬†Create a server instance\n4¬†‚Äî¬†Start listening\n5¬†‚Äî¬†Shut down\nOptions reference\nTLS and STARTTLS\nHandling errors\nHandling authentication (onAuth)Password‚Äëbased (PLAIN / LOGIN)OAuth¬†2 (XOAUTH2)\nonAuth\nPassword‚Äëbased (PLAIN / LOGIN)\nOAuth¬†2 (XOAUTH2)\nXOAUTH2\nValidating client connection (onConnect/onClose)\nonConnect\nonClose\nValidating TLS information (onSecure)\nonSecure\nValidating sender (onMailFrom)\nonMailFrom\nValidating recipients (onRcptTo)\nonRcptTo\nProcessing incoming messages (onData)\nonData\nUsing the SIZE extension\nUsing LMTP\nSession object\nEnvelope object\nAddress objectDSN Object Properties\nDSN Object Properties\nEnhanced Status Codes (RFC 2034/3463)Enabling Enhanced Status CodesDisabling Enhanced Status CodesEnhanced Status Code Examples\nEnabling Enhanced Status Codes\nDisabling Enhanced Status Codes\nEnhanced Status Code Examples\nDSN (Delivery Status Notification) SupportDSN ParametersAccessing DSN ParametersDSN Parameter ValidationComplete DSN ExampleProduction DSN Implementation Example\nDSN Parameters\nAccessing DSN Parameters\nDSN Parameter Validation\nComplete DSN Example\nProduction DSN Implementation Example\nSupported commands and extensionsCommandsExtensions\nCommands\nExtensions\nLicense",
        "source_url": "https://nodemailer.com/extras/smtp-server#1install",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 412
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nSMTP Server\nSMTP Server\nCreate SMTP and LMTP server instances on the fly.smtp‚Äëserverisnota full‚Äëblown server application likeHarakabut a convenient way to add custom SMTP or LMTP listeners to your app. It is the successor of the server part of the now‚Äëdeprecatedsimplesmtpmodule. For a matching SMTP client, seesmtp‚Äëconnection.\nUsage‚Äã\n1¬†‚Äî¬†Install‚Äã\nnpm install smtp-server --save\nnpm install smtp-server --save\n2¬†‚Äî¬†Require in your script‚Äã\nconst{SMTPServer}=require(\"smtp-server\");\nconst{SMTPServer}=require(\"smtp-server\");\n3¬†‚Äî¬†Create a server instance‚Äã\nconstserver=newSMTPServer(options);\nconstserver=newSMTPServer(options);\n4¬†‚Äî¬†Start listening‚Äã\nserver.listen(port[,host][,callback]);\nserver.listen(port[,host][,callback]);\n5¬†‚Äî¬†Shut down‚Äã\nserver.close(callback);\nserver.close(callback);\nOptions reference‚Äã\nBoolean\nfalse\nSTARTTLS\nfalse\nString\nos.hostname()\nString\nNumber\n0\n0\nBoolean\nfalse\nstream.sizeExceeded\nString[]\n['PLAIN', 'LOGIN']\n'XOAUTH2'\n'CRAM-MD5'\nBoolean\nfalse\nString[]\n['AUTH']\nBoolean\nfalse\nBoolean\ntrue\nENHANCEDSTATUSCODES\nEHLO\nBoolean\ntrue\nDSN\nEHLO\nBoolean\nfalse\nBoolean\nfalse\nMap | Object\nBoolean | Object\nfalse\ntrue\nconsole\nNumber\nInfinity\nBoolean\nfalse\nBoolean\nfalse\nBoolean\nfalse\nNumber\n60_000\nNumber\n30_000\nclose()\nFunction\nObject\n.reverse\ndns\ndns.reverse\nYou may also pass anynet.createServeroptions and, whensecureistrue, anytls.createServeroptions.\nnet.createServer\nsecure\ntrue\ntls.createServer\nTLS and STARTTLS‚Äã\nIf you enable TLS (secure: true)orleaveSTARTTLSenabled, ship a proper certificate viakey,cert, and optionallyca. Otherwisesmtp‚Äëserverfalls back to a self‚Äësigned cert forlocalhost, which almost",
        "source_url": "https://nodemailer.com/extras/smtp-server#2require-in-your-script",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "‚Äã\nIf you enable TLS (secure: true)orleaveSTARTTLSenabled, ship a proper certificate viakey,cert, and optionallyca. Otherwisesmtp‚Äëserverfalls back to a self‚Äësigned cert forlocalhost, which almost every client rejects.\nsecure: true\nSTARTTLS\nkey\ncert\nca\nlocalhost\nconstfs=require(\"fs\");constserver=newSMTPServer({secure:true,key:fs.readFileSync(\"private.key\"),cert:fs.readFileSync(\"server.crt\"),});server.listen(465);\nconstfs=require(\"fs\");constserver=newSMTPServer({secure:true,key:fs.readFileSync(\"private.key\"),cert:fs.readFileSync(\"server.crt\"),});server.listen(465);\nHandling errors‚Äã\nAttach anerrorlistener to surface server errors:\nerror\nserver.on(\"error\",(err)=>{console.error(\"SMTP Server error:\",err.message);});\nserver.on(\"error\",(err)=>{console.error(\"SMTP Server error:\",err.message);});\nHandling authentication (onAuth)‚Äã\nonAuth\nconstserver=newSMTPServer({onAuth(auth,session,callback){// auth.method ‚Üí 'PLAIN', 'LOGIN', 'XOAUTH2', or 'CRAM-MD5'// Return `callback(err)` to reject, `callback(null, response)` to accept},});\nconstserver=newSMTPServer({onAuth(auth,session,callback){// auth.method ‚Üí 'PLAIN', 'LOGIN', 'XOAUTH2', or 'CRAM-MD5'// Return `callback(err)` to reject, `callback(null, response)` to accept},});\nPassword‚Äëbased (PLAIN / LOGIN)‚Äã\nonAuth(auth,session,cb){if(auth.username!==\"alice\"||auth.password!==\"s3cr3t\"){returncb(newError(\"Invalid username or password\"));}cb(null,{user:auth.username});}\nonAuth(auth,session,cb){if(auth.username!==\"alice\"||auth.password!==\"s3cr3t\"){returncb(newError(\"Invalid username or password\"));}cb(null,{user:auth.username});}\nOAuth¬†2 (XOAUTH2)‚Äã\nXOAUTH2\nconstserver=newSMTPServer({authMethods:[\"XOAUTH2\"],onAuth(auth,session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth",
        "source_url": "https://nodemailer.com/extras/smtp-server#2require-in-your-script",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": ",session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth.username});},});\nconstserver=newSMTPServer({authMethods:[\"XOAUTH2\"],onAuth(auth,session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth.username});},});\nValidating client connection (onConnect/onClose)‚Äã\nonConnect\nonClose\nconstserver=newSMTPServer({onConnect(session,cb){if(session.remoteAddress===\"127.0.0.1\"){returncb(newError(\"Connections from localhost are not allowed\"));}cb();// accept},onClose(session){console.log(`Connection from${session.remoteAddress}closed`);},});\nconstserver=newSMTPServer({onConnect(session,cb){if(session.remoteAddress===\"127.0.0.1\"){returncb(newError(\"Connections from localhost are not allowed\"));}cb();// accept},onClose(session){console.log(`Connection from${session.remoteAddress}closed`);},});\nValidating TLS information (onSecure)‚Äã\nonSecure\nonSecure(socket,session,cb){if(session.servername!==\"mail.example.com\"){returncb(newError(\"SNI mismatch\"));}cb();}\nonSecure(socket,session,cb){if(session.servername!==\"mail.example.com\"){returncb(newError(\"SNI mismatch\"));}cb();}\nValidating sender (onMailFrom)‚Äã\nonMailFrom\nonMailFrom(address,session,cb){if(!address.address.endsWith(\"@example.com\")){returncb(Object.assign(newError(\"Relay denied\"),{responseCode:553}));}cb();}\nonMailFrom(address,session,cb){if(!address.address.endsWith(\"@example.com\")){returncb(Object.assign(newError(\"Relay denied\"),{responseCode:553}));}cb();}\nValidating recipients (onRcptTo)‚Äã\nonRcptTo\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(new",
        "source_url": "https://nodemailer.com/extras/smtp-server#2require-in-your-script",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "cptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nProcessing incoming messages (onData)‚Äã\nonData\nonData(stream,session,cb){constwrite=require(\"fs\").createWriteStream(\"/tmp/message.eml\");stream.pipe(write);stream.on(\"end\",()=>cb(null,\"Queued\"));}\nonData(stream,session,cb){constwrite=require(\"fs\").createWriteStream(\"/tmp/message.eml\");stream.pipe(write);stream.on(\"end\",()=>cb(null,\"Queued\"));}\nsmtp‚Äëserverstreams your messageverbatim‚Äî noReceived:header is added. Add one yourself if you need full RFC¬†5321 compliance.\nReceived:\nUsing the SIZE extension‚Äã\nSet thesizeoption to advertise a limit, then checkstream.sizeExceededinonData:\nsize\nstream.sizeExceeded\nonData\nconstserver=newSMTPServer({size:1024*1024,// 1¬†MiBonData(s,sess,cb){s.on(\"end\",()=>{if(s.sizeExceeded){consterr=Object.assign(newError(\"Message too large\"),{responseCode:552});returncb(err);}cb(null,\"OK\");});},});\nconstserver=newSMTPServer({size:1024*1024,// 1¬†MiBonData(s,sess,cb){s.on(\"end\",()=>{if(s.sizeExceeded){consterr=Object.assign(newError(\"Message too large\"),{responseCode:552});returncb(err);}cb(null,\"OK\");});},});\nUsing LMTP‚Äã\nconstserver=newSMTPServer({lmtp:true,onData(stream,session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):`<${rcpt.address}> accepted`));cb(null,replies);});},});\nconstserver=newSMTPServer({lmtp:true,onData(stream,session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):",
        "source_url": "https://nodemailer.com/extras/smtp-server#2require-in-your-script",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": ",session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):`<${rcpt.address}> accepted`));cb(null,replies);});},});\nSession object‚Äã\nString\nString\nString\nremoteAddress\ndisableReverseLookup\n\"HELO\" | \"EHLO\" | \"LHLO\"\nString\nObject\nmailFrom\nrcptTo\ndsn\nany\nonAuth\nNumber\n\"SMTP\" | \"ESMTP\" | \"ESMTPA\" ‚Ä¶\nReceived:\nEnvelope object‚Äã\nThesession.envelopeobject contains transaction-specific data:\nsession.envelope\n{\"mailFrom\": {\"address\": \"sender@example.com\",\"args\": { \"SIZE\": \"12345\", \"RET\": \"HDRS\" },\"dsn\": { \"ret\": \"HDRS\", \"envid\": \"abc123\" }},\"rcptTo\": [{\"address\": \"user1@example.com\",\"args\": { \"NOTIFY\": \"SUCCESS,FAILURE\" },\"dsn\": { \"notify\": [\"SUCCESS\", \"FAILURE\"], \"orcpt\": \"rfc822;user1@example.com\" }}],\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\"}}\n{\"mailFrom\": {\"address\": \"sender@example.com\",\"args\": { \"SIZE\": \"12345\", \"RET\": \"HDRS\" },\"dsn\": { \"ret\": \"HDRS\", \"envid\": \"abc123\" }},\"rcptTo\": [{\"address\": \"user1@example.com\",\"args\": { \"NOTIFY\": \"SUCCESS,FAILURE\" },\"dsn\": { \"notify\": [\"SUCCESS\", \"FAILURE\"], \"orcpt\": \"rfc822;user1@example.com\" }}],\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\"}}\nObject\nObject[]\nObject\nAddress object‚Äã\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\":",
        "source_url": "https://nodemailer.com/extras/smtp-server#2require-in-your-script",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part6",
        "text": "123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\nMAIL FROM:\nRCPT TO:\nDSN Object Properties‚Äã\nString\n'FULL'\n'HDRS'\nString\nString[]\nString\nEnhanced Status Codes (RFC 2034/3463)‚Äã\nsmtp‚ÄëserversupportsEnhanced Status Codesas defined in RFC 2034 and RFC 3463. When enabled, all SMTP responses include enhanced status codes in the formatX.Y.Z:\nX.Y.Z\n250 2.1.0 Accepted        ‚Üê Enhanced status code: 2.1.0550 5.1.1 Mailbox unavailable ‚Üê Enhanced status code: 5.1.1\n250 2.1.0 Accepted        ‚Üê Enhanced status code: 2.1.0550 5.1.1 Mailbox unavailable ‚Üê Enhanced status code: 5.1.1\nEnabling Enhanced Status Codes‚Äã\nTo enable enhanced status codes (they are disabled by default):\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:false,// Enable enhanced status codesonMailFrom(address,session,callback){callback();// Response: \"250 2.1.0 Accepted\" (with enhanced code)},});\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:false,// Enable enhanced status codesonMailFrom(address,session,callback){callback();// Response: \"250 2.1.0 Accepted\" (with enhanced code)},});\nDisabling Enhanced Status Codes‚Äã\nEnhanced status codes are disabled by default, but you can explicitly disable them:\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:true,// Explicitly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:true,// Explicitly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nEnhanced Status Code Examples‚Äã\n250\n2.0.0\n250\n2.",
        "source_url": "https://nodemailer.com/extras/smtp-server#2require-in-your-script",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part7",
        "text": "ly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nEnhanced Status Code Examples‚Äã\n250\n2.0.0\n250\n2.1.0\n250\n2.1.5\n250\n2.6.0\n501\n5.5.4\n550\n5.1.1\n552\n5.2.2\nDSN (Delivery Status Notification) Support‚Äã\nsmtp‚Äëserverfully supportsDSN parametersas defined in RFC 3461, allowing clients to request delivery status notifications.\nDSN functionality requiresdelivery status notificationsto be enabled. Since delivery status notifications are disabled by default, you must sethideDSN: falseto use DSN features.\nhideDSN: false\nDSN Parameters‚Äã\nRET=FULLorRET=HDRS‚Äî Return full message or headers only in DSN\nRET=FULL\nRET=HDRS\nENVID=<envelope-id>‚Äî Envelope identifier for tracking\nENVID=<envelope-id>\n// Client sends: MAIL FROM:<sender@example.com> RET=FULL ENVID=abc123\n// Client sends: MAIL FROM:<sender@example.com> RET=FULL ENVID=abc123\nNOTIFY=SUCCESS,FAILURE,DELAY,NEVER‚Äî When to send DSN\nNOTIFY=SUCCESS,FAILURE,DELAY,NEVER\nORCPT=<original-recipient>‚Äî Original recipient for tracking\nORCPT=<original-recipient>\n// Client sends: RCPT TO:<user@example.com> NOTIFY=SUCCESS,FAILURE ORCPT=rfc822;user@example.com\n// Client sends: RCPT TO:<user@example.com> NOTIFY=SUCCESS,FAILURE ORCPT=rfc822;user@example.com\nAccessing DSN Parameters‚Äã\nDSN parameters are available in your callback handlers:\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){// Access DSN parameters from MAIL FROMconstret=session.envelope.dsn.ret;// 'FULL' or 'HDRS'constenvid=session.envelope.dsn.envid;// Envelope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE',",
        "source_url": "https://nodemailer.com/extras/smtp-server#2require-in-your-script",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part8",
        "text": "velope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE', 'DELAY']constorcpt=address.dsn.orcpt;// Original recipientconsole.log(`NOTIFY:${notify.join(\",\")}, ORCPT:${orcpt}`);callback();},});\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){// Access DSN parameters from MAIL FROMconstret=session.envelope.dsn.ret;// 'FULL' or 'HDRS'constenvid=session.envelope.dsn.envid;// Envelope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE', 'DELAY']constorcpt=address.dsn.orcpt;// Original recipientconsole.log(`NOTIFY:${notify.join(\",\")}, ORCPT:${orcpt}`);callback();},});\nDSN Parameter Validation‚Äã\nsmtp‚Äëserverautomatically validates DSN parameters:\nRETmust beFULLorHDRS\nRET\nFULL\nHDRS\nNOTIFYmust beSUCCESS,FAILURE,DELAY, orNEVER\nNOTIFY\nSUCCESS\nFAILURE\nDELAY\nNEVER\nNOTIFY=NEVERcannot be combined with other values\nNOTIFY=NEVER\nInvalid parameters return appropriate error responses with enhanced status codes\nComplete DSN Example‚Äã\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){const{ret,envid}=session.envelope.dsn;console.log(`Mail from${address.address}, RET=${ret}, ENVID=${envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`Rcpt to${address.address}, NOTIFY=${notify.join(\",\")}, ORCPT=${orcpt}`);callback();},onData(stream,session,callback){// Process message with DSN contextconst{dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nconstserver=newSMTPServer({hide",
        "source_url": "https://nodemailer.com/extras/smtp-server#2require-in-your-script",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part9",
        "text": "dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){const{ret,envid}=session.envelope.dsn;console.log(`Mail from${address.address}, RET=${ret}, ENVID=${envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`Rcpt to${address.address}, NOTIFY=${notify.join(\",\")}, ORCPT=${orcpt}`);callback();},onData(stream,session,callback){// Process message with DSN contextconst{dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nProduction DSN Implementation Example‚Äã\nHere's a complete example showing how to implement DSN notifications using nodemailer:\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransporter({host:\"smtp.example.com\",port:587,secure:false,auth:{user:\"dsn-sender@example.com\",pass:\"your-password\",},});// DSN notification generatorclassDSNNotifier{constructor(transporter){this.transporter=transporter;}asyncsendSuccessNotification(envelope,messageId,deliveryTime){// Only send if SUCCESS notification was requestedconstneedsSuccessNotification=envelope.rcptTo.some((rcpt)=>rcpt.dsn.notify&&rcpt.dsn.notify.includes(\"SUCCESS\"));if(!needsSuccessNotification||!envelope.mailFrom.address){return;}constdsnMessage=this.generateDSNMessage({action:\"delivered\",status:\"2.0.0\",envelope,messageId,deliveryTime,diagnosticCode:\"smtp; 250 2.0.0 Message accepted for delivery\",});awaitthis.transporter.sendMail({from:\"postmaster@example.com\",to:envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSN",
        "source_url": "https://nodemailer.com/extras/smtp-server#2require-in-your-script",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part10",
        "text": ":envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSNMessage({action,status,envelope,messageId,deliveryTime,diagnosticCode}){const{dsn}=envelope;consttimestamp=deliveryTime||newDate().toISOString();// Generate RFC 3464 compliant delivery status notificationconsttext=`This is an automatically generated Delivery Status Notification.Original Message Details:- Message ID:${messageId}- Envelope ID:${dsn.envid||\"Not provided\"}- Sender:${envelope.mailFrom.address}- Recipients:${envelope.rcptTo.map((r)=>r.address).join(\", \")}- Action:${action}- Status:${status}- Time:${timestamp}${action===\"delivered\"?\"Your message has been successfully delivered to all recipients.\":\"Delivery failed for one or more recipients.\"}`;return{text};}}// Create DSN notifier instanceconstdsnNotifier=newDSNNotifier(dsnTransporter);// SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${address.address}, RET=${dsn.ret}, ENVID=${dsn.envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`RCPT TO:${address.address}, NOTIFY=${notify?.join(\",\")}, ORCPT=${orcpt}`);callback();},asynconData(stream,session,callback){constmessageId=`msg-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;stream.on(\"end\",async()=>{try{// Simulate message deliveryconstdeliveryTime=newDate();// Send DSN success notification if requestedawaitdsnNotifier.sendSuccessNotification(session.envelope,messageId,deliveryTime);callback(null,`Message${messageId}accepted for delivery`);}catch(error){callback(error);}});stream.resume();},});server.listen(2525,()=>{console.log(\"DSN-enabled SMTP server listening on port 2525\");});\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransport",
        "source_url": "https://nodemailer.com/extras/smtp-server#2require-in-your-script",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part11",
        "text": "DSN-enabled SMTP server listening on port 2525\");});\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransporter({host:\"smtp.example.com\",port:587,secure:false,auth:{user:\"dsn-sender@example.com\",pass:\"your-password\",},});// DSN notification generatorclassDSNNotifier{constructor(transporter){this.transporter=transporter;}asyncsendSuccessNotification(envelope,messageId,deliveryTime){// Only send if SUCCESS notification was requestedconstneedsSuccessNotification=envelope.rcptTo.some((rcpt)=>rcpt.dsn.notify&&rcpt.dsn.notify.includes(\"SUCCESS\"));if(!needsSuccessNotification||!envelope.mailFrom.address){return;}constdsnMessage=this.generateDSNMessage({action:\"delivered\",status:\"2.0.0\",envelope,messageId,deliveryTime,diagnosticCode:\"smtp; 250 2.0.0 Message accepted for delivery\",});awaitthis.transporter.sendMail({from:\"postmaster@example.com\",to:envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSNMessage({action,status,envelope,messageId,deliveryTime,diagnosticCode}){const{dsn}=envelope;consttimestamp=deliveryTime||newDate().toISOString();// Generate RFC 3464 compliant delivery status notificationconsttext=`This is an automatically generated Delivery Status Notification.Original Message Details:- Message ID:${messageId}- Envelope ID:${dsn.envid||\"Not provided\"}- Sender:${envelope.mailFrom.address}- Recipients:${envelope.rcptTo.map((r)=>r.address).join(\", \")}- Action:${action}- Status:${status}- Time:${timestamp}${action===\"delivered\"?\"Your message has been successfully delivered to all recipients.\":\"Delivery failed for one or more recipients.\"}`;return{text};}}// Create DSN notifier instanceconstdsnNotifier=newDSNNotifier(dsnTransporter);// SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${",
        "source_url": "https://nodemailer.com/extras/smtp-server#2require-in-your-script",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part12",
        "text": " SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${address.address}, RET=${dsn.ret}, ENVID=${dsn.envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`RCPT TO:${address.address}, NOTIFY=${notify?.join(\",\")}, ORCPT=${orcpt}`);callback();},asynconData(stream,session,callback){constmessageId=`msg-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;stream.on(\"end\",async()=>{try{// Simulate message deliveryconstdeliveryTime=newDate();// Send DSN success notification if requestedawaitdsnNotifier.sendSuccessNotification(session.envelope,messageId,deliveryTime);callback(null,`Message${messageId}accepted for delivery`);}catch(error){callback(error);}});stream.resume();},});server.listen(2525,()=>{console.log(\"DSN-enabled SMTP server listening on port 2525\");});\nThis example demonstrates:\nComplete DSN workflowfrom parameter parsing to notification sending\nRFC-compliant DSN messageswith proper headers and content\nConditional notificationsbased on NOTIFY parameters\nIntegration with nodemailerfor sending DSN notifications\nProduction-ready structurewith error handling\nSupported commands and extensions‚Äã\nCommands‚Äã\nEHLO/HELO\nEHLO\nHELO\nAUTHLOGIN¬∑PLAIN¬∑XOAUTH2‚Ä†¬†¬∑CRAM‚ÄëMD5‚Ä†\nAUTH\nLOGIN\nPLAIN\nXOAUTH2\nCRAM‚ÄëMD5\nMAIL/RCPT/DATA\nMAIL\nRCPT\nDATA\nRSET/NOOP/QUIT/VRFY\nRSET\nNOOP\nQUIT\nVRFY\nHELP(returns RFC¬†5321 URL)\nHELP\nSTARTTLS\nSTARTTLS\n‚Ä†XOAUTH2andCRAM‚ÄëMD5must be enabled viaauthMethods.\nXOAUTH2\nCRAM‚ÄëMD5\nauthMethods\nExtensions‚Äã\nPIPELINING\nPIPELINING\n8BITMIME\n8BITMIME\nSMTPUTF8\nSMTPUTF8\nSIZE\nSIZE\nDSN(RFC 3461)\nDSN\nENHANCEDSTATUSCODES(RFC 2034/3463)\nENH",
        "source_url": "https://nodemailer.com/extras/smtp-server#2require-in-your-script",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part13",
        "text": "8BITMIME\n8BITMIME\nSMTPUTF8\nSMTPUTF8\nSIZE\nSIZE\nDSN(RFC 3461)\nDSN\nENHANCEDSTATUSCODES(RFC 2034/3463)\nENHANCEDSTATUSCODES\nTheCHUNKINGextension isnotimplemented.\nCHUNKING\nLicense‚Äã\nMIT\nUsage1¬†‚Äî¬†Install2¬†‚Äî¬†Require in your script3¬†‚Äî¬†Create a server instance4¬†‚Äî¬†Start listening5¬†‚Äî¬†Shut down\n1¬†‚Äî¬†Install\n2¬†‚Äî¬†Require in your script\n3¬†‚Äî¬†Create a server instance\n4¬†‚Äî¬†Start listening\n5¬†‚Äî¬†Shut down\nOptions reference\nTLS and STARTTLS\nHandling errors\nHandling authentication (onAuth)Password‚Äëbased (PLAIN / LOGIN)OAuth¬†2 (XOAUTH2)\nonAuth\nPassword‚Äëbased (PLAIN / LOGIN)\nOAuth¬†2 (XOAUTH2)\nXOAUTH2\nValidating client connection (onConnect/onClose)\nonConnect\nonClose\nValidating TLS information (onSecure)\nonSecure\nValidating sender (onMailFrom)\nonMailFrom\nValidating recipients (onRcptTo)\nonRcptTo\nProcessing incoming messages (onData)\nonData\nUsing the SIZE extension\nUsing LMTP\nSession object\nEnvelope object\nAddress objectDSN Object Properties\nDSN Object Properties\nEnhanced Status Codes (RFC 2034/3463)Enabling Enhanced Status CodesDisabling Enhanced Status CodesEnhanced Status Code Examples\nEnabling Enhanced Status Codes\nDisabling Enhanced Status Codes\nEnhanced Status Code Examples\nDSN (Delivery Status Notification) SupportDSN ParametersAccessing DSN ParametersDSN Parameter ValidationComplete DSN ExampleProduction DSN Implementation Example\nDSN Parameters\nAccessing DSN Parameters\nDSN Parameter Validation\nComplete DSN Example\nProduction DSN Implementation Example\nSupported commands and extensionsCommandsExtensions\nCommands\nExtensions\nLicense",
        "source_url": "https://nodemailer.com/extras/smtp-server#2require-in-your-script",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 412
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nSMTP Server\nSMTP Server\nCreate SMTP and LMTP server instances on the fly.smtp‚Äëserverisnota full‚Äëblown server application likeHarakabut a convenient way to add custom SMTP or LMTP listeners to your app. It is the successor of the server part of the now‚Äëdeprecatedsimplesmtpmodule. For a matching SMTP client, seesmtp‚Äëconnection.\nUsage‚Äã\n1¬†‚Äî¬†Install‚Äã\nnpm install smtp-server --save\nnpm install smtp-server --save\n2¬†‚Äî¬†Require in your script‚Äã\nconst{SMTPServer}=require(\"smtp-server\");\nconst{SMTPServer}=require(\"smtp-server\");\n3¬†‚Äî¬†Create a server instance‚Äã\nconstserver=newSMTPServer(options);\nconstserver=newSMTPServer(options);\n4¬†‚Äî¬†Start listening‚Äã\nserver.listen(port[,host][,callback]);\nserver.listen(port[,host][,callback]);\n5¬†‚Äî¬†Shut down‚Äã\nserver.close(callback);\nserver.close(callback);\nOptions reference‚Äã\nBoolean\nfalse\nSTARTTLS\nfalse\nString\nos.hostname()\nString\nNumber\n0\n0\nBoolean\nfalse\nstream.sizeExceeded\nString[]\n['PLAIN', 'LOGIN']\n'XOAUTH2'\n'CRAM-MD5'\nBoolean\nfalse\nString[]\n['AUTH']\nBoolean\nfalse\nBoolean\ntrue\nENHANCEDSTATUSCODES\nEHLO\nBoolean\ntrue\nDSN\nEHLO\nBoolean\nfalse\nBoolean\nfalse\nMap | Object\nBoolean | Object\nfalse\ntrue\nconsole\nNumber\nInfinity\nBoolean\nfalse\nBoolean\nfalse\nBoolean\nfalse\nNumber\n60_000\nNumber\n30_000\nclose()\nFunction\nObject\n.reverse\ndns\ndns.reverse\nYou may also pass anynet.createServeroptions and, whensecureistrue, anytls.createServeroptions.\nnet.createServer\nsecure\ntrue\ntls.createServer\nTLS and STARTTLS‚Äã\nIf you enable TLS (secure: true)orleaveSTARTTLSenabled, ship a proper certificate viakey,cert, and optionallyca. Otherwisesmtp‚Äëserverfalls back to a self‚Äësigned cert forlocalhost, which almost",
        "source_url": "https://nodemailer.com/extras/smtp-server#3create-a-server-instance",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "‚Äã\nIf you enable TLS (secure: true)orleaveSTARTTLSenabled, ship a proper certificate viakey,cert, and optionallyca. Otherwisesmtp‚Äëserverfalls back to a self‚Äësigned cert forlocalhost, which almost every client rejects.\nsecure: true\nSTARTTLS\nkey\ncert\nca\nlocalhost\nconstfs=require(\"fs\");constserver=newSMTPServer({secure:true,key:fs.readFileSync(\"private.key\"),cert:fs.readFileSync(\"server.crt\"),});server.listen(465);\nconstfs=require(\"fs\");constserver=newSMTPServer({secure:true,key:fs.readFileSync(\"private.key\"),cert:fs.readFileSync(\"server.crt\"),});server.listen(465);\nHandling errors‚Äã\nAttach anerrorlistener to surface server errors:\nerror\nserver.on(\"error\",(err)=>{console.error(\"SMTP Server error:\",err.message);});\nserver.on(\"error\",(err)=>{console.error(\"SMTP Server error:\",err.message);});\nHandling authentication (onAuth)‚Äã\nonAuth\nconstserver=newSMTPServer({onAuth(auth,session,callback){// auth.method ‚Üí 'PLAIN', 'LOGIN', 'XOAUTH2', or 'CRAM-MD5'// Return `callback(err)` to reject, `callback(null, response)` to accept},});\nconstserver=newSMTPServer({onAuth(auth,session,callback){// auth.method ‚Üí 'PLAIN', 'LOGIN', 'XOAUTH2', or 'CRAM-MD5'// Return `callback(err)` to reject, `callback(null, response)` to accept},});\nPassword‚Äëbased (PLAIN / LOGIN)‚Äã\nonAuth(auth,session,cb){if(auth.username!==\"alice\"||auth.password!==\"s3cr3t\"){returncb(newError(\"Invalid username or password\"));}cb(null,{user:auth.username});}\nonAuth(auth,session,cb){if(auth.username!==\"alice\"||auth.password!==\"s3cr3t\"){returncb(newError(\"Invalid username or password\"));}cb(null,{user:auth.username});}\nOAuth¬†2 (XOAUTH2)‚Äã\nXOAUTH2\nconstserver=newSMTPServer({authMethods:[\"XOAUTH2\"],onAuth(auth,session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth",
        "source_url": "https://nodemailer.com/extras/smtp-server#3create-a-server-instance",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": ",session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth.username});},});\nconstserver=newSMTPServer({authMethods:[\"XOAUTH2\"],onAuth(auth,session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth.username});},});\nValidating client connection (onConnect/onClose)‚Äã\nonConnect\nonClose\nconstserver=newSMTPServer({onConnect(session,cb){if(session.remoteAddress===\"127.0.0.1\"){returncb(newError(\"Connections from localhost are not allowed\"));}cb();// accept},onClose(session){console.log(`Connection from${session.remoteAddress}closed`);},});\nconstserver=newSMTPServer({onConnect(session,cb){if(session.remoteAddress===\"127.0.0.1\"){returncb(newError(\"Connections from localhost are not allowed\"));}cb();// accept},onClose(session){console.log(`Connection from${session.remoteAddress}closed`);},});\nValidating TLS information (onSecure)‚Äã\nonSecure\nonSecure(socket,session,cb){if(session.servername!==\"mail.example.com\"){returncb(newError(\"SNI mismatch\"));}cb();}\nonSecure(socket,session,cb){if(session.servername!==\"mail.example.com\"){returncb(newError(\"SNI mismatch\"));}cb();}\nValidating sender (onMailFrom)‚Äã\nonMailFrom\nonMailFrom(address,session,cb){if(!address.address.endsWith(\"@example.com\")){returncb(Object.assign(newError(\"Relay denied\"),{responseCode:553}));}cb();}\nonMailFrom(address,session,cb){if(!address.address.endsWith(\"@example.com\")){returncb(Object.assign(newError(\"Relay denied\"),{responseCode:553}));}cb();}\nValidating recipients (onRcptTo)‚Äã\nonRcptTo\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(new",
        "source_url": "https://nodemailer.com/extras/smtp-server#3create-a-server-instance",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "cptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nProcessing incoming messages (onData)‚Äã\nonData\nonData(stream,session,cb){constwrite=require(\"fs\").createWriteStream(\"/tmp/message.eml\");stream.pipe(write);stream.on(\"end\",()=>cb(null,\"Queued\"));}\nonData(stream,session,cb){constwrite=require(\"fs\").createWriteStream(\"/tmp/message.eml\");stream.pipe(write);stream.on(\"end\",()=>cb(null,\"Queued\"));}\nsmtp‚Äëserverstreams your messageverbatim‚Äî noReceived:header is added. Add one yourself if you need full RFC¬†5321 compliance.\nReceived:\nUsing the SIZE extension‚Äã\nSet thesizeoption to advertise a limit, then checkstream.sizeExceededinonData:\nsize\nstream.sizeExceeded\nonData\nconstserver=newSMTPServer({size:1024*1024,// 1¬†MiBonData(s,sess,cb){s.on(\"end\",()=>{if(s.sizeExceeded){consterr=Object.assign(newError(\"Message too large\"),{responseCode:552});returncb(err);}cb(null,\"OK\");});},});\nconstserver=newSMTPServer({size:1024*1024,// 1¬†MiBonData(s,sess,cb){s.on(\"end\",()=>{if(s.sizeExceeded){consterr=Object.assign(newError(\"Message too large\"),{responseCode:552});returncb(err);}cb(null,\"OK\");});},});\nUsing LMTP‚Äã\nconstserver=newSMTPServer({lmtp:true,onData(stream,session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):`<${rcpt.address}> accepted`));cb(null,replies);});},});\nconstserver=newSMTPServer({lmtp:true,onData(stream,session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):",
        "source_url": "https://nodemailer.com/extras/smtp-server#3create-a-server-instance",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": ",session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):`<${rcpt.address}> accepted`));cb(null,replies);});},});\nSession object‚Äã\nString\nString\nString\nremoteAddress\ndisableReverseLookup\n\"HELO\" | \"EHLO\" | \"LHLO\"\nString\nObject\nmailFrom\nrcptTo\ndsn\nany\nonAuth\nNumber\n\"SMTP\" | \"ESMTP\" | \"ESMTPA\" ‚Ä¶\nReceived:\nEnvelope object‚Äã\nThesession.envelopeobject contains transaction-specific data:\nsession.envelope\n{\"mailFrom\": {\"address\": \"sender@example.com\",\"args\": { \"SIZE\": \"12345\", \"RET\": \"HDRS\" },\"dsn\": { \"ret\": \"HDRS\", \"envid\": \"abc123\" }},\"rcptTo\": [{\"address\": \"user1@example.com\",\"args\": { \"NOTIFY\": \"SUCCESS,FAILURE\" },\"dsn\": { \"notify\": [\"SUCCESS\", \"FAILURE\"], \"orcpt\": \"rfc822;user1@example.com\" }}],\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\"}}\n{\"mailFrom\": {\"address\": \"sender@example.com\",\"args\": { \"SIZE\": \"12345\", \"RET\": \"HDRS\" },\"dsn\": { \"ret\": \"HDRS\", \"envid\": \"abc123\" }},\"rcptTo\": [{\"address\": \"user1@example.com\",\"args\": { \"NOTIFY\": \"SUCCESS,FAILURE\" },\"dsn\": { \"notify\": [\"SUCCESS\", \"FAILURE\"], \"orcpt\": \"rfc822;user1@example.com\" }}],\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\"}}\nObject\nObject[]\nObject\nAddress object‚Äã\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\":",
        "source_url": "https://nodemailer.com/extras/smtp-server#3create-a-server-instance",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part6",
        "text": "123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\nMAIL FROM:\nRCPT TO:\nDSN Object Properties‚Äã\nString\n'FULL'\n'HDRS'\nString\nString[]\nString\nEnhanced Status Codes (RFC 2034/3463)‚Äã\nsmtp‚ÄëserversupportsEnhanced Status Codesas defined in RFC 2034 and RFC 3463. When enabled, all SMTP responses include enhanced status codes in the formatX.Y.Z:\nX.Y.Z\n250 2.1.0 Accepted        ‚Üê Enhanced status code: 2.1.0550 5.1.1 Mailbox unavailable ‚Üê Enhanced status code: 5.1.1\n250 2.1.0 Accepted        ‚Üê Enhanced status code: 2.1.0550 5.1.1 Mailbox unavailable ‚Üê Enhanced status code: 5.1.1\nEnabling Enhanced Status Codes‚Äã\nTo enable enhanced status codes (they are disabled by default):\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:false,// Enable enhanced status codesonMailFrom(address,session,callback){callback();// Response: \"250 2.1.0 Accepted\" (with enhanced code)},});\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:false,// Enable enhanced status codesonMailFrom(address,session,callback){callback();// Response: \"250 2.1.0 Accepted\" (with enhanced code)},});\nDisabling Enhanced Status Codes‚Äã\nEnhanced status codes are disabled by default, but you can explicitly disable them:\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:true,// Explicitly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:true,// Explicitly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nEnhanced Status Code Examples‚Äã\n250\n2.0.0\n250\n2.",
        "source_url": "https://nodemailer.com/extras/smtp-server#3create-a-server-instance",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part7",
        "text": "ly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nEnhanced Status Code Examples‚Äã\n250\n2.0.0\n250\n2.1.0\n250\n2.1.5\n250\n2.6.0\n501\n5.5.4\n550\n5.1.1\n552\n5.2.2\nDSN (Delivery Status Notification) Support‚Äã\nsmtp‚Äëserverfully supportsDSN parametersas defined in RFC 3461, allowing clients to request delivery status notifications.\nDSN functionality requiresdelivery status notificationsto be enabled. Since delivery status notifications are disabled by default, you must sethideDSN: falseto use DSN features.\nhideDSN: false\nDSN Parameters‚Äã\nRET=FULLorRET=HDRS‚Äî Return full message or headers only in DSN\nRET=FULL\nRET=HDRS\nENVID=<envelope-id>‚Äî Envelope identifier for tracking\nENVID=<envelope-id>\n// Client sends: MAIL FROM:<sender@example.com> RET=FULL ENVID=abc123\n// Client sends: MAIL FROM:<sender@example.com> RET=FULL ENVID=abc123\nNOTIFY=SUCCESS,FAILURE,DELAY,NEVER‚Äî When to send DSN\nNOTIFY=SUCCESS,FAILURE,DELAY,NEVER\nORCPT=<original-recipient>‚Äî Original recipient for tracking\nORCPT=<original-recipient>\n// Client sends: RCPT TO:<user@example.com> NOTIFY=SUCCESS,FAILURE ORCPT=rfc822;user@example.com\n// Client sends: RCPT TO:<user@example.com> NOTIFY=SUCCESS,FAILURE ORCPT=rfc822;user@example.com\nAccessing DSN Parameters‚Äã\nDSN parameters are available in your callback handlers:\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){// Access DSN parameters from MAIL FROMconstret=session.envelope.dsn.ret;// 'FULL' or 'HDRS'constenvid=session.envelope.dsn.envid;// Envelope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE',",
        "source_url": "https://nodemailer.com/extras/smtp-server#3create-a-server-instance",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part8",
        "text": "velope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE', 'DELAY']constorcpt=address.dsn.orcpt;// Original recipientconsole.log(`NOTIFY:${notify.join(\",\")}, ORCPT:${orcpt}`);callback();},});\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){// Access DSN parameters from MAIL FROMconstret=session.envelope.dsn.ret;// 'FULL' or 'HDRS'constenvid=session.envelope.dsn.envid;// Envelope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE', 'DELAY']constorcpt=address.dsn.orcpt;// Original recipientconsole.log(`NOTIFY:${notify.join(\",\")}, ORCPT:${orcpt}`);callback();},});\nDSN Parameter Validation‚Äã\nsmtp‚Äëserverautomatically validates DSN parameters:\nRETmust beFULLorHDRS\nRET\nFULL\nHDRS\nNOTIFYmust beSUCCESS,FAILURE,DELAY, orNEVER\nNOTIFY\nSUCCESS\nFAILURE\nDELAY\nNEVER\nNOTIFY=NEVERcannot be combined with other values\nNOTIFY=NEVER\nInvalid parameters return appropriate error responses with enhanced status codes\nComplete DSN Example‚Äã\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){const{ret,envid}=session.envelope.dsn;console.log(`Mail from${address.address}, RET=${ret}, ENVID=${envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`Rcpt to${address.address}, NOTIFY=${notify.join(\",\")}, ORCPT=${orcpt}`);callback();},onData(stream,session,callback){// Process message with DSN contextconst{dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nconstserver=newSMTPServer({hide",
        "source_url": "https://nodemailer.com/extras/smtp-server#3create-a-server-instance",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part9",
        "text": "dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){const{ret,envid}=session.envelope.dsn;console.log(`Mail from${address.address}, RET=${ret}, ENVID=${envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`Rcpt to${address.address}, NOTIFY=${notify.join(\",\")}, ORCPT=${orcpt}`);callback();},onData(stream,session,callback){// Process message with DSN contextconst{dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nProduction DSN Implementation Example‚Äã\nHere's a complete example showing how to implement DSN notifications using nodemailer:\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransporter({host:\"smtp.example.com\",port:587,secure:false,auth:{user:\"dsn-sender@example.com\",pass:\"your-password\",},});// DSN notification generatorclassDSNNotifier{constructor(transporter){this.transporter=transporter;}asyncsendSuccessNotification(envelope,messageId,deliveryTime){// Only send if SUCCESS notification was requestedconstneedsSuccessNotification=envelope.rcptTo.some((rcpt)=>rcpt.dsn.notify&&rcpt.dsn.notify.includes(\"SUCCESS\"));if(!needsSuccessNotification||!envelope.mailFrom.address){return;}constdsnMessage=this.generateDSNMessage({action:\"delivered\",status:\"2.0.0\",envelope,messageId,deliveryTime,diagnosticCode:\"smtp; 250 2.0.0 Message accepted for delivery\",});awaitthis.transporter.sendMail({from:\"postmaster@example.com\",to:envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSN",
        "source_url": "https://nodemailer.com/extras/smtp-server#3create-a-server-instance",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part10",
        "text": ":envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSNMessage({action,status,envelope,messageId,deliveryTime,diagnosticCode}){const{dsn}=envelope;consttimestamp=deliveryTime||newDate().toISOString();// Generate RFC 3464 compliant delivery status notificationconsttext=`This is an automatically generated Delivery Status Notification.Original Message Details:- Message ID:${messageId}- Envelope ID:${dsn.envid||\"Not provided\"}- Sender:${envelope.mailFrom.address}- Recipients:${envelope.rcptTo.map((r)=>r.address).join(\", \")}- Action:${action}- Status:${status}- Time:${timestamp}${action===\"delivered\"?\"Your message has been successfully delivered to all recipients.\":\"Delivery failed for one or more recipients.\"}`;return{text};}}// Create DSN notifier instanceconstdsnNotifier=newDSNNotifier(dsnTransporter);// SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${address.address}, RET=${dsn.ret}, ENVID=${dsn.envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`RCPT TO:${address.address}, NOTIFY=${notify?.join(\",\")}, ORCPT=${orcpt}`);callback();},asynconData(stream,session,callback){constmessageId=`msg-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;stream.on(\"end\",async()=>{try{// Simulate message deliveryconstdeliveryTime=newDate();// Send DSN success notification if requestedawaitdsnNotifier.sendSuccessNotification(session.envelope,messageId,deliveryTime);callback(null,`Message${messageId}accepted for delivery`);}catch(error){callback(error);}});stream.resume();},});server.listen(2525,()=>{console.log(\"DSN-enabled SMTP server listening on port 2525\");});\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransport",
        "source_url": "https://nodemailer.com/extras/smtp-server#3create-a-server-instance",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part11",
        "text": "DSN-enabled SMTP server listening on port 2525\");});\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransporter({host:\"smtp.example.com\",port:587,secure:false,auth:{user:\"dsn-sender@example.com\",pass:\"your-password\",},});// DSN notification generatorclassDSNNotifier{constructor(transporter){this.transporter=transporter;}asyncsendSuccessNotification(envelope,messageId,deliveryTime){// Only send if SUCCESS notification was requestedconstneedsSuccessNotification=envelope.rcptTo.some((rcpt)=>rcpt.dsn.notify&&rcpt.dsn.notify.includes(\"SUCCESS\"));if(!needsSuccessNotification||!envelope.mailFrom.address){return;}constdsnMessage=this.generateDSNMessage({action:\"delivered\",status:\"2.0.0\",envelope,messageId,deliveryTime,diagnosticCode:\"smtp; 250 2.0.0 Message accepted for delivery\",});awaitthis.transporter.sendMail({from:\"postmaster@example.com\",to:envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSNMessage({action,status,envelope,messageId,deliveryTime,diagnosticCode}){const{dsn}=envelope;consttimestamp=deliveryTime||newDate().toISOString();// Generate RFC 3464 compliant delivery status notificationconsttext=`This is an automatically generated Delivery Status Notification.Original Message Details:- Message ID:${messageId}- Envelope ID:${dsn.envid||\"Not provided\"}- Sender:${envelope.mailFrom.address}- Recipients:${envelope.rcptTo.map((r)=>r.address).join(\", \")}- Action:${action}- Status:${status}- Time:${timestamp}${action===\"delivered\"?\"Your message has been successfully delivered to all recipients.\":\"Delivery failed for one or more recipients.\"}`;return{text};}}// Create DSN notifier instanceconstdsnNotifier=newDSNNotifier(dsnTransporter);// SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${",
        "source_url": "https://nodemailer.com/extras/smtp-server#3create-a-server-instance",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part12",
        "text": " SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${address.address}, RET=${dsn.ret}, ENVID=${dsn.envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`RCPT TO:${address.address}, NOTIFY=${notify?.join(\",\")}, ORCPT=${orcpt}`);callback();},asynconData(stream,session,callback){constmessageId=`msg-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;stream.on(\"end\",async()=>{try{// Simulate message deliveryconstdeliveryTime=newDate();// Send DSN success notification if requestedawaitdsnNotifier.sendSuccessNotification(session.envelope,messageId,deliveryTime);callback(null,`Message${messageId}accepted for delivery`);}catch(error){callback(error);}});stream.resume();},});server.listen(2525,()=>{console.log(\"DSN-enabled SMTP server listening on port 2525\");});\nThis example demonstrates:\nComplete DSN workflowfrom parameter parsing to notification sending\nRFC-compliant DSN messageswith proper headers and content\nConditional notificationsbased on NOTIFY parameters\nIntegration with nodemailerfor sending DSN notifications\nProduction-ready structurewith error handling\nSupported commands and extensions‚Äã\nCommands‚Äã\nEHLO/HELO\nEHLO\nHELO\nAUTHLOGIN¬∑PLAIN¬∑XOAUTH2‚Ä†¬†¬∑CRAM‚ÄëMD5‚Ä†\nAUTH\nLOGIN\nPLAIN\nXOAUTH2\nCRAM‚ÄëMD5\nMAIL/RCPT/DATA\nMAIL\nRCPT\nDATA\nRSET/NOOP/QUIT/VRFY\nRSET\nNOOP\nQUIT\nVRFY\nHELP(returns RFC¬†5321 URL)\nHELP\nSTARTTLS\nSTARTTLS\n‚Ä†XOAUTH2andCRAM‚ÄëMD5must be enabled viaauthMethods.\nXOAUTH2\nCRAM‚ÄëMD5\nauthMethods\nExtensions‚Äã\nPIPELINING\nPIPELINING\n8BITMIME\n8BITMIME\nSMTPUTF8\nSMTPUTF8\nSIZE\nSIZE\nDSN(RFC 3461)\nDSN\nENHANCEDSTATUSCODES(RFC 2034/3463)\nENH",
        "source_url": "https://nodemailer.com/extras/smtp-server#3create-a-server-instance",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part13",
        "text": "8BITMIME\n8BITMIME\nSMTPUTF8\nSMTPUTF8\nSIZE\nSIZE\nDSN(RFC 3461)\nDSN\nENHANCEDSTATUSCODES(RFC 2034/3463)\nENHANCEDSTATUSCODES\nTheCHUNKINGextension isnotimplemented.\nCHUNKING\nLicense‚Äã\nMIT\nUsage1¬†‚Äî¬†Install2¬†‚Äî¬†Require in your script3¬†‚Äî¬†Create a server instance4¬†‚Äî¬†Start listening5¬†‚Äî¬†Shut down\n1¬†‚Äî¬†Install\n2¬†‚Äî¬†Require in your script\n3¬†‚Äî¬†Create a server instance\n4¬†‚Äî¬†Start listening\n5¬†‚Äî¬†Shut down\nOptions reference\nTLS and STARTTLS\nHandling errors\nHandling authentication (onAuth)Password‚Äëbased (PLAIN / LOGIN)OAuth¬†2 (XOAUTH2)\nonAuth\nPassword‚Äëbased (PLAIN / LOGIN)\nOAuth¬†2 (XOAUTH2)\nXOAUTH2\nValidating client connection (onConnect/onClose)\nonConnect\nonClose\nValidating TLS information (onSecure)\nonSecure\nValidating sender (onMailFrom)\nonMailFrom\nValidating recipients (onRcptTo)\nonRcptTo\nProcessing incoming messages (onData)\nonData\nUsing the SIZE extension\nUsing LMTP\nSession object\nEnvelope object\nAddress objectDSN Object Properties\nDSN Object Properties\nEnhanced Status Codes (RFC 2034/3463)Enabling Enhanced Status CodesDisabling Enhanced Status CodesEnhanced Status Code Examples\nEnabling Enhanced Status Codes\nDisabling Enhanced Status Codes\nEnhanced Status Code Examples\nDSN (Delivery Status Notification) SupportDSN ParametersAccessing DSN ParametersDSN Parameter ValidationComplete DSN ExampleProduction DSN Implementation Example\nDSN Parameters\nAccessing DSN Parameters\nDSN Parameter Validation\nComplete DSN Example\nProduction DSN Implementation Example\nSupported commands and extensionsCommandsExtensions\nCommands\nExtensions\nLicense",
        "source_url": "https://nodemailer.com/extras/smtp-server#3create-a-server-instance",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 412
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nSMTP Server\nSMTP Server\nCreate SMTP and LMTP server instances on the fly.smtp‚Äëserverisnota full‚Äëblown server application likeHarakabut a convenient way to add custom SMTP or LMTP listeners to your app. It is the successor of the server part of the now‚Äëdeprecatedsimplesmtpmodule. For a matching SMTP client, seesmtp‚Äëconnection.\nUsage‚Äã\n1¬†‚Äî¬†Install‚Äã\nnpm install smtp-server --save\nnpm install smtp-server --save\n2¬†‚Äî¬†Require in your script‚Äã\nconst{SMTPServer}=require(\"smtp-server\");\nconst{SMTPServer}=require(\"smtp-server\");\n3¬†‚Äî¬†Create a server instance‚Äã\nconstserver=newSMTPServer(options);\nconstserver=newSMTPServer(options);\n4¬†‚Äî¬†Start listening‚Äã\nserver.listen(port[,host][,callback]);\nserver.listen(port[,host][,callback]);\n5¬†‚Äî¬†Shut down‚Äã\nserver.close(callback);\nserver.close(callback);\nOptions reference‚Äã\nBoolean\nfalse\nSTARTTLS\nfalse\nString\nos.hostname()\nString\nNumber\n0\n0\nBoolean\nfalse\nstream.sizeExceeded\nString[]\n['PLAIN', 'LOGIN']\n'XOAUTH2'\n'CRAM-MD5'\nBoolean\nfalse\nString[]\n['AUTH']\nBoolean\nfalse\nBoolean\ntrue\nENHANCEDSTATUSCODES\nEHLO\nBoolean\ntrue\nDSN\nEHLO\nBoolean\nfalse\nBoolean\nfalse\nMap | Object\nBoolean | Object\nfalse\ntrue\nconsole\nNumber\nInfinity\nBoolean\nfalse\nBoolean\nfalse\nBoolean\nfalse\nNumber\n60_000\nNumber\n30_000\nclose()\nFunction\nObject\n.reverse\ndns\ndns.reverse\nYou may also pass anynet.createServeroptions and, whensecureistrue, anytls.createServeroptions.\nnet.createServer\nsecure\ntrue\ntls.createServer\nTLS and STARTTLS‚Äã\nIf you enable TLS (secure: true)orleaveSTARTTLSenabled, ship a proper certificate viakey,cert, and optionallyca. Otherwisesmtp‚Äëserverfalls back to a self‚Äësigned cert forlocalhost, which almost",
        "source_url": "https://nodemailer.com/extras/smtp-server#4start-listening",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "‚Äã\nIf you enable TLS (secure: true)orleaveSTARTTLSenabled, ship a proper certificate viakey,cert, and optionallyca. Otherwisesmtp‚Äëserverfalls back to a self‚Äësigned cert forlocalhost, which almost every client rejects.\nsecure: true\nSTARTTLS\nkey\ncert\nca\nlocalhost\nconstfs=require(\"fs\");constserver=newSMTPServer({secure:true,key:fs.readFileSync(\"private.key\"),cert:fs.readFileSync(\"server.crt\"),});server.listen(465);\nconstfs=require(\"fs\");constserver=newSMTPServer({secure:true,key:fs.readFileSync(\"private.key\"),cert:fs.readFileSync(\"server.crt\"),});server.listen(465);\nHandling errors‚Äã\nAttach anerrorlistener to surface server errors:\nerror\nserver.on(\"error\",(err)=>{console.error(\"SMTP Server error:\",err.message);});\nserver.on(\"error\",(err)=>{console.error(\"SMTP Server error:\",err.message);});\nHandling authentication (onAuth)‚Äã\nonAuth\nconstserver=newSMTPServer({onAuth(auth,session,callback){// auth.method ‚Üí 'PLAIN', 'LOGIN', 'XOAUTH2', or 'CRAM-MD5'// Return `callback(err)` to reject, `callback(null, response)` to accept},});\nconstserver=newSMTPServer({onAuth(auth,session,callback){// auth.method ‚Üí 'PLAIN', 'LOGIN', 'XOAUTH2', or 'CRAM-MD5'// Return `callback(err)` to reject, `callback(null, response)` to accept},});\nPassword‚Äëbased (PLAIN / LOGIN)‚Äã\nonAuth(auth,session,cb){if(auth.username!==\"alice\"||auth.password!==\"s3cr3t\"){returncb(newError(\"Invalid username or password\"));}cb(null,{user:auth.username});}\nonAuth(auth,session,cb){if(auth.username!==\"alice\"||auth.password!==\"s3cr3t\"){returncb(newError(\"Invalid username or password\"));}cb(null,{user:auth.username});}\nOAuth¬†2 (XOAUTH2)‚Äã\nXOAUTH2\nconstserver=newSMTPServer({authMethods:[\"XOAUTH2\"],onAuth(auth,session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth",
        "source_url": "https://nodemailer.com/extras/smtp-server#4start-listening",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": ",session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth.username});},});\nconstserver=newSMTPServer({authMethods:[\"XOAUTH2\"],onAuth(auth,session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth.username});},});\nValidating client connection (onConnect/onClose)‚Äã\nonConnect\nonClose\nconstserver=newSMTPServer({onConnect(session,cb){if(session.remoteAddress===\"127.0.0.1\"){returncb(newError(\"Connections from localhost are not allowed\"));}cb();// accept},onClose(session){console.log(`Connection from${session.remoteAddress}closed`);},});\nconstserver=newSMTPServer({onConnect(session,cb){if(session.remoteAddress===\"127.0.0.1\"){returncb(newError(\"Connections from localhost are not allowed\"));}cb();// accept},onClose(session){console.log(`Connection from${session.remoteAddress}closed`);},});\nValidating TLS information (onSecure)‚Äã\nonSecure\nonSecure(socket,session,cb){if(session.servername!==\"mail.example.com\"){returncb(newError(\"SNI mismatch\"));}cb();}\nonSecure(socket,session,cb){if(session.servername!==\"mail.example.com\"){returncb(newError(\"SNI mismatch\"));}cb();}\nValidating sender (onMailFrom)‚Äã\nonMailFrom\nonMailFrom(address,session,cb){if(!address.address.endsWith(\"@example.com\")){returncb(Object.assign(newError(\"Relay denied\"),{responseCode:553}));}cb();}\nonMailFrom(address,session,cb){if(!address.address.endsWith(\"@example.com\")){returncb(Object.assign(newError(\"Relay denied\"),{responseCode:553}));}cb();}\nValidating recipients (onRcptTo)‚Äã\nonRcptTo\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(new",
        "source_url": "https://nodemailer.com/extras/smtp-server#4start-listening",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "cptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nProcessing incoming messages (onData)‚Äã\nonData\nonData(stream,session,cb){constwrite=require(\"fs\").createWriteStream(\"/tmp/message.eml\");stream.pipe(write);stream.on(\"end\",()=>cb(null,\"Queued\"));}\nonData(stream,session,cb){constwrite=require(\"fs\").createWriteStream(\"/tmp/message.eml\");stream.pipe(write);stream.on(\"end\",()=>cb(null,\"Queued\"));}\nsmtp‚Äëserverstreams your messageverbatim‚Äî noReceived:header is added. Add one yourself if you need full RFC¬†5321 compliance.\nReceived:\nUsing the SIZE extension‚Äã\nSet thesizeoption to advertise a limit, then checkstream.sizeExceededinonData:\nsize\nstream.sizeExceeded\nonData\nconstserver=newSMTPServer({size:1024*1024,// 1¬†MiBonData(s,sess,cb){s.on(\"end\",()=>{if(s.sizeExceeded){consterr=Object.assign(newError(\"Message too large\"),{responseCode:552});returncb(err);}cb(null,\"OK\");});},});\nconstserver=newSMTPServer({size:1024*1024,// 1¬†MiBonData(s,sess,cb){s.on(\"end\",()=>{if(s.sizeExceeded){consterr=Object.assign(newError(\"Message too large\"),{responseCode:552});returncb(err);}cb(null,\"OK\");});},});\nUsing LMTP‚Äã\nconstserver=newSMTPServer({lmtp:true,onData(stream,session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):`<${rcpt.address}> accepted`));cb(null,replies);});},});\nconstserver=newSMTPServer({lmtp:true,onData(stream,session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):",
        "source_url": "https://nodemailer.com/extras/smtp-server#4start-listening",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": ",session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):`<${rcpt.address}> accepted`));cb(null,replies);});},});\nSession object‚Äã\nString\nString\nString\nremoteAddress\ndisableReverseLookup\n\"HELO\" | \"EHLO\" | \"LHLO\"\nString\nObject\nmailFrom\nrcptTo\ndsn\nany\nonAuth\nNumber\n\"SMTP\" | \"ESMTP\" | \"ESMTPA\" ‚Ä¶\nReceived:\nEnvelope object‚Äã\nThesession.envelopeobject contains transaction-specific data:\nsession.envelope\n{\"mailFrom\": {\"address\": \"sender@example.com\",\"args\": { \"SIZE\": \"12345\", \"RET\": \"HDRS\" },\"dsn\": { \"ret\": \"HDRS\", \"envid\": \"abc123\" }},\"rcptTo\": [{\"address\": \"user1@example.com\",\"args\": { \"NOTIFY\": \"SUCCESS,FAILURE\" },\"dsn\": { \"notify\": [\"SUCCESS\", \"FAILURE\"], \"orcpt\": \"rfc822;user1@example.com\" }}],\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\"}}\n{\"mailFrom\": {\"address\": \"sender@example.com\",\"args\": { \"SIZE\": \"12345\", \"RET\": \"HDRS\" },\"dsn\": { \"ret\": \"HDRS\", \"envid\": \"abc123\" }},\"rcptTo\": [{\"address\": \"user1@example.com\",\"args\": { \"NOTIFY\": \"SUCCESS,FAILURE\" },\"dsn\": { \"notify\": [\"SUCCESS\", \"FAILURE\"], \"orcpt\": \"rfc822;user1@example.com\" }}],\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\"}}\nObject\nObject[]\nObject\nAddress object‚Äã\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\":",
        "source_url": "https://nodemailer.com/extras/smtp-server#4start-listening",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part6",
        "text": "123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\nMAIL FROM:\nRCPT TO:\nDSN Object Properties‚Äã\nString\n'FULL'\n'HDRS'\nString\nString[]\nString\nEnhanced Status Codes (RFC 2034/3463)‚Äã\nsmtp‚ÄëserversupportsEnhanced Status Codesas defined in RFC 2034 and RFC 3463. When enabled, all SMTP responses include enhanced status codes in the formatX.Y.Z:\nX.Y.Z\n250 2.1.0 Accepted        ‚Üê Enhanced status code: 2.1.0550 5.1.1 Mailbox unavailable ‚Üê Enhanced status code: 5.1.1\n250 2.1.0 Accepted        ‚Üê Enhanced status code: 2.1.0550 5.1.1 Mailbox unavailable ‚Üê Enhanced status code: 5.1.1\nEnabling Enhanced Status Codes‚Äã\nTo enable enhanced status codes (they are disabled by default):\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:false,// Enable enhanced status codesonMailFrom(address,session,callback){callback();// Response: \"250 2.1.0 Accepted\" (with enhanced code)},});\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:false,// Enable enhanced status codesonMailFrom(address,session,callback){callback();// Response: \"250 2.1.0 Accepted\" (with enhanced code)},});\nDisabling Enhanced Status Codes‚Äã\nEnhanced status codes are disabled by default, but you can explicitly disable them:\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:true,// Explicitly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:true,// Explicitly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nEnhanced Status Code Examples‚Äã\n250\n2.0.0\n250\n2.",
        "source_url": "https://nodemailer.com/extras/smtp-server#4start-listening",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part7",
        "text": "ly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nEnhanced Status Code Examples‚Äã\n250\n2.0.0\n250\n2.1.0\n250\n2.1.5\n250\n2.6.0\n501\n5.5.4\n550\n5.1.1\n552\n5.2.2\nDSN (Delivery Status Notification) Support‚Äã\nsmtp‚Äëserverfully supportsDSN parametersas defined in RFC 3461, allowing clients to request delivery status notifications.\nDSN functionality requiresdelivery status notificationsto be enabled. Since delivery status notifications are disabled by default, you must sethideDSN: falseto use DSN features.\nhideDSN: false\nDSN Parameters‚Äã\nRET=FULLorRET=HDRS‚Äî Return full message or headers only in DSN\nRET=FULL\nRET=HDRS\nENVID=<envelope-id>‚Äî Envelope identifier for tracking\nENVID=<envelope-id>\n// Client sends: MAIL FROM:<sender@example.com> RET=FULL ENVID=abc123\n// Client sends: MAIL FROM:<sender@example.com> RET=FULL ENVID=abc123\nNOTIFY=SUCCESS,FAILURE,DELAY,NEVER‚Äî When to send DSN\nNOTIFY=SUCCESS,FAILURE,DELAY,NEVER\nORCPT=<original-recipient>‚Äî Original recipient for tracking\nORCPT=<original-recipient>\n// Client sends: RCPT TO:<user@example.com> NOTIFY=SUCCESS,FAILURE ORCPT=rfc822;user@example.com\n// Client sends: RCPT TO:<user@example.com> NOTIFY=SUCCESS,FAILURE ORCPT=rfc822;user@example.com\nAccessing DSN Parameters‚Äã\nDSN parameters are available in your callback handlers:\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){// Access DSN parameters from MAIL FROMconstret=session.envelope.dsn.ret;// 'FULL' or 'HDRS'constenvid=session.envelope.dsn.envid;// Envelope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE',",
        "source_url": "https://nodemailer.com/extras/smtp-server#4start-listening",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part8",
        "text": "velope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE', 'DELAY']constorcpt=address.dsn.orcpt;// Original recipientconsole.log(`NOTIFY:${notify.join(\",\")}, ORCPT:${orcpt}`);callback();},});\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){// Access DSN parameters from MAIL FROMconstret=session.envelope.dsn.ret;// 'FULL' or 'HDRS'constenvid=session.envelope.dsn.envid;// Envelope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE', 'DELAY']constorcpt=address.dsn.orcpt;// Original recipientconsole.log(`NOTIFY:${notify.join(\",\")}, ORCPT:${orcpt}`);callback();},});\nDSN Parameter Validation‚Äã\nsmtp‚Äëserverautomatically validates DSN parameters:\nRETmust beFULLorHDRS\nRET\nFULL\nHDRS\nNOTIFYmust beSUCCESS,FAILURE,DELAY, orNEVER\nNOTIFY\nSUCCESS\nFAILURE\nDELAY\nNEVER\nNOTIFY=NEVERcannot be combined with other values\nNOTIFY=NEVER\nInvalid parameters return appropriate error responses with enhanced status codes\nComplete DSN Example‚Äã\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){const{ret,envid}=session.envelope.dsn;console.log(`Mail from${address.address}, RET=${ret}, ENVID=${envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`Rcpt to${address.address}, NOTIFY=${notify.join(\",\")}, ORCPT=${orcpt}`);callback();},onData(stream,session,callback){// Process message with DSN contextconst{dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nconstserver=newSMTPServer({hide",
        "source_url": "https://nodemailer.com/extras/smtp-server#4start-listening",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part9",
        "text": "dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){const{ret,envid}=session.envelope.dsn;console.log(`Mail from${address.address}, RET=${ret}, ENVID=${envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`Rcpt to${address.address}, NOTIFY=${notify.join(\",\")}, ORCPT=${orcpt}`);callback();},onData(stream,session,callback){// Process message with DSN contextconst{dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nProduction DSN Implementation Example‚Äã\nHere's a complete example showing how to implement DSN notifications using nodemailer:\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransporter({host:\"smtp.example.com\",port:587,secure:false,auth:{user:\"dsn-sender@example.com\",pass:\"your-password\",},});// DSN notification generatorclassDSNNotifier{constructor(transporter){this.transporter=transporter;}asyncsendSuccessNotification(envelope,messageId,deliveryTime){// Only send if SUCCESS notification was requestedconstneedsSuccessNotification=envelope.rcptTo.some((rcpt)=>rcpt.dsn.notify&&rcpt.dsn.notify.includes(\"SUCCESS\"));if(!needsSuccessNotification||!envelope.mailFrom.address){return;}constdsnMessage=this.generateDSNMessage({action:\"delivered\",status:\"2.0.0\",envelope,messageId,deliveryTime,diagnosticCode:\"smtp; 250 2.0.0 Message accepted for delivery\",});awaitthis.transporter.sendMail({from:\"postmaster@example.com\",to:envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSN",
        "source_url": "https://nodemailer.com/extras/smtp-server#4start-listening",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part10",
        "text": ":envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSNMessage({action,status,envelope,messageId,deliveryTime,diagnosticCode}){const{dsn}=envelope;consttimestamp=deliveryTime||newDate().toISOString();// Generate RFC 3464 compliant delivery status notificationconsttext=`This is an automatically generated Delivery Status Notification.Original Message Details:- Message ID:${messageId}- Envelope ID:${dsn.envid||\"Not provided\"}- Sender:${envelope.mailFrom.address}- Recipients:${envelope.rcptTo.map((r)=>r.address).join(\", \")}- Action:${action}- Status:${status}- Time:${timestamp}${action===\"delivered\"?\"Your message has been successfully delivered to all recipients.\":\"Delivery failed for one or more recipients.\"}`;return{text};}}// Create DSN notifier instanceconstdsnNotifier=newDSNNotifier(dsnTransporter);// SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${address.address}, RET=${dsn.ret}, ENVID=${dsn.envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`RCPT TO:${address.address}, NOTIFY=${notify?.join(\",\")}, ORCPT=${orcpt}`);callback();},asynconData(stream,session,callback){constmessageId=`msg-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;stream.on(\"end\",async()=>{try{// Simulate message deliveryconstdeliveryTime=newDate();// Send DSN success notification if requestedawaitdsnNotifier.sendSuccessNotification(session.envelope,messageId,deliveryTime);callback(null,`Message${messageId}accepted for delivery`);}catch(error){callback(error);}});stream.resume();},});server.listen(2525,()=>{console.log(\"DSN-enabled SMTP server listening on port 2525\");});\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransport",
        "source_url": "https://nodemailer.com/extras/smtp-server#4start-listening",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part11",
        "text": "DSN-enabled SMTP server listening on port 2525\");});\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransporter({host:\"smtp.example.com\",port:587,secure:false,auth:{user:\"dsn-sender@example.com\",pass:\"your-password\",},});// DSN notification generatorclassDSNNotifier{constructor(transporter){this.transporter=transporter;}asyncsendSuccessNotification(envelope,messageId,deliveryTime){// Only send if SUCCESS notification was requestedconstneedsSuccessNotification=envelope.rcptTo.some((rcpt)=>rcpt.dsn.notify&&rcpt.dsn.notify.includes(\"SUCCESS\"));if(!needsSuccessNotification||!envelope.mailFrom.address){return;}constdsnMessage=this.generateDSNMessage({action:\"delivered\",status:\"2.0.0\",envelope,messageId,deliveryTime,diagnosticCode:\"smtp; 250 2.0.0 Message accepted for delivery\",});awaitthis.transporter.sendMail({from:\"postmaster@example.com\",to:envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSNMessage({action,status,envelope,messageId,deliveryTime,diagnosticCode}){const{dsn}=envelope;consttimestamp=deliveryTime||newDate().toISOString();// Generate RFC 3464 compliant delivery status notificationconsttext=`This is an automatically generated Delivery Status Notification.Original Message Details:- Message ID:${messageId}- Envelope ID:${dsn.envid||\"Not provided\"}- Sender:${envelope.mailFrom.address}- Recipients:${envelope.rcptTo.map((r)=>r.address).join(\", \")}- Action:${action}- Status:${status}- Time:${timestamp}${action===\"delivered\"?\"Your message has been successfully delivered to all recipients.\":\"Delivery failed for one or more recipients.\"}`;return{text};}}// Create DSN notifier instanceconstdsnNotifier=newDSNNotifier(dsnTransporter);// SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${",
        "source_url": "https://nodemailer.com/extras/smtp-server#4start-listening",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part12",
        "text": " SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${address.address}, RET=${dsn.ret}, ENVID=${dsn.envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`RCPT TO:${address.address}, NOTIFY=${notify?.join(\",\")}, ORCPT=${orcpt}`);callback();},asynconData(stream,session,callback){constmessageId=`msg-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;stream.on(\"end\",async()=>{try{// Simulate message deliveryconstdeliveryTime=newDate();// Send DSN success notification if requestedawaitdsnNotifier.sendSuccessNotification(session.envelope,messageId,deliveryTime);callback(null,`Message${messageId}accepted for delivery`);}catch(error){callback(error);}});stream.resume();},});server.listen(2525,()=>{console.log(\"DSN-enabled SMTP server listening on port 2525\");});\nThis example demonstrates:\nComplete DSN workflowfrom parameter parsing to notification sending\nRFC-compliant DSN messageswith proper headers and content\nConditional notificationsbased on NOTIFY parameters\nIntegration with nodemailerfor sending DSN notifications\nProduction-ready structurewith error handling\nSupported commands and extensions‚Äã\nCommands‚Äã\nEHLO/HELO\nEHLO\nHELO\nAUTHLOGIN¬∑PLAIN¬∑XOAUTH2‚Ä†¬†¬∑CRAM‚ÄëMD5‚Ä†\nAUTH\nLOGIN\nPLAIN\nXOAUTH2\nCRAM‚ÄëMD5\nMAIL/RCPT/DATA\nMAIL\nRCPT\nDATA\nRSET/NOOP/QUIT/VRFY\nRSET\nNOOP\nQUIT\nVRFY\nHELP(returns RFC¬†5321 URL)\nHELP\nSTARTTLS\nSTARTTLS\n‚Ä†XOAUTH2andCRAM‚ÄëMD5must be enabled viaauthMethods.\nXOAUTH2\nCRAM‚ÄëMD5\nauthMethods\nExtensions‚Äã\nPIPELINING\nPIPELINING\n8BITMIME\n8BITMIME\nSMTPUTF8\nSMTPUTF8\nSIZE\nSIZE\nDSN(RFC 3461)\nDSN\nENHANCEDSTATUSCODES(RFC 2034/3463)\nENH",
        "source_url": "https://nodemailer.com/extras/smtp-server#4start-listening",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part13",
        "text": "8BITMIME\n8BITMIME\nSMTPUTF8\nSMTPUTF8\nSIZE\nSIZE\nDSN(RFC 3461)\nDSN\nENHANCEDSTATUSCODES(RFC 2034/3463)\nENHANCEDSTATUSCODES\nTheCHUNKINGextension isnotimplemented.\nCHUNKING\nLicense‚Äã\nMIT\nUsage1¬†‚Äî¬†Install2¬†‚Äî¬†Require in your script3¬†‚Äî¬†Create a server instance4¬†‚Äî¬†Start listening5¬†‚Äî¬†Shut down\n1¬†‚Äî¬†Install\n2¬†‚Äî¬†Require in your script\n3¬†‚Äî¬†Create a server instance\n4¬†‚Äî¬†Start listening\n5¬†‚Äî¬†Shut down\nOptions reference\nTLS and STARTTLS\nHandling errors\nHandling authentication (onAuth)Password‚Äëbased (PLAIN / LOGIN)OAuth¬†2 (XOAUTH2)\nonAuth\nPassword‚Äëbased (PLAIN / LOGIN)\nOAuth¬†2 (XOAUTH2)\nXOAUTH2\nValidating client connection (onConnect/onClose)\nonConnect\nonClose\nValidating TLS information (onSecure)\nonSecure\nValidating sender (onMailFrom)\nonMailFrom\nValidating recipients (onRcptTo)\nonRcptTo\nProcessing incoming messages (onData)\nonData\nUsing the SIZE extension\nUsing LMTP\nSession object\nEnvelope object\nAddress objectDSN Object Properties\nDSN Object Properties\nEnhanced Status Codes (RFC 2034/3463)Enabling Enhanced Status CodesDisabling Enhanced Status CodesEnhanced Status Code Examples\nEnabling Enhanced Status Codes\nDisabling Enhanced Status Codes\nEnhanced Status Code Examples\nDSN (Delivery Status Notification) SupportDSN ParametersAccessing DSN ParametersDSN Parameter ValidationComplete DSN ExampleProduction DSN Implementation Example\nDSN Parameters\nAccessing DSN Parameters\nDSN Parameter Validation\nComplete DSN Example\nProduction DSN Implementation Example\nSupported commands and extensionsCommandsExtensions\nCommands\nExtensions\nLicense",
        "source_url": "https://nodemailer.com/extras/smtp-server#4start-listening",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 412
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nSMTP Server\nSMTP Server\nCreate SMTP and LMTP server instances on the fly.smtp‚Äëserverisnota full‚Äëblown server application likeHarakabut a convenient way to add custom SMTP or LMTP listeners to your app. It is the successor of the server part of the now‚Äëdeprecatedsimplesmtpmodule. For a matching SMTP client, seesmtp‚Äëconnection.\nUsage‚Äã\n1¬†‚Äî¬†Install‚Äã\nnpm install smtp-server --save\nnpm install smtp-server --save\n2¬†‚Äî¬†Require in your script‚Äã\nconst{SMTPServer}=require(\"smtp-server\");\nconst{SMTPServer}=require(\"smtp-server\");\n3¬†‚Äî¬†Create a server instance‚Äã\nconstserver=newSMTPServer(options);\nconstserver=newSMTPServer(options);\n4¬†‚Äî¬†Start listening‚Äã\nserver.listen(port[,host][,callback]);\nserver.listen(port[,host][,callback]);\n5¬†‚Äî¬†Shut down‚Äã\nserver.close(callback);\nserver.close(callback);\nOptions reference‚Äã\nBoolean\nfalse\nSTARTTLS\nfalse\nString\nos.hostname()\nString\nNumber\n0\n0\nBoolean\nfalse\nstream.sizeExceeded\nString[]\n['PLAIN', 'LOGIN']\n'XOAUTH2'\n'CRAM-MD5'\nBoolean\nfalse\nString[]\n['AUTH']\nBoolean\nfalse\nBoolean\ntrue\nENHANCEDSTATUSCODES\nEHLO\nBoolean\ntrue\nDSN\nEHLO\nBoolean\nfalse\nBoolean\nfalse\nMap | Object\nBoolean | Object\nfalse\ntrue\nconsole\nNumber\nInfinity\nBoolean\nfalse\nBoolean\nfalse\nBoolean\nfalse\nNumber\n60_000\nNumber\n30_000\nclose()\nFunction\nObject\n.reverse\ndns\ndns.reverse\nYou may also pass anynet.createServeroptions and, whensecureistrue, anytls.createServeroptions.\nnet.createServer\nsecure\ntrue\ntls.createServer\nTLS and STARTTLS‚Äã\nIf you enable TLS (secure: true)orleaveSTARTTLSenabled, ship a proper certificate viakey,cert, and optionallyca. Otherwisesmtp‚Äëserverfalls back to a self‚Äësigned cert forlocalhost, which almost",
        "source_url": "https://nodemailer.com/extras/smtp-server#5shut-down",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "‚Äã\nIf you enable TLS (secure: true)orleaveSTARTTLSenabled, ship a proper certificate viakey,cert, and optionallyca. Otherwisesmtp‚Äëserverfalls back to a self‚Äësigned cert forlocalhost, which almost every client rejects.\nsecure: true\nSTARTTLS\nkey\ncert\nca\nlocalhost\nconstfs=require(\"fs\");constserver=newSMTPServer({secure:true,key:fs.readFileSync(\"private.key\"),cert:fs.readFileSync(\"server.crt\"),});server.listen(465);\nconstfs=require(\"fs\");constserver=newSMTPServer({secure:true,key:fs.readFileSync(\"private.key\"),cert:fs.readFileSync(\"server.crt\"),});server.listen(465);\nHandling errors‚Äã\nAttach anerrorlistener to surface server errors:\nerror\nserver.on(\"error\",(err)=>{console.error(\"SMTP Server error:\",err.message);});\nserver.on(\"error\",(err)=>{console.error(\"SMTP Server error:\",err.message);});\nHandling authentication (onAuth)‚Äã\nonAuth\nconstserver=newSMTPServer({onAuth(auth,session,callback){// auth.method ‚Üí 'PLAIN', 'LOGIN', 'XOAUTH2', or 'CRAM-MD5'// Return `callback(err)` to reject, `callback(null, response)` to accept},});\nconstserver=newSMTPServer({onAuth(auth,session,callback){// auth.method ‚Üí 'PLAIN', 'LOGIN', 'XOAUTH2', or 'CRAM-MD5'// Return `callback(err)` to reject, `callback(null, response)` to accept},});\nPassword‚Äëbased (PLAIN / LOGIN)‚Äã\nonAuth(auth,session,cb){if(auth.username!==\"alice\"||auth.password!==\"s3cr3t\"){returncb(newError(\"Invalid username or password\"));}cb(null,{user:auth.username});}\nonAuth(auth,session,cb){if(auth.username!==\"alice\"||auth.password!==\"s3cr3t\"){returncb(newError(\"Invalid username or password\"));}cb(null,{user:auth.username});}\nOAuth¬†2 (XOAUTH2)‚Äã\nXOAUTH2\nconstserver=newSMTPServer({authMethods:[\"XOAUTH2\"],onAuth(auth,session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth",
        "source_url": "https://nodemailer.com/extras/smtp-server#5shut-down",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": ",session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth.username});},});\nconstserver=newSMTPServer({authMethods:[\"XOAUTH2\"],onAuth(auth,session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth.username});},});\nValidating client connection (onConnect/onClose)‚Äã\nonConnect\nonClose\nconstserver=newSMTPServer({onConnect(session,cb){if(session.remoteAddress===\"127.0.0.1\"){returncb(newError(\"Connections from localhost are not allowed\"));}cb();// accept},onClose(session){console.log(`Connection from${session.remoteAddress}closed`);},});\nconstserver=newSMTPServer({onConnect(session,cb){if(session.remoteAddress===\"127.0.0.1\"){returncb(newError(\"Connections from localhost are not allowed\"));}cb();// accept},onClose(session){console.log(`Connection from${session.remoteAddress}closed`);},});\nValidating TLS information (onSecure)‚Äã\nonSecure\nonSecure(socket,session,cb){if(session.servername!==\"mail.example.com\"){returncb(newError(\"SNI mismatch\"));}cb();}\nonSecure(socket,session,cb){if(session.servername!==\"mail.example.com\"){returncb(newError(\"SNI mismatch\"));}cb();}\nValidating sender (onMailFrom)‚Äã\nonMailFrom\nonMailFrom(address,session,cb){if(!address.address.endsWith(\"@example.com\")){returncb(Object.assign(newError(\"Relay denied\"),{responseCode:553}));}cb();}\nonMailFrom(address,session,cb){if(!address.address.endsWith(\"@example.com\")){returncb(Object.assign(newError(\"Relay denied\"),{responseCode:553}));}cb();}\nValidating recipients (onRcptTo)‚Äã\nonRcptTo\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(new",
        "source_url": "https://nodemailer.com/extras/smtp-server#5shut-down",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "cptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nProcessing incoming messages (onData)‚Äã\nonData\nonData(stream,session,cb){constwrite=require(\"fs\").createWriteStream(\"/tmp/message.eml\");stream.pipe(write);stream.on(\"end\",()=>cb(null,\"Queued\"));}\nonData(stream,session,cb){constwrite=require(\"fs\").createWriteStream(\"/tmp/message.eml\");stream.pipe(write);stream.on(\"end\",()=>cb(null,\"Queued\"));}\nsmtp‚Äëserverstreams your messageverbatim‚Äî noReceived:header is added. Add one yourself if you need full RFC¬†5321 compliance.\nReceived:\nUsing the SIZE extension‚Äã\nSet thesizeoption to advertise a limit, then checkstream.sizeExceededinonData:\nsize\nstream.sizeExceeded\nonData\nconstserver=newSMTPServer({size:1024*1024,// 1¬†MiBonData(s,sess,cb){s.on(\"end\",()=>{if(s.sizeExceeded){consterr=Object.assign(newError(\"Message too large\"),{responseCode:552});returncb(err);}cb(null,\"OK\");});},});\nconstserver=newSMTPServer({size:1024*1024,// 1¬†MiBonData(s,sess,cb){s.on(\"end\",()=>{if(s.sizeExceeded){consterr=Object.assign(newError(\"Message too large\"),{responseCode:552});returncb(err);}cb(null,\"OK\");});},});\nUsing LMTP‚Äã\nconstserver=newSMTPServer({lmtp:true,onData(stream,session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):`<${rcpt.address}> accepted`));cb(null,replies);});},});\nconstserver=newSMTPServer({lmtp:true,onData(stream,session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):",
        "source_url": "https://nodemailer.com/extras/smtp-server#5shut-down",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": ",session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):`<${rcpt.address}> accepted`));cb(null,replies);});},});\nSession object‚Äã\nString\nString\nString\nremoteAddress\ndisableReverseLookup\n\"HELO\" | \"EHLO\" | \"LHLO\"\nString\nObject\nmailFrom\nrcptTo\ndsn\nany\nonAuth\nNumber\n\"SMTP\" | \"ESMTP\" | \"ESMTPA\" ‚Ä¶\nReceived:\nEnvelope object‚Äã\nThesession.envelopeobject contains transaction-specific data:\nsession.envelope\n{\"mailFrom\": {\"address\": \"sender@example.com\",\"args\": { \"SIZE\": \"12345\", \"RET\": \"HDRS\" },\"dsn\": { \"ret\": \"HDRS\", \"envid\": \"abc123\" }},\"rcptTo\": [{\"address\": \"user1@example.com\",\"args\": { \"NOTIFY\": \"SUCCESS,FAILURE\" },\"dsn\": { \"notify\": [\"SUCCESS\", \"FAILURE\"], \"orcpt\": \"rfc822;user1@example.com\" }}],\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\"}}\n{\"mailFrom\": {\"address\": \"sender@example.com\",\"args\": { \"SIZE\": \"12345\", \"RET\": \"HDRS\" },\"dsn\": { \"ret\": \"HDRS\", \"envid\": \"abc123\" }},\"rcptTo\": [{\"address\": \"user1@example.com\",\"args\": { \"NOTIFY\": \"SUCCESS,FAILURE\" },\"dsn\": { \"notify\": [\"SUCCESS\", \"FAILURE\"], \"orcpt\": \"rfc822;user1@example.com\" }}],\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\"}}\nObject\nObject[]\nObject\nAddress object‚Äã\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\":",
        "source_url": "https://nodemailer.com/extras/smtp-server#5shut-down",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part6",
        "text": "123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\nMAIL FROM:\nRCPT TO:\nDSN Object Properties‚Äã\nString\n'FULL'\n'HDRS'\nString\nString[]\nString\nEnhanced Status Codes (RFC 2034/3463)‚Äã\nsmtp‚ÄëserversupportsEnhanced Status Codesas defined in RFC 2034 and RFC 3463. When enabled, all SMTP responses include enhanced status codes in the formatX.Y.Z:\nX.Y.Z\n250 2.1.0 Accepted        ‚Üê Enhanced status code: 2.1.0550 5.1.1 Mailbox unavailable ‚Üê Enhanced status code: 5.1.1\n250 2.1.0 Accepted        ‚Üê Enhanced status code: 2.1.0550 5.1.1 Mailbox unavailable ‚Üê Enhanced status code: 5.1.1\nEnabling Enhanced Status Codes‚Äã\nTo enable enhanced status codes (they are disabled by default):\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:false,// Enable enhanced status codesonMailFrom(address,session,callback){callback();// Response: \"250 2.1.0 Accepted\" (with enhanced code)},});\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:false,// Enable enhanced status codesonMailFrom(address,session,callback){callback();// Response: \"250 2.1.0 Accepted\" (with enhanced code)},});\nDisabling Enhanced Status Codes‚Äã\nEnhanced status codes are disabled by default, but you can explicitly disable them:\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:true,// Explicitly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:true,// Explicitly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nEnhanced Status Code Examples‚Äã\n250\n2.0.0\n250\n2.",
        "source_url": "https://nodemailer.com/extras/smtp-server#5shut-down",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part7",
        "text": "ly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nEnhanced Status Code Examples‚Äã\n250\n2.0.0\n250\n2.1.0\n250\n2.1.5\n250\n2.6.0\n501\n5.5.4\n550\n5.1.1\n552\n5.2.2\nDSN (Delivery Status Notification) Support‚Äã\nsmtp‚Äëserverfully supportsDSN parametersas defined in RFC 3461, allowing clients to request delivery status notifications.\nDSN functionality requiresdelivery status notificationsto be enabled. Since delivery status notifications are disabled by default, you must sethideDSN: falseto use DSN features.\nhideDSN: false\nDSN Parameters‚Äã\nRET=FULLorRET=HDRS‚Äî Return full message or headers only in DSN\nRET=FULL\nRET=HDRS\nENVID=<envelope-id>‚Äî Envelope identifier for tracking\nENVID=<envelope-id>\n// Client sends: MAIL FROM:<sender@example.com> RET=FULL ENVID=abc123\n// Client sends: MAIL FROM:<sender@example.com> RET=FULL ENVID=abc123\nNOTIFY=SUCCESS,FAILURE,DELAY,NEVER‚Äî When to send DSN\nNOTIFY=SUCCESS,FAILURE,DELAY,NEVER\nORCPT=<original-recipient>‚Äî Original recipient for tracking\nORCPT=<original-recipient>\n// Client sends: RCPT TO:<user@example.com> NOTIFY=SUCCESS,FAILURE ORCPT=rfc822;user@example.com\n// Client sends: RCPT TO:<user@example.com> NOTIFY=SUCCESS,FAILURE ORCPT=rfc822;user@example.com\nAccessing DSN Parameters‚Äã\nDSN parameters are available in your callback handlers:\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){// Access DSN parameters from MAIL FROMconstret=session.envelope.dsn.ret;// 'FULL' or 'HDRS'constenvid=session.envelope.dsn.envid;// Envelope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE',",
        "source_url": "https://nodemailer.com/extras/smtp-server#5shut-down",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part8",
        "text": "velope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE', 'DELAY']constorcpt=address.dsn.orcpt;// Original recipientconsole.log(`NOTIFY:${notify.join(\",\")}, ORCPT:${orcpt}`);callback();},});\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){// Access DSN parameters from MAIL FROMconstret=session.envelope.dsn.ret;// 'FULL' or 'HDRS'constenvid=session.envelope.dsn.envid;// Envelope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE', 'DELAY']constorcpt=address.dsn.orcpt;// Original recipientconsole.log(`NOTIFY:${notify.join(\",\")}, ORCPT:${orcpt}`);callback();},});\nDSN Parameter Validation‚Äã\nsmtp‚Äëserverautomatically validates DSN parameters:\nRETmust beFULLorHDRS\nRET\nFULL\nHDRS\nNOTIFYmust beSUCCESS,FAILURE,DELAY, orNEVER\nNOTIFY\nSUCCESS\nFAILURE\nDELAY\nNEVER\nNOTIFY=NEVERcannot be combined with other values\nNOTIFY=NEVER\nInvalid parameters return appropriate error responses with enhanced status codes\nComplete DSN Example‚Äã\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){const{ret,envid}=session.envelope.dsn;console.log(`Mail from${address.address}, RET=${ret}, ENVID=${envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`Rcpt to${address.address}, NOTIFY=${notify.join(\",\")}, ORCPT=${orcpt}`);callback();},onData(stream,session,callback){// Process message with DSN contextconst{dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nconstserver=newSMTPServer({hide",
        "source_url": "https://nodemailer.com/extras/smtp-server#5shut-down",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part9",
        "text": "dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){const{ret,envid}=session.envelope.dsn;console.log(`Mail from${address.address}, RET=${ret}, ENVID=${envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`Rcpt to${address.address}, NOTIFY=${notify.join(\",\")}, ORCPT=${orcpt}`);callback();},onData(stream,session,callback){// Process message with DSN contextconst{dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nProduction DSN Implementation Example‚Äã\nHere's a complete example showing how to implement DSN notifications using nodemailer:\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransporter({host:\"smtp.example.com\",port:587,secure:false,auth:{user:\"dsn-sender@example.com\",pass:\"your-password\",},});// DSN notification generatorclassDSNNotifier{constructor(transporter){this.transporter=transporter;}asyncsendSuccessNotification(envelope,messageId,deliveryTime){// Only send if SUCCESS notification was requestedconstneedsSuccessNotification=envelope.rcptTo.some((rcpt)=>rcpt.dsn.notify&&rcpt.dsn.notify.includes(\"SUCCESS\"));if(!needsSuccessNotification||!envelope.mailFrom.address){return;}constdsnMessage=this.generateDSNMessage({action:\"delivered\",status:\"2.0.0\",envelope,messageId,deliveryTime,diagnosticCode:\"smtp; 250 2.0.0 Message accepted for delivery\",});awaitthis.transporter.sendMail({from:\"postmaster@example.com\",to:envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSN",
        "source_url": "https://nodemailer.com/extras/smtp-server#5shut-down",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part10",
        "text": ":envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSNMessage({action,status,envelope,messageId,deliveryTime,diagnosticCode}){const{dsn}=envelope;consttimestamp=deliveryTime||newDate().toISOString();// Generate RFC 3464 compliant delivery status notificationconsttext=`This is an automatically generated Delivery Status Notification.Original Message Details:- Message ID:${messageId}- Envelope ID:${dsn.envid||\"Not provided\"}- Sender:${envelope.mailFrom.address}- Recipients:${envelope.rcptTo.map((r)=>r.address).join(\", \")}- Action:${action}- Status:${status}- Time:${timestamp}${action===\"delivered\"?\"Your message has been successfully delivered to all recipients.\":\"Delivery failed for one or more recipients.\"}`;return{text};}}// Create DSN notifier instanceconstdsnNotifier=newDSNNotifier(dsnTransporter);// SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${address.address}, RET=${dsn.ret}, ENVID=${dsn.envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`RCPT TO:${address.address}, NOTIFY=${notify?.join(\",\")}, ORCPT=${orcpt}`);callback();},asynconData(stream,session,callback){constmessageId=`msg-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;stream.on(\"end\",async()=>{try{// Simulate message deliveryconstdeliveryTime=newDate();// Send DSN success notification if requestedawaitdsnNotifier.sendSuccessNotification(session.envelope,messageId,deliveryTime);callback(null,`Message${messageId}accepted for delivery`);}catch(error){callback(error);}});stream.resume();},});server.listen(2525,()=>{console.log(\"DSN-enabled SMTP server listening on port 2525\");});\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransport",
        "source_url": "https://nodemailer.com/extras/smtp-server#5shut-down",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part11",
        "text": "DSN-enabled SMTP server listening on port 2525\");});\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransporter({host:\"smtp.example.com\",port:587,secure:false,auth:{user:\"dsn-sender@example.com\",pass:\"your-password\",},});// DSN notification generatorclassDSNNotifier{constructor(transporter){this.transporter=transporter;}asyncsendSuccessNotification(envelope,messageId,deliveryTime){// Only send if SUCCESS notification was requestedconstneedsSuccessNotification=envelope.rcptTo.some((rcpt)=>rcpt.dsn.notify&&rcpt.dsn.notify.includes(\"SUCCESS\"));if(!needsSuccessNotification||!envelope.mailFrom.address){return;}constdsnMessage=this.generateDSNMessage({action:\"delivered\",status:\"2.0.0\",envelope,messageId,deliveryTime,diagnosticCode:\"smtp; 250 2.0.0 Message accepted for delivery\",});awaitthis.transporter.sendMail({from:\"postmaster@example.com\",to:envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSNMessage({action,status,envelope,messageId,deliveryTime,diagnosticCode}){const{dsn}=envelope;consttimestamp=deliveryTime||newDate().toISOString();// Generate RFC 3464 compliant delivery status notificationconsttext=`This is an automatically generated Delivery Status Notification.Original Message Details:- Message ID:${messageId}- Envelope ID:${dsn.envid||\"Not provided\"}- Sender:${envelope.mailFrom.address}- Recipients:${envelope.rcptTo.map((r)=>r.address).join(\", \")}- Action:${action}- Status:${status}- Time:${timestamp}${action===\"delivered\"?\"Your message has been successfully delivered to all recipients.\":\"Delivery failed for one or more recipients.\"}`;return{text};}}// Create DSN notifier instanceconstdsnNotifier=newDSNNotifier(dsnTransporter);// SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${",
        "source_url": "https://nodemailer.com/extras/smtp-server#5shut-down",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part12",
        "text": " SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${address.address}, RET=${dsn.ret}, ENVID=${dsn.envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`RCPT TO:${address.address}, NOTIFY=${notify?.join(\",\")}, ORCPT=${orcpt}`);callback();},asynconData(stream,session,callback){constmessageId=`msg-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;stream.on(\"end\",async()=>{try{// Simulate message deliveryconstdeliveryTime=newDate();// Send DSN success notification if requestedawaitdsnNotifier.sendSuccessNotification(session.envelope,messageId,deliveryTime);callback(null,`Message${messageId}accepted for delivery`);}catch(error){callback(error);}});stream.resume();},});server.listen(2525,()=>{console.log(\"DSN-enabled SMTP server listening on port 2525\");});\nThis example demonstrates:\nComplete DSN workflowfrom parameter parsing to notification sending\nRFC-compliant DSN messageswith proper headers and content\nConditional notificationsbased on NOTIFY parameters\nIntegration with nodemailerfor sending DSN notifications\nProduction-ready structurewith error handling\nSupported commands and extensions‚Äã\nCommands‚Äã\nEHLO/HELO\nEHLO\nHELO\nAUTHLOGIN¬∑PLAIN¬∑XOAUTH2‚Ä†¬†¬∑CRAM‚ÄëMD5‚Ä†\nAUTH\nLOGIN\nPLAIN\nXOAUTH2\nCRAM‚ÄëMD5\nMAIL/RCPT/DATA\nMAIL\nRCPT\nDATA\nRSET/NOOP/QUIT/VRFY\nRSET\nNOOP\nQUIT\nVRFY\nHELP(returns RFC¬†5321 URL)\nHELP\nSTARTTLS\nSTARTTLS\n‚Ä†XOAUTH2andCRAM‚ÄëMD5must be enabled viaauthMethods.\nXOAUTH2\nCRAM‚ÄëMD5\nauthMethods\nExtensions‚Äã\nPIPELINING\nPIPELINING\n8BITMIME\n8BITMIME\nSMTPUTF8\nSMTPUTF8\nSIZE\nSIZE\nDSN(RFC 3461)\nDSN\nENHANCEDSTATUSCODES(RFC 2034/3463)\nENH",
        "source_url": "https://nodemailer.com/extras/smtp-server#5shut-down",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part13",
        "text": "8BITMIME\n8BITMIME\nSMTPUTF8\nSMTPUTF8\nSIZE\nSIZE\nDSN(RFC 3461)\nDSN\nENHANCEDSTATUSCODES(RFC 2034/3463)\nENHANCEDSTATUSCODES\nTheCHUNKINGextension isnotimplemented.\nCHUNKING\nLicense‚Äã\nMIT\nUsage1¬†‚Äî¬†Install2¬†‚Äî¬†Require in your script3¬†‚Äî¬†Create a server instance4¬†‚Äî¬†Start listening5¬†‚Äî¬†Shut down\n1¬†‚Äî¬†Install\n2¬†‚Äî¬†Require in your script\n3¬†‚Äî¬†Create a server instance\n4¬†‚Äî¬†Start listening\n5¬†‚Äî¬†Shut down\nOptions reference\nTLS and STARTTLS\nHandling errors\nHandling authentication (onAuth)Password‚Äëbased (PLAIN / LOGIN)OAuth¬†2 (XOAUTH2)\nonAuth\nPassword‚Äëbased (PLAIN / LOGIN)\nOAuth¬†2 (XOAUTH2)\nXOAUTH2\nValidating client connection (onConnect/onClose)\nonConnect\nonClose\nValidating TLS information (onSecure)\nonSecure\nValidating sender (onMailFrom)\nonMailFrom\nValidating recipients (onRcptTo)\nonRcptTo\nProcessing incoming messages (onData)\nonData\nUsing the SIZE extension\nUsing LMTP\nSession object\nEnvelope object\nAddress objectDSN Object Properties\nDSN Object Properties\nEnhanced Status Codes (RFC 2034/3463)Enabling Enhanced Status CodesDisabling Enhanced Status CodesEnhanced Status Code Examples\nEnabling Enhanced Status Codes\nDisabling Enhanced Status Codes\nEnhanced Status Code Examples\nDSN (Delivery Status Notification) SupportDSN ParametersAccessing DSN ParametersDSN Parameter ValidationComplete DSN ExampleProduction DSN Implementation Example\nDSN Parameters\nAccessing DSN Parameters\nDSN Parameter Validation\nComplete DSN Example\nProduction DSN Implementation Example\nSupported commands and extensionsCommandsExtensions\nCommands\nExtensions\nLicense",
        "source_url": "https://nodemailer.com/extras/smtp-server#5shut-down",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 412
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nSMTP Server\nSMTP Server\nCreate SMTP and LMTP server instances on the fly.smtp‚Äëserverisnota full‚Äëblown server application likeHarakabut a convenient way to add custom SMTP or LMTP listeners to your app. It is the successor of the server part of the now‚Äëdeprecatedsimplesmtpmodule. For a matching SMTP client, seesmtp‚Äëconnection.\nUsage‚Äã\n1¬†‚Äî¬†Install‚Äã\nnpm install smtp-server --save\nnpm install smtp-server --save\n2¬†‚Äî¬†Require in your script‚Äã\nconst{SMTPServer}=require(\"smtp-server\");\nconst{SMTPServer}=require(\"smtp-server\");\n3¬†‚Äî¬†Create a server instance‚Äã\nconstserver=newSMTPServer(options);\nconstserver=newSMTPServer(options);\n4¬†‚Äî¬†Start listening‚Äã\nserver.listen(port[,host][,callback]);\nserver.listen(port[,host][,callback]);\n5¬†‚Äî¬†Shut down‚Äã\nserver.close(callback);\nserver.close(callback);\nOptions reference‚Äã\nBoolean\nfalse\nSTARTTLS\nfalse\nString\nos.hostname()\nString\nNumber\n0\n0\nBoolean\nfalse\nstream.sizeExceeded\nString[]\n['PLAIN', 'LOGIN']\n'XOAUTH2'\n'CRAM-MD5'\nBoolean\nfalse\nString[]\n['AUTH']\nBoolean\nfalse\nBoolean\ntrue\nENHANCEDSTATUSCODES\nEHLO\nBoolean\ntrue\nDSN\nEHLO\nBoolean\nfalse\nBoolean\nfalse\nMap | Object\nBoolean | Object\nfalse\ntrue\nconsole\nNumber\nInfinity\nBoolean\nfalse\nBoolean\nfalse\nBoolean\nfalse\nNumber\n60_000\nNumber\n30_000\nclose()\nFunction\nObject\n.reverse\ndns\ndns.reverse\nYou may also pass anynet.createServeroptions and, whensecureistrue, anytls.createServeroptions.\nnet.createServer\nsecure\ntrue\ntls.createServer\nTLS and STARTTLS‚Äã\nIf you enable TLS (secure: true)orleaveSTARTTLSenabled, ship a proper certificate viakey,cert, and optionallyca. Otherwisesmtp‚Äëserverfalls back to a self‚Äësigned cert forlocalhost, which almost",
        "source_url": "https://nodemailer.com/extras/smtp-server#options-reference",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "‚Äã\nIf you enable TLS (secure: true)orleaveSTARTTLSenabled, ship a proper certificate viakey,cert, and optionallyca. Otherwisesmtp‚Äëserverfalls back to a self‚Äësigned cert forlocalhost, which almost every client rejects.\nsecure: true\nSTARTTLS\nkey\ncert\nca\nlocalhost\nconstfs=require(\"fs\");constserver=newSMTPServer({secure:true,key:fs.readFileSync(\"private.key\"),cert:fs.readFileSync(\"server.crt\"),});server.listen(465);\nconstfs=require(\"fs\");constserver=newSMTPServer({secure:true,key:fs.readFileSync(\"private.key\"),cert:fs.readFileSync(\"server.crt\"),});server.listen(465);\nHandling errors‚Äã\nAttach anerrorlistener to surface server errors:\nerror\nserver.on(\"error\",(err)=>{console.error(\"SMTP Server error:\",err.message);});\nserver.on(\"error\",(err)=>{console.error(\"SMTP Server error:\",err.message);});\nHandling authentication (onAuth)‚Äã\nonAuth\nconstserver=newSMTPServer({onAuth(auth,session,callback){// auth.method ‚Üí 'PLAIN', 'LOGIN', 'XOAUTH2', or 'CRAM-MD5'// Return `callback(err)` to reject, `callback(null, response)` to accept},});\nconstserver=newSMTPServer({onAuth(auth,session,callback){// auth.method ‚Üí 'PLAIN', 'LOGIN', 'XOAUTH2', or 'CRAM-MD5'// Return `callback(err)` to reject, `callback(null, response)` to accept},});\nPassword‚Äëbased (PLAIN / LOGIN)‚Äã\nonAuth(auth,session,cb){if(auth.username!==\"alice\"||auth.password!==\"s3cr3t\"){returncb(newError(\"Invalid username or password\"));}cb(null,{user:auth.username});}\nonAuth(auth,session,cb){if(auth.username!==\"alice\"||auth.password!==\"s3cr3t\"){returncb(newError(\"Invalid username or password\"));}cb(null,{user:auth.username});}\nOAuth¬†2 (XOAUTH2)‚Äã\nXOAUTH2\nconstserver=newSMTPServer({authMethods:[\"XOAUTH2\"],onAuth(auth,session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth",
        "source_url": "https://nodemailer.com/extras/smtp-server#options-reference",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": ",session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth.username});},});\nconstserver=newSMTPServer({authMethods:[\"XOAUTH2\"],onAuth(auth,session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth.username});},});\nValidating client connection (onConnect/onClose)‚Äã\nonConnect\nonClose\nconstserver=newSMTPServer({onConnect(session,cb){if(session.remoteAddress===\"127.0.0.1\"){returncb(newError(\"Connections from localhost are not allowed\"));}cb();// accept},onClose(session){console.log(`Connection from${session.remoteAddress}closed`);},});\nconstserver=newSMTPServer({onConnect(session,cb){if(session.remoteAddress===\"127.0.0.1\"){returncb(newError(\"Connections from localhost are not allowed\"));}cb();// accept},onClose(session){console.log(`Connection from${session.remoteAddress}closed`);},});\nValidating TLS information (onSecure)‚Äã\nonSecure\nonSecure(socket,session,cb){if(session.servername!==\"mail.example.com\"){returncb(newError(\"SNI mismatch\"));}cb();}\nonSecure(socket,session,cb){if(session.servername!==\"mail.example.com\"){returncb(newError(\"SNI mismatch\"));}cb();}\nValidating sender (onMailFrom)‚Äã\nonMailFrom\nonMailFrom(address,session,cb){if(!address.address.endsWith(\"@example.com\")){returncb(Object.assign(newError(\"Relay denied\"),{responseCode:553}));}cb();}\nonMailFrom(address,session,cb){if(!address.address.endsWith(\"@example.com\")){returncb(Object.assign(newError(\"Relay denied\"),{responseCode:553}));}cb();}\nValidating recipients (onRcptTo)‚Äã\nonRcptTo\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(new",
        "source_url": "https://nodemailer.com/extras/smtp-server#options-reference",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "cptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nProcessing incoming messages (onData)‚Äã\nonData\nonData(stream,session,cb){constwrite=require(\"fs\").createWriteStream(\"/tmp/message.eml\");stream.pipe(write);stream.on(\"end\",()=>cb(null,\"Queued\"));}\nonData(stream,session,cb){constwrite=require(\"fs\").createWriteStream(\"/tmp/message.eml\");stream.pipe(write);stream.on(\"end\",()=>cb(null,\"Queued\"));}\nsmtp‚Äëserverstreams your messageverbatim‚Äî noReceived:header is added. Add one yourself if you need full RFC¬†5321 compliance.\nReceived:\nUsing the SIZE extension‚Äã\nSet thesizeoption to advertise a limit, then checkstream.sizeExceededinonData:\nsize\nstream.sizeExceeded\nonData\nconstserver=newSMTPServer({size:1024*1024,// 1¬†MiBonData(s,sess,cb){s.on(\"end\",()=>{if(s.sizeExceeded){consterr=Object.assign(newError(\"Message too large\"),{responseCode:552});returncb(err);}cb(null,\"OK\");});},});\nconstserver=newSMTPServer({size:1024*1024,// 1¬†MiBonData(s,sess,cb){s.on(\"end\",()=>{if(s.sizeExceeded){consterr=Object.assign(newError(\"Message too large\"),{responseCode:552});returncb(err);}cb(null,\"OK\");});},});\nUsing LMTP‚Äã\nconstserver=newSMTPServer({lmtp:true,onData(stream,session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):`<${rcpt.address}> accepted`));cb(null,replies);});},});\nconstserver=newSMTPServer({lmtp:true,onData(stream,session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):",
        "source_url": "https://nodemailer.com/extras/smtp-server#options-reference",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": ",session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):`<${rcpt.address}> accepted`));cb(null,replies);});},});\nSession object‚Äã\nString\nString\nString\nremoteAddress\ndisableReverseLookup\n\"HELO\" | \"EHLO\" | \"LHLO\"\nString\nObject\nmailFrom\nrcptTo\ndsn\nany\nonAuth\nNumber\n\"SMTP\" | \"ESMTP\" | \"ESMTPA\" ‚Ä¶\nReceived:\nEnvelope object‚Äã\nThesession.envelopeobject contains transaction-specific data:\nsession.envelope\n{\"mailFrom\": {\"address\": \"sender@example.com\",\"args\": { \"SIZE\": \"12345\", \"RET\": \"HDRS\" },\"dsn\": { \"ret\": \"HDRS\", \"envid\": \"abc123\" }},\"rcptTo\": [{\"address\": \"user1@example.com\",\"args\": { \"NOTIFY\": \"SUCCESS,FAILURE\" },\"dsn\": { \"notify\": [\"SUCCESS\", \"FAILURE\"], \"orcpt\": \"rfc822;user1@example.com\" }}],\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\"}}\n{\"mailFrom\": {\"address\": \"sender@example.com\",\"args\": { \"SIZE\": \"12345\", \"RET\": \"HDRS\" },\"dsn\": { \"ret\": \"HDRS\", \"envid\": \"abc123\" }},\"rcptTo\": [{\"address\": \"user1@example.com\",\"args\": { \"NOTIFY\": \"SUCCESS,FAILURE\" },\"dsn\": { \"notify\": [\"SUCCESS\", \"FAILURE\"], \"orcpt\": \"rfc822;user1@example.com\" }}],\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\"}}\nObject\nObject[]\nObject\nAddress object‚Äã\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\":",
        "source_url": "https://nodemailer.com/extras/smtp-server#options-reference",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part6",
        "text": "123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\nMAIL FROM:\nRCPT TO:\nDSN Object Properties‚Äã\nString\n'FULL'\n'HDRS'\nString\nString[]\nString\nEnhanced Status Codes (RFC 2034/3463)‚Äã\nsmtp‚ÄëserversupportsEnhanced Status Codesas defined in RFC 2034 and RFC 3463. When enabled, all SMTP responses include enhanced status codes in the formatX.Y.Z:\nX.Y.Z\n250 2.1.0 Accepted        ‚Üê Enhanced status code: 2.1.0550 5.1.1 Mailbox unavailable ‚Üê Enhanced status code: 5.1.1\n250 2.1.0 Accepted        ‚Üê Enhanced status code: 2.1.0550 5.1.1 Mailbox unavailable ‚Üê Enhanced status code: 5.1.1\nEnabling Enhanced Status Codes‚Äã\nTo enable enhanced status codes (they are disabled by default):\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:false,// Enable enhanced status codesonMailFrom(address,session,callback){callback();// Response: \"250 2.1.0 Accepted\" (with enhanced code)},});\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:false,// Enable enhanced status codesonMailFrom(address,session,callback){callback();// Response: \"250 2.1.0 Accepted\" (with enhanced code)},});\nDisabling Enhanced Status Codes‚Äã\nEnhanced status codes are disabled by default, but you can explicitly disable them:\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:true,// Explicitly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:true,// Explicitly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nEnhanced Status Code Examples‚Äã\n250\n2.0.0\n250\n2.",
        "source_url": "https://nodemailer.com/extras/smtp-server#options-reference",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part7",
        "text": "ly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nEnhanced Status Code Examples‚Äã\n250\n2.0.0\n250\n2.1.0\n250\n2.1.5\n250\n2.6.0\n501\n5.5.4\n550\n5.1.1\n552\n5.2.2\nDSN (Delivery Status Notification) Support‚Äã\nsmtp‚Äëserverfully supportsDSN parametersas defined in RFC 3461, allowing clients to request delivery status notifications.\nDSN functionality requiresdelivery status notificationsto be enabled. Since delivery status notifications are disabled by default, you must sethideDSN: falseto use DSN features.\nhideDSN: false\nDSN Parameters‚Äã\nRET=FULLorRET=HDRS‚Äî Return full message or headers only in DSN\nRET=FULL\nRET=HDRS\nENVID=<envelope-id>‚Äî Envelope identifier for tracking\nENVID=<envelope-id>\n// Client sends: MAIL FROM:<sender@example.com> RET=FULL ENVID=abc123\n// Client sends: MAIL FROM:<sender@example.com> RET=FULL ENVID=abc123\nNOTIFY=SUCCESS,FAILURE,DELAY,NEVER‚Äî When to send DSN\nNOTIFY=SUCCESS,FAILURE,DELAY,NEVER\nORCPT=<original-recipient>‚Äî Original recipient for tracking\nORCPT=<original-recipient>\n// Client sends: RCPT TO:<user@example.com> NOTIFY=SUCCESS,FAILURE ORCPT=rfc822;user@example.com\n// Client sends: RCPT TO:<user@example.com> NOTIFY=SUCCESS,FAILURE ORCPT=rfc822;user@example.com\nAccessing DSN Parameters‚Äã\nDSN parameters are available in your callback handlers:\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){// Access DSN parameters from MAIL FROMconstret=session.envelope.dsn.ret;// 'FULL' or 'HDRS'constenvid=session.envelope.dsn.envid;// Envelope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE',",
        "source_url": "https://nodemailer.com/extras/smtp-server#options-reference",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part8",
        "text": "velope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE', 'DELAY']constorcpt=address.dsn.orcpt;// Original recipientconsole.log(`NOTIFY:${notify.join(\",\")}, ORCPT:${orcpt}`);callback();},});\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){// Access DSN parameters from MAIL FROMconstret=session.envelope.dsn.ret;// 'FULL' or 'HDRS'constenvid=session.envelope.dsn.envid;// Envelope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE', 'DELAY']constorcpt=address.dsn.orcpt;// Original recipientconsole.log(`NOTIFY:${notify.join(\",\")}, ORCPT:${orcpt}`);callback();},});\nDSN Parameter Validation‚Äã\nsmtp‚Äëserverautomatically validates DSN parameters:\nRETmust beFULLorHDRS\nRET\nFULL\nHDRS\nNOTIFYmust beSUCCESS,FAILURE,DELAY, orNEVER\nNOTIFY\nSUCCESS\nFAILURE\nDELAY\nNEVER\nNOTIFY=NEVERcannot be combined with other values\nNOTIFY=NEVER\nInvalid parameters return appropriate error responses with enhanced status codes\nComplete DSN Example‚Äã\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){const{ret,envid}=session.envelope.dsn;console.log(`Mail from${address.address}, RET=${ret}, ENVID=${envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`Rcpt to${address.address}, NOTIFY=${notify.join(\",\")}, ORCPT=${orcpt}`);callback();},onData(stream,session,callback){// Process message with DSN contextconst{dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nconstserver=newSMTPServer({hide",
        "source_url": "https://nodemailer.com/extras/smtp-server#options-reference",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part9",
        "text": "dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){const{ret,envid}=session.envelope.dsn;console.log(`Mail from${address.address}, RET=${ret}, ENVID=${envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`Rcpt to${address.address}, NOTIFY=${notify.join(\",\")}, ORCPT=${orcpt}`);callback();},onData(stream,session,callback){// Process message with DSN contextconst{dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nProduction DSN Implementation Example‚Äã\nHere's a complete example showing how to implement DSN notifications using nodemailer:\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransporter({host:\"smtp.example.com\",port:587,secure:false,auth:{user:\"dsn-sender@example.com\",pass:\"your-password\",},});// DSN notification generatorclassDSNNotifier{constructor(transporter){this.transporter=transporter;}asyncsendSuccessNotification(envelope,messageId,deliveryTime){// Only send if SUCCESS notification was requestedconstneedsSuccessNotification=envelope.rcptTo.some((rcpt)=>rcpt.dsn.notify&&rcpt.dsn.notify.includes(\"SUCCESS\"));if(!needsSuccessNotification||!envelope.mailFrom.address){return;}constdsnMessage=this.generateDSNMessage({action:\"delivered\",status:\"2.0.0\",envelope,messageId,deliveryTime,diagnosticCode:\"smtp; 250 2.0.0 Message accepted for delivery\",});awaitthis.transporter.sendMail({from:\"postmaster@example.com\",to:envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSN",
        "source_url": "https://nodemailer.com/extras/smtp-server#options-reference",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part10",
        "text": ":envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSNMessage({action,status,envelope,messageId,deliveryTime,diagnosticCode}){const{dsn}=envelope;consttimestamp=deliveryTime||newDate().toISOString();// Generate RFC 3464 compliant delivery status notificationconsttext=`This is an automatically generated Delivery Status Notification.Original Message Details:- Message ID:${messageId}- Envelope ID:${dsn.envid||\"Not provided\"}- Sender:${envelope.mailFrom.address}- Recipients:${envelope.rcptTo.map((r)=>r.address).join(\", \")}- Action:${action}- Status:${status}- Time:${timestamp}${action===\"delivered\"?\"Your message has been successfully delivered to all recipients.\":\"Delivery failed for one or more recipients.\"}`;return{text};}}// Create DSN notifier instanceconstdsnNotifier=newDSNNotifier(dsnTransporter);// SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${address.address}, RET=${dsn.ret}, ENVID=${dsn.envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`RCPT TO:${address.address}, NOTIFY=${notify?.join(\",\")}, ORCPT=${orcpt}`);callback();},asynconData(stream,session,callback){constmessageId=`msg-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;stream.on(\"end\",async()=>{try{// Simulate message deliveryconstdeliveryTime=newDate();// Send DSN success notification if requestedawaitdsnNotifier.sendSuccessNotification(session.envelope,messageId,deliveryTime);callback(null,`Message${messageId}accepted for delivery`);}catch(error){callback(error);}});stream.resume();},});server.listen(2525,()=>{console.log(\"DSN-enabled SMTP server listening on port 2525\");});\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransport",
        "source_url": "https://nodemailer.com/extras/smtp-server#options-reference",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part11",
        "text": "DSN-enabled SMTP server listening on port 2525\");});\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransporter({host:\"smtp.example.com\",port:587,secure:false,auth:{user:\"dsn-sender@example.com\",pass:\"your-password\",},});// DSN notification generatorclassDSNNotifier{constructor(transporter){this.transporter=transporter;}asyncsendSuccessNotification(envelope,messageId,deliveryTime){// Only send if SUCCESS notification was requestedconstneedsSuccessNotification=envelope.rcptTo.some((rcpt)=>rcpt.dsn.notify&&rcpt.dsn.notify.includes(\"SUCCESS\"));if(!needsSuccessNotification||!envelope.mailFrom.address){return;}constdsnMessage=this.generateDSNMessage({action:\"delivered\",status:\"2.0.0\",envelope,messageId,deliveryTime,diagnosticCode:\"smtp; 250 2.0.0 Message accepted for delivery\",});awaitthis.transporter.sendMail({from:\"postmaster@example.com\",to:envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSNMessage({action,status,envelope,messageId,deliveryTime,diagnosticCode}){const{dsn}=envelope;consttimestamp=deliveryTime||newDate().toISOString();// Generate RFC 3464 compliant delivery status notificationconsttext=`This is an automatically generated Delivery Status Notification.Original Message Details:- Message ID:${messageId}- Envelope ID:${dsn.envid||\"Not provided\"}- Sender:${envelope.mailFrom.address}- Recipients:${envelope.rcptTo.map((r)=>r.address).join(\", \")}- Action:${action}- Status:${status}- Time:${timestamp}${action===\"delivered\"?\"Your message has been successfully delivered to all recipients.\":\"Delivery failed for one or more recipients.\"}`;return{text};}}// Create DSN notifier instanceconstdsnNotifier=newDSNNotifier(dsnTransporter);// SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${",
        "source_url": "https://nodemailer.com/extras/smtp-server#options-reference",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part12",
        "text": " SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${address.address}, RET=${dsn.ret}, ENVID=${dsn.envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`RCPT TO:${address.address}, NOTIFY=${notify?.join(\",\")}, ORCPT=${orcpt}`);callback();},asynconData(stream,session,callback){constmessageId=`msg-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;stream.on(\"end\",async()=>{try{// Simulate message deliveryconstdeliveryTime=newDate();// Send DSN success notification if requestedawaitdsnNotifier.sendSuccessNotification(session.envelope,messageId,deliveryTime);callback(null,`Message${messageId}accepted for delivery`);}catch(error){callback(error);}});stream.resume();},});server.listen(2525,()=>{console.log(\"DSN-enabled SMTP server listening on port 2525\");});\nThis example demonstrates:\nComplete DSN workflowfrom parameter parsing to notification sending\nRFC-compliant DSN messageswith proper headers and content\nConditional notificationsbased on NOTIFY parameters\nIntegration with nodemailerfor sending DSN notifications\nProduction-ready structurewith error handling\nSupported commands and extensions‚Äã\nCommands‚Äã\nEHLO/HELO\nEHLO\nHELO\nAUTHLOGIN¬∑PLAIN¬∑XOAUTH2‚Ä†¬†¬∑CRAM‚ÄëMD5‚Ä†\nAUTH\nLOGIN\nPLAIN\nXOAUTH2\nCRAM‚ÄëMD5\nMAIL/RCPT/DATA\nMAIL\nRCPT\nDATA\nRSET/NOOP/QUIT/VRFY\nRSET\nNOOP\nQUIT\nVRFY\nHELP(returns RFC¬†5321 URL)\nHELP\nSTARTTLS\nSTARTTLS\n‚Ä†XOAUTH2andCRAM‚ÄëMD5must be enabled viaauthMethods.\nXOAUTH2\nCRAM‚ÄëMD5\nauthMethods\nExtensions‚Äã\nPIPELINING\nPIPELINING\n8BITMIME\n8BITMIME\nSMTPUTF8\nSMTPUTF8\nSIZE\nSIZE\nDSN(RFC 3461)\nDSN\nENHANCEDSTATUSCODES(RFC 2034/3463)\nENH",
        "source_url": "https://nodemailer.com/extras/smtp-server#options-reference",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part13",
        "text": "8BITMIME\n8BITMIME\nSMTPUTF8\nSMTPUTF8\nSIZE\nSIZE\nDSN(RFC 3461)\nDSN\nENHANCEDSTATUSCODES(RFC 2034/3463)\nENHANCEDSTATUSCODES\nTheCHUNKINGextension isnotimplemented.\nCHUNKING\nLicense‚Äã\nMIT\nUsage1¬†‚Äî¬†Install2¬†‚Äî¬†Require in your script3¬†‚Äî¬†Create a server instance4¬†‚Äî¬†Start listening5¬†‚Äî¬†Shut down\n1¬†‚Äî¬†Install\n2¬†‚Äî¬†Require in your script\n3¬†‚Äî¬†Create a server instance\n4¬†‚Äî¬†Start listening\n5¬†‚Äî¬†Shut down\nOptions reference\nTLS and STARTTLS\nHandling errors\nHandling authentication (onAuth)Password‚Äëbased (PLAIN / LOGIN)OAuth¬†2 (XOAUTH2)\nonAuth\nPassword‚Äëbased (PLAIN / LOGIN)\nOAuth¬†2 (XOAUTH2)\nXOAUTH2\nValidating client connection (onConnect/onClose)\nonConnect\nonClose\nValidating TLS information (onSecure)\nonSecure\nValidating sender (onMailFrom)\nonMailFrom\nValidating recipients (onRcptTo)\nonRcptTo\nProcessing incoming messages (onData)\nonData\nUsing the SIZE extension\nUsing LMTP\nSession object\nEnvelope object\nAddress objectDSN Object Properties\nDSN Object Properties\nEnhanced Status Codes (RFC 2034/3463)Enabling Enhanced Status CodesDisabling Enhanced Status CodesEnhanced Status Code Examples\nEnabling Enhanced Status Codes\nDisabling Enhanced Status Codes\nEnhanced Status Code Examples\nDSN (Delivery Status Notification) SupportDSN ParametersAccessing DSN ParametersDSN Parameter ValidationComplete DSN ExampleProduction DSN Implementation Example\nDSN Parameters\nAccessing DSN Parameters\nDSN Parameter Validation\nComplete DSN Example\nProduction DSN Implementation Example\nSupported commands and extensionsCommandsExtensions\nCommands\nExtensions\nLicense",
        "source_url": "https://nodemailer.com/extras/smtp-server#options-reference",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 412
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nSMTP Server\nSMTP Server\nCreate SMTP and LMTP server instances on the fly.smtp‚Äëserverisnota full‚Äëblown server application likeHarakabut a convenient way to add custom SMTP or LMTP listeners to your app. It is the successor of the server part of the now‚Äëdeprecatedsimplesmtpmodule. For a matching SMTP client, seesmtp‚Äëconnection.\nUsage‚Äã\n1¬†‚Äî¬†Install‚Äã\nnpm install smtp-server --save\nnpm install smtp-server --save\n2¬†‚Äî¬†Require in your script‚Äã\nconst{SMTPServer}=require(\"smtp-server\");\nconst{SMTPServer}=require(\"smtp-server\");\n3¬†‚Äî¬†Create a server instance‚Äã\nconstserver=newSMTPServer(options);\nconstserver=newSMTPServer(options);\n4¬†‚Äî¬†Start listening‚Äã\nserver.listen(port[,host][,callback]);\nserver.listen(port[,host][,callback]);\n5¬†‚Äî¬†Shut down‚Äã\nserver.close(callback);\nserver.close(callback);\nOptions reference‚Äã\nBoolean\nfalse\nSTARTTLS\nfalse\nString\nos.hostname()\nString\nNumber\n0\n0\nBoolean\nfalse\nstream.sizeExceeded\nString[]\n['PLAIN', 'LOGIN']\n'XOAUTH2'\n'CRAM-MD5'\nBoolean\nfalse\nString[]\n['AUTH']\nBoolean\nfalse\nBoolean\ntrue\nENHANCEDSTATUSCODES\nEHLO\nBoolean\ntrue\nDSN\nEHLO\nBoolean\nfalse\nBoolean\nfalse\nMap | Object\nBoolean | Object\nfalse\ntrue\nconsole\nNumber\nInfinity\nBoolean\nfalse\nBoolean\nfalse\nBoolean\nfalse\nNumber\n60_000\nNumber\n30_000\nclose()\nFunction\nObject\n.reverse\ndns\ndns.reverse\nYou may also pass anynet.createServeroptions and, whensecureistrue, anytls.createServeroptions.\nnet.createServer\nsecure\ntrue\ntls.createServer\nTLS and STARTTLS‚Äã\nIf you enable TLS (secure: true)orleaveSTARTTLSenabled, ship a proper certificate viakey,cert, and optionallyca. Otherwisesmtp‚Äëserverfalls back to a self‚Äësigned cert forlocalhost, which almost",
        "source_url": "https://nodemailer.com/extras/smtp-server#tls-and-starttls",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "‚Äã\nIf you enable TLS (secure: true)orleaveSTARTTLSenabled, ship a proper certificate viakey,cert, and optionallyca. Otherwisesmtp‚Äëserverfalls back to a self‚Äësigned cert forlocalhost, which almost every client rejects.\nsecure: true\nSTARTTLS\nkey\ncert\nca\nlocalhost\nconstfs=require(\"fs\");constserver=newSMTPServer({secure:true,key:fs.readFileSync(\"private.key\"),cert:fs.readFileSync(\"server.crt\"),});server.listen(465);\nconstfs=require(\"fs\");constserver=newSMTPServer({secure:true,key:fs.readFileSync(\"private.key\"),cert:fs.readFileSync(\"server.crt\"),});server.listen(465);\nHandling errors‚Äã\nAttach anerrorlistener to surface server errors:\nerror\nserver.on(\"error\",(err)=>{console.error(\"SMTP Server error:\",err.message);});\nserver.on(\"error\",(err)=>{console.error(\"SMTP Server error:\",err.message);});\nHandling authentication (onAuth)‚Äã\nonAuth\nconstserver=newSMTPServer({onAuth(auth,session,callback){// auth.method ‚Üí 'PLAIN', 'LOGIN', 'XOAUTH2', or 'CRAM-MD5'// Return `callback(err)` to reject, `callback(null, response)` to accept},});\nconstserver=newSMTPServer({onAuth(auth,session,callback){// auth.method ‚Üí 'PLAIN', 'LOGIN', 'XOAUTH2', or 'CRAM-MD5'// Return `callback(err)` to reject, `callback(null, response)` to accept},});\nPassword‚Äëbased (PLAIN / LOGIN)‚Äã\nonAuth(auth,session,cb){if(auth.username!==\"alice\"||auth.password!==\"s3cr3t\"){returncb(newError(\"Invalid username or password\"));}cb(null,{user:auth.username});}\nonAuth(auth,session,cb){if(auth.username!==\"alice\"||auth.password!==\"s3cr3t\"){returncb(newError(\"Invalid username or password\"));}cb(null,{user:auth.username});}\nOAuth¬†2 (XOAUTH2)‚Äã\nXOAUTH2\nconstserver=newSMTPServer({authMethods:[\"XOAUTH2\"],onAuth(auth,session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth",
        "source_url": "https://nodemailer.com/extras/smtp-server#tls-and-starttls",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": ",session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth.username});},});\nconstserver=newSMTPServer({authMethods:[\"XOAUTH2\"],onAuth(auth,session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth.username});},});\nValidating client connection (onConnect/onClose)‚Äã\nonConnect\nonClose\nconstserver=newSMTPServer({onConnect(session,cb){if(session.remoteAddress===\"127.0.0.1\"){returncb(newError(\"Connections from localhost are not allowed\"));}cb();// accept},onClose(session){console.log(`Connection from${session.remoteAddress}closed`);},});\nconstserver=newSMTPServer({onConnect(session,cb){if(session.remoteAddress===\"127.0.0.1\"){returncb(newError(\"Connections from localhost are not allowed\"));}cb();// accept},onClose(session){console.log(`Connection from${session.remoteAddress}closed`);},});\nValidating TLS information (onSecure)‚Äã\nonSecure\nonSecure(socket,session,cb){if(session.servername!==\"mail.example.com\"){returncb(newError(\"SNI mismatch\"));}cb();}\nonSecure(socket,session,cb){if(session.servername!==\"mail.example.com\"){returncb(newError(\"SNI mismatch\"));}cb();}\nValidating sender (onMailFrom)‚Äã\nonMailFrom\nonMailFrom(address,session,cb){if(!address.address.endsWith(\"@example.com\")){returncb(Object.assign(newError(\"Relay denied\"),{responseCode:553}));}cb();}\nonMailFrom(address,session,cb){if(!address.address.endsWith(\"@example.com\")){returncb(Object.assign(newError(\"Relay denied\"),{responseCode:553}));}cb();}\nValidating recipients (onRcptTo)‚Äã\nonRcptTo\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(new",
        "source_url": "https://nodemailer.com/extras/smtp-server#tls-and-starttls",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "cptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nProcessing incoming messages (onData)‚Äã\nonData\nonData(stream,session,cb){constwrite=require(\"fs\").createWriteStream(\"/tmp/message.eml\");stream.pipe(write);stream.on(\"end\",()=>cb(null,\"Queued\"));}\nonData(stream,session,cb){constwrite=require(\"fs\").createWriteStream(\"/tmp/message.eml\");stream.pipe(write);stream.on(\"end\",()=>cb(null,\"Queued\"));}\nsmtp‚Äëserverstreams your messageverbatim‚Äî noReceived:header is added. Add one yourself if you need full RFC¬†5321 compliance.\nReceived:\nUsing the SIZE extension‚Äã\nSet thesizeoption to advertise a limit, then checkstream.sizeExceededinonData:\nsize\nstream.sizeExceeded\nonData\nconstserver=newSMTPServer({size:1024*1024,// 1¬†MiBonData(s,sess,cb){s.on(\"end\",()=>{if(s.sizeExceeded){consterr=Object.assign(newError(\"Message too large\"),{responseCode:552});returncb(err);}cb(null,\"OK\");});},});\nconstserver=newSMTPServer({size:1024*1024,// 1¬†MiBonData(s,sess,cb){s.on(\"end\",()=>{if(s.sizeExceeded){consterr=Object.assign(newError(\"Message too large\"),{responseCode:552});returncb(err);}cb(null,\"OK\");});},});\nUsing LMTP‚Äã\nconstserver=newSMTPServer({lmtp:true,onData(stream,session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):`<${rcpt.address}> accepted`));cb(null,replies);});},});\nconstserver=newSMTPServer({lmtp:true,onData(stream,session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):",
        "source_url": "https://nodemailer.com/extras/smtp-server#tls-and-starttls",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": ",session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):`<${rcpt.address}> accepted`));cb(null,replies);});},});\nSession object‚Äã\nString\nString\nString\nremoteAddress\ndisableReverseLookup\n\"HELO\" | \"EHLO\" | \"LHLO\"\nString\nObject\nmailFrom\nrcptTo\ndsn\nany\nonAuth\nNumber\n\"SMTP\" | \"ESMTP\" | \"ESMTPA\" ‚Ä¶\nReceived:\nEnvelope object‚Äã\nThesession.envelopeobject contains transaction-specific data:\nsession.envelope\n{\"mailFrom\": {\"address\": \"sender@example.com\",\"args\": { \"SIZE\": \"12345\", \"RET\": \"HDRS\" },\"dsn\": { \"ret\": \"HDRS\", \"envid\": \"abc123\" }},\"rcptTo\": [{\"address\": \"user1@example.com\",\"args\": { \"NOTIFY\": \"SUCCESS,FAILURE\" },\"dsn\": { \"notify\": [\"SUCCESS\", \"FAILURE\"], \"orcpt\": \"rfc822;user1@example.com\" }}],\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\"}}\n{\"mailFrom\": {\"address\": \"sender@example.com\",\"args\": { \"SIZE\": \"12345\", \"RET\": \"HDRS\" },\"dsn\": { \"ret\": \"HDRS\", \"envid\": \"abc123\" }},\"rcptTo\": [{\"address\": \"user1@example.com\",\"args\": { \"NOTIFY\": \"SUCCESS,FAILURE\" },\"dsn\": { \"notify\": [\"SUCCESS\", \"FAILURE\"], \"orcpt\": \"rfc822;user1@example.com\" }}],\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\"}}\nObject\nObject[]\nObject\nAddress object‚Äã\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\":",
        "source_url": "https://nodemailer.com/extras/smtp-server#tls-and-starttls",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part6",
        "text": "123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\nMAIL FROM:\nRCPT TO:\nDSN Object Properties‚Äã\nString\n'FULL'\n'HDRS'\nString\nString[]\nString\nEnhanced Status Codes (RFC 2034/3463)‚Äã\nsmtp‚ÄëserversupportsEnhanced Status Codesas defined in RFC 2034 and RFC 3463. When enabled, all SMTP responses include enhanced status codes in the formatX.Y.Z:\nX.Y.Z\n250 2.1.0 Accepted        ‚Üê Enhanced status code: 2.1.0550 5.1.1 Mailbox unavailable ‚Üê Enhanced status code: 5.1.1\n250 2.1.0 Accepted        ‚Üê Enhanced status code: 2.1.0550 5.1.1 Mailbox unavailable ‚Üê Enhanced status code: 5.1.1\nEnabling Enhanced Status Codes‚Äã\nTo enable enhanced status codes (they are disabled by default):\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:false,// Enable enhanced status codesonMailFrom(address,session,callback){callback();// Response: \"250 2.1.0 Accepted\" (with enhanced code)},});\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:false,// Enable enhanced status codesonMailFrom(address,session,callback){callback();// Response: \"250 2.1.0 Accepted\" (with enhanced code)},});\nDisabling Enhanced Status Codes‚Äã\nEnhanced status codes are disabled by default, but you can explicitly disable them:\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:true,// Explicitly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:true,// Explicitly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nEnhanced Status Code Examples‚Äã\n250\n2.0.0\n250\n2.",
        "source_url": "https://nodemailer.com/extras/smtp-server#tls-and-starttls",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part7",
        "text": "ly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nEnhanced Status Code Examples‚Äã\n250\n2.0.0\n250\n2.1.0\n250\n2.1.5\n250\n2.6.0\n501\n5.5.4\n550\n5.1.1\n552\n5.2.2\nDSN (Delivery Status Notification) Support‚Äã\nsmtp‚Äëserverfully supportsDSN parametersas defined in RFC 3461, allowing clients to request delivery status notifications.\nDSN functionality requiresdelivery status notificationsto be enabled. Since delivery status notifications are disabled by default, you must sethideDSN: falseto use DSN features.\nhideDSN: false\nDSN Parameters‚Äã\nRET=FULLorRET=HDRS‚Äî Return full message or headers only in DSN\nRET=FULL\nRET=HDRS\nENVID=<envelope-id>‚Äî Envelope identifier for tracking\nENVID=<envelope-id>\n// Client sends: MAIL FROM:<sender@example.com> RET=FULL ENVID=abc123\n// Client sends: MAIL FROM:<sender@example.com> RET=FULL ENVID=abc123\nNOTIFY=SUCCESS,FAILURE,DELAY,NEVER‚Äî When to send DSN\nNOTIFY=SUCCESS,FAILURE,DELAY,NEVER\nORCPT=<original-recipient>‚Äî Original recipient for tracking\nORCPT=<original-recipient>\n// Client sends: RCPT TO:<user@example.com> NOTIFY=SUCCESS,FAILURE ORCPT=rfc822;user@example.com\n// Client sends: RCPT TO:<user@example.com> NOTIFY=SUCCESS,FAILURE ORCPT=rfc822;user@example.com\nAccessing DSN Parameters‚Äã\nDSN parameters are available in your callback handlers:\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){// Access DSN parameters from MAIL FROMconstret=session.envelope.dsn.ret;// 'FULL' or 'HDRS'constenvid=session.envelope.dsn.envid;// Envelope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE',",
        "source_url": "https://nodemailer.com/extras/smtp-server#tls-and-starttls",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part8",
        "text": "velope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE', 'DELAY']constorcpt=address.dsn.orcpt;// Original recipientconsole.log(`NOTIFY:${notify.join(\",\")}, ORCPT:${orcpt}`);callback();},});\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){// Access DSN parameters from MAIL FROMconstret=session.envelope.dsn.ret;// 'FULL' or 'HDRS'constenvid=session.envelope.dsn.envid;// Envelope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE', 'DELAY']constorcpt=address.dsn.orcpt;// Original recipientconsole.log(`NOTIFY:${notify.join(\",\")}, ORCPT:${orcpt}`);callback();},});\nDSN Parameter Validation‚Äã\nsmtp‚Äëserverautomatically validates DSN parameters:\nRETmust beFULLorHDRS\nRET\nFULL\nHDRS\nNOTIFYmust beSUCCESS,FAILURE,DELAY, orNEVER\nNOTIFY\nSUCCESS\nFAILURE\nDELAY\nNEVER\nNOTIFY=NEVERcannot be combined with other values\nNOTIFY=NEVER\nInvalid parameters return appropriate error responses with enhanced status codes\nComplete DSN Example‚Äã\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){const{ret,envid}=session.envelope.dsn;console.log(`Mail from${address.address}, RET=${ret}, ENVID=${envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`Rcpt to${address.address}, NOTIFY=${notify.join(\",\")}, ORCPT=${orcpt}`);callback();},onData(stream,session,callback){// Process message with DSN contextconst{dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nconstserver=newSMTPServer({hide",
        "source_url": "https://nodemailer.com/extras/smtp-server#tls-and-starttls",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part9",
        "text": "dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){const{ret,envid}=session.envelope.dsn;console.log(`Mail from${address.address}, RET=${ret}, ENVID=${envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`Rcpt to${address.address}, NOTIFY=${notify.join(\",\")}, ORCPT=${orcpt}`);callback();},onData(stream,session,callback){// Process message with DSN contextconst{dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nProduction DSN Implementation Example‚Äã\nHere's a complete example showing how to implement DSN notifications using nodemailer:\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransporter({host:\"smtp.example.com\",port:587,secure:false,auth:{user:\"dsn-sender@example.com\",pass:\"your-password\",},});// DSN notification generatorclassDSNNotifier{constructor(transporter){this.transporter=transporter;}asyncsendSuccessNotification(envelope,messageId,deliveryTime){// Only send if SUCCESS notification was requestedconstneedsSuccessNotification=envelope.rcptTo.some((rcpt)=>rcpt.dsn.notify&&rcpt.dsn.notify.includes(\"SUCCESS\"));if(!needsSuccessNotification||!envelope.mailFrom.address){return;}constdsnMessage=this.generateDSNMessage({action:\"delivered\",status:\"2.0.0\",envelope,messageId,deliveryTime,diagnosticCode:\"smtp; 250 2.0.0 Message accepted for delivery\",});awaitthis.transporter.sendMail({from:\"postmaster@example.com\",to:envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSN",
        "source_url": "https://nodemailer.com/extras/smtp-server#tls-and-starttls",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part10",
        "text": ":envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSNMessage({action,status,envelope,messageId,deliveryTime,diagnosticCode}){const{dsn}=envelope;consttimestamp=deliveryTime||newDate().toISOString();// Generate RFC 3464 compliant delivery status notificationconsttext=`This is an automatically generated Delivery Status Notification.Original Message Details:- Message ID:${messageId}- Envelope ID:${dsn.envid||\"Not provided\"}- Sender:${envelope.mailFrom.address}- Recipients:${envelope.rcptTo.map((r)=>r.address).join(\", \")}- Action:${action}- Status:${status}- Time:${timestamp}${action===\"delivered\"?\"Your message has been successfully delivered to all recipients.\":\"Delivery failed for one or more recipients.\"}`;return{text};}}// Create DSN notifier instanceconstdsnNotifier=newDSNNotifier(dsnTransporter);// SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${address.address}, RET=${dsn.ret}, ENVID=${dsn.envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`RCPT TO:${address.address}, NOTIFY=${notify?.join(\",\")}, ORCPT=${orcpt}`);callback();},asynconData(stream,session,callback){constmessageId=`msg-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;stream.on(\"end\",async()=>{try{// Simulate message deliveryconstdeliveryTime=newDate();// Send DSN success notification if requestedawaitdsnNotifier.sendSuccessNotification(session.envelope,messageId,deliveryTime);callback(null,`Message${messageId}accepted for delivery`);}catch(error){callback(error);}});stream.resume();},});server.listen(2525,()=>{console.log(\"DSN-enabled SMTP server listening on port 2525\");});\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransport",
        "source_url": "https://nodemailer.com/extras/smtp-server#tls-and-starttls",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part11",
        "text": "DSN-enabled SMTP server listening on port 2525\");});\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransporter({host:\"smtp.example.com\",port:587,secure:false,auth:{user:\"dsn-sender@example.com\",pass:\"your-password\",},});// DSN notification generatorclassDSNNotifier{constructor(transporter){this.transporter=transporter;}asyncsendSuccessNotification(envelope,messageId,deliveryTime){// Only send if SUCCESS notification was requestedconstneedsSuccessNotification=envelope.rcptTo.some((rcpt)=>rcpt.dsn.notify&&rcpt.dsn.notify.includes(\"SUCCESS\"));if(!needsSuccessNotification||!envelope.mailFrom.address){return;}constdsnMessage=this.generateDSNMessage({action:\"delivered\",status:\"2.0.0\",envelope,messageId,deliveryTime,diagnosticCode:\"smtp; 250 2.0.0 Message accepted for delivery\",});awaitthis.transporter.sendMail({from:\"postmaster@example.com\",to:envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSNMessage({action,status,envelope,messageId,deliveryTime,diagnosticCode}){const{dsn}=envelope;consttimestamp=deliveryTime||newDate().toISOString();// Generate RFC 3464 compliant delivery status notificationconsttext=`This is an automatically generated Delivery Status Notification.Original Message Details:- Message ID:${messageId}- Envelope ID:${dsn.envid||\"Not provided\"}- Sender:${envelope.mailFrom.address}- Recipients:${envelope.rcptTo.map((r)=>r.address).join(\", \")}- Action:${action}- Status:${status}- Time:${timestamp}${action===\"delivered\"?\"Your message has been successfully delivered to all recipients.\":\"Delivery failed for one or more recipients.\"}`;return{text};}}// Create DSN notifier instanceconstdsnNotifier=newDSNNotifier(dsnTransporter);// SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${",
        "source_url": "https://nodemailer.com/extras/smtp-server#tls-and-starttls",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part12",
        "text": " SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${address.address}, RET=${dsn.ret}, ENVID=${dsn.envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`RCPT TO:${address.address}, NOTIFY=${notify?.join(\",\")}, ORCPT=${orcpt}`);callback();},asynconData(stream,session,callback){constmessageId=`msg-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;stream.on(\"end\",async()=>{try{// Simulate message deliveryconstdeliveryTime=newDate();// Send DSN success notification if requestedawaitdsnNotifier.sendSuccessNotification(session.envelope,messageId,deliveryTime);callback(null,`Message${messageId}accepted for delivery`);}catch(error){callback(error);}});stream.resume();},});server.listen(2525,()=>{console.log(\"DSN-enabled SMTP server listening on port 2525\");});\nThis example demonstrates:\nComplete DSN workflowfrom parameter parsing to notification sending\nRFC-compliant DSN messageswith proper headers and content\nConditional notificationsbased on NOTIFY parameters\nIntegration with nodemailerfor sending DSN notifications\nProduction-ready structurewith error handling\nSupported commands and extensions‚Äã\nCommands‚Äã\nEHLO/HELO\nEHLO\nHELO\nAUTHLOGIN¬∑PLAIN¬∑XOAUTH2‚Ä†¬†¬∑CRAM‚ÄëMD5‚Ä†\nAUTH\nLOGIN\nPLAIN\nXOAUTH2\nCRAM‚ÄëMD5\nMAIL/RCPT/DATA\nMAIL\nRCPT\nDATA\nRSET/NOOP/QUIT/VRFY\nRSET\nNOOP\nQUIT\nVRFY\nHELP(returns RFC¬†5321 URL)\nHELP\nSTARTTLS\nSTARTTLS\n‚Ä†XOAUTH2andCRAM‚ÄëMD5must be enabled viaauthMethods.\nXOAUTH2\nCRAM‚ÄëMD5\nauthMethods\nExtensions‚Äã\nPIPELINING\nPIPELINING\n8BITMIME\n8BITMIME\nSMTPUTF8\nSMTPUTF8\nSIZE\nSIZE\nDSN(RFC 3461)\nDSN\nENHANCEDSTATUSCODES(RFC 2034/3463)\nENH",
        "source_url": "https://nodemailer.com/extras/smtp-server#tls-and-starttls",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part13",
        "text": "8BITMIME\n8BITMIME\nSMTPUTF8\nSMTPUTF8\nSIZE\nSIZE\nDSN(RFC 3461)\nDSN\nENHANCEDSTATUSCODES(RFC 2034/3463)\nENHANCEDSTATUSCODES\nTheCHUNKINGextension isnotimplemented.\nCHUNKING\nLicense‚Äã\nMIT\nUsage1¬†‚Äî¬†Install2¬†‚Äî¬†Require in your script3¬†‚Äî¬†Create a server instance4¬†‚Äî¬†Start listening5¬†‚Äî¬†Shut down\n1¬†‚Äî¬†Install\n2¬†‚Äî¬†Require in your script\n3¬†‚Äî¬†Create a server instance\n4¬†‚Äî¬†Start listening\n5¬†‚Äî¬†Shut down\nOptions reference\nTLS and STARTTLS\nHandling errors\nHandling authentication (onAuth)Password‚Äëbased (PLAIN / LOGIN)OAuth¬†2 (XOAUTH2)\nonAuth\nPassword‚Äëbased (PLAIN / LOGIN)\nOAuth¬†2 (XOAUTH2)\nXOAUTH2\nValidating client connection (onConnect/onClose)\nonConnect\nonClose\nValidating TLS information (onSecure)\nonSecure\nValidating sender (onMailFrom)\nonMailFrom\nValidating recipients (onRcptTo)\nonRcptTo\nProcessing incoming messages (onData)\nonData\nUsing the SIZE extension\nUsing LMTP\nSession object\nEnvelope object\nAddress objectDSN Object Properties\nDSN Object Properties\nEnhanced Status Codes (RFC 2034/3463)Enabling Enhanced Status CodesDisabling Enhanced Status CodesEnhanced Status Code Examples\nEnabling Enhanced Status Codes\nDisabling Enhanced Status Codes\nEnhanced Status Code Examples\nDSN (Delivery Status Notification) SupportDSN ParametersAccessing DSN ParametersDSN Parameter ValidationComplete DSN ExampleProduction DSN Implementation Example\nDSN Parameters\nAccessing DSN Parameters\nDSN Parameter Validation\nComplete DSN Example\nProduction DSN Implementation Example\nSupported commands and extensionsCommandsExtensions\nCommands\nExtensions\nLicense",
        "source_url": "https://nodemailer.com/extras/smtp-server#tls-and-starttls",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 412
    },
    {
        "chunk_id": "Nodemailer::Part1",
        "text": "Nodemailer\nUsage\nMessage configuration\nSMTP transport\nOther transports\nPlugins\nDKIM\nExtra modulesSMTP ServerMailParserMailcomposerTesting SMTP\nSMTP Server\nMailParser\nMailcomposer\nTesting SMTP\nLicense\nSend and receive emails easily with Outlook and Gmail using OAuth2.\nExtra modules\nSMTP Server\nSMTP Server\nCreate SMTP and LMTP server instances on the fly.smtp‚Äëserverisnota full‚Äëblown server application likeHarakabut a convenient way to add custom SMTP or LMTP listeners to your app. It is the successor of the server part of the now‚Äëdeprecatedsimplesmtpmodule. For a matching SMTP client, seesmtp‚Äëconnection.\nUsage‚Äã\n1¬†‚Äî¬†Install‚Äã\nnpm install smtp-server --save\nnpm install smtp-server --save\n2¬†‚Äî¬†Require in your script‚Äã\nconst{SMTPServer}=require(\"smtp-server\");\nconst{SMTPServer}=require(\"smtp-server\");\n3¬†‚Äî¬†Create a server instance‚Äã\nconstserver=newSMTPServer(options);\nconstserver=newSMTPServer(options);\n4¬†‚Äî¬†Start listening‚Äã\nserver.listen(port[,host][,callback]);\nserver.listen(port[,host][,callback]);\n5¬†‚Äî¬†Shut down‚Äã\nserver.close(callback);\nserver.close(callback);\nOptions reference‚Äã\nBoolean\nfalse\nSTARTTLS\nfalse\nString\nos.hostname()\nString\nNumber\n0\n0\nBoolean\nfalse\nstream.sizeExceeded\nString[]\n['PLAIN', 'LOGIN']\n'XOAUTH2'\n'CRAM-MD5'\nBoolean\nfalse\nString[]\n['AUTH']\nBoolean\nfalse\nBoolean\ntrue\nENHANCEDSTATUSCODES\nEHLO\nBoolean\ntrue\nDSN\nEHLO\nBoolean\nfalse\nBoolean\nfalse\nMap | Object\nBoolean | Object\nfalse\ntrue\nconsole\nNumber\nInfinity\nBoolean\nfalse\nBoolean\nfalse\nBoolean\nfalse\nNumber\n60_000\nNumber\n30_000\nclose()\nFunction\nObject\n.reverse\ndns\ndns.reverse\nYou may also pass anynet.createServeroptions and, whensecureistrue, anytls.createServeroptions.\nnet.createServer\nsecure\ntrue\ntls.createServer\nTLS and STARTTLS‚Äã\nIf you enable TLS (secure: true)orleaveSTARTTLSenabled, ship a proper certificate viakey,cert, and optionallyca. Otherwisesmtp‚Äëserverfalls back to a self‚Äësigned cert forlocalhost, which almost",
        "source_url": "https://nodemailer.com/extras/smtp-server#handling-errors",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part2",
        "text": "‚Äã\nIf you enable TLS (secure: true)orleaveSTARTTLSenabled, ship a proper certificate viakey,cert, and optionallyca. Otherwisesmtp‚Äëserverfalls back to a self‚Äësigned cert forlocalhost, which almost every client rejects.\nsecure: true\nSTARTTLS\nkey\ncert\nca\nlocalhost\nconstfs=require(\"fs\");constserver=newSMTPServer({secure:true,key:fs.readFileSync(\"private.key\"),cert:fs.readFileSync(\"server.crt\"),});server.listen(465);\nconstfs=require(\"fs\");constserver=newSMTPServer({secure:true,key:fs.readFileSync(\"private.key\"),cert:fs.readFileSync(\"server.crt\"),});server.listen(465);\nHandling errors‚Äã\nAttach anerrorlistener to surface server errors:\nerror\nserver.on(\"error\",(err)=>{console.error(\"SMTP Server error:\",err.message);});\nserver.on(\"error\",(err)=>{console.error(\"SMTP Server error:\",err.message);});\nHandling authentication (onAuth)‚Äã\nonAuth\nconstserver=newSMTPServer({onAuth(auth,session,callback){// auth.method ‚Üí 'PLAIN', 'LOGIN', 'XOAUTH2', or 'CRAM-MD5'// Return `callback(err)` to reject, `callback(null, response)` to accept},});\nconstserver=newSMTPServer({onAuth(auth,session,callback){// auth.method ‚Üí 'PLAIN', 'LOGIN', 'XOAUTH2', or 'CRAM-MD5'// Return `callback(err)` to reject, `callback(null, response)` to accept},});\nPassword‚Äëbased (PLAIN / LOGIN)‚Äã\nonAuth(auth,session,cb){if(auth.username!==\"alice\"||auth.password!==\"s3cr3t\"){returncb(newError(\"Invalid username or password\"));}cb(null,{user:auth.username});}\nonAuth(auth,session,cb){if(auth.username!==\"alice\"||auth.password!==\"s3cr3t\"){returncb(newError(\"Invalid username or password\"));}cb(null,{user:auth.username});}\nOAuth¬†2 (XOAUTH2)‚Äã\nXOAUTH2\nconstserver=newSMTPServer({authMethods:[\"XOAUTH2\"],onAuth(auth,session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth",
        "source_url": "https://nodemailer.com/extras/smtp-server#handling-errors",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part3",
        "text": ",session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth.username});},});\nconstserver=newSMTPServer({authMethods:[\"XOAUTH2\"],onAuth(auth,session,cb){if(auth.accessToken!==\"ya29.a0Af‚Ä¶\"){returncb(null,{data:{status:\"401\",schemes:\"bearer\"},});// see RFC¬†6750 Sec.¬†3}cb(null,{user:auth.username});},});\nValidating client connection (onConnect/onClose)‚Äã\nonConnect\nonClose\nconstserver=newSMTPServer({onConnect(session,cb){if(session.remoteAddress===\"127.0.0.1\"){returncb(newError(\"Connections from localhost are not allowed\"));}cb();// accept},onClose(session){console.log(`Connection from${session.remoteAddress}closed`);},});\nconstserver=newSMTPServer({onConnect(session,cb){if(session.remoteAddress===\"127.0.0.1\"){returncb(newError(\"Connections from localhost are not allowed\"));}cb();// accept},onClose(session){console.log(`Connection from${session.remoteAddress}closed`);},});\nValidating TLS information (onSecure)‚Äã\nonSecure\nonSecure(socket,session,cb){if(session.servername!==\"mail.example.com\"){returncb(newError(\"SNI mismatch\"));}cb();}\nonSecure(socket,session,cb){if(session.servername!==\"mail.example.com\"){returncb(newError(\"SNI mismatch\"));}cb();}\nValidating sender (onMailFrom)‚Äã\nonMailFrom\nonMailFrom(address,session,cb){if(!address.address.endsWith(\"@example.com\")){returncb(Object.assign(newError(\"Relay denied\"),{responseCode:553}));}cb();}\nonMailFrom(address,session,cb){if(!address.address.endsWith(\"@example.com\")){returncb(Object.assign(newError(\"Relay denied\"),{responseCode:553}));}cb();}\nValidating recipients (onRcptTo)‚Äã\nonRcptTo\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(new",
        "source_url": "https://nodemailer.com/extras/smtp-server#handling-errors",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part4",
        "text": "cptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nonRcptTo(address,session,cb){if(address.address===\"blackhole@example.com\"){returncb(newError(\"User unknown\"));}cb();}\nProcessing incoming messages (onData)‚Äã\nonData\nonData(stream,session,cb){constwrite=require(\"fs\").createWriteStream(\"/tmp/message.eml\");stream.pipe(write);stream.on(\"end\",()=>cb(null,\"Queued\"));}\nonData(stream,session,cb){constwrite=require(\"fs\").createWriteStream(\"/tmp/message.eml\");stream.pipe(write);stream.on(\"end\",()=>cb(null,\"Queued\"));}\nsmtp‚Äëserverstreams your messageverbatim‚Äî noReceived:header is added. Add one yourself if you need full RFC¬†5321 compliance.\nReceived:\nUsing the SIZE extension‚Äã\nSet thesizeoption to advertise a limit, then checkstream.sizeExceededinonData:\nsize\nstream.sizeExceeded\nonData\nconstserver=newSMTPServer({size:1024*1024,// 1¬†MiBonData(s,sess,cb){s.on(\"end\",()=>{if(s.sizeExceeded){consterr=Object.assign(newError(\"Message too large\"),{responseCode:552});returncb(err);}cb(null,\"OK\");});},});\nconstserver=newSMTPServer({size:1024*1024,// 1¬†MiBonData(s,sess,cb){s.on(\"end\",()=>{if(s.sizeExceeded){consterr=Object.assign(newError(\"Message too large\"),{responseCode:552});returncb(err);}cb(null,\"OK\");});},});\nUsing LMTP‚Äã\nconstserver=newSMTPServer({lmtp:true,onData(stream,session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):`<${rcpt.address}> accepted`));cb(null,replies);});},});\nconstserver=newSMTPServer({lmtp:true,onData(stream,session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):",
        "source_url": "https://nodemailer.com/extras/smtp-server#handling-errors",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part5",
        "text": ",session,cb){stream.on(\"end\",()=>{// Return one reply **per** recipientconstreplies=session.envelope.rcptTo.map((rcpt,i)=>(i%2?newError(`<${rcpt.address}> rejected`):`<${rcpt.address}> accepted`));cb(null,replies);});},});\nSession object‚Äã\nString\nString\nString\nremoteAddress\ndisableReverseLookup\n\"HELO\" | \"EHLO\" | \"LHLO\"\nString\nObject\nmailFrom\nrcptTo\ndsn\nany\nonAuth\nNumber\n\"SMTP\" | \"ESMTP\" | \"ESMTPA\" ‚Ä¶\nReceived:\nEnvelope object‚Äã\nThesession.envelopeobject contains transaction-specific data:\nsession.envelope\n{\"mailFrom\": {\"address\": \"sender@example.com\",\"args\": { \"SIZE\": \"12345\", \"RET\": \"HDRS\" },\"dsn\": { \"ret\": \"HDRS\", \"envid\": \"abc123\" }},\"rcptTo\": [{\"address\": \"user1@example.com\",\"args\": { \"NOTIFY\": \"SUCCESS,FAILURE\" },\"dsn\": { \"notify\": [\"SUCCESS\", \"FAILURE\"], \"orcpt\": \"rfc822;user1@example.com\" }}],\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\"}}\n{\"mailFrom\": {\"address\": \"sender@example.com\",\"args\": { \"SIZE\": \"12345\", \"RET\": \"HDRS\" },\"dsn\": { \"ret\": \"HDRS\", \"envid\": \"abc123\" }},\"rcptTo\": [{\"address\": \"user1@example.com\",\"args\": { \"NOTIFY\": \"SUCCESS,FAILURE\" },\"dsn\": { \"notify\": [\"SUCCESS\", \"FAILURE\"], \"orcpt\": \"rfc822;user1@example.com\" }}],\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\"}}\nObject\nObject[]\nObject\nAddress object‚Äã\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\":",
        "source_url": "https://nodemailer.com/extras/smtp-server#handling-errors",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part6",
        "text": "123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\n{\"address\": \"sender@example.com\",\"args\": {\"SIZE\": \"12345\",\"RET\": \"HDRS\"},\"dsn\": {\"ret\": \"HDRS\",\"envid\": \"abc123\",\"notify\": [\"SUCCESS\", \"FAILURE\"],\"orcpt\": \"rfc822;original@example.com\"}}\nMAIL FROM:\nRCPT TO:\nDSN Object Properties‚Äã\nString\n'FULL'\n'HDRS'\nString\nString[]\nString\nEnhanced Status Codes (RFC 2034/3463)‚Äã\nsmtp‚ÄëserversupportsEnhanced Status Codesas defined in RFC 2034 and RFC 3463. When enabled, all SMTP responses include enhanced status codes in the formatX.Y.Z:\nX.Y.Z\n250 2.1.0 Accepted        ‚Üê Enhanced status code: 2.1.0550 5.1.1 Mailbox unavailable ‚Üê Enhanced status code: 5.1.1\n250 2.1.0 Accepted        ‚Üê Enhanced status code: 2.1.0550 5.1.1 Mailbox unavailable ‚Üê Enhanced status code: 5.1.1\nEnabling Enhanced Status Codes‚Äã\nTo enable enhanced status codes (they are disabled by default):\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:false,// Enable enhanced status codesonMailFrom(address,session,callback){callback();// Response: \"250 2.1.0 Accepted\" (with enhanced code)},});\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:false,// Enable enhanced status codesonMailFrom(address,session,callback){callback();// Response: \"250 2.1.0 Accepted\" (with enhanced code)},});\nDisabling Enhanced Status Codes‚Äã\nEnhanced status codes are disabled by default, but you can explicitly disable them:\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:true,// Explicitly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nconstserver=newSMTPServer({hideENHANCEDSTATUSCODES:true,// Explicitly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nEnhanced Status Code Examples‚Äã\n250\n2.0.0\n250\n2.",
        "source_url": "https://nodemailer.com/extras/smtp-server#handling-errors",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part7",
        "text": "ly disable enhanced status codes (default behavior)onMailFrom(address,session,callback){callback();// Response: \"250 Accepted\" (no enhanced code)},});\nEnhanced Status Code Examples‚Äã\n250\n2.0.0\n250\n2.1.0\n250\n2.1.5\n250\n2.6.0\n501\n5.5.4\n550\n5.1.1\n552\n5.2.2\nDSN (Delivery Status Notification) Support‚Äã\nsmtp‚Äëserverfully supportsDSN parametersas defined in RFC 3461, allowing clients to request delivery status notifications.\nDSN functionality requiresdelivery status notificationsto be enabled. Since delivery status notifications are disabled by default, you must sethideDSN: falseto use DSN features.\nhideDSN: false\nDSN Parameters‚Äã\nRET=FULLorRET=HDRS‚Äî Return full message or headers only in DSN\nRET=FULL\nRET=HDRS\nENVID=<envelope-id>‚Äî Envelope identifier for tracking\nENVID=<envelope-id>\n// Client sends: MAIL FROM:<sender@example.com> RET=FULL ENVID=abc123\n// Client sends: MAIL FROM:<sender@example.com> RET=FULL ENVID=abc123\nNOTIFY=SUCCESS,FAILURE,DELAY,NEVER‚Äî When to send DSN\nNOTIFY=SUCCESS,FAILURE,DELAY,NEVER\nORCPT=<original-recipient>‚Äî Original recipient for tracking\nORCPT=<original-recipient>\n// Client sends: RCPT TO:<user@example.com> NOTIFY=SUCCESS,FAILURE ORCPT=rfc822;user@example.com\n// Client sends: RCPT TO:<user@example.com> NOTIFY=SUCCESS,FAILURE ORCPT=rfc822;user@example.com\nAccessing DSN Parameters‚Äã\nDSN parameters are available in your callback handlers:\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){// Access DSN parameters from MAIL FROMconstret=session.envelope.dsn.ret;// 'FULL' or 'HDRS'constenvid=session.envelope.dsn.envid;// Envelope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE',",
        "source_url": "https://nodemailer.com/extras/smtp-server#handling-errors",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part8",
        "text": "velope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE', 'DELAY']constorcpt=address.dsn.orcpt;// Original recipientconsole.log(`NOTIFY:${notify.join(\",\")}, ORCPT:${orcpt}`);callback();},});\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){// Access DSN parameters from MAIL FROMconstret=session.envelope.dsn.ret;// 'FULL' or 'HDRS'constenvid=session.envelope.dsn.envid;// Envelope IDconsole.log(`RET:${ret}, ENVID:${envid}`);callback();},onRcptTo(address,session,callback){// Access DSN parameters from RCPT TOconstnotify=address.dsn.notify;// ['SUCCESS', 'FAILURE', 'DELAY']constorcpt=address.dsn.orcpt;// Original recipientconsole.log(`NOTIFY:${notify.join(\",\")}, ORCPT:${orcpt}`);callback();},});\nDSN Parameter Validation‚Äã\nsmtp‚Äëserverautomatically validates DSN parameters:\nRETmust beFULLorHDRS\nRET\nFULL\nHDRS\nNOTIFYmust beSUCCESS,FAILURE,DELAY, orNEVER\nNOTIFY\nSUCCESS\nFAILURE\nDELAY\nNEVER\nNOTIFY=NEVERcannot be combined with other values\nNOTIFY=NEVER\nInvalid parameters return appropriate error responses with enhanced status codes\nComplete DSN Example‚Äã\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){const{ret,envid}=session.envelope.dsn;console.log(`Mail from${address.address}, RET=${ret}, ENVID=${envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`Rcpt to${address.address}, NOTIFY=${notify.join(\",\")}, ORCPT=${orcpt}`);callback();},onData(stream,session,callback){// Process message with DSN contextconst{dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nconstserver=newSMTPServer({hide",
        "source_url": "https://nodemailer.com/extras/smtp-server#handling-errors",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part9",
        "text": "dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityonMailFrom(address,session,callback){const{ret,envid}=session.envelope.dsn;console.log(`Mail from${address.address}, RET=${ret}, ENVID=${envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`Rcpt to${address.address}, NOTIFY=${notify.join(\",\")}, ORCPT=${orcpt}`);callback();},onData(stream,session,callback){// Process message with DSN contextconst{dsn}=session.envelope;console.log(`Processing message with DSN:${JSON.stringify(dsn)}`);stream.on(\"end\",()=>{callback(null,\"Message accepted for delivery\");});stream.resume();},});\nProduction DSN Implementation Example‚Äã\nHere's a complete example showing how to implement DSN notifications using nodemailer:\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransporter({host:\"smtp.example.com\",port:587,secure:false,auth:{user:\"dsn-sender@example.com\",pass:\"your-password\",},});// DSN notification generatorclassDSNNotifier{constructor(transporter){this.transporter=transporter;}asyncsendSuccessNotification(envelope,messageId,deliveryTime){// Only send if SUCCESS notification was requestedconstneedsSuccessNotification=envelope.rcptTo.some((rcpt)=>rcpt.dsn.notify&&rcpt.dsn.notify.includes(\"SUCCESS\"));if(!needsSuccessNotification||!envelope.mailFrom.address){return;}constdsnMessage=this.generateDSNMessage({action:\"delivered\",status:\"2.0.0\",envelope,messageId,deliveryTime,diagnosticCode:\"smtp; 250 2.0.0 Message accepted for delivery\",});awaitthis.transporter.sendMail({from:\"postmaster@example.com\",to:envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSN",
        "source_url": "https://nodemailer.com/extras/smtp-server#handling-errors",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part10",
        "text": ":envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSNMessage({action,status,envelope,messageId,deliveryTime,diagnosticCode}){const{dsn}=envelope;consttimestamp=deliveryTime||newDate().toISOString();// Generate RFC 3464 compliant delivery status notificationconsttext=`This is an automatically generated Delivery Status Notification.Original Message Details:- Message ID:${messageId}- Envelope ID:${dsn.envid||\"Not provided\"}- Sender:${envelope.mailFrom.address}- Recipients:${envelope.rcptTo.map((r)=>r.address).join(\", \")}- Action:${action}- Status:${status}- Time:${timestamp}${action===\"delivered\"?\"Your message has been successfully delivered to all recipients.\":\"Delivery failed for one or more recipients.\"}`;return{text};}}// Create DSN notifier instanceconstdsnNotifier=newDSNNotifier(dsnTransporter);// SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${address.address}, RET=${dsn.ret}, ENVID=${dsn.envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`RCPT TO:${address.address}, NOTIFY=${notify?.join(\",\")}, ORCPT=${orcpt}`);callback();},asynconData(stream,session,callback){constmessageId=`msg-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;stream.on(\"end\",async()=>{try{// Simulate message deliveryconstdeliveryTime=newDate();// Send DSN success notification if requestedawaitdsnNotifier.sendSuccessNotification(session.envelope,messageId,deliveryTime);callback(null,`Message${messageId}accepted for delivery`);}catch(error){callback(error);}});stream.resume();},});server.listen(2525,()=>{console.log(\"DSN-enabled SMTP server listening on port 2525\");});\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransport",
        "source_url": "https://nodemailer.com/extras/smtp-server#handling-errors",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part11",
        "text": "DSN-enabled SMTP server listening on port 2525\");});\nconst{SMTPServer}=require(\"smtp-server\");constnodemailer=require(\"nodemailer\");// Create a nodemailer transporter for sending DSN notificationsconstdsnTransporter=nodemailer.createTransporter({host:\"smtp.example.com\",port:587,secure:false,auth:{user:\"dsn-sender@example.com\",pass:\"your-password\",},});// DSN notification generatorclassDSNNotifier{constructor(transporter){this.transporter=transporter;}asyncsendSuccessNotification(envelope,messageId,deliveryTime){// Only send if SUCCESS notification was requestedconstneedsSuccessNotification=envelope.rcptTo.some((rcpt)=>rcpt.dsn.notify&&rcpt.dsn.notify.includes(\"SUCCESS\"));if(!needsSuccessNotification||!envelope.mailFrom.address){return;}constdsnMessage=this.generateDSNMessage({action:\"delivered\",status:\"2.0.0\",envelope,messageId,deliveryTime,diagnosticCode:\"smtp; 250 2.0.0 Message accepted for delivery\",});awaitthis.transporter.sendMail({from:\"postmaster@example.com\",to:envelope.mailFrom.address,subject:\"Delivery Status Notification (Success)\",text:dsnMessage.text,headers:{\"Auto-Submitted\":\"auto-replied\",\"Content-Type\":\"multipart/report; report-type=delivery-status\",},});}generateDSNMessage({action,status,envelope,messageId,deliveryTime,diagnosticCode}){const{dsn}=envelope;consttimestamp=deliveryTime||newDate().toISOString();// Generate RFC 3464 compliant delivery status notificationconsttext=`This is an automatically generated Delivery Status Notification.Original Message Details:- Message ID:${messageId}- Envelope ID:${dsn.envid||\"Not provided\"}- Sender:${envelope.mailFrom.address}- Recipients:${envelope.rcptTo.map((r)=>r.address).join(\", \")}- Action:${action}- Status:${status}- Time:${timestamp}${action===\"delivered\"?\"Your message has been successfully delivered to all recipients.\":\"Delivery failed for one or more recipients.\"}`;return{text};}}// Create DSN notifier instanceconstdsnNotifier=newDSNNotifier(dsnTransporter);// SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${",
        "source_url": "https://nodemailer.com/extras/smtp-server#handling-errors",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part12",
        "text": " SMTP Server with DSN supportconstserver=newSMTPServer({hideDSN:false,// Required for DSN functionalityname:\"mail.example.com\",onMailFrom(address,session,callback){const{dsn}=session.envelope;console.log(`MAIL FROM:${address.address}, RET=${dsn.ret}, ENVID=${dsn.envid}`);callback();},onRcptTo(address,session,callback){const{notify,orcpt}=address.dsn;console.log(`RCPT TO:${address.address}, NOTIFY=${notify?.join(\",\")}, ORCPT=${orcpt}`);callback();},asynconData(stream,session,callback){constmessageId=`msg-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;stream.on(\"end\",async()=>{try{// Simulate message deliveryconstdeliveryTime=newDate();// Send DSN success notification if requestedawaitdsnNotifier.sendSuccessNotification(session.envelope,messageId,deliveryTime);callback(null,`Message${messageId}accepted for delivery`);}catch(error){callback(error);}});stream.resume();},});server.listen(2525,()=>{console.log(\"DSN-enabled SMTP server listening on port 2525\");});\nThis example demonstrates:\nComplete DSN workflowfrom parameter parsing to notification sending\nRFC-compliant DSN messageswith proper headers and content\nConditional notificationsbased on NOTIFY parameters\nIntegration with nodemailerfor sending DSN notifications\nProduction-ready structurewith error handling\nSupported commands and extensions‚Äã\nCommands‚Äã\nEHLO/HELO\nEHLO\nHELO\nAUTHLOGIN¬∑PLAIN¬∑XOAUTH2‚Ä†¬†¬∑CRAM‚ÄëMD5‚Ä†\nAUTH\nLOGIN\nPLAIN\nXOAUTH2\nCRAM‚ÄëMD5\nMAIL/RCPT/DATA\nMAIL\nRCPT\nDATA\nRSET/NOOP/QUIT/VRFY\nRSET\nNOOP\nQUIT\nVRFY\nHELP(returns RFC¬†5321 URL)\nHELP\nSTARTTLS\nSTARTTLS\n‚Ä†XOAUTH2andCRAM‚ÄëMD5must be enabled viaauthMethods.\nXOAUTH2\nCRAM‚ÄëMD5\nauthMethods\nExtensions‚Äã\nPIPELINING\nPIPELINING\n8BITMIME\n8BITMIME\nSMTPUTF8\nSMTPUTF8\nSIZE\nSIZE\nDSN(RFC 3461)\nDSN\nENHANCEDSTATUSCODES(RFC 2034/3463)\nENH",
        "source_url": "https://nodemailer.com/extras/smtp-server#handling-errors",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 500
    },
    {
        "chunk_id": "Nodemailer::Part13",
        "text": "8BITMIME\n8BITMIME\nSMTPUTF8\nSMTPUTF8\nSIZE\nSIZE\nDSN(RFC 3461)\nDSN\nENHANCEDSTATUSCODES(RFC 2034/3463)\nENHANCEDSTATUSCODES\nTheCHUNKINGextension isnotimplemented.\nCHUNKING\nLicense‚Äã\nMIT\nUsage1¬†‚Äî¬†Install2¬†‚Äî¬†Require in your script3¬†‚Äî¬†Create a server instance4¬†‚Äî¬†Start listening5¬†‚Äî¬†Shut down\n1¬†‚Äî¬†Install\n2¬†‚Äî¬†Require in your script\n3¬†‚Äî¬†Create a server instance\n4¬†‚Äî¬†Start listening\n5¬†‚Äî¬†Shut down\nOptions reference\nTLS and STARTTLS\nHandling errors\nHandling authentication (onAuth)Password‚Äëbased (PLAIN / LOGIN)OAuth¬†2 (XOAUTH2)\nonAuth\nPassword‚Äëbased (PLAIN / LOGIN)\nOAuth¬†2 (XOAUTH2)\nXOAUTH2\nValidating client connection (onConnect/onClose)\nonConnect\nonClose\nValidating TLS information (onSecure)\nonSecure\nValidating sender (onMailFrom)\nonMailFrom\nValidating recipients (onRcptTo)\nonRcptTo\nProcessing incoming messages (onData)\nonData\nUsing the SIZE extension\nUsing LMTP\nSession object\nEnvelope object\nAddress objectDSN Object Properties\nDSN Object Properties\nEnhanced Status Codes (RFC 2034/3463)Enabling Enhanced Status CodesDisabling Enhanced Status CodesEnhanced Status Code Examples\nEnabling Enhanced Status Codes\nDisabling Enhanced Status Codes\nEnhanced Status Code Examples\nDSN (Delivery Status Notification) SupportDSN ParametersAccessing DSN ParametersDSN Parameter ValidationComplete DSN ExampleProduction DSN Implementation Example\nDSN Parameters\nAccessing DSN Parameters\nDSN Parameter Validation\nComplete DSN Example\nProduction DSN Implementation Example\nSupported commands and extensionsCommandsExtensions\nCommands\nExtensions\nLicense",
        "source_url": "https://nodemailer.com/extras/smtp-server#handling-errors",
        "source_page": "Nodemailer",
        "chunk_topic": "Nodemailer",
        "token_count": 412
    }
]